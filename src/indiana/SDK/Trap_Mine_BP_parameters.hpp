#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Trap_Mine_BP

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function Trap_Mine_BP.Trap_Mine_BP_C.ExecuteUbergraph_Trap_Mine_BP
// 0x00E8 (0x00E8 - 0x0000)
struct Trap_Mine_BP_C_ExecuteUbergraph_Trap_Mine_BP final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x0028(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AIndianaCharacter*                      K2Node_DynamicCast_AsIndiana_Character;            // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class AActor* Instigator)>     K2Node_CreateDelegate_OutputDelegate;              // 0x00BC(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_CustomEvent_Instigator;                     // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ADestructible*                          K2Node_DynamicCast_AsDestructible;                 // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Trap_Mine_BP_C_ExecuteUbergraph_Trap_Mine_BP) == 0x000008, "Wrong alignment on Trap_Mine_BP_C_ExecuteUbergraph_Trap_Mine_BP");
static_assert(sizeof(Trap_Mine_BP_C_ExecuteUbergraph_Trap_Mine_BP) == 0x0000E8, "Wrong size on Trap_Mine_BP_C_ExecuteUbergraph_Trap_Mine_BP");
static_assert(offsetof(Trap_Mine_BP_C_ExecuteUbergraph_Trap_Mine_BP, EntryPoint) == 0x000000, "Member 'Trap_Mine_BP_C_ExecuteUbergraph_Trap_Mine_BP::EntryPoint' has a wrong offset!");
static_assert(offsetof(Trap_Mine_BP_C_ExecuteUbergraph_Trap_Mine_BP, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000008, "Member 'Trap_Mine_BP_C_ExecuteUbergraph_Trap_Mine_BP::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Trap_Mine_BP_C_ExecuteUbergraph_Trap_Mine_BP, K2Node_ComponentBoundEvent_OtherActor) == 0x000010, "Member 'Trap_Mine_BP_C_ExecuteUbergraph_Trap_Mine_BP::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(Trap_Mine_BP_C_ExecuteUbergraph_Trap_Mine_BP, K2Node_ComponentBoundEvent_OtherComp) == 0x000018, "Member 'Trap_Mine_BP_C_ExecuteUbergraph_Trap_Mine_BP::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(Trap_Mine_BP_C_ExecuteUbergraph_Trap_Mine_BP, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x000020, "Member 'Trap_Mine_BP_C_ExecuteUbergraph_Trap_Mine_BP::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Trap_Mine_BP_C_ExecuteUbergraph_Trap_Mine_BP, K2Node_ComponentBoundEvent_bFromSweep) == 0x000024, "Member 'Trap_Mine_BP_C_ExecuteUbergraph_Trap_Mine_BP::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(Trap_Mine_BP_C_ExecuteUbergraph_Trap_Mine_BP, K2Node_ComponentBoundEvent_SweepResult) == 0x000028, "Member 'Trap_Mine_BP_C_ExecuteUbergraph_Trap_Mine_BP::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(Trap_Mine_BP_C_ExecuteUbergraph_Trap_Mine_BP, K2Node_DynamicCast_AsIndiana_Character) == 0x0000B0, "Member 'Trap_Mine_BP_C_ExecuteUbergraph_Trap_Mine_BP::K2Node_DynamicCast_AsIndiana_Character' has a wrong offset!");
static_assert(offsetof(Trap_Mine_BP_C_ExecuteUbergraph_Trap_Mine_BP, K2Node_DynamicCast_bSuccess) == 0x0000B8, "Member 'Trap_Mine_BP_C_ExecuteUbergraph_Trap_Mine_BP::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Trap_Mine_BP_C_ExecuteUbergraph_Trap_Mine_BP, K2Node_CreateDelegate_OutputDelegate) == 0x0000BC, "Member 'Trap_Mine_BP_C_ExecuteUbergraph_Trap_Mine_BP::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(Trap_Mine_BP_C_ExecuteUbergraph_Trap_Mine_BP, K2Node_CustomEvent_Instigator) == 0x0000D0, "Member 'Trap_Mine_BP_C_ExecuteUbergraph_Trap_Mine_BP::K2Node_CustomEvent_Instigator' has a wrong offset!");
static_assert(offsetof(Trap_Mine_BP_C_ExecuteUbergraph_Trap_Mine_BP, K2Node_DynamicCast_AsDestructible) == 0x0000D8, "Member 'Trap_Mine_BP_C_ExecuteUbergraph_Trap_Mine_BP::K2Node_DynamicCast_AsDestructible' has a wrong offset!");
static_assert(offsetof(Trap_Mine_BP_C_ExecuteUbergraph_Trap_Mine_BP, K2Node_DynamicCast_bSuccess_1) == 0x0000E0, "Member 'Trap_Mine_BP_C_ExecuteUbergraph_Trap_Mine_BP::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function Trap_Mine_BP.Trap_Mine_BP_C.BndEvt__DetonationVolume_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct Trap_Mine_BP_C_BndEvt__DetonationVolume_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Trap_Mine_BP_C_BndEvt__DetonationVolume_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on Trap_Mine_BP_C_BndEvt__DetonationVolume_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(Trap_Mine_BP_C_BndEvt__DetonationVolume_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000A8, "Wrong size on Trap_Mine_BP_C_BndEvt__DetonationVolume_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(Trap_Mine_BP_C_BndEvt__DetonationVolume_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'Trap_Mine_BP_C_BndEvt__DetonationVolume_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Trap_Mine_BP_C_BndEvt__DetonationVolume_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'Trap_Mine_BP_C_BndEvt__DetonationVolume_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(Trap_Mine_BP_C_BndEvt__DetonationVolume_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'Trap_Mine_BP_C_BndEvt__DetonationVolume_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(Trap_Mine_BP_C_BndEvt__DetonationVolume_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'Trap_Mine_BP_C_BndEvt__DetonationVolume_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Trap_Mine_BP_C_BndEvt__DetonationVolume_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'Trap_Mine_BP_C_BndEvt__DetonationVolume_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(Trap_Mine_BP_C_BndEvt__DetonationVolume_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'Trap_Mine_BP_C_BndEvt__DetonationVolume_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function Trap_Mine_BP.Trap_Mine_BP_C.OnDestructibleDestroyed
// 0x0008 (0x0008 - 0x0000)
struct Trap_Mine_BP_C_OnDestructibleDestroyed final
{
public:
	class AActor*                                 Instigator_0;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Trap_Mine_BP_C_OnDestructibleDestroyed) == 0x000008, "Wrong alignment on Trap_Mine_BP_C_OnDestructibleDestroyed");
static_assert(sizeof(Trap_Mine_BP_C_OnDestructibleDestroyed) == 0x000008, "Wrong size on Trap_Mine_BP_C_OnDestructibleDestroyed");
static_assert(offsetof(Trap_Mine_BP_C_OnDestructibleDestroyed, Instigator_0) == 0x000000, "Member 'Trap_Mine_BP_C_OnDestructibleDestroyed::Instigator_0' has a wrong offset!");

// Function Trap_Mine_BP.Trap_Mine_BP_C.UserConstructionScript
// 0x0010 (0x0010 - 0x0000)
struct Trap_Mine_BP_C_UserConstructionScript final
{
public:
	class ADST_Mine_Base_BP_C*                    K2Node_DynamicCast_AsDST_Mine_Base_BP;             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Trap_Mine_BP_C_UserConstructionScript) == 0x000008, "Wrong alignment on Trap_Mine_BP_C_UserConstructionScript");
static_assert(sizeof(Trap_Mine_BP_C_UserConstructionScript) == 0x000010, "Wrong size on Trap_Mine_BP_C_UserConstructionScript");
static_assert(offsetof(Trap_Mine_BP_C_UserConstructionScript, K2Node_DynamicCast_AsDST_Mine_Base_BP) == 0x000000, "Member 'Trap_Mine_BP_C_UserConstructionScript::K2Node_DynamicCast_AsDST_Mine_Base_BP' has a wrong offset!");
static_assert(offsetof(Trap_Mine_BP_C_UserConstructionScript, K2Node_DynamicCast_bSuccess) == 0x000008, "Member 'Trap_Mine_BP_C_UserConstructionScript::K2Node_DynamicCast_bSuccess' has a wrong offset!");

}

