#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GodRay

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GodRay.BP_GodRay_C
// 0x0058 (0x0310 - 0x02B8)
class ABP_GodRay_C final : public AActor
{
public:
	class UBillboardComponent*                    UIActor;                                           // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          Animated;                                          // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          SpotLight;                                         // 0x02C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UseLightForRotation;                               // 0x02C2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C3[0x5];                                      // 0x02C3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   SM_GodRay;                                         // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Width;                                             // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Length;                                            // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Brightness;                                        // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FadeDistance;                                      // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color;                                             // 0x02E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRandomStream                          RandomTime;                                        // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor)
	class UMaterialInstanceDynamic*               Mid;                                               // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Light;                                             // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnimationSpeed;                                    // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GodRay_C">();
	}
	static class ABP_GodRay_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_GodRay_C>();
	}
};
static_assert(alignof(ABP_GodRay_C) == 0x000008, "Wrong alignment on ABP_GodRay_C");
static_assert(sizeof(ABP_GodRay_C) == 0x000310, "Wrong size on ABP_GodRay_C");
static_assert(offsetof(ABP_GodRay_C, UIActor) == 0x0002B8, "Member 'ABP_GodRay_C::UIActor' has a wrong offset!");
static_assert(offsetof(ABP_GodRay_C, Animated) == 0x0002C0, "Member 'ABP_GodRay_C::Animated' has a wrong offset!");
static_assert(offsetof(ABP_GodRay_C, SpotLight) == 0x0002C1, "Member 'ABP_GodRay_C::SpotLight' has a wrong offset!");
static_assert(offsetof(ABP_GodRay_C, UseLightForRotation) == 0x0002C2, "Member 'ABP_GodRay_C::UseLightForRotation' has a wrong offset!");
static_assert(offsetof(ABP_GodRay_C, SM_GodRay) == 0x0002C8, "Member 'ABP_GodRay_C::SM_GodRay' has a wrong offset!");
static_assert(offsetof(ABP_GodRay_C, Width) == 0x0002D0, "Member 'ABP_GodRay_C::Width' has a wrong offset!");
static_assert(offsetof(ABP_GodRay_C, Length) == 0x0002D4, "Member 'ABP_GodRay_C::Length' has a wrong offset!");
static_assert(offsetof(ABP_GodRay_C, Brightness) == 0x0002D8, "Member 'ABP_GodRay_C::Brightness' has a wrong offset!");
static_assert(offsetof(ABP_GodRay_C, FadeDistance) == 0x0002DC, "Member 'ABP_GodRay_C::FadeDistance' has a wrong offset!");
static_assert(offsetof(ABP_GodRay_C, Color) == 0x0002E0, "Member 'ABP_GodRay_C::Color' has a wrong offset!");
static_assert(offsetof(ABP_GodRay_C, RandomTime) == 0x0002F0, "Member 'ABP_GodRay_C::RandomTime' has a wrong offset!");
static_assert(offsetof(ABP_GodRay_C, Mid) == 0x0002F8, "Member 'ABP_GodRay_C::Mid' has a wrong offset!");
static_assert(offsetof(ABP_GodRay_C, Light) == 0x000300, "Member 'ABP_GodRay_C::Light' has a wrong offset!");
static_assert(offsetof(ABP_GodRay_C, AnimationSpeed) == 0x000308, "Member 'ABP_GodRay_C::AnimationSpeed' has a wrong offset!");

}

