#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CompassEntry_BP

#include "Basic.hpp"

#include "Indiana_structs.hpp"


namespace SDK::Params
{

// Function CompassEntry_BP.CompassEntry_BP_C.ExecuteUbergraph_CompassEntry_BP
// 0x0020 (0x0020 - 0x0000)
struct CompassEntry_BP_C_ExecuteUbergraph_CompassEntry_BP final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEntryData                             K2Node_Event_EntryData;                            // 0x0008(0x0010)(ConstParm, NoDestructor)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CompassEntry_BP_C_ExecuteUbergraph_CompassEntry_BP) == 0x000008, "Wrong alignment on CompassEntry_BP_C_ExecuteUbergraph_CompassEntry_BP");
static_assert(sizeof(CompassEntry_BP_C_ExecuteUbergraph_CompassEntry_BP) == 0x000020, "Wrong size on CompassEntry_BP_C_ExecuteUbergraph_CompassEntry_BP");
static_assert(offsetof(CompassEntry_BP_C_ExecuteUbergraph_CompassEntry_BP, EntryPoint) == 0x000000, "Member 'CompassEntry_BP_C_ExecuteUbergraph_CompassEntry_BP::EntryPoint' has a wrong offset!");
static_assert(offsetof(CompassEntry_BP_C_ExecuteUbergraph_CompassEntry_BP, K2Node_Event_EntryData) == 0x000008, "Member 'CompassEntry_BP_C_ExecuteUbergraph_CompassEntry_BP::K2Node_Event_EntryData' has a wrong offset!");
static_assert(offsetof(CompassEntry_BP_C_ExecuteUbergraph_CompassEntry_BP, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000018, "Member 'CompassEntry_BP_C_ExecuteUbergraph_CompassEntry_BP::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");

// Function CompassEntry_BP.CompassEntry_BP_C.InitProperties
// 0x0010 (0x0010 - 0x0000)
struct CompassEntry_BP_C_InitProperties final
{
public:
	struct FEntryData                             EntryData;                                         // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(CompassEntry_BP_C_InitProperties) == 0x000008, "Wrong alignment on CompassEntry_BP_C_InitProperties");
static_assert(sizeof(CompassEntry_BP_C_InitProperties) == 0x000010, "Wrong size on CompassEntry_BP_C_InitProperties");
static_assert(offsetof(CompassEntry_BP_C_InitProperties, EntryData) == 0x000000, "Member 'CompassEntry_BP_C_InitProperties::EntryData' has a wrong offset!");

// Function CompassEntry_BP.CompassEntry_BP_C.SetDistanceValue
// 0x0020 (0x0020 - 0x0000)
struct CompassEntry_BP_C_SetDistanceValue final
{
public:
	float                                         AdjustedDistance;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SCALE_CHECK_DISTANCE;                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MAX_DISTANCE;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MIN_DISTANCE;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CompassEntry_BP_C_SetDistanceValue) == 0x000004, "Wrong alignment on CompassEntry_BP_C_SetDistanceValue");
static_assert(sizeof(CompassEntry_BP_C_SetDistanceValue) == 0x000020, "Wrong size on CompassEntry_BP_C_SetDistanceValue");
static_assert(offsetof(CompassEntry_BP_C_SetDistanceValue, AdjustedDistance) == 0x000000, "Member 'CompassEntry_BP_C_SetDistanceValue::AdjustedDistance' has a wrong offset!");
static_assert(offsetof(CompassEntry_BP_C_SetDistanceValue, SCALE_CHECK_DISTANCE) == 0x000004, "Member 'CompassEntry_BP_C_SetDistanceValue::SCALE_CHECK_DISTANCE' has a wrong offset!");
static_assert(offsetof(CompassEntry_BP_C_SetDistanceValue, MAX_DISTANCE) == 0x000008, "Member 'CompassEntry_BP_C_SetDistanceValue::MAX_DISTANCE' has a wrong offset!");
static_assert(offsetof(CompassEntry_BP_C_SetDistanceValue, MIN_DISTANCE) == 0x00000C, "Member 'CompassEntry_BP_C_SetDistanceValue::MIN_DISTANCE' has a wrong offset!");
static_assert(offsetof(CompassEntry_BP_C_SetDistanceValue, CallFunc_Less_FloatFloat_ReturnValue) == 0x000010, "Member 'CompassEntry_BP_C_SetDistanceValue::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CompassEntry_BP_C_SetDistanceValue, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000014, "Member 'CompassEntry_BP_C_SetDistanceValue::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CompassEntry_BP_C_SetDistanceValue, CallFunc_FMax_ReturnValue) == 0x000018, "Member 'CompassEntry_BP_C_SetDistanceValue::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(CompassEntry_BP_C_SetDistanceValue, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00001C, "Member 'CompassEntry_BP_C_SetDistanceValue::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

}

