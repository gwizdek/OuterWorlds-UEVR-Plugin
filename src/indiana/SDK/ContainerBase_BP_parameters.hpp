#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ContainerBase_BP

#include "Basic.hpp"

#include "Indiana_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function ContainerBase_BP.ContainerBase_BP_C.BndEvt__OCLComponent_K2Node_ComponentBoundEvent_0_OCLAnimateOpen__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_0_OCLAnimateOpen__DelegateSignature final
{
public:
	class AActor*                                 Initiator;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InFrontOfDoor;                                     // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IgnoreSound_0;                                     // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          InstantAnimation;                                  // 0x000A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_0_OCLAnimateOpen__DelegateSignature) == 0x000008, "Wrong alignment on ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_0_OCLAnimateOpen__DelegateSignature");
static_assert(sizeof(ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_0_OCLAnimateOpen__DelegateSignature) == 0x000010, "Wrong size on ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_0_OCLAnimateOpen__DelegateSignature");
static_assert(offsetof(ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_0_OCLAnimateOpen__DelegateSignature, Initiator) == 0x000000, "Member 'ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_0_OCLAnimateOpen__DelegateSignature::Initiator' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_0_OCLAnimateOpen__DelegateSignature, InFrontOfDoor) == 0x000008, "Member 'ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_0_OCLAnimateOpen__DelegateSignature::InFrontOfDoor' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_0_OCLAnimateOpen__DelegateSignature, IgnoreSound_0) == 0x000009, "Member 'ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_0_OCLAnimateOpen__DelegateSignature::IgnoreSound_0' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_0_OCLAnimateOpen__DelegateSignature, InstantAnimation) == 0x00000A, "Member 'ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_0_OCLAnimateOpen__DelegateSignature::InstantAnimation' has a wrong offset!");

// Function ContainerBase_BP.ContainerBase_BP_C.BndEvt__OCLComponent_K2Node_ComponentBoundEvent_1_OCLAnimateClose__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_1_OCLAnimateClose__DelegateSignature final
{
public:
	class AActor*                                 Initiator;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnoreSound_0;                                     // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          InstantAnimation;                                  // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_1_OCLAnimateClose__DelegateSignature) == 0x000008, "Wrong alignment on ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_1_OCLAnimateClose__DelegateSignature");
static_assert(sizeof(ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_1_OCLAnimateClose__DelegateSignature) == 0x000010, "Wrong size on ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_1_OCLAnimateClose__DelegateSignature");
static_assert(offsetof(ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_1_OCLAnimateClose__DelegateSignature, Initiator) == 0x000000, "Member 'ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_1_OCLAnimateClose__DelegateSignature::Initiator' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_1_OCLAnimateClose__DelegateSignature, IgnoreSound_0) == 0x000008, "Member 'ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_1_OCLAnimateClose__DelegateSignature::IgnoreSound_0' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_1_OCLAnimateClose__DelegateSignature, InstantAnimation) == 0x000009, "Member 'ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_1_OCLAnimateClose__DelegateSignature::InstantAnimation' has a wrong offset!");

// Function ContainerBase_BP.ContainerBase_BP_C.BndEvt__OCLComponent_K2Node_ComponentBoundEvent_2_OCLCloseStart__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_2_OCLCloseStart__DelegateSignature final
{
public:
	class AActor*                                 Initiator;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_2_OCLCloseStart__DelegateSignature) == 0x000008, "Wrong alignment on ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_2_OCLCloseStart__DelegateSignature");
static_assert(sizeof(ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_2_OCLCloseStart__DelegateSignature) == 0x000008, "Wrong size on ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_2_OCLCloseStart__DelegateSignature");
static_assert(offsetof(ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_2_OCLCloseStart__DelegateSignature, Initiator) == 0x000000, "Member 'ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_2_OCLCloseStart__DelegateSignature::Initiator' has a wrong offset!");

// Function ContainerBase_BP.ContainerBase_BP_C.BndEvt__OCLComponent_K2Node_ComponentBoundEvent_2_OCLLockpickStart__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_2_OCLLockpickStart__DelegateSignature final
{
public:
	class AActor*                                 Initiator;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LockpickSeconds;                                   // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LockpickNumResources;                              // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_2_OCLLockpickStart__DelegateSignature) == 0x000008, "Wrong alignment on ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_2_OCLLockpickStart__DelegateSignature");
static_assert(sizeof(ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_2_OCLLockpickStart__DelegateSignature) == 0x000010, "Wrong size on ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_2_OCLLockpickStart__DelegateSignature");
static_assert(offsetof(ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_2_OCLLockpickStart__DelegateSignature, Initiator) == 0x000000, "Member 'ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_2_OCLLockpickStart__DelegateSignature::Initiator' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_2_OCLLockpickStart__DelegateSignature, LockpickSeconds) == 0x000008, "Member 'ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_2_OCLLockpickStart__DelegateSignature::LockpickSeconds' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_2_OCLLockpickStart__DelegateSignature, LockpickNumResources) == 0x00000C, "Member 'ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_2_OCLLockpickStart__DelegateSignature::LockpickNumResources' has a wrong offset!");

// Function ContainerBase_BP.ContainerBase_BP_C.BndEvt__OCLComponent_K2Node_ComponentBoundEvent_3_OCLLockpickInterrupted__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_3_OCLLockpickInterrupted__DelegateSignature final
{
public:
	class AActor*                                 Initiator;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_3_OCLLockpickInterrupted__DelegateSignature) == 0x000008, "Wrong alignment on ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_3_OCLLockpickInterrupted__DelegateSignature");
static_assert(sizeof(ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_3_OCLLockpickInterrupted__DelegateSignature) == 0x000008, "Wrong size on ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_3_OCLLockpickInterrupted__DelegateSignature");
static_assert(offsetof(ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_3_OCLLockpickInterrupted__DelegateSignature, Initiator) == 0x000000, "Member 'ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_3_OCLLockpickInterrupted__DelegateSignature::Initiator' has a wrong offset!");

// Function ContainerBase_BP.ContainerBase_BP_C.BndEvt__OCLComponent_K2Node_ComponentBoundEvent_4_OCLLockpickSuccess__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_4_OCLLockpickSuccess__DelegateSignature final
{
public:
	class AActor*                                 Initiator;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_4_OCLLockpickSuccess__DelegateSignature) == 0x000008, "Wrong alignment on ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_4_OCLLockpickSuccess__DelegateSignature");
static_assert(sizeof(ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_4_OCLLockpickSuccess__DelegateSignature) == 0x000008, "Wrong size on ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_4_OCLLockpickSuccess__DelegateSignature");
static_assert(offsetof(ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_4_OCLLockpickSuccess__DelegateSignature, Initiator) == 0x000000, "Member 'ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_4_OCLLockpickSuccess__DelegateSignature::Initiator' has a wrong offset!");

// Function ContainerBase_BP.ContainerBase_BP_C.BndEvt__OCLComponent_K2Node_ComponentBoundEvent_1_OCLOpenEnd__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_1_OCLOpenEnd__DelegateSignature final
{
public:
	class AActor*                                 Initiator;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_1_OCLOpenEnd__DelegateSignature) == 0x000008, "Wrong alignment on ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_1_OCLOpenEnd__DelegateSignature");
static_assert(sizeof(ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_1_OCLOpenEnd__DelegateSignature) == 0x000008, "Wrong size on ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_1_OCLOpenEnd__DelegateSignature");
static_assert(offsetof(ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_1_OCLOpenEnd__DelegateSignature, Initiator) == 0x000000, "Member 'ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_1_OCLOpenEnd__DelegateSignature::Initiator' has a wrong offset!");

// Function ContainerBase_BP.ContainerBase_BP_C.BndEvt__OCLComponent_K2Node_ComponentBoundEvent_0_OCLOpenStart__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_0_OCLOpenStart__DelegateSignature final
{
public:
	class AActor*                                 Initiator;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_0_OCLOpenStart__DelegateSignature) == 0x000008, "Wrong alignment on ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_0_OCLOpenStart__DelegateSignature");
static_assert(sizeof(ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_0_OCLOpenStart__DelegateSignature) == 0x000008, "Wrong size on ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_0_OCLOpenStart__DelegateSignature");
static_assert(offsetof(ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_0_OCLOpenStart__DelegateSignature, Initiator) == 0x000000, "Member 'ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_0_OCLOpenStart__DelegateSignature::Initiator' has a wrong offset!");

// Function ContainerBase_BP.ContainerBase_BP_C.OnAnimateClose
// 0x0002 (0x0002 - 0x0000)
struct ContainerBase_BP_C_OnAnimateClose final
{
public:
	bool                                          IgnoreSound_0;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          InstantAnimation;                                  // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ContainerBase_BP_C_OnAnimateClose) == 0x000001, "Wrong alignment on ContainerBase_BP_C_OnAnimateClose");
static_assert(sizeof(ContainerBase_BP_C_OnAnimateClose) == 0x000002, "Wrong size on ContainerBase_BP_C_OnAnimateClose");
static_assert(offsetof(ContainerBase_BP_C_OnAnimateClose, IgnoreSound_0) == 0x000000, "Member 'ContainerBase_BP_C_OnAnimateClose::IgnoreSound_0' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_OnAnimateClose, InstantAnimation) == 0x000001, "Member 'ContainerBase_BP_C_OnAnimateClose::InstantAnimation' has a wrong offset!");

// Function ContainerBase_BP.ContainerBase_BP_C.BndEvt__OCLComponent_K2Node_ComponentBoundEvent_0_OCLBarred__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_0_OCLBarred__DelegateSignature final
{
public:
	class AActor*                                 Initiator;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_0_OCLBarred__DelegateSignature) == 0x000008, "Wrong alignment on ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_0_OCLBarred__DelegateSignature");
static_assert(sizeof(ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_0_OCLBarred__DelegateSignature) == 0x000008, "Wrong size on ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_0_OCLBarred__DelegateSignature");
static_assert(offsetof(ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_0_OCLBarred__DelegateSignature, Initiator) == 0x000000, "Member 'ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_0_OCLBarred__DelegateSignature::Initiator' has a wrong offset!");

// Function ContainerBase_BP.ContainerBase_BP_C.OnAnimateOpen
// 0x0001 (0x0001 - 0x0000)
struct ContainerBase_BP_C_OnAnimateOpen final
{
public:
	bool                                          InstantAnimation;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ContainerBase_BP_C_OnAnimateOpen) == 0x000001, "Wrong alignment on ContainerBase_BP_C_OnAnimateOpen");
static_assert(sizeof(ContainerBase_BP_C_OnAnimateOpen) == 0x000001, "Wrong size on ContainerBase_BP_C_OnAnimateOpen");
static_assert(offsetof(ContainerBase_BP_C_OnAnimateOpen, InstantAnimation) == 0x000000, "Member 'ContainerBase_BP_C_OnAnimateOpen::InstantAnimation' has a wrong offset!");

// Function ContainerBase_BP.ContainerBase_BP_C.OpenOCL
// 0x0010 (0x0010 - 0x0000)
struct ContainerBase_BP_C_OpenOCL final
{
public:
	class AActor*                                 Initiator;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Force;                                             // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Seal;                                              // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IgnoreLockStatus;                                  // 0x000A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IgnoreStartEvent;                                  // 0x000B(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IgnoreEndEvent;                                    // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IgnoreSound_0;                                     // 0x000D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IgnoreAnimation;                                   // 0x000E(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ContainerBase_BP_C_OpenOCL) == 0x000008, "Wrong alignment on ContainerBase_BP_C_OpenOCL");
static_assert(sizeof(ContainerBase_BP_C_OpenOCL) == 0x000010, "Wrong size on ContainerBase_BP_C_OpenOCL");
static_assert(offsetof(ContainerBase_BP_C_OpenOCL, Initiator) == 0x000000, "Member 'ContainerBase_BP_C_OpenOCL::Initiator' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_OpenOCL, Force) == 0x000008, "Member 'ContainerBase_BP_C_OpenOCL::Force' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_OpenOCL, Seal) == 0x000009, "Member 'ContainerBase_BP_C_OpenOCL::Seal' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_OpenOCL, IgnoreLockStatus) == 0x00000A, "Member 'ContainerBase_BP_C_OpenOCL::IgnoreLockStatus' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_OpenOCL, IgnoreStartEvent) == 0x00000B, "Member 'ContainerBase_BP_C_OpenOCL::IgnoreStartEvent' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_OpenOCL, IgnoreEndEvent) == 0x00000C, "Member 'ContainerBase_BP_C_OpenOCL::IgnoreEndEvent' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_OpenOCL, IgnoreSound_0) == 0x00000D, "Member 'ContainerBase_BP_C_OpenOCL::IgnoreSound_0' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_OpenOCL, IgnoreAnimation) == 0x00000E, "Member 'ContainerBase_BP_C_OpenOCL::IgnoreAnimation' has a wrong offset!");

// Function ContainerBase_BP.ContainerBase_BP_C.CloseOCL
// 0x0010 (0x0010 - 0x0000)
struct ContainerBase_BP_C_CloseOCL final
{
public:
	class AActor*                                 Initiator;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Force;                                             // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Lock;                                              // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Seal;                                              // 0x000A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IgnoreStartEvent;                                  // 0x000B(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IgnoreEndEvent;                                    // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IgnoreSound_0;                                     // 0x000D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IgnoreAnimation;                                   // 0x000E(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ContainerBase_BP_C_CloseOCL) == 0x000008, "Wrong alignment on ContainerBase_BP_C_CloseOCL");
static_assert(sizeof(ContainerBase_BP_C_CloseOCL) == 0x000010, "Wrong size on ContainerBase_BP_C_CloseOCL");
static_assert(offsetof(ContainerBase_BP_C_CloseOCL, Initiator) == 0x000000, "Member 'ContainerBase_BP_C_CloseOCL::Initiator' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_CloseOCL, Force) == 0x000008, "Member 'ContainerBase_BP_C_CloseOCL::Force' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_CloseOCL, Lock) == 0x000009, "Member 'ContainerBase_BP_C_CloseOCL::Lock' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_CloseOCL, Seal) == 0x00000A, "Member 'ContainerBase_BP_C_CloseOCL::Seal' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_CloseOCL, IgnoreStartEvent) == 0x00000B, "Member 'ContainerBase_BP_C_CloseOCL::IgnoreStartEvent' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_CloseOCL, IgnoreEndEvent) == 0x00000C, "Member 'ContainerBase_BP_C_CloseOCL::IgnoreEndEvent' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_CloseOCL, IgnoreSound_0) == 0x00000D, "Member 'ContainerBase_BP_C_CloseOCL::IgnoreSound_0' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_CloseOCL, IgnoreAnimation) == 0x00000E, "Member 'ContainerBase_BP_C_CloseOCL::IgnoreAnimation' has a wrong offset!");

// Function ContainerBase_BP.ContainerBase_BP_C.BndEvt__OCLComponent_K2Node_ComponentBoundEvent_9_OCLLockpickLoopStop__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_9_OCLLockpickLoopStop__DelegateSignature final
{
public:
	class AActor*                                 Initiator;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_9_OCLLockpickLoopStop__DelegateSignature) == 0x000008, "Wrong alignment on ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_9_OCLLockpickLoopStop__DelegateSignature");
static_assert(sizeof(ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_9_OCLLockpickLoopStop__DelegateSignature) == 0x000008, "Wrong size on ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_9_OCLLockpickLoopStop__DelegateSignature");
static_assert(offsetof(ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_9_OCLLockpickLoopStop__DelegateSignature, Initiator) == 0x000000, "Member 'ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_9_OCLLockpickLoopStop__DelegateSignature::Initiator' has a wrong offset!");

// Function ContainerBase_BP.ContainerBase_BP_C.ExecuteUbergraph_ContainerBase_BP
// 0x00E8 (0x00E8 - 0x0000)
struct ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_8;                    // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_9;                    // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_ComponentBoundEvent_Initiator_15;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_Initiator_14;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_Initiator_13;           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_IgnoreSound_2;          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_ComponentBoundEvent_InstantAnimation_2;     // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_ComponentBoundEvent_Initiator_12;           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_Initiator_11;           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_Initiator_10;           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_Initiator_9;            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_InFrontOfDoor;          // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_ComponentBoundEvent_IgnoreSound_1;          // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_ComponentBoundEvent_InstantAnimation_1;     // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_53[0x5];                                       // 0x0053(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_ComponentBoundEvent_Initiator_8;            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_IgnoreSound;            // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_ComponentBoundEvent_InstantAnimation;       // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_ComponentBoundEvent_Initiator_7;            // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_Initiator_6;            // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_ComponentBoundEvent_LockpickSeconds;        // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_LockpickNumResources;   // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_Initiator_5;            // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_Initiator_4;            // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_Initiator_3;            // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_Initiator_2;            // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOpen_IsOpen;                            // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOpen_IsOpening;                         // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IgnoreSound_2;                        // 0x00A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_InstantAnimation_1;                   // 0x00A3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_ComponentBoundEvent_Initiator_1;            // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_InstantAnimation;                     // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_10;                   // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_11;                   // 0x00B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_12;                   // 0x00B3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_13;                   // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B5[0x3];                                       // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Initiator_1;                          // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Force_1;                              // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_Seal_1;                               // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IgnoreLockStatus;                     // 0x00C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IgnoreStartEvent_1;                   // 0x00C3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IgnoreEndEvent_1;                     // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IgnoreSound_1;                        // 0x00C5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IgnoreAnimation_1;                    // 0x00C6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C7[0x1];                                       // 0x00C7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Initiator;                            // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Force;                                // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_Lock;                                 // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_Seal;                                 // 0x00D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IgnoreStartEvent;                     // 0x00D3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IgnoreEndEvent;                       // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IgnoreSound;                          // 0x00D5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IgnoreAnimation;                      // 0x00D6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EOCLResult                                    CallFunc_AttemptOpen_ReturnValue;                  // 0x00D7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EOCLResult                                    CallFunc_AttemptClose_ReturnValue;                 // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_ComponentBoundEvent_Initiator;              // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP) == 0x000008, "Wrong alignment on ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP");
static_assert(sizeof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP) == 0x0000E8, "Wrong size on ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, EntryPoint) == 0x000000, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::EntryPoint' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, CallFunc_IsValid_ReturnValue_1) == 0x000005, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, CallFunc_IsValid_ReturnValue_2) == 0x000006, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, CallFunc_IsValid_ReturnValue_3) == 0x000007, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, CallFunc_IsValid_ReturnValue_4) == 0x000008, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, CallFunc_IsValid_ReturnValue_5) == 0x000009, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, CallFunc_IsValid_ReturnValue_6) == 0x00000A, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, CallFunc_IsValid_ReturnValue_7) == 0x00000B, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, CallFunc_IsValid_ReturnValue_8) == 0x00000C, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::CallFunc_IsValid_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, CallFunc_IsValid_ReturnValue_9) == 0x00000D, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::CallFunc_IsValid_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, K2Node_ComponentBoundEvent_Initiator_15) == 0x000010, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::K2Node_ComponentBoundEvent_Initiator_15' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, K2Node_ComponentBoundEvent_Initiator_14) == 0x000018, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::K2Node_ComponentBoundEvent_Initiator_14' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, K2Node_ComponentBoundEvent_Initiator_13) == 0x000020, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::K2Node_ComponentBoundEvent_Initiator_13' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, K2Node_ComponentBoundEvent_IgnoreSound_2) == 0x000028, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::K2Node_ComponentBoundEvent_IgnoreSound_2' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, K2Node_ComponentBoundEvent_InstantAnimation_2) == 0x000029, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::K2Node_ComponentBoundEvent_InstantAnimation_2' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, K2Node_ComponentBoundEvent_Initiator_12) == 0x000030, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::K2Node_ComponentBoundEvent_Initiator_12' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, K2Node_ComponentBoundEvent_Initiator_11) == 0x000038, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::K2Node_ComponentBoundEvent_Initiator_11' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, K2Node_ComponentBoundEvent_Initiator_10) == 0x000040, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::K2Node_ComponentBoundEvent_Initiator_10' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, K2Node_ComponentBoundEvent_Initiator_9) == 0x000048, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::K2Node_ComponentBoundEvent_Initiator_9' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, K2Node_ComponentBoundEvent_InFrontOfDoor) == 0x000050, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::K2Node_ComponentBoundEvent_InFrontOfDoor' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, K2Node_ComponentBoundEvent_IgnoreSound_1) == 0x000051, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::K2Node_ComponentBoundEvent_IgnoreSound_1' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, K2Node_ComponentBoundEvent_InstantAnimation_1) == 0x000052, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::K2Node_ComponentBoundEvent_InstantAnimation_1' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, K2Node_ComponentBoundEvent_Initiator_8) == 0x000058, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::K2Node_ComponentBoundEvent_Initiator_8' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, K2Node_ComponentBoundEvent_IgnoreSound) == 0x000060, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::K2Node_ComponentBoundEvent_IgnoreSound' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, K2Node_ComponentBoundEvent_InstantAnimation) == 0x000061, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::K2Node_ComponentBoundEvent_InstantAnimation' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, K2Node_ComponentBoundEvent_Initiator_7) == 0x000068, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::K2Node_ComponentBoundEvent_Initiator_7' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, K2Node_ComponentBoundEvent_Initiator_6) == 0x000070, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::K2Node_ComponentBoundEvent_Initiator_6' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, K2Node_ComponentBoundEvent_LockpickSeconds) == 0x000078, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::K2Node_ComponentBoundEvent_LockpickSeconds' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, K2Node_ComponentBoundEvent_LockpickNumResources) == 0x00007C, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::K2Node_ComponentBoundEvent_LockpickNumResources' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, K2Node_ComponentBoundEvent_Initiator_5) == 0x000080, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::K2Node_ComponentBoundEvent_Initiator_5' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, K2Node_ComponentBoundEvent_Initiator_4) == 0x000088, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::K2Node_ComponentBoundEvent_Initiator_4' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, K2Node_ComponentBoundEvent_Initiator_3) == 0x000090, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::K2Node_ComponentBoundEvent_Initiator_3' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, K2Node_ComponentBoundEvent_Initiator_2) == 0x000098, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::K2Node_ComponentBoundEvent_Initiator_2' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, CallFunc_IsOpen_IsOpen) == 0x0000A0, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::CallFunc_IsOpen_IsOpen' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, CallFunc_IsOpen_IsOpening) == 0x0000A1, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::CallFunc_IsOpen_IsOpening' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, K2Node_Event_IgnoreSound_2) == 0x0000A2, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::K2Node_Event_IgnoreSound_2' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, K2Node_Event_InstantAnimation_1) == 0x0000A3, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::K2Node_Event_InstantAnimation_1' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, K2Node_ComponentBoundEvent_Initiator_1) == 0x0000A8, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::K2Node_ComponentBoundEvent_Initiator_1' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, K2Node_Event_InstantAnimation) == 0x0000B0, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::K2Node_Event_InstantAnimation' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, CallFunc_IsValid_ReturnValue_10) == 0x0000B1, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::CallFunc_IsValid_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, CallFunc_IsValid_ReturnValue_11) == 0x0000B2, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::CallFunc_IsValid_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, CallFunc_IsValid_ReturnValue_12) == 0x0000B3, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::CallFunc_IsValid_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, CallFunc_IsValid_ReturnValue_13) == 0x0000B4, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::CallFunc_IsValid_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, K2Node_Event_Initiator_1) == 0x0000B8, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::K2Node_Event_Initiator_1' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, K2Node_Event_Force_1) == 0x0000C0, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::K2Node_Event_Force_1' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, K2Node_Event_Seal_1) == 0x0000C1, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::K2Node_Event_Seal_1' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, K2Node_Event_IgnoreLockStatus) == 0x0000C2, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::K2Node_Event_IgnoreLockStatus' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, K2Node_Event_IgnoreStartEvent_1) == 0x0000C3, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::K2Node_Event_IgnoreStartEvent_1' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, K2Node_Event_IgnoreEndEvent_1) == 0x0000C4, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::K2Node_Event_IgnoreEndEvent_1' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, K2Node_Event_IgnoreSound_1) == 0x0000C5, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::K2Node_Event_IgnoreSound_1' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, K2Node_Event_IgnoreAnimation_1) == 0x0000C6, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::K2Node_Event_IgnoreAnimation_1' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, K2Node_Event_Initiator) == 0x0000C8, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::K2Node_Event_Initiator' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, K2Node_Event_Force) == 0x0000D0, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::K2Node_Event_Force' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, K2Node_Event_Lock) == 0x0000D1, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::K2Node_Event_Lock' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, K2Node_Event_Seal) == 0x0000D2, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::K2Node_Event_Seal' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, K2Node_Event_IgnoreStartEvent) == 0x0000D3, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::K2Node_Event_IgnoreStartEvent' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, K2Node_Event_IgnoreEndEvent) == 0x0000D4, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::K2Node_Event_IgnoreEndEvent' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, K2Node_Event_IgnoreSound) == 0x0000D5, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::K2Node_Event_IgnoreSound' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, K2Node_Event_IgnoreAnimation) == 0x0000D6, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::K2Node_Event_IgnoreAnimation' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, CallFunc_AttemptOpen_ReturnValue) == 0x0000D7, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::CallFunc_AttemptOpen_ReturnValue' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, CallFunc_AttemptClose_ReturnValue) == 0x0000D8, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::CallFunc_AttemptClose_ReturnValue' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP, K2Node_ComponentBoundEvent_Initiator) == 0x0000E0, "Member 'ContainerBase_BP_C_ExecuteUbergraph_ContainerBase_BP::K2Node_ComponentBoundEvent_Initiator' has a wrong offset!");

// Function ContainerBase_BP.ContainerBase_BP_C.BndEvt__OCLComponent_K2Node_ComponentBoundEvent_3_OCLCloseEnd__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_3_OCLCloseEnd__DelegateSignature final
{
public:
	class AActor*                                 Initiator;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_3_OCLCloseEnd__DelegateSignature) == 0x000008, "Wrong alignment on ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_3_OCLCloseEnd__DelegateSignature");
static_assert(sizeof(ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_3_OCLCloseEnd__DelegateSignature) == 0x000008, "Wrong size on ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_3_OCLCloseEnd__DelegateSignature");
static_assert(offsetof(ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_3_OCLCloseEnd__DelegateSignature, Initiator) == 0x000000, "Member 'ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_3_OCLCloseEnd__DelegateSignature::Initiator' has a wrong offset!");

// Function ContainerBase_BP.ContainerBase_BP_C.BndEvt__OCLComponent_K2Node_ComponentBoundEvent_8_OCLUnbarred__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_8_OCLUnbarred__DelegateSignature final
{
public:
	class AActor*                                 Initiator;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_8_OCLUnbarred__DelegateSignature) == 0x000008, "Wrong alignment on ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_8_OCLUnbarred__DelegateSignature");
static_assert(sizeof(ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_8_OCLUnbarred__DelegateSignature) == 0x000008, "Wrong size on ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_8_OCLUnbarred__DelegateSignature");
static_assert(offsetof(ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_8_OCLUnbarred__DelegateSignature, Initiator) == 0x000000, "Member 'ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_8_OCLUnbarred__DelegateSignature::Initiator' has a wrong offset!");

// Function ContainerBase_BP.ContainerBase_BP_C.BndEvt__OCLComponent_K2Node_ComponentBoundEvent_7_OCLUnlocked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_7_OCLUnlocked__DelegateSignature final
{
public:
	class AActor*                                 Initiator;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_7_OCLUnlocked__DelegateSignature) == 0x000008, "Wrong alignment on ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_7_OCLUnlocked__DelegateSignature");
static_assert(sizeof(ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_7_OCLUnlocked__DelegateSignature) == 0x000008, "Wrong size on ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_7_OCLUnlocked__DelegateSignature");
static_assert(offsetof(ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_7_OCLUnlocked__DelegateSignature, Initiator) == 0x000000, "Member 'ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_7_OCLUnlocked__DelegateSignature::Initiator' has a wrong offset!");

// Function ContainerBase_BP.ContainerBase_BP_C.BndEvt__OCLComponent_K2Node_ComponentBoundEvent_6_OCLLocked__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_6_OCLLocked__DelegateSignature final
{
public:
	class AActor*                                 Initiator;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnoreSound_0;                                     // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          InstantAnimation;                                  // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_6_OCLLocked__DelegateSignature) == 0x000008, "Wrong alignment on ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_6_OCLLocked__DelegateSignature");
static_assert(sizeof(ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_6_OCLLocked__DelegateSignature) == 0x000010, "Wrong size on ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_6_OCLLocked__DelegateSignature");
static_assert(offsetof(ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_6_OCLLocked__DelegateSignature, Initiator) == 0x000000, "Member 'ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_6_OCLLocked__DelegateSignature::Initiator' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_6_OCLLocked__DelegateSignature, IgnoreSound_0) == 0x000008, "Member 'ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_6_OCLLocked__DelegateSignature::IgnoreSound_0' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_6_OCLLocked__DelegateSignature, InstantAnimation) == 0x000009, "Member 'ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_6_OCLLocked__DelegateSignature::InstantAnimation' has a wrong offset!");

// Function ContainerBase_BP.ContainerBase_BP_C.BndEvt__OCLComponent_K2Node_ComponentBoundEvent_5_OCLOpenAttemptedLocked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_5_OCLOpenAttemptedLocked__DelegateSignature final
{
public:
	class AActor*                                 Initiator;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_5_OCLOpenAttemptedLocked__DelegateSignature) == 0x000008, "Wrong alignment on ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_5_OCLOpenAttemptedLocked__DelegateSignature");
static_assert(sizeof(ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_5_OCLOpenAttemptedLocked__DelegateSignature) == 0x000008, "Wrong size on ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_5_OCLOpenAttemptedLocked__DelegateSignature");
static_assert(offsetof(ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_5_OCLOpenAttemptedLocked__DelegateSignature, Initiator) == 0x000000, "Member 'ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_5_OCLOpenAttemptedLocked__DelegateSignature::Initiator' has a wrong offset!");

// Function ContainerBase_BP.ContainerBase_BP_C.BndEvt__OCLComponent_K2Node_ComponentBoundEvent_4_OCLOpenAttemptedLocked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_4_OCLOpenAttemptedLocked__DelegateSignature final
{
public:
	class AActor*                                 Initiator;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_4_OCLOpenAttemptedLocked__DelegateSignature) == 0x000008, "Wrong alignment on ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_4_OCLOpenAttemptedLocked__DelegateSignature");
static_assert(sizeof(ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_4_OCLOpenAttemptedLocked__DelegateSignature) == 0x000008, "Wrong size on ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_4_OCLOpenAttemptedLocked__DelegateSignature");
static_assert(offsetof(ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_4_OCLOpenAttemptedLocked__DelegateSignature, Initiator) == 0x000000, "Member 'ContainerBase_BP_C_BndEvt__OCLComponent_K2Node_ComponentBoundEvent_4_OCLOpenAttemptedLocked__DelegateSignature::Initiator' has a wrong offset!");

// Function ContainerBase_BP.ContainerBase_BP_C.UserConstructionScript
// 0x0020 (0x0020 - 0x0000)
struct ContainerBase_BP_C_UserConstructionScript final
{
public:
	ECheckBranches                                CallFunc_ConstructComponentByClass_Branches;       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UActorComponent*                        CallFunc_ConstructComponentByClass_ReturnValue;    // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOCLAudioComponent*                     K2Node_DynamicCast_AsOCLAudio_Component;           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ContainerBase_BP_C_UserConstructionScript) == 0x000008, "Wrong alignment on ContainerBase_BP_C_UserConstructionScript");
static_assert(sizeof(ContainerBase_BP_C_UserConstructionScript) == 0x000020, "Wrong size on ContainerBase_BP_C_UserConstructionScript");
static_assert(offsetof(ContainerBase_BP_C_UserConstructionScript, CallFunc_ConstructComponentByClass_Branches) == 0x000000, "Member 'ContainerBase_BP_C_UserConstructionScript::CallFunc_ConstructComponentByClass_Branches' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_UserConstructionScript, CallFunc_ConstructComponentByClass_ReturnValue) == 0x000008, "Member 'ContainerBase_BP_C_UserConstructionScript::CallFunc_ConstructComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_UserConstructionScript, K2Node_DynamicCast_AsOCLAudio_Component) == 0x000010, "Member 'ContainerBase_BP_C_UserConstructionScript::K2Node_DynamicCast_AsOCLAudio_Component' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_UserConstructionScript, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'ContainerBase_BP_C_UserConstructionScript::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_UserConstructionScript, K2Node_SwitchEnum_CmpSuccess) == 0x000019, "Member 'ContainerBase_BP_C_UserConstructionScript::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function ContainerBase_BP.ContainerBase_BP_C.CheckCAC
// 0x0060 (0x0060 - 0x0000)
struct ContainerBase_BP_C_CheckCAC final
{
public:
	bool                                          Use;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CAC_Actor;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Attach_Point;                                      // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 NullActor;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             Temp_struct_Variable;                              // 0x0020(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	class UChildActorComponent*                   CallFunc_AddComponent_ReturnValue;                 // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_AttachToComponent_ReturnValue;         // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValidClass_ReturnValue;                 // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x005E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ContainerBase_BP_C_CheckCAC) == 0x000010, "Wrong alignment on ContainerBase_BP_C_CheckCAC");
static_assert(sizeof(ContainerBase_BP_C_CheckCAC) == 0x000060, "Wrong size on ContainerBase_BP_C_CheckCAC");
static_assert(offsetof(ContainerBase_BP_C_CheckCAC, Use) == 0x000000, "Member 'ContainerBase_BP_C_CheckCAC::Use' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_CheckCAC, CAC_Actor) == 0x000008, "Member 'ContainerBase_BP_C_CheckCAC::CAC_Actor' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_CheckCAC, Attach_Point) == 0x000010, "Member 'ContainerBase_BP_C_CheckCAC::Attach_Point' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_CheckCAC, NullActor) == 0x000018, "Member 'ContainerBase_BP_C_CheckCAC::NullActor' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_CheckCAC, Temp_struct_Variable) == 0x000020, "Member 'ContainerBase_BP_C_CheckCAC::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_CheckCAC, CallFunc_AddComponent_ReturnValue) == 0x000050, "Member 'ContainerBase_BP_C_CheckCAC::CallFunc_AddComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_CheckCAC, CallFunc_Array_Add_ReturnValue) == 0x000058, "Member 'ContainerBase_BP_C_CheckCAC::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_CheckCAC, CallFunc_K2_AttachToComponent_ReturnValue) == 0x00005C, "Member 'ContainerBase_BP_C_CheckCAC::CallFunc_K2_AttachToComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_CheckCAC, CallFunc_IsValidClass_ReturnValue) == 0x00005D, "Member 'ContainerBase_BP_C_CheckCAC::CallFunc_IsValidClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_CheckCAC, CallFunc_BooleanAND_ReturnValue) == 0x00005E, "Member 'ContainerBase_BP_C_CheckCAC::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function ContainerBase_BP.ContainerBase_BP_C.Update
// 0x0010 (0x0010 - 0x0000)
struct ContainerBase_BP_C_Update final
{
public:
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x0000(0x0010)(ReferenceParm)
};
static_assert(alignof(ContainerBase_BP_C_Update) == 0x000008, "Wrong alignment on ContainerBase_BP_C_Update");
static_assert(sizeof(ContainerBase_BP_C_Update) == 0x000010, "Wrong size on ContainerBase_BP_C_Update");
static_assert(offsetof(ContainerBase_BP_C_Update, K2Node_MakeArray_Array) == 0x000000, "Member 'ContainerBase_BP_C_Update::K2Node_MakeArray_Array' has a wrong offset!");

// Function ContainerBase_BP.ContainerBase_BP_C.SignalAnimationComplete
// 0x0003 (0x0003 - 0x0000)
struct ContainerBase_BP_C_SignalAnimationComplete final
{
public:
	bool                                          CallFunc_IsOpen_IsOpen;                            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOpen_IsOpening;                         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ContainerBase_BP_C_SignalAnimationComplete) == 0x000001, "Wrong alignment on ContainerBase_BP_C_SignalAnimationComplete");
static_assert(sizeof(ContainerBase_BP_C_SignalAnimationComplete) == 0x000003, "Wrong size on ContainerBase_BP_C_SignalAnimationComplete");
static_assert(offsetof(ContainerBase_BP_C_SignalAnimationComplete, CallFunc_IsOpen_IsOpen) == 0x000000, "Member 'ContainerBase_BP_C_SignalAnimationComplete::CallFunc_IsOpen_IsOpen' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_SignalAnimationComplete, CallFunc_IsOpen_IsOpening) == 0x000001, "Member 'ContainerBase_BP_C_SignalAnimationComplete::CallFunc_IsOpen_IsOpening' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_SignalAnimationComplete, CallFunc_BooleanOR_ReturnValue) == 0x000002, "Member 'ContainerBase_BP_C_SignalAnimationComplete::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function ContainerBase_BP.ContainerBase_BP_C.SetupCAC
// 0x0010 (0x0010 - 0x0000)
struct ContainerBase_BP_C_SetupCAC final
{
public:
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x0000(0x0010)(ReferenceParm)
};
static_assert(alignof(ContainerBase_BP_C_SetupCAC) == 0x000008, "Wrong alignment on ContainerBase_BP_C_SetupCAC");
static_assert(sizeof(ContainerBase_BP_C_SetupCAC) == 0x000010, "Wrong size on ContainerBase_BP_C_SetupCAC");
static_assert(offsetof(ContainerBase_BP_C_SetupCAC, K2Node_MakeArray_Array) == 0x000000, "Member 'ContainerBase_BP_C_SetupCAC::K2Node_MakeArray_Array' has a wrong offset!");

// Function ContainerBase_BP.ContainerBase_BP_C.IsLocked
// 0x0002 (0x0002 - 0x0000)
struct ContainerBase_BP_C_IsLocked final
{
public:
	bool                                          IsLocked_0;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLocked_ReturnValue;                     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ContainerBase_BP_C_IsLocked) == 0x000001, "Wrong alignment on ContainerBase_BP_C_IsLocked");
static_assert(sizeof(ContainerBase_BP_C_IsLocked) == 0x000002, "Wrong size on ContainerBase_BP_C_IsLocked");
static_assert(offsetof(ContainerBase_BP_C_IsLocked, IsLocked_0) == 0x000000, "Member 'ContainerBase_BP_C_IsLocked::IsLocked_0' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_IsLocked, CallFunc_IsLocked_ReturnValue) == 0x000001, "Member 'ContainerBase_BP_C_IsLocked::CallFunc_IsLocked_ReturnValue' has a wrong offset!");

// Function ContainerBase_BP.ContainerBase_BP_C.IsOpen
// 0x0004 (0x0004 - 0x0000)
struct ContainerBase_BP_C_IsOpen final
{
public:
	bool                                          IsOpen_0;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsOpening;                                         // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOpen_ReturnValue;                       // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOpening_ReturnValue;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ContainerBase_BP_C_IsOpen) == 0x000001, "Wrong alignment on ContainerBase_BP_C_IsOpen");
static_assert(sizeof(ContainerBase_BP_C_IsOpen) == 0x000004, "Wrong size on ContainerBase_BP_C_IsOpen");
static_assert(offsetof(ContainerBase_BP_C_IsOpen, IsOpen_0) == 0x000000, "Member 'ContainerBase_BP_C_IsOpen::IsOpen_0' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_IsOpen, IsOpening) == 0x000001, "Member 'ContainerBase_BP_C_IsOpen::IsOpening' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_IsOpen, CallFunc_IsOpen_ReturnValue) == 0x000002, "Member 'ContainerBase_BP_C_IsOpen::CallFunc_IsOpen_ReturnValue' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_IsOpen, CallFunc_IsOpening_ReturnValue) == 0x000003, "Member 'ContainerBase_BP_C_IsOpen::CallFunc_IsOpening_ReturnValue' has a wrong offset!");

// Function ContainerBase_BP.ContainerBase_BP_C.SetIsLocked
// 0x0002 (0x0002 - 0x0000)
struct ContainerBase_BP_C_SetIsLocked final
{
public:
	bool                                          IsLocked;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsLockedOut;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ContainerBase_BP_C_SetIsLocked) == 0x000001, "Wrong alignment on ContainerBase_BP_C_SetIsLocked");
static_assert(sizeof(ContainerBase_BP_C_SetIsLocked) == 0x000002, "Wrong size on ContainerBase_BP_C_SetIsLocked");
static_assert(offsetof(ContainerBase_BP_C_SetIsLocked, IsLocked) == 0x000000, "Member 'ContainerBase_BP_C_SetIsLocked::IsLocked' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_SetIsLocked, IsLockedOut) == 0x000001, "Member 'ContainerBase_BP_C_SetIsLocked::IsLockedOut' has a wrong offset!");

// Function ContainerBase_BP.ContainerBase_BP_C.IsBarred
// 0x0002 (0x0002 - 0x0000)
struct ContainerBase_BP_C_IsBarred final
{
public:
	bool                                          IsBarred_0;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBarred_ReturnValue;                     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ContainerBase_BP_C_IsBarred) == 0x000001, "Wrong alignment on ContainerBase_BP_C_IsBarred");
static_assert(sizeof(ContainerBase_BP_C_IsBarred) == 0x000002, "Wrong size on ContainerBase_BP_C_IsBarred");
static_assert(offsetof(ContainerBase_BP_C_IsBarred, IsBarred_0) == 0x000000, "Member 'ContainerBase_BP_C_IsBarred::IsBarred_0' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_IsBarred, CallFunc_IsBarred_ReturnValue) == 0x000001, "Member 'ContainerBase_BP_C_IsBarred::CallFunc_IsBarred_ReturnValue' has a wrong offset!");

// Function ContainerBase_BP.ContainerBase_BP_C.IsClosed
// 0x0002 (0x0002 - 0x0000)
struct ContainerBase_BP_C_IsClosed final
{
public:
	bool                                          IsClosed_0;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsClosed_ReturnValue;                     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ContainerBase_BP_C_IsClosed) == 0x000001, "Wrong alignment on ContainerBase_BP_C_IsClosed");
static_assert(sizeof(ContainerBase_BP_C_IsClosed) == 0x000002, "Wrong size on ContainerBase_BP_C_IsClosed");
static_assert(offsetof(ContainerBase_BP_C_IsClosed, IsClosed_0) == 0x000000, "Member 'ContainerBase_BP_C_IsClosed::IsClosed_0' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_IsClosed, CallFunc_IsClosed_ReturnValue) == 0x000001, "Member 'ContainerBase_BP_C_IsClosed::CallFunc_IsClosed_ReturnValue' has a wrong offset!");

// Function ContainerBase_BP.ContainerBase_BP_C.IsSealed
// 0x0002 (0x0002 - 0x0000)
struct ContainerBase_BP_C_IsSealed final
{
public:
	bool                                          IsSealed_0;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSealed_ReturnValue;                     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ContainerBase_BP_C_IsSealed) == 0x000001, "Wrong alignment on ContainerBase_BP_C_IsSealed");
static_assert(sizeof(ContainerBase_BP_C_IsSealed) == 0x000002, "Wrong size on ContainerBase_BP_C_IsSealed");
static_assert(offsetof(ContainerBase_BP_C_IsSealed, IsSealed_0) == 0x000000, "Member 'ContainerBase_BP_C_IsSealed::IsSealed_0' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_IsSealed, CallFunc_IsSealed_ReturnValue) == 0x000001, "Member 'ContainerBase_BP_C_IsSealed::CallFunc_IsSealed_ReturnValue' has a wrong offset!");

// Function ContainerBase_BP.ContainerBase_BP_C.ToggleOpenCloseState
// 0x0018 (0x0018 - 0x0000)
struct ContainerBase_BP_C_ToggleOpenCloseState final
{
public:
	class AActor*                                 Initiator;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Force;                                             // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Lock;                                              // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Seal;                                              // 0x000A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IgnoreLockStatus;                                  // 0x000B(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IgnoreStartEvent;                                  // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IgnoreEndEvent;                                    // 0x000D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IgnoreSound_0;                                     // 0x000E(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          InstantAnimation;                                  // 0x000F(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsOpen;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsOpening;                                         // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsClosed;                                          // 0x0012(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsClosing;                                         // 0x0013(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OCL_Library_ToggleOpenCloseState_IsOpen;  // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OCL_Library_ToggleOpenCloseState_IsOpening; // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OCL_Library_ToggleOpenCloseState_IsClosed; // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OCL_Library_ToggleOpenCloseState_IsClosing; // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ContainerBase_BP_C_ToggleOpenCloseState) == 0x000008, "Wrong alignment on ContainerBase_BP_C_ToggleOpenCloseState");
static_assert(sizeof(ContainerBase_BP_C_ToggleOpenCloseState) == 0x000018, "Wrong size on ContainerBase_BP_C_ToggleOpenCloseState");
static_assert(offsetof(ContainerBase_BP_C_ToggleOpenCloseState, Initiator) == 0x000000, "Member 'ContainerBase_BP_C_ToggleOpenCloseState::Initiator' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ToggleOpenCloseState, Force) == 0x000008, "Member 'ContainerBase_BP_C_ToggleOpenCloseState::Force' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ToggleOpenCloseState, Lock) == 0x000009, "Member 'ContainerBase_BP_C_ToggleOpenCloseState::Lock' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ToggleOpenCloseState, Seal) == 0x00000A, "Member 'ContainerBase_BP_C_ToggleOpenCloseState::Seal' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ToggleOpenCloseState, IgnoreLockStatus) == 0x00000B, "Member 'ContainerBase_BP_C_ToggleOpenCloseState::IgnoreLockStatus' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ToggleOpenCloseState, IgnoreStartEvent) == 0x00000C, "Member 'ContainerBase_BP_C_ToggleOpenCloseState::IgnoreStartEvent' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ToggleOpenCloseState, IgnoreEndEvent) == 0x00000D, "Member 'ContainerBase_BP_C_ToggleOpenCloseState::IgnoreEndEvent' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ToggleOpenCloseState, IgnoreSound_0) == 0x00000E, "Member 'ContainerBase_BP_C_ToggleOpenCloseState::IgnoreSound_0' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ToggleOpenCloseState, InstantAnimation) == 0x00000F, "Member 'ContainerBase_BP_C_ToggleOpenCloseState::InstantAnimation' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ToggleOpenCloseState, IsOpen) == 0x000010, "Member 'ContainerBase_BP_C_ToggleOpenCloseState::IsOpen' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ToggleOpenCloseState, IsOpening) == 0x000011, "Member 'ContainerBase_BP_C_ToggleOpenCloseState::IsOpening' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ToggleOpenCloseState, IsClosed) == 0x000012, "Member 'ContainerBase_BP_C_ToggleOpenCloseState::IsClosed' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ToggleOpenCloseState, IsClosing) == 0x000013, "Member 'ContainerBase_BP_C_ToggleOpenCloseState::IsClosing' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ToggleOpenCloseState, CallFunc_OCL_Library_ToggleOpenCloseState_IsOpen) == 0x000014, "Member 'ContainerBase_BP_C_ToggleOpenCloseState::CallFunc_OCL_Library_ToggleOpenCloseState_IsOpen' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ToggleOpenCloseState, CallFunc_OCL_Library_ToggleOpenCloseState_IsOpening) == 0x000015, "Member 'ContainerBase_BP_C_ToggleOpenCloseState::CallFunc_OCL_Library_ToggleOpenCloseState_IsOpening' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ToggleOpenCloseState, CallFunc_OCL_Library_ToggleOpenCloseState_IsClosed) == 0x000016, "Member 'ContainerBase_BP_C_ToggleOpenCloseState::CallFunc_OCL_Library_ToggleOpenCloseState_IsClosed' has a wrong offset!");
static_assert(offsetof(ContainerBase_BP_C_ToggleOpenCloseState, CallFunc_OCL_Library_ToggleOpenCloseState_IsClosing) == 0x000017, "Member 'ContainerBase_BP_C_ToggleOpenCloseState::CallFunc_OCL_Library_ToggleOpenCloseState_IsClosing' has a wrong offset!");

}

