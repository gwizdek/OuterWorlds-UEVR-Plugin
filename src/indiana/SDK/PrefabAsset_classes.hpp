#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PrefabAsset

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class PrefabAsset.PrefabActor
// 0x0008 (0x02C0 - 0x02B8)
class APrefabActor final : public AActor
{
public:
	class UPrefabComponent*                       PrefabComponent;                                   // 0x02B8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void DestroyPrefabActor(bool bDestroyAttachedChildren);
	class UPrefabAsset* GetPrefab();
	void SetMobility(EComponentMobility InMobility);
	void SetPrefab(class UPrefabAsset* NewPrefab, bool bForceRevertEvenDisconnected);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PrefabActor">();
	}
	static class APrefabActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<APrefabActor>();
	}
};
static_assert(alignof(APrefabActor) == 0x000008, "Wrong alignment on APrefabActor");
static_assert(sizeof(APrefabActor) == 0x0002C0, "Wrong size on APrefabActor");
static_assert(offsetof(APrefabActor, PrefabComponent) == 0x0002B8, "Member 'APrefabActor::PrefabComponent' has a wrong offset!");

// Class PrefabAsset.PrefabAsset
// 0x00A0 (0x00D0 - 0x0030)
class UPrefabAsset final : public UObject
{
public:
	struct FGuid                                  PrefabId;                                          // 0x0030(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   PrefabContent;                                     // 0x0040(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVector                                PrefabPivot;                                       // 0x0058(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PrefabHash;                                        // 0x0068(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FSoftObjectPath>   AssetReferences;                                   // 0x0078(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         NumActors;                                         // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PrefabAsset">();
	}
	static class UPrefabAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPrefabAsset>();
	}
};
static_assert(alignof(UPrefabAsset) == 0x000008, "Wrong alignment on UPrefabAsset");
static_assert(sizeof(UPrefabAsset) == 0x0000D0, "Wrong size on UPrefabAsset");
static_assert(offsetof(UPrefabAsset, PrefabId) == 0x000030, "Member 'UPrefabAsset::PrefabId' has a wrong offset!");
static_assert(offsetof(UPrefabAsset, PrefabContent) == 0x000040, "Member 'UPrefabAsset::PrefabContent' has a wrong offset!");
static_assert(offsetof(UPrefabAsset, PrefabPivot) == 0x000058, "Member 'UPrefabAsset::PrefabPivot' has a wrong offset!");
static_assert(offsetof(UPrefabAsset, PrefabHash) == 0x000068, "Member 'UPrefabAsset::PrefabHash' has a wrong offset!");
static_assert(offsetof(UPrefabAsset, AssetReferences) == 0x000078, "Member 'UPrefabAsset::AssetReferences' has a wrong offset!");
static_assert(offsetof(UPrefabAsset, NumActors) == 0x0000C8, "Member 'UPrefabAsset::NumActors' has a wrong offset!");

// Class PrefabAsset.PrefabComponent
// 0x0030 (0x02A0 - 0x0270)
class UPrefabComponent final : public USceneComponent
{
public:
	uint8                                         bConnected : 1;                                    // 0x0268(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bLockSelection : 1;                                // 0x0268(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_269[0x7];                                      // 0x0269(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlueprint*                             GeneratedBlueprint;                                // 0x0270(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrefabAsset*                           Prefab;                                            // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bTransient : 1;                                    // 0x0280(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bGenerateHLOD : 1;                                 // 0x0280(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseLightmapForHLOD : 1;                           // 0x0280(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverrideDiffuseTextureSize : 1;                   // 0x0280(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverrideNormalTextureSize : 1;                    // 0x0280(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverrideSpecularTextureSize : 1;                  // 0x0280(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverrideRoughnessTextureSize : 1;                 // 0x0280(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverrideEmissiveTextureSize : 1;                  // 0x0280(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverrideScreenSize : 1;                           // 0x0281(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverrideTransitionScreenSize : 1;                 // 0x0281(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_282[0x2];                                      // 0x0282(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint16                                        DiffuseTextureSize;                                // 0x0284(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        NormalTextureSize;                                 // 0x0286(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        SpecularTextureSize;                               // 0x0288(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        RoughnessTextureSize;                              // 0x028A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        EmissiveTextureSize;                               // 0x028C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28E[0x2];                                      // 0x028E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ScreenSize;                                        // 0x0290(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionScreenSize;                              // 0x0294(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_298[0x8];                                      // 0x0298(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PrefabComponent">();
	}
	static class UPrefabComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPrefabComponent>();
	}
};
static_assert(alignof(UPrefabComponent) == 0x000010, "Wrong alignment on UPrefabComponent");
static_assert(sizeof(UPrefabComponent) == 0x0002A0, "Wrong size on UPrefabComponent");
static_assert(offsetof(UPrefabComponent, GeneratedBlueprint) == 0x000270, "Member 'UPrefabComponent::GeneratedBlueprint' has a wrong offset!");
static_assert(offsetof(UPrefabComponent, Prefab) == 0x000278, "Member 'UPrefabComponent::Prefab' has a wrong offset!");
static_assert(offsetof(UPrefabComponent, DiffuseTextureSize) == 0x000284, "Member 'UPrefabComponent::DiffuseTextureSize' has a wrong offset!");
static_assert(offsetof(UPrefabComponent, NormalTextureSize) == 0x000286, "Member 'UPrefabComponent::NormalTextureSize' has a wrong offset!");
static_assert(offsetof(UPrefabComponent, SpecularTextureSize) == 0x000288, "Member 'UPrefabComponent::SpecularTextureSize' has a wrong offset!");
static_assert(offsetof(UPrefabComponent, RoughnessTextureSize) == 0x00028A, "Member 'UPrefabComponent::RoughnessTextureSize' has a wrong offset!");
static_assert(offsetof(UPrefabComponent, EmissiveTextureSize) == 0x00028C, "Member 'UPrefabComponent::EmissiveTextureSize' has a wrong offset!");
static_assert(offsetof(UPrefabComponent, ScreenSize) == 0x000290, "Member 'UPrefabComponent::ScreenSize' has a wrong offset!");
static_assert(offsetof(UPrefabComponent, TransitionScreenSize) == 0x000294, "Member 'UPrefabComponent::TransitionScreenSize' has a wrong offset!");

// Class PrefabAsset.PrefabToolSettings
// 0x0010 (0x0040 - 0x0030)
class UPrefabToolSettings final : public UObject
{
public:
	bool                                          bReplaceActorsWithCreatedPrefab;                   // 0x0030(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bNestedPrefabSupport;                              // 0x0031(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUpdateAllPrefabActorsWhenOpenMap;                 // 0x0032(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCheckPrefabChangeBeforeUpdateAllPrefabActorsWhenOpenMap; // 0x0033(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUpdateAllPrefabActorsWhenApply;                   // 0x0034(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnablePrefabComponentVisualizer;                  // 0x0035(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bLockPrefabSelectionByDefault;                     // 0x0036(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDisableLockPrefabSelectionFeature;                // 0x0037(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSupportGenerateBlueprint;                         // 0x0038(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bForceApplyPerInstanceVertexColor;                 // 0x0039(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3A[0x1];                                       // 0x003A(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bEnablePrefabTextEditor;                           // 0x003B(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDebugMode;                                        // 0x003C(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PrefabToolSettings">();
	}
	static class UPrefabToolSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPrefabToolSettings>();
	}
};
static_assert(alignof(UPrefabToolSettings) == 0x000008, "Wrong alignment on UPrefabToolSettings");
static_assert(sizeof(UPrefabToolSettings) == 0x000040, "Wrong size on UPrefabToolSettings");
static_assert(offsetof(UPrefabToolSettings, bReplaceActorsWithCreatedPrefab) == 0x000030, "Member 'UPrefabToolSettings::bReplaceActorsWithCreatedPrefab' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, bNestedPrefabSupport) == 0x000031, "Member 'UPrefabToolSettings::bNestedPrefabSupport' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, bUpdateAllPrefabActorsWhenOpenMap) == 0x000032, "Member 'UPrefabToolSettings::bUpdateAllPrefabActorsWhenOpenMap' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, bCheckPrefabChangeBeforeUpdateAllPrefabActorsWhenOpenMap) == 0x000033, "Member 'UPrefabToolSettings::bCheckPrefabChangeBeforeUpdateAllPrefabActorsWhenOpenMap' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, bUpdateAllPrefabActorsWhenApply) == 0x000034, "Member 'UPrefabToolSettings::bUpdateAllPrefabActorsWhenApply' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, bEnablePrefabComponentVisualizer) == 0x000035, "Member 'UPrefabToolSettings::bEnablePrefabComponentVisualizer' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, bLockPrefabSelectionByDefault) == 0x000036, "Member 'UPrefabToolSettings::bLockPrefabSelectionByDefault' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, bDisableLockPrefabSelectionFeature) == 0x000037, "Member 'UPrefabToolSettings::bDisableLockPrefabSelectionFeature' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, bSupportGenerateBlueprint) == 0x000038, "Member 'UPrefabToolSettings::bSupportGenerateBlueprint' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, bForceApplyPerInstanceVertexColor) == 0x000039, "Member 'UPrefabToolSettings::bForceApplyPerInstanceVertexColor' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, bEnablePrefabTextEditor) == 0x00003B, "Member 'UPrefabToolSettings::bEnablePrefabTextEditor' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, bDebugMode) == 0x00003C, "Member 'UPrefabToolSettings::bDebugMode' has a wrong offset!");

}

