#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SplineEmitter

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AkAudio_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SplineEmitter.BP_SplineEmitter_C
// 0x0030 (0x02E8 - 0x02B8)
class ABP_SplineEmitter_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAkComponent*                           Emitter;                                           // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       SplinePath;                                        // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         JumpThreshold;                                     // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SmoothSpeed;                                       // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AutoPost;                                          // 0x02D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D9[0x3];                                      // 0x02D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TickThreshold;                                     // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OptimizedActorTickInterval;                        // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsOptimizing;                                      // 0x02E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_SplineEmitter(int32 EntryPoint);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void UserConstructionScript();
	void GetPlayerWorldLocation(struct FVector* PlayerWorldLocation);
	void GetEmitterLocationDeltaLength(const struct FVector& NewEmitterWorldLocation, float* EmitterWorldLocationDeltaLength);
	void SmoothEmitterJump(const struct FVector& NewEmitterWorldLocation, float DeltaTime, float SmoothSpeed_0, struct FVector* SmoothedEmitterWorldLocation);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SplineEmitter_C">();
	}
	static class ABP_SplineEmitter_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SplineEmitter_C>();
	}
};
static_assert(alignof(ABP_SplineEmitter_C) == 0x000008, "Wrong alignment on ABP_SplineEmitter_C");
static_assert(sizeof(ABP_SplineEmitter_C) == 0x0002E8, "Wrong size on ABP_SplineEmitter_C");
static_assert(offsetof(ABP_SplineEmitter_C, UberGraphFrame) == 0x0002B8, "Member 'ABP_SplineEmitter_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_SplineEmitter_C, Emitter) == 0x0002C0, "Member 'ABP_SplineEmitter_C::Emitter' has a wrong offset!");
static_assert(offsetof(ABP_SplineEmitter_C, SplinePath) == 0x0002C8, "Member 'ABP_SplineEmitter_C::SplinePath' has a wrong offset!");
static_assert(offsetof(ABP_SplineEmitter_C, JumpThreshold) == 0x0002D0, "Member 'ABP_SplineEmitter_C::JumpThreshold' has a wrong offset!");
static_assert(offsetof(ABP_SplineEmitter_C, SmoothSpeed) == 0x0002D4, "Member 'ABP_SplineEmitter_C::SmoothSpeed' has a wrong offset!");
static_assert(offsetof(ABP_SplineEmitter_C, AutoPost) == 0x0002D8, "Member 'ABP_SplineEmitter_C::AutoPost' has a wrong offset!");
static_assert(offsetof(ABP_SplineEmitter_C, TickThreshold) == 0x0002DC, "Member 'ABP_SplineEmitter_C::TickThreshold' has a wrong offset!");
static_assert(offsetof(ABP_SplineEmitter_C, OptimizedActorTickInterval) == 0x0002E0, "Member 'ABP_SplineEmitter_C::OptimizedActorTickInterval' has a wrong offset!");
static_assert(offsetof(ABP_SplineEmitter_C, IsOptimizing) == 0x0002E4, "Member 'ABP_SplineEmitter_C::IsOptimizing' has a wrong offset!");

}

