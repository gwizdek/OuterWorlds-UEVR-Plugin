#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PowerIKRuntime

#include "Basic.hpp"

#include "AnimGraphRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "ControlRig_structs.hpp"


namespace SDK
{

// Enum PowerIKRuntime.EEffectorSpaceEnum
// NumValues: 0x0004
enum class EEffectorSpaceEnum : uint8
{
	ES_Additive                              = 0,
	ES_World                                 = 1,
	ES_Component                             = 2,
	ES_MAX                                   = 3,
};

// Enum PowerIKRuntime.EPoleVectorModeEnum
// NumValues: 0x0005
enum class EPoleVectorModeEnum : uint8
{
	PV_None                                  = 0,
	PV_Position                              = 1,
	PV_Bone                                  = 2,
	PV_AngleOffset                           = 3,
	PV_MAX                                   = 4,
};

// ScriptStruct PowerIKRuntime.PowerIKBodyInertia
// 0x0014 (0x0014 - 0x0000)
struct FPowerIKBodyInertia final
{
public:
	bool                                          ApplyInertiaToBody;                                // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SmoothFactor;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseSpring;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpringStrength;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringDamping;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPowerIKBodyInertia) == 0x000004, "Wrong alignment on FPowerIKBodyInertia");
static_assert(sizeof(FPowerIKBodyInertia) == 0x000014, "Wrong size on FPowerIKBodyInertia");
static_assert(offsetof(FPowerIKBodyInertia, ApplyInertiaToBody) == 0x000000, "Member 'FPowerIKBodyInertia::ApplyInertiaToBody' has a wrong offset!");
static_assert(offsetof(FPowerIKBodyInertia, SmoothFactor) == 0x000004, "Member 'FPowerIKBodyInertia::SmoothFactor' has a wrong offset!");
static_assert(offsetof(FPowerIKBodyInertia, UseSpring) == 0x000008, "Member 'FPowerIKBodyInertia::UseSpring' has a wrong offset!");
static_assert(offsetof(FPowerIKBodyInertia, SpringStrength) == 0x00000C, "Member 'FPowerIKBodyInertia::SpringStrength' has a wrong offset!");
static_assert(offsetof(FPowerIKBodyInertia, SpringDamping) == 0x000010, "Member 'FPowerIKBodyInertia::SpringDamping' has a wrong offset!");

// ScriptStruct PowerIKRuntime.PowerIKBoneBendDirection
// 0x0014 (0x0014 - 0x0000)
struct FPowerIKBoneBendDirection final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BendDirection;                                     // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPowerIKBoneBendDirection) == 0x000004, "Wrong alignment on FPowerIKBoneBendDirection");
static_assert(sizeof(FPowerIKBoneBendDirection) == 0x000014, "Wrong size on FPowerIKBoneBendDirection");
static_assert(offsetof(FPowerIKBoneBendDirection, BoneName) == 0x000000, "Member 'FPowerIKBoneBendDirection::BoneName' has a wrong offset!");
static_assert(offsetof(FPowerIKBoneBendDirection, BendDirection) == 0x000008, "Member 'FPowerIKBoneBendDirection::BendDirection' has a wrong offset!");

// ScriptStruct PowerIKRuntime.PowerIKExcludedBone
// 0x0008 (0x0008 - 0x0000)
struct FPowerIKExcludedBone final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPowerIKExcludedBone) == 0x000004, "Wrong alignment on FPowerIKExcludedBone");
static_assert(sizeof(FPowerIKExcludedBone) == 0x000008, "Wrong size on FPowerIKExcludedBone");
static_assert(offsetof(FPowerIKExcludedBone, BoneName) == 0x000000, "Member 'FPowerIKExcludedBone::BoneName' has a wrong offset!");

// ScriptStruct PowerIKRuntime.PowerIKBoneLimit
// 0x002C (0x002C - 0x0000)
struct FPowerIKBoneLimit final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Stiffness;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x20];                                       // 0x000C(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPowerIKBoneLimit) == 0x000004, "Wrong alignment on FPowerIKBoneLimit");
static_assert(sizeof(FPowerIKBoneLimit) == 0x00002C, "Wrong size on FPowerIKBoneLimit");
static_assert(offsetof(FPowerIKBoneLimit, BoneName) == 0x000000, "Member 'FPowerIKBoneLimit::BoneName' has a wrong offset!");
static_assert(offsetof(FPowerIKBoneLimit, Stiffness) == 0x000008, "Member 'FPowerIKBoneLimit::Stiffness' has a wrong offset!");

// ScriptStruct PowerIKRuntime.PowerIKSmoothing
// 0x0018 (0x0018 - 0x0000)
struct FPowerIKSmoothing final
{
public:
	bool                                          SmoothPositionOverTime;                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxPositionSpeed;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPositionDistance;                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SmoothRotationOverTime;                            // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxDegreesSpeed;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDegreesDistance;                                // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPowerIKSmoothing) == 0x000004, "Wrong alignment on FPowerIKSmoothing");
static_assert(sizeof(FPowerIKSmoothing) == 0x000018, "Wrong size on FPowerIKSmoothing");
static_assert(offsetof(FPowerIKSmoothing, SmoothPositionOverTime) == 0x000000, "Member 'FPowerIKSmoothing::SmoothPositionOverTime' has a wrong offset!");
static_assert(offsetof(FPowerIKSmoothing, MaxPositionSpeed) == 0x000004, "Member 'FPowerIKSmoothing::MaxPositionSpeed' has a wrong offset!");
static_assert(offsetof(FPowerIKSmoothing, MaxPositionDistance) == 0x000008, "Member 'FPowerIKSmoothing::MaxPositionDistance' has a wrong offset!");
static_assert(offsetof(FPowerIKSmoothing, SmoothRotationOverTime) == 0x00000C, "Member 'FPowerIKSmoothing::SmoothRotationOverTime' has a wrong offset!");
static_assert(offsetof(FPowerIKSmoothing, MaxDegreesSpeed) == 0x000010, "Member 'FPowerIKSmoothing::MaxDegreesSpeed' has a wrong offset!");
static_assert(offsetof(FPowerIKSmoothing, MaxDegreesDistance) == 0x000014, "Member 'FPowerIKSmoothing::MaxDegreesDistance' has a wrong offset!");

// ScriptStruct PowerIKRuntime.PowerIKPoleVector
// 0x0020 (0x0020 - 0x0000)
struct FPowerIKPoleVector final
{
public:
	EPoleVectorModeEnum                           Mode;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Position;                                          // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x4];                                       // 0x0018(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AngleOffset;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPowerIKPoleVector) == 0x000004, "Wrong alignment on FPowerIKPoleVector");
static_assert(sizeof(FPowerIKPoleVector) == 0x000020, "Wrong size on FPowerIKPoleVector");
static_assert(offsetof(FPowerIKPoleVector, Mode) == 0x000000, "Member 'FPowerIKPoleVector::Mode' has a wrong offset!");
static_assert(offsetof(FPowerIKPoleVector, Position) == 0x000004, "Member 'FPowerIKPoleVector::Position' has a wrong offset!");
static_assert(offsetof(FPowerIKPoleVector, BoneName) == 0x000010, "Member 'FPowerIKPoleVector::BoneName' has a wrong offset!");
static_assert(offsetof(FPowerIKPoleVector, AngleOffset) == 0x00001C, "Member 'FPowerIKPoleVector::AngleOffset' has a wrong offset!");

// ScriptStruct PowerIKRuntime.PowerIKEffector
// 0x00D0 (0x00D0 - 0x0000)
struct alignas(0x10) FPowerIKEffector final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEffectorSpaceEnum                            PositionSpace;                                     // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Rotation;                                          // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EEffectorSpaceEnum                            RotationSpace;                                     // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PullWeight;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NormalizePulling;                                  // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PositivePullFactor;                                // 0x0030(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NegativePullFactor;                                // 0x003C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RotateBone;                                        // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RotateLimb;                                        // 0x0049(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeltaSmoothSpeed;                                  // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularDeltaSmoothSpeed;                           // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPowerIKSmoothing                      Smoothing;                                         // 0x0054(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPowerIKPoleVector                     PoleVector;                                        // 0x006C(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          AffectsCenterOfGravity;                            // 0x008C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Alpha;                                             // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x3C];                                      // 0x0094(0x003C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPowerIKEffector) == 0x000010, "Wrong alignment on FPowerIKEffector");
static_assert(sizeof(FPowerIKEffector) == 0x0000D0, "Wrong size on FPowerIKEffector");
static_assert(offsetof(FPowerIKEffector, BoneName) == 0x000000, "Member 'FPowerIKEffector::BoneName' has a wrong offset!");
static_assert(offsetof(FPowerIKEffector, Position) == 0x000008, "Member 'FPowerIKEffector::Position' has a wrong offset!");
static_assert(offsetof(FPowerIKEffector, PositionSpace) == 0x000014, "Member 'FPowerIKEffector::PositionSpace' has a wrong offset!");
static_assert(offsetof(FPowerIKEffector, Rotation) == 0x000018, "Member 'FPowerIKEffector::Rotation' has a wrong offset!");
static_assert(offsetof(FPowerIKEffector, RotationSpace) == 0x000024, "Member 'FPowerIKEffector::RotationSpace' has a wrong offset!");
static_assert(offsetof(FPowerIKEffector, PullWeight) == 0x000028, "Member 'FPowerIKEffector::PullWeight' has a wrong offset!");
static_assert(offsetof(FPowerIKEffector, NormalizePulling) == 0x00002C, "Member 'FPowerIKEffector::NormalizePulling' has a wrong offset!");
static_assert(offsetof(FPowerIKEffector, PositivePullFactor) == 0x000030, "Member 'FPowerIKEffector::PositivePullFactor' has a wrong offset!");
static_assert(offsetof(FPowerIKEffector, NegativePullFactor) == 0x00003C, "Member 'FPowerIKEffector::NegativePullFactor' has a wrong offset!");
static_assert(offsetof(FPowerIKEffector, RotateBone) == 0x000048, "Member 'FPowerIKEffector::RotateBone' has a wrong offset!");
static_assert(offsetof(FPowerIKEffector, RotateLimb) == 0x000049, "Member 'FPowerIKEffector::RotateLimb' has a wrong offset!");
static_assert(offsetof(FPowerIKEffector, DeltaSmoothSpeed) == 0x00004C, "Member 'FPowerIKEffector::DeltaSmoothSpeed' has a wrong offset!");
static_assert(offsetof(FPowerIKEffector, AngularDeltaSmoothSpeed) == 0x000050, "Member 'FPowerIKEffector::AngularDeltaSmoothSpeed' has a wrong offset!");
static_assert(offsetof(FPowerIKEffector, Smoothing) == 0x000054, "Member 'FPowerIKEffector::Smoothing' has a wrong offset!");
static_assert(offsetof(FPowerIKEffector, PoleVector) == 0x00006C, "Member 'FPowerIKEffector::PoleVector' has a wrong offset!");
static_assert(offsetof(FPowerIKEffector, AffectsCenterOfGravity) == 0x00008C, "Member 'FPowerIKEffector::AffectsCenterOfGravity' has a wrong offset!");
static_assert(offsetof(FPowerIKEffector, Alpha) == 0x000090, "Member 'FPowerIKEffector::Alpha' has a wrong offset!");

// ScriptStruct PowerIKRuntime.PowerIKCenterOfGravity
// 0x0010 (0x0010 - 0x0000)
struct FPowerIKCenterOfGravity final
{
public:
	float                                         Alpha;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorizAmount;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VertAmount;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PullBodyAmount;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPowerIKCenterOfGravity) == 0x000004, "Wrong alignment on FPowerIKCenterOfGravity");
static_assert(sizeof(FPowerIKCenterOfGravity) == 0x000010, "Wrong size on FPowerIKCenterOfGravity");
static_assert(offsetof(FPowerIKCenterOfGravity, Alpha) == 0x000000, "Member 'FPowerIKCenterOfGravity::Alpha' has a wrong offset!");
static_assert(offsetof(FPowerIKCenterOfGravity, HorizAmount) == 0x000004, "Member 'FPowerIKCenterOfGravity::HorizAmount' has a wrong offset!");
static_assert(offsetof(FPowerIKCenterOfGravity, VertAmount) == 0x000008, "Member 'FPowerIKCenterOfGravity::VertAmount' has a wrong offset!");
static_assert(offsetof(FPowerIKCenterOfGravity, PullBodyAmount) == 0x00000C, "Member 'FPowerIKCenterOfGravity::PullBodyAmount' has a wrong offset!");

// ScriptStruct PowerIKRuntime.AnimNode_PowerIK
// 0x0140 (0x0208 - 0x00C8)
struct FAnimNode_PowerIK final : public FAnimNode_SkeletalControlBase
{
public:
	class FName                                   CharacterRoot;                                     // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RootRotationMultiplier;                            // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPowerIKBodyInertia                    BodyInertia;                                       // 0x00D4(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FPowerIKBoneBendDirection>      BendDirections;                                    // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FPowerIKExcludedBone>           ExcludedBones;                                     // 0x00F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPowerIKBoneLimit>              JointLimits;                                       // 0x0108(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPowerIKEffector>               Effectors;                                         // 0x0118(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         SmoothingMaxSpeedMultiplier;                       // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SmoothingMaxDistanceMultiplier;                    // 0x012C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPowerIKCenterOfGravity                CenterOfGravityConstraint;                         // 0x0130(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         MaxSquashIterations;                               // 0x0140(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxStretchIterations;                              // 0x0144(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxFinalIterations;                                // 0x0148(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowBoneTranslation;                              // 0x014C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14D[0x3];                                      // 0x014D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SolverAlpha;                                       // 0x0150(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DebugDrawSize;                                     // 0x0154(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_158[0xB0];                                     // 0x0158(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_PowerIK) == 0x000008, "Wrong alignment on FAnimNode_PowerIK");
static_assert(sizeof(FAnimNode_PowerIK) == 0x000208, "Wrong size on FAnimNode_PowerIK");
static_assert(offsetof(FAnimNode_PowerIK, CharacterRoot) == 0x0000C8, "Member 'FAnimNode_PowerIK::CharacterRoot' has a wrong offset!");
static_assert(offsetof(FAnimNode_PowerIK, RootRotationMultiplier) == 0x0000D0, "Member 'FAnimNode_PowerIK::RootRotationMultiplier' has a wrong offset!");
static_assert(offsetof(FAnimNode_PowerIK, BodyInertia) == 0x0000D4, "Member 'FAnimNode_PowerIK::BodyInertia' has a wrong offset!");
static_assert(offsetof(FAnimNode_PowerIK, BendDirections) == 0x0000E8, "Member 'FAnimNode_PowerIK::BendDirections' has a wrong offset!");
static_assert(offsetof(FAnimNode_PowerIK, ExcludedBones) == 0x0000F8, "Member 'FAnimNode_PowerIK::ExcludedBones' has a wrong offset!");
static_assert(offsetof(FAnimNode_PowerIK, JointLimits) == 0x000108, "Member 'FAnimNode_PowerIK::JointLimits' has a wrong offset!");
static_assert(offsetof(FAnimNode_PowerIK, Effectors) == 0x000118, "Member 'FAnimNode_PowerIK::Effectors' has a wrong offset!");
static_assert(offsetof(FAnimNode_PowerIK, SmoothingMaxSpeedMultiplier) == 0x000128, "Member 'FAnimNode_PowerIK::SmoothingMaxSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(FAnimNode_PowerIK, SmoothingMaxDistanceMultiplier) == 0x00012C, "Member 'FAnimNode_PowerIK::SmoothingMaxDistanceMultiplier' has a wrong offset!");
static_assert(offsetof(FAnimNode_PowerIK, CenterOfGravityConstraint) == 0x000130, "Member 'FAnimNode_PowerIK::CenterOfGravityConstraint' has a wrong offset!");
static_assert(offsetof(FAnimNode_PowerIK, MaxSquashIterations) == 0x000140, "Member 'FAnimNode_PowerIK::MaxSquashIterations' has a wrong offset!");
static_assert(offsetof(FAnimNode_PowerIK, MaxStretchIterations) == 0x000144, "Member 'FAnimNode_PowerIK::MaxStretchIterations' has a wrong offset!");
static_assert(offsetof(FAnimNode_PowerIK, MaxFinalIterations) == 0x000148, "Member 'FAnimNode_PowerIK::MaxFinalIterations' has a wrong offset!");
static_assert(offsetof(FAnimNode_PowerIK, AllowBoneTranslation) == 0x00014C, "Member 'FAnimNode_PowerIK::AllowBoneTranslation' has a wrong offset!");
static_assert(offsetof(FAnimNode_PowerIK, SolverAlpha) == 0x000150, "Member 'FAnimNode_PowerIK::SolverAlpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_PowerIK, DebugDrawSize) == 0x000154, "Member 'FAnimNode_PowerIK::DebugDrawSize' has a wrong offset!");

// ScriptStruct PowerIKRuntime.PowerIKGroundFoot
// 0x0060 (0x0060 - 0x0000)
struct FPowerIKGroundFoot final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PullWeight;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NormalizePulling;                                  // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PositivePullFactor;                                // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NegativePullFactor;                                // 0x001C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x38];                                      // 0x0028(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPowerIKGroundFoot) == 0x000004, "Wrong alignment on FPowerIKGroundFoot");
static_assert(sizeof(FPowerIKGroundFoot) == 0x000060, "Wrong size on FPowerIKGroundFoot");
static_assert(offsetof(FPowerIKGroundFoot, BoneName) == 0x000000, "Member 'FPowerIKGroundFoot::BoneName' has a wrong offset!");
static_assert(offsetof(FPowerIKGroundFoot, PullWeight) == 0x000008, "Member 'FPowerIKGroundFoot::PullWeight' has a wrong offset!");
static_assert(offsetof(FPowerIKGroundFoot, NormalizePulling) == 0x00000C, "Member 'FPowerIKGroundFoot::NormalizePulling' has a wrong offset!");
static_assert(offsetof(FPowerIKGroundFoot, PositivePullFactor) == 0x000010, "Member 'FPowerIKGroundFoot::PositivePullFactor' has a wrong offset!");
static_assert(offsetof(FPowerIKGroundFoot, NegativePullFactor) == 0x00001C, "Member 'FPowerIKGroundFoot::NegativePullFactor' has a wrong offset!");

// ScriptStruct PowerIKRuntime.PowerIKGroundCollision
// 0x0014 (0x0014 - 0x0000)
struct FPowerIKGroundCollision final
{
public:
	ECollisionChannel                             CollisionChannel;                                  // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TraceComplex;                                      // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RayCastUp;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RayCastDown;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableWallCollision;                               // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WallOffset;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPowerIKGroundCollision) == 0x000004, "Wrong alignment on FPowerIKGroundCollision");
static_assert(sizeof(FPowerIKGroundCollision) == 0x000014, "Wrong size on FPowerIKGroundCollision");
static_assert(offsetof(FPowerIKGroundCollision, CollisionChannel) == 0x000000, "Member 'FPowerIKGroundCollision::CollisionChannel' has a wrong offset!");
static_assert(offsetof(FPowerIKGroundCollision, TraceComplex) == 0x000001, "Member 'FPowerIKGroundCollision::TraceComplex' has a wrong offset!");
static_assert(offsetof(FPowerIKGroundCollision, RayCastUp) == 0x000004, "Member 'FPowerIKGroundCollision::RayCastUp' has a wrong offset!");
static_assert(offsetof(FPowerIKGroundCollision, RayCastDown) == 0x000008, "Member 'FPowerIKGroundCollision::RayCastDown' has a wrong offset!");
static_assert(offsetof(FPowerIKGroundCollision, EnableWallCollision) == 0x00000C, "Member 'FPowerIKGroundCollision::EnableWallCollision' has a wrong offset!");
static_assert(offsetof(FPowerIKGroundCollision, WallOffset) == 0x000010, "Member 'FPowerIKGroundCollision::WallOffset' has a wrong offset!");

// ScriptStruct PowerIKRuntime.PowerIKGroundSlope
// 0x0094 (0x0094 - 0x0000)
struct FPowerIKGroundSlope final
{
public:
	struct FVector                                StrideDirection;                                   // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxGroundAngle;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxNormalAngularSpeed;                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OrientToGround;                                    // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OrientToPitch;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OrientToRoll;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ScaleStride;                                       // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UphillStrideScale;                                 // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DownhillStrideScale;                               // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SidehillStrideScale;                               // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SidehillPushOuterFeet;                             // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Lean;                                              // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UphillLean;                                        // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DownhillLean;                                      // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SidehillLean;                                      // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CounterLean;                                       // 0x0044(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CounterLeanBoneName;                               // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x4];                                       // 0x0050(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UphillCounterLean;                                 // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DownhillCounterLean;                               // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SidehillCounterLean;                               // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MoveRoot;                                          // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UphillVertOffset;                                  // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UphillHorizOffset;                                 // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DownhillVertOffset;                                // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DownhillHorizOffset;                               // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SidehillHorizOffset;                               // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SidehillVertOffset;                                // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RotateFootToGround;                                // 0x007C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PitchFootAmount;                                   // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RollFootAmount;                                    // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootAngleDeltaSmoothSpeed;                         // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OffsetFeetPositions;                               // 0x008C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StaticFootOffset;                                  // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPowerIKGroundSlope) == 0x000004, "Wrong alignment on FPowerIKGroundSlope");
static_assert(sizeof(FPowerIKGroundSlope) == 0x000094, "Wrong size on FPowerIKGroundSlope");
static_assert(offsetof(FPowerIKGroundSlope, StrideDirection) == 0x000000, "Member 'FPowerIKGroundSlope::StrideDirection' has a wrong offset!");
static_assert(offsetof(FPowerIKGroundSlope, MaxGroundAngle) == 0x00000C, "Member 'FPowerIKGroundSlope::MaxGroundAngle' has a wrong offset!");
static_assert(offsetof(FPowerIKGroundSlope, MaxNormalAngularSpeed) == 0x000010, "Member 'FPowerIKGroundSlope::MaxNormalAngularSpeed' has a wrong offset!");
static_assert(offsetof(FPowerIKGroundSlope, OrientToGround) == 0x000014, "Member 'FPowerIKGroundSlope::OrientToGround' has a wrong offset!");
static_assert(offsetof(FPowerIKGroundSlope, OrientToPitch) == 0x000018, "Member 'FPowerIKGroundSlope::OrientToPitch' has a wrong offset!");
static_assert(offsetof(FPowerIKGroundSlope, OrientToRoll) == 0x00001C, "Member 'FPowerIKGroundSlope::OrientToRoll' has a wrong offset!");
static_assert(offsetof(FPowerIKGroundSlope, ScaleStride) == 0x000020, "Member 'FPowerIKGroundSlope::ScaleStride' has a wrong offset!");
static_assert(offsetof(FPowerIKGroundSlope, UphillStrideScale) == 0x000024, "Member 'FPowerIKGroundSlope::UphillStrideScale' has a wrong offset!");
static_assert(offsetof(FPowerIKGroundSlope, DownhillStrideScale) == 0x000028, "Member 'FPowerIKGroundSlope::DownhillStrideScale' has a wrong offset!");
static_assert(offsetof(FPowerIKGroundSlope, SidehillStrideScale) == 0x00002C, "Member 'FPowerIKGroundSlope::SidehillStrideScale' has a wrong offset!");
static_assert(offsetof(FPowerIKGroundSlope, SidehillPushOuterFeet) == 0x000030, "Member 'FPowerIKGroundSlope::SidehillPushOuterFeet' has a wrong offset!");
static_assert(offsetof(FPowerIKGroundSlope, Lean) == 0x000034, "Member 'FPowerIKGroundSlope::Lean' has a wrong offset!");
static_assert(offsetof(FPowerIKGroundSlope, UphillLean) == 0x000038, "Member 'FPowerIKGroundSlope::UphillLean' has a wrong offset!");
static_assert(offsetof(FPowerIKGroundSlope, DownhillLean) == 0x00003C, "Member 'FPowerIKGroundSlope::DownhillLean' has a wrong offset!");
static_assert(offsetof(FPowerIKGroundSlope, SidehillLean) == 0x000040, "Member 'FPowerIKGroundSlope::SidehillLean' has a wrong offset!");
static_assert(offsetof(FPowerIKGroundSlope, CounterLean) == 0x000044, "Member 'FPowerIKGroundSlope::CounterLean' has a wrong offset!");
static_assert(offsetof(FPowerIKGroundSlope, CounterLeanBoneName) == 0x000048, "Member 'FPowerIKGroundSlope::CounterLeanBoneName' has a wrong offset!");
static_assert(offsetof(FPowerIKGroundSlope, UphillCounterLean) == 0x000054, "Member 'FPowerIKGroundSlope::UphillCounterLean' has a wrong offset!");
static_assert(offsetof(FPowerIKGroundSlope, DownhillCounterLean) == 0x000058, "Member 'FPowerIKGroundSlope::DownhillCounterLean' has a wrong offset!");
static_assert(offsetof(FPowerIKGroundSlope, SidehillCounterLean) == 0x00005C, "Member 'FPowerIKGroundSlope::SidehillCounterLean' has a wrong offset!");
static_assert(offsetof(FPowerIKGroundSlope, MoveRoot) == 0x000060, "Member 'FPowerIKGroundSlope::MoveRoot' has a wrong offset!");
static_assert(offsetof(FPowerIKGroundSlope, UphillVertOffset) == 0x000064, "Member 'FPowerIKGroundSlope::UphillVertOffset' has a wrong offset!");
static_assert(offsetof(FPowerIKGroundSlope, UphillHorizOffset) == 0x000068, "Member 'FPowerIKGroundSlope::UphillHorizOffset' has a wrong offset!");
static_assert(offsetof(FPowerIKGroundSlope, DownhillVertOffset) == 0x00006C, "Member 'FPowerIKGroundSlope::DownhillVertOffset' has a wrong offset!");
static_assert(offsetof(FPowerIKGroundSlope, DownhillHorizOffset) == 0x000070, "Member 'FPowerIKGroundSlope::DownhillHorizOffset' has a wrong offset!");
static_assert(offsetof(FPowerIKGroundSlope, SidehillHorizOffset) == 0x000074, "Member 'FPowerIKGroundSlope::SidehillHorizOffset' has a wrong offset!");
static_assert(offsetof(FPowerIKGroundSlope, SidehillVertOffset) == 0x000078, "Member 'FPowerIKGroundSlope::SidehillVertOffset' has a wrong offset!");
static_assert(offsetof(FPowerIKGroundSlope, RotateFootToGround) == 0x00007C, "Member 'FPowerIKGroundSlope::RotateFootToGround' has a wrong offset!");
static_assert(offsetof(FPowerIKGroundSlope, PitchFootAmount) == 0x000080, "Member 'FPowerIKGroundSlope::PitchFootAmount' has a wrong offset!");
static_assert(offsetof(FPowerIKGroundSlope, RollFootAmount) == 0x000084, "Member 'FPowerIKGroundSlope::RollFootAmount' has a wrong offset!");
static_assert(offsetof(FPowerIKGroundSlope, FootAngleDeltaSmoothSpeed) == 0x000088, "Member 'FPowerIKGroundSlope::FootAngleDeltaSmoothSpeed' has a wrong offset!");
static_assert(offsetof(FPowerIKGroundSlope, OffsetFeetPositions) == 0x00008C, "Member 'FPowerIKGroundSlope::OffsetFeetPositions' has a wrong offset!");
static_assert(offsetof(FPowerIKGroundSlope, StaticFootOffset) == 0x000090, "Member 'FPowerIKGroundSlope::StaticFootOffset' has a wrong offset!");

// ScriptStruct PowerIKRuntime.AnimNode_PowerIK_Ground
// 0x02C8 (0x0390 - 0x00C8)
struct FAnimNode_PowerIK_Ground final : public FAnimNode_SkeletalControlBase
{
public:
	class FName                                   CharacterRoot;                                     // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPowerIKBodyInertia                    BodyInertia;                                       // 0x00D0(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPowerIKGroundFoot>             Feet;                                              // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         FeetDeltaSmoothSpeed;                              // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RootRotationMultiplier;                            // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPowerIKGroundCollision                GroundCollision;                                   // 0x0100(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FPowerIKGroundSlope                    GroundSlope;                                       // 0x0114(0x0094)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FPowerIKBoneBendDirection>      BendDirections;                                    // 0x01A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FPowerIKExcludedBone>           ExcludedBones;                                     // 0x01B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPowerIKBoneLimit>              JointLimits;                                       // 0x01C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D8[0x10];                                     // 0x01D8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxSquashIterations;                               // 0x01E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxStretchIterations;                              // 0x01EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxFinalIterations;                                // 0x01F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowBoneTranslation;                              // 0x01F4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F5[0x3];                                      // 0x01F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SolverAlpha;                                       // 0x01F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DebugDrawSize;                                     // 0x01FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_200[0x190];                                    // 0x0200(0x0190)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_PowerIK_Ground) == 0x000008, "Wrong alignment on FAnimNode_PowerIK_Ground");
static_assert(sizeof(FAnimNode_PowerIK_Ground) == 0x000390, "Wrong size on FAnimNode_PowerIK_Ground");
static_assert(offsetof(FAnimNode_PowerIK_Ground, CharacterRoot) == 0x0000C8, "Member 'FAnimNode_PowerIK_Ground::CharacterRoot' has a wrong offset!");
static_assert(offsetof(FAnimNode_PowerIK_Ground, BodyInertia) == 0x0000D0, "Member 'FAnimNode_PowerIK_Ground::BodyInertia' has a wrong offset!");
static_assert(offsetof(FAnimNode_PowerIK_Ground, Feet) == 0x0000E8, "Member 'FAnimNode_PowerIK_Ground::Feet' has a wrong offset!");
static_assert(offsetof(FAnimNode_PowerIK_Ground, FeetDeltaSmoothSpeed) == 0x0000F8, "Member 'FAnimNode_PowerIK_Ground::FeetDeltaSmoothSpeed' has a wrong offset!");
static_assert(offsetof(FAnimNode_PowerIK_Ground, RootRotationMultiplier) == 0x0000FC, "Member 'FAnimNode_PowerIK_Ground::RootRotationMultiplier' has a wrong offset!");
static_assert(offsetof(FAnimNode_PowerIK_Ground, GroundCollision) == 0x000100, "Member 'FAnimNode_PowerIK_Ground::GroundCollision' has a wrong offset!");
static_assert(offsetof(FAnimNode_PowerIK_Ground, GroundSlope) == 0x000114, "Member 'FAnimNode_PowerIK_Ground::GroundSlope' has a wrong offset!");
static_assert(offsetof(FAnimNode_PowerIK_Ground, BendDirections) == 0x0001A8, "Member 'FAnimNode_PowerIK_Ground::BendDirections' has a wrong offset!");
static_assert(offsetof(FAnimNode_PowerIK_Ground, ExcludedBones) == 0x0001B8, "Member 'FAnimNode_PowerIK_Ground::ExcludedBones' has a wrong offset!");
static_assert(offsetof(FAnimNode_PowerIK_Ground, JointLimits) == 0x0001C8, "Member 'FAnimNode_PowerIK_Ground::JointLimits' has a wrong offset!");
static_assert(offsetof(FAnimNode_PowerIK_Ground, MaxSquashIterations) == 0x0001E8, "Member 'FAnimNode_PowerIK_Ground::MaxSquashIterations' has a wrong offset!");
static_assert(offsetof(FAnimNode_PowerIK_Ground, MaxStretchIterations) == 0x0001EC, "Member 'FAnimNode_PowerIK_Ground::MaxStretchIterations' has a wrong offset!");
static_assert(offsetof(FAnimNode_PowerIK_Ground, MaxFinalIterations) == 0x0001F0, "Member 'FAnimNode_PowerIK_Ground::MaxFinalIterations' has a wrong offset!");
static_assert(offsetof(FAnimNode_PowerIK_Ground, AllowBoneTranslation) == 0x0001F4, "Member 'FAnimNode_PowerIK_Ground::AllowBoneTranslation' has a wrong offset!");
static_assert(offsetof(FAnimNode_PowerIK_Ground, SolverAlpha) == 0x0001F8, "Member 'FAnimNode_PowerIK_Ground::SolverAlpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_PowerIK_Ground, DebugDrawSize) == 0x0001FC, "Member 'FAnimNode_PowerIK_Ground::DebugDrawSize' has a wrong offset!");

// ScriptStruct PowerIKRuntime.PowerIKWalkingLimb
// 0x0130 (0x0130 - 0x0000)
struct alignas(0x10) FPowerIKWalkingLimb final
{
public:
	class FName                                   StartBone;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   EndBone;                                           // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LimbMaxLengthMultiplier;                           // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StepLengthMultiplier;                              // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StepDuration;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StepHeight;                                        // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 RelatedLimbs;                                      // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         RotateFootToGround;                                // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootCollisionRadius;                               // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0xD8];                                      // 0x0058(0x00D8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPowerIKWalkingLimb) == 0x000010, "Wrong alignment on FPowerIKWalkingLimb");
static_assert(sizeof(FPowerIKWalkingLimb) == 0x000130, "Wrong size on FPowerIKWalkingLimb");
static_assert(offsetof(FPowerIKWalkingLimb, StartBone) == 0x000000, "Member 'FPowerIKWalkingLimb::StartBone' has a wrong offset!");
static_assert(offsetof(FPowerIKWalkingLimb, EndBone) == 0x000010, "Member 'FPowerIKWalkingLimb::EndBone' has a wrong offset!");
static_assert(offsetof(FPowerIKWalkingLimb, LimbMaxLengthMultiplier) == 0x000020, "Member 'FPowerIKWalkingLimb::LimbMaxLengthMultiplier' has a wrong offset!");
static_assert(offsetof(FPowerIKWalkingLimb, StepLengthMultiplier) == 0x000028, "Member 'FPowerIKWalkingLimb::StepLengthMultiplier' has a wrong offset!");
static_assert(offsetof(FPowerIKWalkingLimb, StepDuration) == 0x000030, "Member 'FPowerIKWalkingLimb::StepDuration' has a wrong offset!");
static_assert(offsetof(FPowerIKWalkingLimb, StepHeight) == 0x000038, "Member 'FPowerIKWalkingLimb::StepHeight' has a wrong offset!");
static_assert(offsetof(FPowerIKWalkingLimb, RelatedLimbs) == 0x000040, "Member 'FPowerIKWalkingLimb::RelatedLimbs' has a wrong offset!");
static_assert(offsetof(FPowerIKWalkingLimb, RotateFootToGround) == 0x000050, "Member 'FPowerIKWalkingLimb::RotateFootToGround' has a wrong offset!");
static_assert(offsetof(FPowerIKWalkingLimb, FootCollisionRadius) == 0x000054, "Member 'FPowerIKWalkingLimb::FootCollisionRadius' has a wrong offset!");

// ScriptStruct PowerIKRuntime.AnimNode_PowerIK_Walk
// 0x0180 (0x0248 - 0x00C8)
struct FAnimNode_PowerIK_Walk final : public FAnimNode_SkeletalControlBase
{
public:
	class FName                                   CharacterRoot;                                     // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RootRotationMultiplier;                            // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPowerIKBodyInertia                    BodyInertia;                                       // 0x00D4(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FPowerIKWalkingLimb>            Limbs;                                             // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8[0xC];                                       // 0x00F8(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StepMaxReachDistance;                              // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StepDurationMultiplier;                            // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StepHeightMultiplier;                              // 0x010C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            StepHeightCurve;                                   // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            StepSpeedCurve;                                    // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TeleportDistance;                                  // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PrintTeleportWarning;                              // 0x0124(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             CollisionChannel;                                  // 0x0125(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TraceComplex;                                      // 0x0126(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_127[0x1];                                      // 0x0127(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPowerIKBoneBendDirection>      BendDirections;                                    // 0x0128(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FPowerIKExcludedBone>           ExcludedBones;                                     // 0x0138(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPowerIKBoneLimit>              JointLimits;                                       // 0x0148(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MaxSquashIterations;                               // 0x0158(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxStretchIterations;                              // 0x015C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxFinalIterations;                                // 0x0160(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowBoneTranslation;                              // 0x0164(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_165[0x3];                                      // 0x0165(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SolverAlpha;                                       // 0x0168(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DebugDrawSize;                                     // 0x016C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_170[0xD8];                                     // 0x0170(0x00D8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_PowerIK_Walk) == 0x000008, "Wrong alignment on FAnimNode_PowerIK_Walk");
static_assert(sizeof(FAnimNode_PowerIK_Walk) == 0x000248, "Wrong size on FAnimNode_PowerIK_Walk");
static_assert(offsetof(FAnimNode_PowerIK_Walk, CharacterRoot) == 0x0000C8, "Member 'FAnimNode_PowerIK_Walk::CharacterRoot' has a wrong offset!");
static_assert(offsetof(FAnimNode_PowerIK_Walk, RootRotationMultiplier) == 0x0000D0, "Member 'FAnimNode_PowerIK_Walk::RootRotationMultiplier' has a wrong offset!");
static_assert(offsetof(FAnimNode_PowerIK_Walk, BodyInertia) == 0x0000D4, "Member 'FAnimNode_PowerIK_Walk::BodyInertia' has a wrong offset!");
static_assert(offsetof(FAnimNode_PowerIK_Walk, Limbs) == 0x0000E8, "Member 'FAnimNode_PowerIK_Walk::Limbs' has a wrong offset!");
static_assert(offsetof(FAnimNode_PowerIK_Walk, StepMaxReachDistance) == 0x000104, "Member 'FAnimNode_PowerIK_Walk::StepMaxReachDistance' has a wrong offset!");
static_assert(offsetof(FAnimNode_PowerIK_Walk, StepDurationMultiplier) == 0x000108, "Member 'FAnimNode_PowerIK_Walk::StepDurationMultiplier' has a wrong offset!");
static_assert(offsetof(FAnimNode_PowerIK_Walk, StepHeightMultiplier) == 0x00010C, "Member 'FAnimNode_PowerIK_Walk::StepHeightMultiplier' has a wrong offset!");
static_assert(offsetof(FAnimNode_PowerIK_Walk, StepHeightCurve) == 0x000110, "Member 'FAnimNode_PowerIK_Walk::StepHeightCurve' has a wrong offset!");
static_assert(offsetof(FAnimNode_PowerIK_Walk, StepSpeedCurve) == 0x000118, "Member 'FAnimNode_PowerIK_Walk::StepSpeedCurve' has a wrong offset!");
static_assert(offsetof(FAnimNode_PowerIK_Walk, TeleportDistance) == 0x000120, "Member 'FAnimNode_PowerIK_Walk::TeleportDistance' has a wrong offset!");
static_assert(offsetof(FAnimNode_PowerIK_Walk, PrintTeleportWarning) == 0x000124, "Member 'FAnimNode_PowerIK_Walk::PrintTeleportWarning' has a wrong offset!");
static_assert(offsetof(FAnimNode_PowerIK_Walk, CollisionChannel) == 0x000125, "Member 'FAnimNode_PowerIK_Walk::CollisionChannel' has a wrong offset!");
static_assert(offsetof(FAnimNode_PowerIK_Walk, TraceComplex) == 0x000126, "Member 'FAnimNode_PowerIK_Walk::TraceComplex' has a wrong offset!");
static_assert(offsetof(FAnimNode_PowerIK_Walk, BendDirections) == 0x000128, "Member 'FAnimNode_PowerIK_Walk::BendDirections' has a wrong offset!");
static_assert(offsetof(FAnimNode_PowerIK_Walk, ExcludedBones) == 0x000138, "Member 'FAnimNode_PowerIK_Walk::ExcludedBones' has a wrong offset!");
static_assert(offsetof(FAnimNode_PowerIK_Walk, JointLimits) == 0x000148, "Member 'FAnimNode_PowerIK_Walk::JointLimits' has a wrong offset!");
static_assert(offsetof(FAnimNode_PowerIK_Walk, MaxSquashIterations) == 0x000158, "Member 'FAnimNode_PowerIK_Walk::MaxSquashIterations' has a wrong offset!");
static_assert(offsetof(FAnimNode_PowerIK_Walk, MaxStretchIterations) == 0x00015C, "Member 'FAnimNode_PowerIK_Walk::MaxStretchIterations' has a wrong offset!");
static_assert(offsetof(FAnimNode_PowerIK_Walk, MaxFinalIterations) == 0x000160, "Member 'FAnimNode_PowerIK_Walk::MaxFinalIterations' has a wrong offset!");
static_assert(offsetof(FAnimNode_PowerIK_Walk, AllowBoneTranslation) == 0x000164, "Member 'FAnimNode_PowerIK_Walk::AllowBoneTranslation' has a wrong offset!");
static_assert(offsetof(FAnimNode_PowerIK_Walk, SolverAlpha) == 0x000168, "Member 'FAnimNode_PowerIK_Walk::SolverAlpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_PowerIK_Walk, DebugDrawSize) == 0x00016C, "Member 'FAnimNode_PowerIK_Walk::DebugDrawSize' has a wrong offset!");

// ScriptStruct PowerIKRuntime.PlaneConstraint
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x04) FPlaneConstraint final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlaneConstraint) == 0x000004, "Wrong alignment on FPlaneConstraint");
static_assert(sizeof(FPlaneConstraint) == 0x000010, "Wrong size on FPlaneConstraint");

// ScriptStruct PowerIKRuntime.PowerIKCore
// 0x00A8 (0x00A8 - 0x0000)
struct alignas(0x08) FPowerIKCore final
{
public:
	uint8                                         Pad_0[0xA8];                                       // 0x0000(0x00A8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPowerIKCore) == 0x000008, "Wrong alignment on FPowerIKCore");
static_assert(sizeof(FPowerIKCore) == 0x0000A8, "Wrong size on FPowerIKCore");

// ScriptStruct PowerIKRuntime.PowerIKRootData
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FPowerIKRootData final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPowerIKRootData) == 0x000008, "Wrong alignment on FPowerIKRootData");
static_assert(sizeof(FPowerIKRootData) == 0x000028, "Wrong size on FPowerIKRootData");

// ScriptStruct PowerIKRuntime.PowerIKBoneData
// 0x0068 (0x0068 - 0x0000)
struct alignas(0x08) FPowerIKBoneData final
{
public:
	uint8                                         Pad_0[0x68];                                       // 0x0000(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPowerIKBoneData) == 0x000008, "Wrong alignment on FPowerIKBoneData");
static_assert(sizeof(FPowerIKBoneData) == 0x000068, "Wrong size on FPowerIKBoneData");

// ScriptStruct PowerIKRuntime.PowerIKEffectorData
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FPowerIKEffectorData final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPowerIKEffectorData) == 0x000008, "Wrong alignment on FPowerIKEffectorData");
static_assert(sizeof(FPowerIKEffectorData) == 0x000030, "Wrong size on FPowerIKEffectorData");

// ScriptStruct PowerIKRuntime.RigUnit_PowerIK
// 0x0130 (0x0198 - 0x0068)
struct FRigUnit_PowerIK final : public FRigUnitMutable
{
public:
	class FName                                   CharacterRoot;                                     // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RootRotationMultiplier;                            // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPowerIKEffector>               Effectors;                                         // 0x0078(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPowerIKBoneBendDirection>      BendDirections;                                    // 0x0088(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPowerIKExcludedBone>           ExcludedBones;                                     // 0x0098(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPowerIKBoneLimit>              JointLimits;                                       // 0x00A8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FPowerIKCenterOfGravity                CenterOfGravityConstraint;                         // 0x00B8(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
	struct FPowerIKBodyInertia                    Inertia;                                           // 0x00C8(0x0014)(NoDestructor, NativeAccessSpecifierPublic)
	int32                                         MaxSquashIterations;                               // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxStretchIterations;                              // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxFinalIterations;                                // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowBoneTranslation;                              // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x3];                                       // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SolverAlpha;                                       // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPowerIKCore                           Core;                                              // 0x00F0(0x00A8)(Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_PowerIK) == 0x000008, "Wrong alignment on FRigUnit_PowerIK");
static_assert(sizeof(FRigUnit_PowerIK) == 0x000198, "Wrong size on FRigUnit_PowerIK");
static_assert(offsetof(FRigUnit_PowerIK, CharacterRoot) == 0x000068, "Member 'FRigUnit_PowerIK::CharacterRoot' has a wrong offset!");
static_assert(offsetof(FRigUnit_PowerIK, RootRotationMultiplier) == 0x000070, "Member 'FRigUnit_PowerIK::RootRotationMultiplier' has a wrong offset!");
static_assert(offsetof(FRigUnit_PowerIK, Effectors) == 0x000078, "Member 'FRigUnit_PowerIK::Effectors' has a wrong offset!");
static_assert(offsetof(FRigUnit_PowerIK, BendDirections) == 0x000088, "Member 'FRigUnit_PowerIK::BendDirections' has a wrong offset!");
static_assert(offsetof(FRigUnit_PowerIK, ExcludedBones) == 0x000098, "Member 'FRigUnit_PowerIK::ExcludedBones' has a wrong offset!");
static_assert(offsetof(FRigUnit_PowerIK, JointLimits) == 0x0000A8, "Member 'FRigUnit_PowerIK::JointLimits' has a wrong offset!");
static_assert(offsetof(FRigUnit_PowerIK, CenterOfGravityConstraint) == 0x0000B8, "Member 'FRigUnit_PowerIK::CenterOfGravityConstraint' has a wrong offset!");
static_assert(offsetof(FRigUnit_PowerIK, Inertia) == 0x0000C8, "Member 'FRigUnit_PowerIK::Inertia' has a wrong offset!");
static_assert(offsetof(FRigUnit_PowerIK, MaxSquashIterations) == 0x0000DC, "Member 'FRigUnit_PowerIK::MaxSquashIterations' has a wrong offset!");
static_assert(offsetof(FRigUnit_PowerIK, MaxStretchIterations) == 0x0000E0, "Member 'FRigUnit_PowerIK::MaxStretchIterations' has a wrong offset!");
static_assert(offsetof(FRigUnit_PowerIK, MaxFinalIterations) == 0x0000E4, "Member 'FRigUnit_PowerIK::MaxFinalIterations' has a wrong offset!");
static_assert(offsetof(FRigUnit_PowerIK, AllowBoneTranslation) == 0x0000E8, "Member 'FRigUnit_PowerIK::AllowBoneTranslation' has a wrong offset!");
static_assert(offsetof(FRigUnit_PowerIK, SolverAlpha) == 0x0000EC, "Member 'FRigUnit_PowerIK::SolverAlpha' has a wrong offset!");
static_assert(offsetof(FRigUnit_PowerIK, Core) == 0x0000F0, "Member 'FRigUnit_PowerIK::Core' has a wrong offset!");

}

