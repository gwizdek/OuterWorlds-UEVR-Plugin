#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FaceFX

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "FaceFX_structs.hpp"
#include "Engine_classes.hpp"
#include "MovieScene_classes.hpp"


namespace SDK
{

// Class FaceFX.FaceFXAsset
// 0x0000 (0x0030 - 0x0030)
class UFaceFXAsset : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FaceFXAsset">();
	}
	static class UFaceFXAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFaceFXAsset>();
	}
};
static_assert(alignof(UFaceFXAsset) == 0x000008, "Wrong alignment on UFaceFXAsset");
static_assert(sizeof(UFaceFXAsset) == 0x000030, "Wrong size on UFaceFXAsset");

// Class FaceFX.FaceFXAnimationTrack
// 0x0018 (0x00B0 - 0x0098)
class UFaceFXAnimationTrack final : public UMovieSceneNameableTrack
{
public:
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMovieSceneSection*>             AnimationSections;                                 // 0x00A0(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FaceFXAnimationTrack">();
	}
	static class UFaceFXAnimationTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFaceFXAnimationTrack>();
	}
};
static_assert(alignof(UFaceFXAnimationTrack) == 0x000008, "Wrong alignment on UFaceFXAnimationTrack");
static_assert(sizeof(UFaceFXAnimationTrack) == 0x0000B0, "Wrong size on UFaceFXAnimationTrack");
static_assert(offsetof(UFaceFXAnimationTrack, AnimationSections) == 0x0000A0, "Member 'UFaceFXAnimationTrack::AnimationSections' has a wrong offset!");

// Class FaceFX.FaceFXActor
// 0x00A8 (0x00D8 - 0x0030)
class UFaceFXActor final : public UFaceFXAsset
{
public:
	TArray<struct FFaceFXActorData>               PlatformData;                                      // 0x0030(0x0010)(ZeroConstructor, Deprecated, NativeAccessSpecifierPrivate)
	struct FFaceFXActorData                       ActorData;                                         // 0x0040(0x0080)(Edit, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPrivate)
	TArray<class UFaceFXAnim*>                    Animations;                                        // 0x00C0(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPrivate)
	EFaceFXActorBlendMode                         BlendMode;                                         // 0x00D0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FaceFXActor">();
	}
	static class UFaceFXActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFaceFXActor>();
	}
};
static_assert(alignof(UFaceFXActor) == 0x000008, "Wrong alignment on UFaceFXActor");
static_assert(sizeof(UFaceFXActor) == 0x0000D8, "Wrong size on UFaceFXActor");
static_assert(offsetof(UFaceFXActor, PlatformData) == 0x000030, "Member 'UFaceFXActor::PlatformData' has a wrong offset!");
static_assert(offsetof(UFaceFXActor, ActorData) == 0x000040, "Member 'UFaceFXActor::ActorData' has a wrong offset!");
static_assert(offsetof(UFaceFXActor, Animations) == 0x0000C0, "Member 'UFaceFXActor::Animations' has a wrong offset!");
static_assert(offsetof(UFaceFXActor, BlendMode) == 0x0000D0, "Member 'UFaceFXActor::BlendMode' has a wrong offset!");

// Class FaceFX.FaceFXBlueprintLibrary
// 0x0000 (0x0030 - 0x0030)
class UFaceFXBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool GetAnimationBounds(const class UFaceFXAnim* Animation, float* Start, float* End, float* Duration);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FaceFXBlueprintLibrary">();
	}
	static class UFaceFXBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFaceFXBlueprintLibrary>();
	}
};
static_assert(alignof(UFaceFXBlueprintLibrary) == 0x000008, "Wrong alignment on UFaceFXBlueprintLibrary");
static_assert(sizeof(UFaceFXBlueprintLibrary) == 0x000030, "Wrong size on UFaceFXBlueprintLibrary");

// Class FaceFX.FaceFXAnim
// 0x00F8 (0x0128 - 0x0030)
class UFaceFXAnim final : public UFaceFXAsset
{
public:
	TArray<struct FFaceFXAnimData>                PlatformData;                                      // 0x0030(0x0010)(ZeroConstructor, Deprecated, NativeAccessSpecifierPrivate)
	struct FFaceFXAnimData                        AnimData;                                          // 0x0040(0x0010)(Edit, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPrivate)
	struct FFaceFXAnimId                          ID;                                                // 0x0050(0x0010)(Edit, DisableEditOnTemplate, NoDestructor, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class USoundWave>              Audio;                                             // 0x0060(0x0028)(Edit, DisableEditOnTemplate, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UObject>                 AudioAkEvent;                                      // 0x0088(0x0028)(Edit, DisableEditOnTemplate, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UObject>                 AudioAkEventStop;                                  // 0x00B0(0x0028)(Edit, DisableEditOnTemplate, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UObject>                 AudioAkEventPause;                                 // 0x00D8(0x0028)(Edit, DisableEditOnTemplate, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UObject>                 AudioAkEventResume;                                // 0x0100(0x0028)(Edit, DisableEditOnTemplate, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FaceFXAnim">();
	}
	static class UFaceFXAnim* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFaceFXAnim>();
	}
};
static_assert(alignof(UFaceFXAnim) == 0x000008, "Wrong alignment on UFaceFXAnim");
static_assert(sizeof(UFaceFXAnim) == 0x000128, "Wrong size on UFaceFXAnim");
static_assert(offsetof(UFaceFXAnim, PlatformData) == 0x000030, "Member 'UFaceFXAnim::PlatformData' has a wrong offset!");
static_assert(offsetof(UFaceFXAnim, AnimData) == 0x000040, "Member 'UFaceFXAnim::AnimData' has a wrong offset!");
static_assert(offsetof(UFaceFXAnim, ID) == 0x000050, "Member 'UFaceFXAnim::ID' has a wrong offset!");
static_assert(offsetof(UFaceFXAnim, Audio) == 0x000060, "Member 'UFaceFXAnim::Audio' has a wrong offset!");
static_assert(offsetof(UFaceFXAnim, AudioAkEvent) == 0x000088, "Member 'UFaceFXAnim::AudioAkEvent' has a wrong offset!");
static_assert(offsetof(UFaceFXAnim, AudioAkEventStop) == 0x0000B0, "Member 'UFaceFXAnim::AudioAkEventStop' has a wrong offset!");
static_assert(offsetof(UFaceFXAnim, AudioAkEventPause) == 0x0000D8, "Member 'UFaceFXAnim::AudioAkEventPause' has a wrong offset!");
static_assert(offsetof(UFaceFXAnim, AudioAkEventResume) == 0x000100, "Member 'UFaceFXAnim::AudioAkEventResume' has a wrong offset!");

// Class FaceFX.FaceFXAnimationSection
// 0x0058 (0x0148 - 0x00F0)
class UFaceFXAnimationSection final : public UMovieSceneSection
{
public:
	struct FFaceFXSkelMeshComponentId             SkelMeshComponentId;                               // 0x00F0(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FFaceFXAnimId                          AnimationId;                                       // 0x00FC(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UFaceFXAnim>             Animation;                                         // 0x0110(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         StartOffset;                                       // 0x0138(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EndOffset;                                         // 0x013C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         bIsAnimationDurationLoaded : 1;                    // 0x0140(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_141[0x3];                                      // 0x0141(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AnimationDuration;                                 // 0x0144(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FaceFXAnimationSection">();
	}
	static class UFaceFXAnimationSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFaceFXAnimationSection>();
	}
};
static_assert(alignof(UFaceFXAnimationSection) == 0x000008, "Wrong alignment on UFaceFXAnimationSection");
static_assert(sizeof(UFaceFXAnimationSection) == 0x000148, "Wrong size on UFaceFXAnimationSection");
static_assert(offsetof(UFaceFXAnimationSection, SkelMeshComponentId) == 0x0000F0, "Member 'UFaceFXAnimationSection::SkelMeshComponentId' has a wrong offset!");
static_assert(offsetof(UFaceFXAnimationSection, AnimationId) == 0x0000FC, "Member 'UFaceFXAnimationSection::AnimationId' has a wrong offset!");
static_assert(offsetof(UFaceFXAnimationSection, Animation) == 0x000110, "Member 'UFaceFXAnimationSection::Animation' has a wrong offset!");
static_assert(offsetof(UFaceFXAnimationSection, StartOffset) == 0x000138, "Member 'UFaceFXAnimationSection::StartOffset' has a wrong offset!");
static_assert(offsetof(UFaceFXAnimationSection, EndOffset) == 0x00013C, "Member 'UFaceFXAnimationSection::EndOffset' has a wrong offset!");
static_assert(offsetof(UFaceFXAnimationSection, AnimationDuration) == 0x000144, "Member 'UFaceFXAnimationSection::AnimationDuration' has a wrong offset!");

// Class FaceFX.FaceFXCharacter
// 0x0170 (0x01A0 - 0x0030)
class UFaceFXCharacter final : public UObject
{
public:
	uint8                                         Pad_30[0x88];                                      // 0x0030(0x0088)(Fixing Size After Last Property [ Dumper-7 ])
	class UFaceFXActor*                           FaceFXActor;                                       // 0x00B8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C0[0xD0];                                      // 0x00C0(0x00D0)(Fixing Size After Last Property [ Dumper-7 ])
	class UFaceFXAnim*                            CurrentAnim;                                       // 0x0190(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_198[0x8];                                      // 0x0198(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FaceFXCharacter">();
	}
	static class UFaceFXCharacter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFaceFXCharacter>();
	}
};
static_assert(alignof(UFaceFXCharacter) == 0x000008, "Wrong alignment on UFaceFXCharacter");
static_assert(sizeof(UFaceFXCharacter) == 0x0001A0, "Wrong size on UFaceFXCharacter");
static_assert(offsetof(UFaceFXCharacter, FaceFXActor) == 0x0000B8, "Member 'UFaceFXCharacter::FaceFXActor' has a wrong offset!");
static_assert(offsetof(UFaceFXCharacter, CurrentAnim) == 0x000190, "Member 'UFaceFXCharacter::CurrentAnim' has a wrong offset!");

// Class FaceFX.FaceFXComponent
// 0x0050 (0x0130 - 0x00E0)
class UFaceFXComponent final : public UActorComponent
{
public:
	TMulticastInlineDelegate<void(class USkeletalMeshComponent* SkelMeshComp, class FName& AnimId, bool IsAudioStarted, class UActorComponent* AudioComponentStartedOn)> OnPlaybackAudioStart;                              // 0x00E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class USkeletalMeshComponent* SkelMeshComp, class FName& AnimId)> OnPlaybackStopped;                                 // 0x00F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class USkeletalMeshComponent* SkelMeshComp, class FName& AnimId, int32 ChannelIndex, float ChannelTime, float EventTime, const class FString& Payload)> OnAnimationEvent;                                  // 0x0100(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          AuthoredSkeleton;                                  // 0x0110(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFaceFXEntry>                   Entries;                                           // 0x0118(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_128[0x8];                                      // 0x0128(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool JumpTo(float Position, bool Pause_0, class UFaceFXAnim* Animation, bool LoopAnimation, class USkeletalMeshComponent* SkelMeshComp, const class UObject* Caller);
	bool JumpToById(float Position, bool Pause_0, class FName Group, class FName AnimName, bool LoopAnimation, class USkeletalMeshComponent* SkelMeshComp, const class UObject* Caller);
	void OnCharacterAnimationEvent(class UFaceFXCharacter* Character, const struct FFaceFXAnimId& AnimId, int32 ChannelIndex, float ChannelTime, float EventTime, const class FString& Payload);
	void OnCharacterAudioStart(class UFaceFXCharacter* Character, const struct FFaceFXAnimId& AnimId, bool IsAudioStarted, class UActorComponent* AudioComponentStartedOn);
	void OnCharacterPlaybackStopped(class UFaceFXCharacter* Character, const struct FFaceFXAnimId& AnimId);
	bool Pause(class USkeletalMeshComponent* SkelMeshComp, const class UObject* Caller);
	bool Play(class UFaceFXAnim* Animation, class USkeletalMeshComponent* SkelMeshComp, bool Loop, const class UObject* Caller);
	bool PlayById(class FName Group, class FName AnimName, class USkeletalMeshComponent* SkelMeshComp, bool Loop, const class UObject* Caller);
	bool Resume(class USkeletalMeshComponent* SkelMeshComp, const class UObject* Caller);
	bool Setup(class USkeletalMeshComponent* SkelMeshComp, class UActorComponent* AudioComponent, const class UFaceFXActor* Asset, bool IsCompensateForForceFrontXAxis, bool IsAutoPlaySound, bool IsDisableMorphTargets, bool IsDisableMaterialParameters, bool IsIgnoreEvents, const class UObject* Caller);
	bool Stop(class USkeletalMeshComponent* SkelMeshComp, const class UObject* Caller);
	void StopAll();

	bool IsPaused(class USkeletalMeshComponent* SkelMeshComp, const class UObject* Caller) const;
	bool IsPlaying(class USkeletalMeshComponent* SkelMeshComp, const class UObject* Caller) const;
	bool IsPlayingAnimation(const struct FFaceFXAnimId& AnimId, class USkeletalMeshComponent* SkelMeshComp, const class UObject* Caller) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FaceFXComponent">();
	}
	static class UFaceFXComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFaceFXComponent>();
	}
};
static_assert(alignof(UFaceFXComponent) == 0x000008, "Wrong alignment on UFaceFXComponent");
static_assert(sizeof(UFaceFXComponent) == 0x000130, "Wrong size on UFaceFXComponent");
static_assert(offsetof(UFaceFXComponent, OnPlaybackAudioStart) == 0x0000E0, "Member 'UFaceFXComponent::OnPlaybackAudioStart' has a wrong offset!");
static_assert(offsetof(UFaceFXComponent, OnPlaybackStopped) == 0x0000F0, "Member 'UFaceFXComponent::OnPlaybackStopped' has a wrong offset!");
static_assert(offsetof(UFaceFXComponent, OnAnimationEvent) == 0x000100, "Member 'UFaceFXComponent::OnAnimationEvent' has a wrong offset!");
static_assert(offsetof(UFaceFXComponent, AuthoredSkeleton) == 0x000110, "Member 'UFaceFXComponent::AuthoredSkeleton' has a wrong offset!");
static_assert(offsetof(UFaceFXComponent, Entries) == 0x000118, "Member 'UFaceFXComponent::Entries' has a wrong offset!");

// Class FaceFX.FaceFXConfig
// 0x0008 (0x0038 - 0x0030)
class UFaceFXConfig final : public UObject
{
public:
	EFaceFXBlendMode                              DefaultBlendMode;                                  // 0x0030(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FaceFXConfig">();
	}
	static class UFaceFXConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFaceFXConfig>();
	}
};
static_assert(alignof(UFaceFXConfig) == 0x000008, "Wrong alignment on UFaceFXConfig");
static_assert(sizeof(UFaceFXConfig) == 0x000038, "Wrong size on UFaceFXConfig");
static_assert(offsetof(UFaceFXConfig, DefaultBlendMode) == 0x000030, "Member 'UFaceFXConfig::DefaultBlendMode' has a wrong offset!");

}

