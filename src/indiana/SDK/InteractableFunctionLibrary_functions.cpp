#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: InteractableFunctionLibrary

#include "Basic.hpp"

#include "InteractableFunctionLibrary_classes.hpp"
#include "InteractableFunctionLibrary_parameters.hpp"


namespace SDK
{

// Function InteractableFunctionLibrary.InteractableFunctionLibrary_C.UpdateOCLCAC
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   Array                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    IsEmpty                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInteractableFunctionLibrary_C::UpdateOCLCAC(TArray<class AActor*>& Array, bool IsEmpty, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InteractableFunctionLibrary_C", "UpdateOCLCAC");

	Params::InteractableFunctionLibrary_C_UpdateOCLCAC Parms{};

	Parms.Array = std::move(Array);
	Parms.IsEmpty = IsEmpty;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Array = std::move(Parms.Array);
}


// Function InteractableFunctionLibrary.InteractableFunctionLibrary_C.SetupCAC
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   Array                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UOCLComponent*                    OCL                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInteractableFunctionLibrary_C::SetupCAC(TArray<class AActor*>& Array, class UOCLComponent* OCL, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InteractableFunctionLibrary_C", "SetupCAC");

	Params::InteractableFunctionLibrary_C_SetupCAC Parms{};

	Parms.Array = std::move(Array);
	Parms.OCL = OCL;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Array = std::move(Parms.Array);
}


// Function InteractableFunctionLibrary.InteractableFunctionLibrary_C.FormatWithObjectName
// (Static, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Format                                                 (BlueprintVisible, BlueprintReadOnly, Parm)
// class UObject*                          Object                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInteractableFunctionLibrary_C::FormatWithObjectName(const class FText& Format, class UObject* Object, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InteractableFunctionLibrary_C", "FormatWithObjectName");

	Params::InteractableFunctionLibrary_C_FormatWithObjectName Parms{};

	Parms.Format = std::move(Format);
	Parms.Object = Object;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function InteractableFunctionLibrary.InteractableFunctionLibrary_C.AssignMaterialInstanceBySlotName
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UStaticMeshComponent*             MeshComponentIn                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             MaterialSlotNameIn                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UMaterialInstanceDynamic*         MaterialInstanceOut                                    (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UMaterialInstanceDynamic*         Out                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInteractableFunctionLibrary_C::AssignMaterialInstanceBySlotName(class UStaticMeshComponent* MeshComponentIn, class FName MaterialSlotNameIn, class UMaterialInstanceDynamic*& MaterialInstanceOut, class UObject* __WorldContext, class UMaterialInstanceDynamic** Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InteractableFunctionLibrary_C", "AssignMaterialInstanceBySlotName");

	Params::InteractableFunctionLibrary_C_AssignMaterialInstanceBySlotName Parms{};

	Parms.MeshComponentIn = MeshComponentIn;
	Parms.MaterialSlotNameIn = MaterialSlotNameIn;
	Parms.MaterialInstanceOut = MaterialInstanceOut;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	MaterialInstanceOut = Parms.MaterialInstanceOut;

	if (Out != nullptr)
		*Out = Parms.Out;
}

}

