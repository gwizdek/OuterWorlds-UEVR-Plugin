#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: IndianaFormulas_BP

#include "Basic.hpp"

#include "IndianaFormulas_BP_classes.hpp"
#include "IndianaFormulas_BP_parameters.hpp"


namespace SDK
{

// Function IndianaFormulas_BP.IndianaFormulas_BP_C.LockpickToughness
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// uint8                                   ExactLockpickDifficulty                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PlayerLockpickSkill                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

uint8 UIndianaFormulas_BP_C::LockpickToughness(uint8 ExactLockpickDifficulty, int32 PlayerLockpickSkill) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IndianaFormulas_BP_C", "LockpickToughness");

	Params::IndianaFormulas_BP_C_LockpickToughness Parms{};

	Parms.ExactLockpickDifficulty = ExactLockpickDifficulty;
	Parms.PlayerLockpickSkill = PlayerLockpickSkill;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function IndianaFormulas_BP.IndianaFormulas_BP_C.LockpickTime
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// uint8                                   ExactLockpickDifficulty                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PlayerLockpickSkill                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   BasePlayerLockpickSkill                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UIndianaFormulas_BP_C::LockpickTime(uint8 ExactLockpickDifficulty, int32 PlayerLockpickSkill, int32 BasePlayerLockpickSkill) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IndianaFormulas_BP_C", "LockpickTime");

	Params::IndianaFormulas_BP_C_LockpickTime Parms{};

	Parms.ExactLockpickDifficulty = ExactLockpickDifficulty;
	Parms.PlayerLockpickSkill = PlayerLockpickSkill;
	Parms.BasePlayerLockpickSkill = BasePlayerLockpickSkill;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function IndianaFormulas_BP.IndianaFormulas_BP_C.LockpickNoise
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// uint8                                   ExactLockpickDifficulty                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PlayerLockpickSkill                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UIndianaFormulas_BP_C::LockpickNoise(uint8 ExactLockpickDifficulty, int32 PlayerLockpickSkill) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IndianaFormulas_BP_C", "LockpickNoise");

	Params::IndianaFormulas_BP_C_LockpickNoise Parms{};

	Parms.ExactLockpickDifficulty = ExactLockpickDifficulty;
	Parms.PlayerLockpickSkill = PlayerLockpickSkill;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function IndianaFormulas_BP.IndianaFormulas_BP_C.LockpickNumResources
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// uint8                                   ExactLockpickDifficulty                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PlayerLockpickSkill                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   BasePlayerLockpickSkill                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

uint8 UIndianaFormulas_BP_C::LockpickNumResources(uint8 ExactLockpickDifficulty, int32 PlayerLockpickSkill, int32 BasePlayerLockpickSkill) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IndianaFormulas_BP_C", "LockpickNumResources");

	Params::IndianaFormulas_BP_C_LockpickNumResources Parms{};

	Parms.ExactLockpickDifficulty = ExactLockpickDifficulty;
	Parms.PlayerLockpickSkill = PlayerLockpickSkill;
	Parms.BasePlayerLockpickSkill = BasePlayerLockpickSkill;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function IndianaFormulas_BP.IndianaFormulas_BP_C.CanLockpick
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// uint8                                   ExactLockpickDifficulty                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PlayerLockpickSkill                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UIndianaFormulas_BP_C::CanLockpick(uint8 ExactLockpickDifficulty, int32 PlayerLockpickSkill) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IndianaFormulas_BP_C", "CanLockpick");

	Params::IndianaFormulas_BP_C_CanLockpick Parms{};

	Parms.ExactLockpickDifficulty = ExactLockpickDifficulty;
	Parms.PlayerLockpickSkill = PlayerLockpickSkill;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function IndianaFormulas_BP.IndianaFormulas_BP_C.LockpickDifficultyFullRange
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

uint8 UIndianaFormulas_BP_C::LockpickDifficultyFullRange() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IndianaFormulas_BP_C", "LockpickDifficultyFullRange");

	Params::IndianaFormulas_BP_C_LockpickDifficultyFullRange Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function IndianaFormulas_BP.IndianaFormulas_BP_C.LockpickDifficultyNumRanges
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

uint8 UIndianaFormulas_BP_C::LockpickDifficultyNumRanges() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IndianaFormulas_BP_C", "LockpickDifficultyNumRanges");

	Params::IndianaFormulas_BP_C_LockpickDifficultyNumRanges Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function IndianaFormulas_BP.IndianaFormulas_BP_C.LockpickDifficultyRange
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UIndianaFormulas_BP_C::LockpickDifficultyRange() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IndianaFormulas_BP_C", "LockpickDifficultyRange");

	Params::IndianaFormulas_BP_C_LockpickDifficultyRange Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function IndianaFormulas_BP.IndianaFormulas_BP_C.ComputeExactLockpickDifficulty
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// EOCLDifficulty                          LockpickDifficulty                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

uint8 UIndianaFormulas_BP_C::ComputeExactLockpickDifficulty(EOCLDifficulty LockpickDifficulty) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IndianaFormulas_BP_C", "ComputeExactLockpickDifficulty");

	Params::IndianaFormulas_BP_C_ComputeExactLockpickDifficulty Parms{};

	Parms.LockpickDifficulty = LockpickDifficulty;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function IndianaFormulas_BP.IndianaFormulas_BP_C.HackToughness
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// uint8                                   ExactHackDifficulty                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PlayerHackSkill                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

uint8 UIndianaFormulas_BP_C::HackToughness(uint8 ExactHackDifficulty, int32 PlayerHackSkill) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IndianaFormulas_BP_C", "HackToughness");

	Params::IndianaFormulas_BP_C_HackToughness Parms{};

	Parms.ExactHackDifficulty = ExactHackDifficulty;
	Parms.PlayerHackSkill = PlayerHackSkill;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function IndianaFormulas_BP.IndianaFormulas_BP_C.HackNumResources
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// uint8                                   ExactHackDifficulty                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PlayerHackSkill                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

uint8 UIndianaFormulas_BP_C::HackNumResources(uint8 ExactHackDifficulty, int32 PlayerHackSkill) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IndianaFormulas_BP_C", "HackNumResources");

	Params::IndianaFormulas_BP_C_HackNumResources Parms{};

	Parms.ExactHackDifficulty = ExactHackDifficulty;
	Parms.PlayerHackSkill = PlayerHackSkill;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function IndianaFormulas_BP.IndianaFormulas_BP_C.HackTime
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// uint8                                   ExactHackDifficulty                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PlayerHackSkill                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

uint8 UIndianaFormulas_BP_C::HackTime(uint8 ExactHackDifficulty, int32 PlayerHackSkill) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IndianaFormulas_BP_C", "HackTime");

	Params::IndianaFormulas_BP_C_HackTime Parms{};

	Parms.ExactHackDifficulty = ExactHackDifficulty;
	Parms.PlayerHackSkill = PlayerHackSkill;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function IndianaFormulas_BP.IndianaFormulas_BP_C.HackNoise
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// uint8                                   ExactHackDifficulty                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PlayerHackSkill                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UIndianaFormulas_BP_C::HackNoise(uint8 ExactHackDifficulty, int32 PlayerHackSkill) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IndianaFormulas_BP_C", "HackNoise");

	Params::IndianaFormulas_BP_C_HackNoise Parms{};

	Parms.ExactHackDifficulty = ExactHackDifficulty;
	Parms.PlayerHackSkill = PlayerHackSkill;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function IndianaFormulas_BP.IndianaFormulas_BP_C.HackDifficultyRange
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UIndianaFormulas_BP_C::HackDifficultyRange() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IndianaFormulas_BP_C", "HackDifficultyRange");

	Params::IndianaFormulas_BP_C_HackDifficultyRange Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function IndianaFormulas_BP.IndianaFormulas_BP_C.HackDifficultyNumRanges
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

uint8 UIndianaFormulas_BP_C::HackDifficultyNumRanges() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IndianaFormulas_BP_C", "HackDifficultyNumRanges");

	Params::IndianaFormulas_BP_C_HackDifficultyNumRanges Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function IndianaFormulas_BP.IndianaFormulas_BP_C.HackDifficultyFullRange
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

uint8 UIndianaFormulas_BP_C::HackDifficultyFullRange() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IndianaFormulas_BP_C", "HackDifficultyFullRange");

	Params::IndianaFormulas_BP_C_HackDifficultyFullRange Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function IndianaFormulas_BP.IndianaFormulas_BP_C.ComputeExactHackDifficulty
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// EOCLDifficulty                          HackDifficulty                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

uint8 UIndianaFormulas_BP_C::ComputeExactHackDifficulty(EOCLDifficulty HackDifficulty) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IndianaFormulas_BP_C", "ComputeExactHackDifficulty");

	Params::IndianaFormulas_BP_C_ComputeExactHackDifficulty Parms{};

	Parms.HackDifficulty = HackDifficulty;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function IndianaFormulas_BP.IndianaFormulas_BP_C.CanHack
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// uint8                                   ExactComputerDifficulty                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PlayerHackSkill                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UIndianaFormulas_BP_C::CanHack(uint8 ExactComputerDifficulty, int32 PlayerHackSkill) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IndianaFormulas_BP_C", "CanHack");

	Params::IndianaFormulas_BP_C_CanHack Parms{};

	Parms.ExactComputerDifficulty = ExactComputerDifficulty;
	Parms.PlayerHackSkill = PlayerHackSkill;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function IndianaFormulas_BP.IndianaFormulas_BP_C.TrapToughness
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// uint8                                   ExactTrapDifficulty                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PlayerEngineeringSkill                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

uint8 UIndianaFormulas_BP_C::TrapToughness(uint8 ExactTrapDifficulty, int32 PlayerEngineeringSkill) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IndianaFormulas_BP_C", "TrapToughness");

	Params::IndianaFormulas_BP_C_TrapToughness Parms{};

	Parms.ExactTrapDifficulty = ExactTrapDifficulty;
	Parms.PlayerEngineeringSkill = PlayerEngineeringSkill;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function IndianaFormulas_BP.IndianaFormulas_BP_C.ArmTime
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// uint8                                   ExactTrapDifficulty                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PlayerEngineeringSkill                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

uint8 UIndianaFormulas_BP_C::ArmTime(uint8 ExactTrapDifficulty, int32 PlayerEngineeringSkill) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IndianaFormulas_BP_C", "ArmTime");

	Params::IndianaFormulas_BP_C_ArmTime Parms{};

	Parms.ExactTrapDifficulty = ExactTrapDifficulty;
	Parms.PlayerEngineeringSkill = PlayerEngineeringSkill;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function IndianaFormulas_BP.IndianaFormulas_BP_C.DisarmTime
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// uint8                                   ExactTrapDifficulty                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PlayerEngineeringSkill                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

uint8 UIndianaFormulas_BP_C::DisarmTime(uint8 ExactTrapDifficulty, int32 PlayerEngineeringSkill) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IndianaFormulas_BP_C", "DisarmTime");

	Params::IndianaFormulas_BP_C_DisarmTime Parms{};

	Parms.ExactTrapDifficulty = ExactTrapDifficulty;
	Parms.PlayerEngineeringSkill = PlayerEngineeringSkill;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function IndianaFormulas_BP.IndianaFormulas_BP_C.TrapArmNoise
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// uint8                                   ExactTrapDifficulty                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PlayerEngineeringSkill                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UIndianaFormulas_BP_C::TrapArmNoise(uint8 ExactTrapDifficulty, int32 PlayerEngineeringSkill) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IndianaFormulas_BP_C", "TrapArmNoise");

	Params::IndianaFormulas_BP_C_TrapArmNoise Parms{};

	Parms.ExactTrapDifficulty = ExactTrapDifficulty;
	Parms.PlayerEngineeringSkill = PlayerEngineeringSkill;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function IndianaFormulas_BP.IndianaFormulas_BP_C.TrapDisarmNoise
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// uint8                                   ExactTrapDifficulty                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PlayerEngineeringSkill                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UIndianaFormulas_BP_C::TrapDisarmNoise(uint8 ExactTrapDifficulty, int32 PlayerEngineeringSkill) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IndianaFormulas_BP_C", "TrapDisarmNoise");

	Params::IndianaFormulas_BP_C_TrapDisarmNoise Parms{};

	Parms.ExactTrapDifficulty = ExactTrapDifficulty;
	Parms.PlayerEngineeringSkill = PlayerEngineeringSkill;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function IndianaFormulas_BP.IndianaFormulas_BP_C.CanArm
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// uint8                                   ExactTrapDifficulty                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PlayerEngineeringSkill                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UIndianaFormulas_BP_C::CanArm(uint8 ExactTrapDifficulty, int32 PlayerEngineeringSkill) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IndianaFormulas_BP_C", "CanArm");

	Params::IndianaFormulas_BP_C_CanArm Parms{};

	Parms.ExactTrapDifficulty = ExactTrapDifficulty;
	Parms.PlayerEngineeringSkill = PlayerEngineeringSkill;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function IndianaFormulas_BP.IndianaFormulas_BP_C.CanDisarm
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// uint8                                   ExactTrapDifficulty                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PlayerEngineeringSkill                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UIndianaFormulas_BP_C::CanDisarm(uint8 ExactTrapDifficulty, int32 PlayerEngineeringSkill) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IndianaFormulas_BP_C", "CanDisarm");

	Params::IndianaFormulas_BP_C_CanDisarm Parms{};

	Parms.ExactTrapDifficulty = ExactTrapDifficulty;
	Parms.PlayerEngineeringSkill = PlayerEngineeringSkill;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function IndianaFormulas_BP.IndianaFormulas_BP_C.ComputeExactTrapDifficulty
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// ETrapDifficulty                         TrapDifficulty                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

uint8 UIndianaFormulas_BP_C::ComputeExactTrapDifficulty(ETrapDifficulty TrapDifficulty) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IndianaFormulas_BP_C", "ComputeExactTrapDifficulty");

	Params::IndianaFormulas_BP_C_ComputeExactTrapDifficulty Parms{};

	Parms.TrapDifficulty = TrapDifficulty;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function IndianaFormulas_BP.IndianaFormulas_BP_C.TrapDifficultyFullRange
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

uint8 UIndianaFormulas_BP_C::TrapDifficultyFullRange() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IndianaFormulas_BP_C", "TrapDifficultyFullRange");

	Params::IndianaFormulas_BP_C_TrapDifficultyFullRange Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function IndianaFormulas_BP.IndianaFormulas_BP_C.TrapDifficultyNumRanges
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

uint8 UIndianaFormulas_BP_C::TrapDifficultyNumRanges() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IndianaFormulas_BP_C", "TrapDifficultyNumRanges");

	Params::IndianaFormulas_BP_C_TrapDifficultyNumRanges Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function IndianaFormulas_BP.IndianaFormulas_BP_C.TrapDifficultyRange
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UIndianaFormulas_BP_C::TrapDifficultyRange() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IndianaFormulas_BP_C", "TrapDifficultyRange");

	Params::IndianaFormulas_BP_C_TrapDifficultyRange Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function IndianaFormulas_BP.IndianaFormulas_BP_C.TrapDamagePercent
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// ETrapDifficulty                         TrapDifficulty                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UIndianaFormulas_BP_C::TrapDamagePercent(ETrapDifficulty TrapDifficulty) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IndianaFormulas_BP_C", "TrapDamagePercent");

	Params::IndianaFormulas_BP_C_TrapDamagePercent Parms{};

	Parms.TrapDifficulty = TrapDifficulty;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function IndianaFormulas_BP.IndianaFormulas_BP_C.PlayerSneakEnemyDetectionRage
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bInterior                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   PlayerSneakSkill                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UIndianaFormulas_BP_C::PlayerSneakEnemyDetectionRage(bool bInterior, int32 PlayerSneakSkill) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IndianaFormulas_BP_C", "PlayerSneakEnemyDetectionRage");

	Params::IndianaFormulas_BP_C_PlayerSneakEnemyDetectionRage Parms{};

	Parms.bInterior = bInterior;
	Parms.PlayerSneakSkill = PlayerSneakSkill;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function IndianaFormulas_BP.IndianaFormulas_BP_C.ComputeSkillPointsForPrimaryAttribute
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// uint8                                   AttributeRank                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UIndianaFormulas_BP_C::ComputeSkillPointsForPrimaryAttribute(uint8 AttributeRank) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IndianaFormulas_BP_C", "ComputeSkillPointsForPrimaryAttribute");

	Params::IndianaFormulas_BP_C_ComputeSkillPointsForPrimaryAttribute Parms{};

	Parms.AttributeRank = AttributeRank;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function IndianaFormulas_BP.IndianaFormulas_BP_C.ComputeSkillPointsForSecondaryAttribute
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// uint8                                   AttributeRank                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UIndianaFormulas_BP_C::ComputeSkillPointsForSecondaryAttribute(uint8 AttributeRank) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IndianaFormulas_BP_C", "ComputeSkillPointsForSecondaryAttribute");

	Params::IndianaFormulas_BP_C_ComputeSkillPointsForSecondaryAttribute Parms{};

	Parms.AttributeRank = AttributeRank;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function IndianaFormulas_BP.IndianaFormulas_BP_C.ComputeFallingDamagePercent
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                                   DistanceFallen                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UIndianaFormulas_BP_C::ComputeFallingDamagePercent(float DistanceFallen) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IndianaFormulas_BP_C", "ComputeFallingDamagePercent");

	Params::IndianaFormulas_BP_C_ComputeFallingDamagePercent Parms{};

	Parms.DistanceFallen = DistanceFallen;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function IndianaFormulas_BP.IndianaFormulas_BP_C.PickPocketTime
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   LockpickSkill                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TargetPerception                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UIndianaFormulas_BP_C::PickPocketTime(int32 LockpickSkill, int32 TargetPerception) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IndianaFormulas_BP_C", "PickPocketTime");

	Params::IndianaFormulas_BP_C_PickPocketTime Parms{};

	Parms.LockpickSkill = LockpickSkill;
	Parms.TargetPerception = TargetPerception;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function IndianaFormulas_BP.IndianaFormulas_BP_C.ShouldDrawFireSwitchCompanionTargets
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                                   OldHealth                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   OldDTBody                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   OldDTHead                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   NewHealth                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   NewDTBody                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   NewDTHead                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UIndianaFormulas_BP_C::ShouldDrawFireSwitchCompanionTargets(float OldHealth, float OldDTBody, float OldDTHead, float NewHealth, float NewDTBody, float NewDTHead) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IndianaFormulas_BP_C", "ShouldDrawFireSwitchCompanionTargets");

	Params::IndianaFormulas_BP_C_ShouldDrawFireSwitchCompanionTargets Parms{};

	Parms.OldHealth = OldHealth;
	Parms.OldDTBody = OldDTBody;
	Parms.OldDTHead = OldDTHead;
	Parms.NewHealth = NewHealth;
	Parms.NewDTBody = NewDTBody;
	Parms.NewDTHead = NewDTHead;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function IndianaFormulas_BP.IndianaFormulas_BP_C.CalculateIntialMorale
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// int32                                   TemperamentAttribute                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UIndianaFormulas_BP_C::CalculateIntialMorale(int32 TemperamentAttribute) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IndianaFormulas_BP_C", "CalculateIntialMorale");

	Params::IndianaFormulas_BP_C_CalculateIntialMorale Parms{};

	Parms.TemperamentAttribute = TemperamentAttribute;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function IndianaFormulas_BP.IndianaFormulas_BP_C.CalculateMoraleAdjustment
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// float                                   AddedMoral                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   CharmAttribute                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TemperamentAttribute                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UIndianaFormulas_BP_C::CalculateMoraleAdjustment(float AddedMoral, int32 CharmAttribute, int32 TemperamentAttribute) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IndianaFormulas_BP_C", "CalculateMoraleAdjustment");

	Params::IndianaFormulas_BP_C_CalculateMoraleAdjustment Parms{};

	Parms.AddedMoral = AddedMoral;
	Parms.CharmAttribute = CharmAttribute;
	Parms.TemperamentAttribute = TemperamentAttribute;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function IndianaFormulas_BP.IndianaFormulas_BP_C.GetInterrogationBribeAmount
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// ECrimeType                              CrimeType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bRestrictedArea                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDisguised                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   DisguiseInterrogationsPassed                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PlayerLevel                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MerchantSkill                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   StolenItemsValue                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UIndianaFormulas_BP_C::GetInterrogationBribeAmount(ECrimeType CrimeType, bool bRestrictedArea, bool bDisguised, int32 DisguiseInterrogationsPassed, int32 PlayerLevel, int32 MerchantSkill, int32 StolenItemsValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IndianaFormulas_BP_C", "GetInterrogationBribeAmount");

	Params::IndianaFormulas_BP_C_GetInterrogationBribeAmount Parms{};

	Parms.CrimeType = CrimeType;
	Parms.bRestrictedArea = bRestrictedArea;
	Parms.bDisguised = bDisguised;
	Parms.DisguiseInterrogationsPassed = DisguiseInterrogationsPassed;
	Parms.PlayerLevel = PlayerLevel;
	Parms.MerchantSkill = MerchantSkill;
	Parms.StolenItemsValue = StolenItemsValue;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function IndianaFormulas_BP.IndianaFormulas_BP_C.GetBribeAmount
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// EBribeDifficulty                        BribeDifficulty                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Level                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MerchantSkill                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UIndianaFormulas_BP_C::GetBribeAmount(EBribeDifficulty BribeDifficulty, int32 Level, int32 MerchantSkill) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IndianaFormulas_BP_C", "GetBribeAmount");

	Params::IndianaFormulas_BP_C_GetBribeAmount Parms{};

	Parms.BribeDifficulty = BribeDifficulty;
	Parms.Level = Level;
	Parms.MerchantSkill = MerchantSkill;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function IndianaFormulas_BP.IndianaFormulas_BP_C.ConversationSkillNearMissThreshold
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UIndianaFormulas_BP_C::ConversationSkillNearMissThreshold() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IndianaFormulas_BP_C", "ConversationSkillNearMissThreshold");

	Params::IndianaFormulas_BP_C_ConversationSkillNearMissThreshold Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function IndianaFormulas_BP.IndianaFormulas_BP_C.ComputeSkillValueToRange
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   SkillValue                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ECharacterSkillRange                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

ECharacterSkillRange UIndianaFormulas_BP_C::ComputeSkillValueToRange(int32 SkillValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IndianaFormulas_BP_C", "ComputeSkillValueToRange");

	Params::IndianaFormulas_BP_C_ComputeSkillValueToRange Parms{};

	Parms.SkillValue = SkillValue;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function IndianaFormulas_BP.IndianaFormulas_BP_C.ConversationAttributeNearMissThreshold
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UIndianaFormulas_BP_C::ConversationAttributeNearMissThreshold() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IndianaFormulas_BP_C", "ConversationAttributeNearMissThreshold");

	Params::IndianaFormulas_BP_C_ConversationAttributeNearMissThreshold Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function IndianaFormulas_BP.IndianaFormulas_BP_C.ConversationNearMissMaxOptions
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UIndianaFormulas_BP_C::ConversationNearMissMaxOptions() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IndianaFormulas_BP_C", "ConversationNearMissMaxOptions");

	Params::IndianaFormulas_BP_C_ConversationNearMissMaxOptions Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function IndianaFormulas_BP.IndianaFormulas_BP_C.GetDisguiseDrainRate
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// int32                                   StealthSkill                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bMoving                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bSprinting                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bCrouching                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UIndianaFormulas_BP_C::GetDisguiseDrainRate(int32 StealthSkill, bool bMoving, bool bSprinting, bool bCrouching) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IndianaFormulas_BP_C", "GetDisguiseDrainRate");

	Params::IndianaFormulas_BP_C_GetDisguiseDrainRate Parms{};

	Parms.StealthSkill = StealthSkill;
	Parms.bMoving = bMoving;
	Parms.bSprinting = bSprinting;
	Parms.bCrouching = bCrouching;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function IndianaFormulas_BP.IndianaFormulas_BP_C.HackRobotTime
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// uint8                                   ExactHackDifficulty                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PlayerHackSkill                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

uint8 UIndianaFormulas_BP_C::HackRobotTime(uint8 ExactHackDifficulty, int32 PlayerHackSkill) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IndianaFormulas_BP_C", "HackRobotTime");

	Params::IndianaFormulas_BP_C_HackRobotTime Parms{};

	Parms.ExactHackDifficulty = ExactHackDifficulty;
	Parms.PlayerHackSkill = PlayerHackSkill;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function IndianaFormulas_BP.IndianaFormulas_BP_C.OCLToughness
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// int32                                   Difficulty                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PlayerSkill                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

uint8 UIndianaFormulas_BP_C::OCLToughness(int32 Difficulty, int32 PlayerSkill) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IndianaFormulas_BP_C", "OCLToughness");

	Params::IndianaFormulas_BP_C_OCLToughness Parms{};

	Parms.Difficulty = Difficulty;
	Parms.PlayerSkill = PlayerSkill;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function IndianaFormulas_BP.IndianaFormulas_BP_C.CanUseOCL
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// int32                                   Difficulty                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PlayerSkill                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MaxDelta                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UIndianaFormulas_BP_C::CanUseOCL(int32 Difficulty, int32 PlayerSkill, int32 MaxDelta) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IndianaFormulas_BP_C", "CanUseOCL");

	Params::IndianaFormulas_BP_C_CanUseOCL Parms{};

	Parms.Difficulty = Difficulty;
	Parms.PlayerSkill = PlayerSkill;
	Parms.MaxDelta = MaxDelta;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function IndianaFormulas_BP.IndianaFormulas_BP_C.BaseRepairPartCost
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// float                                   Durability                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ItemLevel                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UIndianaFormulas_BP_C::BaseRepairPartCost(float Durability, int32 ItemLevel) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IndianaFormulas_BP_C", "BaseRepairPartCost");

	Params::IndianaFormulas_BP_C_BaseRepairPartCost Parms{};

	Parms.Durability = Durability;
	Parms.ItemLevel = ItemLevel;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function IndianaFormulas_BP.IndianaFormulas_BP_C.FieldRepairPartCost
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// float                                   Durability                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ItemLevel                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   EngineerSkill                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UIndianaFormulas_BP_C::FieldRepairPartCost(float Durability, int32 ItemLevel, int32 EngineerSkill) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IndianaFormulas_BP_C", "FieldRepairPartCost");

	Params::IndianaFormulas_BP_C_FieldRepairPartCost Parms{};

	Parms.Durability = Durability;
	Parms.ItemLevel = ItemLevel;
	Parms.EngineerSkill = EngineerSkill;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function IndianaFormulas_BP.IndianaFormulas_BP_C.WorkbenchRepairPartCost
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// float                                   Durability                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ItemLevel                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   EngineerSkill                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UIndianaFormulas_BP_C::WorkbenchRepairPartCost(float Durability, int32 ItemLevel, int32 EngineerSkill) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IndianaFormulas_BP_C", "WorkbenchRepairPartCost");

	Params::IndianaFormulas_BP_C_WorkbenchRepairPartCost Parms{};

	Parms.Durability = Durability;
	Parms.ItemLevel = ItemLevel;
	Parms.EngineerSkill = EngineerSkill;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function IndianaFormulas_BP.IndianaFormulas_BP_C.VendorRepairCurrencyCost
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// float                                   Durability                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ItemLevel                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UIndianaFormulas_BP_C::VendorRepairCurrencyCost(float Durability, int32 ItemLevel) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IndianaFormulas_BP_C", "VendorRepairCurrencyCost");

	Params::IndianaFormulas_BP_C_VendorRepairCurrencyCost Parms{};

	Parms.Durability = Durability;
	Parms.ItemLevel = ItemLevel;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function IndianaFormulas_BP.IndianaFormulas_BP_C.GetRespecCost
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// int32                                   NumRespecs                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UIndianaFormulas_BP_C::GetRespecCost(int32 NumRespecs) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IndianaFormulas_BP_C", "GetRespecCost");

	Params::IndianaFormulas_BP_C_GetRespecCost Parms{};

	Parms.NumRespecs = NumRespecs;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function IndianaFormulas_BP.IndianaFormulas_BP_C.GetOCLSkillCheckValue
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// uint8                                   OCLDifficulty                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   OCLSkillCheckValue                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UIndianaFormulas_BP_C::GetOCLSkillCheckValue(uint8 OCLDifficulty, uint8* OCLSkillCheckValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IndianaFormulas_BP_C", "GetOCLSkillCheckValue");

	Params::IndianaFormulas_BP_C_GetOCLSkillCheckValue Parms{};

	Parms.OCLDifficulty = OCLDifficulty;

	UObject::ProcessEvent(Func, &Parms);

	if (OCLSkillCheckValue != nullptr)
		*OCLSkillCheckValue = Parms.OCLSkillCheckValue;
}

}

