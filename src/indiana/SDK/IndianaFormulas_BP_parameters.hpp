#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: IndianaFormulas_BP

#include "Basic.hpp"

#include "Indiana_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function IndianaFormulas_BP.IndianaFormulas_BP_C.LockpickToughness
// 0x0014 (0x0014 - 0x0000)
struct IndianaFormulas_BP_C_LockpickToughness final
{
public:
	uint8                                         ExactLockpickDifficulty;                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerLockpickSkill;                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_OCLToughness_ReturnValue;                 // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IndianaFormulas_BP_C_LockpickToughness) == 0x000004, "Wrong alignment on IndianaFormulas_BP_C_LockpickToughness");
static_assert(sizeof(IndianaFormulas_BP_C_LockpickToughness) == 0x000014, "Wrong size on IndianaFormulas_BP_C_LockpickToughness");
static_assert(offsetof(IndianaFormulas_BP_C_LockpickToughness, ExactLockpickDifficulty) == 0x000000, "Member 'IndianaFormulas_BP_C_LockpickToughness::ExactLockpickDifficulty' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_LockpickToughness, PlayerLockpickSkill) == 0x000004, "Member 'IndianaFormulas_BP_C_LockpickToughness::PlayerLockpickSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_LockpickToughness, ReturnValue) == 0x000008, "Member 'IndianaFormulas_BP_C_LockpickToughness::ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_LockpickToughness, CallFunc_Conv_ByteToInt_ReturnValue) == 0x00000C, "Member 'IndianaFormulas_BP_C_LockpickToughness::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_LockpickToughness, CallFunc_OCLToughness_ReturnValue) == 0x000010, "Member 'IndianaFormulas_BP_C_LockpickToughness::CallFunc_OCLToughness_ReturnValue' has a wrong offset!");

// Function IndianaFormulas_BP.IndianaFormulas_BP_C.LockpickTime
// 0x0024 (0x0024 - 0x0000)
struct IndianaFormulas_BP_C_LockpickTime final
{
public:
	uint8                                         ExactLockpickDifficulty;                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerLockpickSkill;                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BasePlayerLockpickSkill;                           // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeToPick;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_LockpickToughness_ReturnValue;            // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_ByteToFloat_ReturnValue;             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IndianaFormulas_BP_C_LockpickTime) == 0x000004, "Wrong alignment on IndianaFormulas_BP_C_LockpickTime");
static_assert(sizeof(IndianaFormulas_BP_C_LockpickTime) == 0x000024, "Wrong size on IndianaFormulas_BP_C_LockpickTime");
static_assert(offsetof(IndianaFormulas_BP_C_LockpickTime, ExactLockpickDifficulty) == 0x000000, "Member 'IndianaFormulas_BP_C_LockpickTime::ExactLockpickDifficulty' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_LockpickTime, PlayerLockpickSkill) == 0x000004, "Member 'IndianaFormulas_BP_C_LockpickTime::PlayerLockpickSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_LockpickTime, BasePlayerLockpickSkill) == 0x000008, "Member 'IndianaFormulas_BP_C_LockpickTime::BasePlayerLockpickSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_LockpickTime, ReturnValue) == 0x00000C, "Member 'IndianaFormulas_BP_C_LockpickTime::ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_LockpickTime, TimeToPick) == 0x000010, "Member 'IndianaFormulas_BP_C_LockpickTime::TimeToPick' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_LockpickTime, CallFunc_LockpickToughness_ReturnValue) == 0x000014, "Member 'IndianaFormulas_BP_C_LockpickTime::CallFunc_LockpickToughness_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_LockpickTime, CallFunc_Less_IntInt_ReturnValue) == 0x000015, "Member 'IndianaFormulas_BP_C_LockpickTime::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_LockpickTime, CallFunc_Conv_ByteToFloat_ReturnValue) == 0x000018, "Member 'IndianaFormulas_BP_C_LockpickTime::CallFunc_Conv_ByteToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_LockpickTime, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00001C, "Member 'IndianaFormulas_BP_C_LockpickTime::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_LockpickTime, CallFunc_FMax_ReturnValue) == 0x000020, "Member 'IndianaFormulas_BP_C_LockpickTime::CallFunc_FMax_ReturnValue' has a wrong offset!");

// Function IndianaFormulas_BP.IndianaFormulas_BP_C.LockpickNoise
// 0x0018 (0x0018 - 0x0000)
struct IndianaFormulas_BP_C_LockpickNoise final
{
public:
	uint8                                         ExactLockpickDifficulty;                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerLockpickSkill;                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_LockpickToughness_ReturnValue;            // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_ByteToFloat_ReturnValue;             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IndianaFormulas_BP_C_LockpickNoise) == 0x000004, "Wrong alignment on IndianaFormulas_BP_C_LockpickNoise");
static_assert(sizeof(IndianaFormulas_BP_C_LockpickNoise) == 0x000018, "Wrong size on IndianaFormulas_BP_C_LockpickNoise");
static_assert(offsetof(IndianaFormulas_BP_C_LockpickNoise, ExactLockpickDifficulty) == 0x000000, "Member 'IndianaFormulas_BP_C_LockpickNoise::ExactLockpickDifficulty' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_LockpickNoise, PlayerLockpickSkill) == 0x000004, "Member 'IndianaFormulas_BP_C_LockpickNoise::PlayerLockpickSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_LockpickNoise, ReturnValue) == 0x000008, "Member 'IndianaFormulas_BP_C_LockpickNoise::ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_LockpickNoise, CallFunc_LockpickToughness_ReturnValue) == 0x00000C, "Member 'IndianaFormulas_BP_C_LockpickNoise::CallFunc_LockpickToughness_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_LockpickNoise, CallFunc_Conv_ByteToFloat_ReturnValue) == 0x000010, "Member 'IndianaFormulas_BP_C_LockpickNoise::CallFunc_Conv_ByteToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_LockpickNoise, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000014, "Member 'IndianaFormulas_BP_C_LockpickNoise::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");

// Function IndianaFormulas_BP.IndianaFormulas_BP_C.LockpickNumResources
// 0x0014 (0x0014 - 0x0000)
struct IndianaFormulas_BP_C_LockpickNumResources final
{
public:
	uint8                                         ExactLockpickDifficulty;                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerLockpickSkill;                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BasePlayerLockpickSkill;                           // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         NumLockpicks;                                      // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_LockpickToughness_ReturnValue;            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IndianaFormulas_BP_C_LockpickNumResources) == 0x000004, "Wrong alignment on IndianaFormulas_BP_C_LockpickNumResources");
static_assert(sizeof(IndianaFormulas_BP_C_LockpickNumResources) == 0x000014, "Wrong size on IndianaFormulas_BP_C_LockpickNumResources");
static_assert(offsetof(IndianaFormulas_BP_C_LockpickNumResources, ExactLockpickDifficulty) == 0x000000, "Member 'IndianaFormulas_BP_C_LockpickNumResources::ExactLockpickDifficulty' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_LockpickNumResources, PlayerLockpickSkill) == 0x000004, "Member 'IndianaFormulas_BP_C_LockpickNumResources::PlayerLockpickSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_LockpickNumResources, BasePlayerLockpickSkill) == 0x000008, "Member 'IndianaFormulas_BP_C_LockpickNumResources::BasePlayerLockpickSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_LockpickNumResources, ReturnValue) == 0x00000C, "Member 'IndianaFormulas_BP_C_LockpickNumResources::ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_LockpickNumResources, NumLockpicks) == 0x00000D, "Member 'IndianaFormulas_BP_C_LockpickNumResources::NumLockpicks' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_LockpickNumResources, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00000E, "Member 'IndianaFormulas_BP_C_LockpickNumResources::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_LockpickNumResources, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00000F, "Member 'IndianaFormulas_BP_C_LockpickNumResources::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_LockpickNumResources, CallFunc_LockpickToughness_ReturnValue) == 0x000010, "Member 'IndianaFormulas_BP_C_LockpickNumResources::CallFunc_LockpickToughness_ReturnValue' has a wrong offset!");

// Function IndianaFormulas_BP.IndianaFormulas_BP_C.CanLockpick
// 0x0018 (0x0018 - 0x0000)
struct IndianaFormulas_BP_C_CanLockpick final
{
public:
	uint8                                         ExactLockpickDifficulty;                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerLockpickSkill;                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue_1;             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanUseOCL_ReturnValue;                    // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(IndianaFormulas_BP_C_CanLockpick) == 0x000004, "Wrong alignment on IndianaFormulas_BP_C_CanLockpick");
static_assert(sizeof(IndianaFormulas_BP_C_CanLockpick) == 0x000018, "Wrong size on IndianaFormulas_BP_C_CanLockpick");
static_assert(offsetof(IndianaFormulas_BP_C_CanLockpick, ExactLockpickDifficulty) == 0x000000, "Member 'IndianaFormulas_BP_C_CanLockpick::ExactLockpickDifficulty' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_CanLockpick, PlayerLockpickSkill) == 0x000004, "Member 'IndianaFormulas_BP_C_CanLockpick::PlayerLockpickSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_CanLockpick, ReturnValue) == 0x000008, "Member 'IndianaFormulas_BP_C_CanLockpick::ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_CanLockpick, CallFunc_Conv_ByteToInt_ReturnValue) == 0x00000C, "Member 'IndianaFormulas_BP_C_CanLockpick::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_CanLockpick, CallFunc_Conv_ByteToInt_ReturnValue_1) == 0x000010, "Member 'IndianaFormulas_BP_C_CanLockpick::CallFunc_Conv_ByteToInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_CanLockpick, CallFunc_CanUseOCL_ReturnValue) == 0x000014, "Member 'IndianaFormulas_BP_C_CanLockpick::CallFunc_CanUseOCL_ReturnValue' has a wrong offset!");

// Function IndianaFormulas_BP.IndianaFormulas_BP_C.LockpickDifficultyFullRange
// 0x0003 (0x0003 - 0x0000)
struct IndianaFormulas_BP_C_LockpickDifficultyFullRange final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Subtract_ByteByte_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Add_ByteByte_ReturnValue;                 // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IndianaFormulas_BP_C_LockpickDifficultyFullRange) == 0x000001, "Wrong alignment on IndianaFormulas_BP_C_LockpickDifficultyFullRange");
static_assert(sizeof(IndianaFormulas_BP_C_LockpickDifficultyFullRange) == 0x000003, "Wrong size on IndianaFormulas_BP_C_LockpickDifficultyFullRange");
static_assert(offsetof(IndianaFormulas_BP_C_LockpickDifficultyFullRange, ReturnValue) == 0x000000, "Member 'IndianaFormulas_BP_C_LockpickDifficultyFullRange::ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_LockpickDifficultyFullRange, CallFunc_Subtract_ByteByte_ReturnValue) == 0x000001, "Member 'IndianaFormulas_BP_C_LockpickDifficultyFullRange::CallFunc_Subtract_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_LockpickDifficultyFullRange, CallFunc_Add_ByteByte_ReturnValue) == 0x000002, "Member 'IndianaFormulas_BP_C_LockpickDifficultyFullRange::CallFunc_Add_ByteByte_ReturnValue' has a wrong offset!");

// Function IndianaFormulas_BP.IndianaFormulas_BP_C.LockpickDifficultyNumRanges
// 0x0003 (0x0003 - 0x0000)
struct IndianaFormulas_BP_C_LockpickDifficultyNumRanges final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Add_ByteByte_ReturnValue;                 // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IndianaFormulas_BP_C_LockpickDifficultyNumRanges) == 0x000001, "Wrong alignment on IndianaFormulas_BP_C_LockpickDifficultyNumRanges");
static_assert(sizeof(IndianaFormulas_BP_C_LockpickDifficultyNumRanges) == 0x000003, "Wrong size on IndianaFormulas_BP_C_LockpickDifficultyNumRanges");
static_assert(offsetof(IndianaFormulas_BP_C_LockpickDifficultyNumRanges, ReturnValue) == 0x000000, "Member 'IndianaFormulas_BP_C_LockpickDifficultyNumRanges::ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_LockpickDifficultyNumRanges, CallFunc_MakeLiteralByte_ReturnValue) == 0x000001, "Member 'IndianaFormulas_BP_C_LockpickDifficultyNumRanges::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_LockpickDifficultyNumRanges, CallFunc_Add_ByteByte_ReturnValue) == 0x000002, "Member 'IndianaFormulas_BP_C_LockpickDifficultyNumRanges::CallFunc_Add_ByteByte_ReturnValue' has a wrong offset!");

// Function IndianaFormulas_BP.IndianaFormulas_BP_C.LockpickDifficultyRange
// 0x0014 (0x0014 - 0x0000)
struct IndianaFormulas_BP_C_LockpickDifficultyRange final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_LockpickDifficultyNumRanges_ReturnValue;  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_LockpickDifficultyFullRange_ReturnValue;  // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_ByteToFloat_ReturnValue;             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_ByteToFloat_ReturnValue_1;           // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IndianaFormulas_BP_C_LockpickDifficultyRange) == 0x000004, "Wrong alignment on IndianaFormulas_BP_C_LockpickDifficultyRange");
static_assert(sizeof(IndianaFormulas_BP_C_LockpickDifficultyRange) == 0x000014, "Wrong size on IndianaFormulas_BP_C_LockpickDifficultyRange");
static_assert(offsetof(IndianaFormulas_BP_C_LockpickDifficultyRange, ReturnValue) == 0x000000, "Member 'IndianaFormulas_BP_C_LockpickDifficultyRange::ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_LockpickDifficultyRange, CallFunc_LockpickDifficultyNumRanges_ReturnValue) == 0x000004, "Member 'IndianaFormulas_BP_C_LockpickDifficultyRange::CallFunc_LockpickDifficultyNumRanges_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_LockpickDifficultyRange, CallFunc_LockpickDifficultyFullRange_ReturnValue) == 0x000005, "Member 'IndianaFormulas_BP_C_LockpickDifficultyRange::CallFunc_LockpickDifficultyFullRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_LockpickDifficultyRange, CallFunc_Conv_ByteToFloat_ReturnValue) == 0x000008, "Member 'IndianaFormulas_BP_C_LockpickDifficultyRange::CallFunc_Conv_ByteToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_LockpickDifficultyRange, CallFunc_Conv_ByteToFloat_ReturnValue_1) == 0x00000C, "Member 'IndianaFormulas_BP_C_LockpickDifficultyRange::CallFunc_Conv_ByteToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_LockpickDifficultyRange, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000010, "Member 'IndianaFormulas_BP_C_LockpickDifficultyRange::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");

// Function IndianaFormulas_BP.IndianaFormulas_BP_C.ComputeExactLockpickDifficulty
// 0x000C (0x000C - 0x0000)
struct IndianaFormulas_BP_C_ComputeExactLockpickDifficulty final
{
public:
	EOCLDifficulty                                LockpickDifficulty;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SkillCheck;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetOCLSkillCheckValue_OCLSkillCheckValue; // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IndianaFormulas_BP_C_ComputeExactLockpickDifficulty) == 0x000004, "Wrong alignment on IndianaFormulas_BP_C_ComputeExactLockpickDifficulty");
static_assert(sizeof(IndianaFormulas_BP_C_ComputeExactLockpickDifficulty) == 0x00000C, "Wrong size on IndianaFormulas_BP_C_ComputeExactLockpickDifficulty");
static_assert(offsetof(IndianaFormulas_BP_C_ComputeExactLockpickDifficulty, LockpickDifficulty) == 0x000000, "Member 'IndianaFormulas_BP_C_ComputeExactLockpickDifficulty::LockpickDifficulty' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_ComputeExactLockpickDifficulty, ReturnValue) == 0x000001, "Member 'IndianaFormulas_BP_C_ComputeExactLockpickDifficulty::ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_ComputeExactLockpickDifficulty, SkillCheck) == 0x000004, "Member 'IndianaFormulas_BP_C_ComputeExactLockpickDifficulty::SkillCheck' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_ComputeExactLockpickDifficulty, CallFunc_GetOCLSkillCheckValue_OCLSkillCheckValue) == 0x000008, "Member 'IndianaFormulas_BP_C_ComputeExactLockpickDifficulty::CallFunc_GetOCLSkillCheckValue_OCLSkillCheckValue' has a wrong offset!");

// Function IndianaFormulas_BP.IndianaFormulas_BP_C.HackToughness
// 0x0014 (0x0014 - 0x0000)
struct IndianaFormulas_BP_C_HackToughness final
{
public:
	uint8                                         ExactHackDifficulty;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerHackSkill;                                   // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_OCLToughness_ReturnValue;                 // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IndianaFormulas_BP_C_HackToughness) == 0x000004, "Wrong alignment on IndianaFormulas_BP_C_HackToughness");
static_assert(sizeof(IndianaFormulas_BP_C_HackToughness) == 0x000014, "Wrong size on IndianaFormulas_BP_C_HackToughness");
static_assert(offsetof(IndianaFormulas_BP_C_HackToughness, ExactHackDifficulty) == 0x000000, "Member 'IndianaFormulas_BP_C_HackToughness::ExactHackDifficulty' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_HackToughness, PlayerHackSkill) == 0x000004, "Member 'IndianaFormulas_BP_C_HackToughness::PlayerHackSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_HackToughness, ReturnValue) == 0x000008, "Member 'IndianaFormulas_BP_C_HackToughness::ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_HackToughness, CallFunc_Conv_ByteToInt_ReturnValue) == 0x00000C, "Member 'IndianaFormulas_BP_C_HackToughness::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_HackToughness, CallFunc_OCLToughness_ReturnValue) == 0x000010, "Member 'IndianaFormulas_BP_C_HackToughness::CallFunc_OCLToughness_ReturnValue' has a wrong offset!");

// Function IndianaFormulas_BP.IndianaFormulas_BP_C.HackNumResources
// 0x000C (0x000C - 0x0000)
struct IndianaFormulas_BP_C_HackNumResources final
{
public:
	uint8                                         ExactHackDifficulty;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerHackSkill;                                   // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_HackToughness_ReturnValue;                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Multiply_ByteByte_ReturnValue;            // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IndianaFormulas_BP_C_HackNumResources) == 0x000004, "Wrong alignment on IndianaFormulas_BP_C_HackNumResources");
static_assert(sizeof(IndianaFormulas_BP_C_HackNumResources) == 0x00000C, "Wrong size on IndianaFormulas_BP_C_HackNumResources");
static_assert(offsetof(IndianaFormulas_BP_C_HackNumResources, ExactHackDifficulty) == 0x000000, "Member 'IndianaFormulas_BP_C_HackNumResources::ExactHackDifficulty' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_HackNumResources, PlayerHackSkill) == 0x000004, "Member 'IndianaFormulas_BP_C_HackNumResources::PlayerHackSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_HackNumResources, ReturnValue) == 0x000008, "Member 'IndianaFormulas_BP_C_HackNumResources::ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_HackNumResources, CallFunc_HackToughness_ReturnValue) == 0x000009, "Member 'IndianaFormulas_BP_C_HackNumResources::CallFunc_HackToughness_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_HackNumResources, CallFunc_Multiply_ByteByte_ReturnValue) == 0x00000A, "Member 'IndianaFormulas_BP_C_HackNumResources::CallFunc_Multiply_ByteByte_ReturnValue' has a wrong offset!");

// Function IndianaFormulas_BP.IndianaFormulas_BP_C.HackTime
// 0x000C (0x000C - 0x0000)
struct IndianaFormulas_BP_C_HackTime final
{
public:
	uint8                                         ExactHackDifficulty;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerHackSkill;                                   // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_HackToughness_ReturnValue;                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Multiply_ByteByte_ReturnValue;            // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IndianaFormulas_BP_C_HackTime) == 0x000004, "Wrong alignment on IndianaFormulas_BP_C_HackTime");
static_assert(sizeof(IndianaFormulas_BP_C_HackTime) == 0x00000C, "Wrong size on IndianaFormulas_BP_C_HackTime");
static_assert(offsetof(IndianaFormulas_BP_C_HackTime, ExactHackDifficulty) == 0x000000, "Member 'IndianaFormulas_BP_C_HackTime::ExactHackDifficulty' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_HackTime, PlayerHackSkill) == 0x000004, "Member 'IndianaFormulas_BP_C_HackTime::PlayerHackSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_HackTime, ReturnValue) == 0x000008, "Member 'IndianaFormulas_BP_C_HackTime::ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_HackTime, CallFunc_HackToughness_ReturnValue) == 0x000009, "Member 'IndianaFormulas_BP_C_HackTime::CallFunc_HackToughness_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_HackTime, CallFunc_Multiply_ByteByte_ReturnValue) == 0x00000A, "Member 'IndianaFormulas_BP_C_HackTime::CallFunc_Multiply_ByteByte_ReturnValue' has a wrong offset!");

// Function IndianaFormulas_BP.IndianaFormulas_BP_C.HackNoise
// 0x0018 (0x0018 - 0x0000)
struct IndianaFormulas_BP_C_HackNoise final
{
public:
	uint8                                         ExactHackDifficulty;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerHackSkill;                                   // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_HackToughness_ReturnValue;                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_ByteToFloat_ReturnValue;             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IndianaFormulas_BP_C_HackNoise) == 0x000004, "Wrong alignment on IndianaFormulas_BP_C_HackNoise");
static_assert(sizeof(IndianaFormulas_BP_C_HackNoise) == 0x000018, "Wrong size on IndianaFormulas_BP_C_HackNoise");
static_assert(offsetof(IndianaFormulas_BP_C_HackNoise, ExactHackDifficulty) == 0x000000, "Member 'IndianaFormulas_BP_C_HackNoise::ExactHackDifficulty' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_HackNoise, PlayerHackSkill) == 0x000004, "Member 'IndianaFormulas_BP_C_HackNoise::PlayerHackSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_HackNoise, ReturnValue) == 0x000008, "Member 'IndianaFormulas_BP_C_HackNoise::ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_HackNoise, CallFunc_HackToughness_ReturnValue) == 0x00000C, "Member 'IndianaFormulas_BP_C_HackNoise::CallFunc_HackToughness_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_HackNoise, CallFunc_Conv_ByteToFloat_ReturnValue) == 0x000010, "Member 'IndianaFormulas_BP_C_HackNoise::CallFunc_Conv_ByteToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_HackNoise, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000014, "Member 'IndianaFormulas_BP_C_HackNoise::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");

// Function IndianaFormulas_BP.IndianaFormulas_BP_C.HackDifficultyRange
// 0x0014 (0x0014 - 0x0000)
struct IndianaFormulas_BP_C_HackDifficultyRange final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_HackDifficultyNumRanges_ReturnValue;      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_HackDifficultyFullRange_ReturnValue;      // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_ByteToFloat_ReturnValue;             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_ByteToFloat_ReturnValue_1;           // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IndianaFormulas_BP_C_HackDifficultyRange) == 0x000004, "Wrong alignment on IndianaFormulas_BP_C_HackDifficultyRange");
static_assert(sizeof(IndianaFormulas_BP_C_HackDifficultyRange) == 0x000014, "Wrong size on IndianaFormulas_BP_C_HackDifficultyRange");
static_assert(offsetof(IndianaFormulas_BP_C_HackDifficultyRange, ReturnValue) == 0x000000, "Member 'IndianaFormulas_BP_C_HackDifficultyRange::ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_HackDifficultyRange, CallFunc_HackDifficultyNumRanges_ReturnValue) == 0x000004, "Member 'IndianaFormulas_BP_C_HackDifficultyRange::CallFunc_HackDifficultyNumRanges_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_HackDifficultyRange, CallFunc_HackDifficultyFullRange_ReturnValue) == 0x000005, "Member 'IndianaFormulas_BP_C_HackDifficultyRange::CallFunc_HackDifficultyFullRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_HackDifficultyRange, CallFunc_Conv_ByteToFloat_ReturnValue) == 0x000008, "Member 'IndianaFormulas_BP_C_HackDifficultyRange::CallFunc_Conv_ByteToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_HackDifficultyRange, CallFunc_Conv_ByteToFloat_ReturnValue_1) == 0x00000C, "Member 'IndianaFormulas_BP_C_HackDifficultyRange::CallFunc_Conv_ByteToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_HackDifficultyRange, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000010, "Member 'IndianaFormulas_BP_C_HackDifficultyRange::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");

// Function IndianaFormulas_BP.IndianaFormulas_BP_C.HackDifficultyNumRanges
// 0x0003 (0x0003 - 0x0000)
struct IndianaFormulas_BP_C_HackDifficultyNumRanges final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Add_ByteByte_ReturnValue;                 // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IndianaFormulas_BP_C_HackDifficultyNumRanges) == 0x000001, "Wrong alignment on IndianaFormulas_BP_C_HackDifficultyNumRanges");
static_assert(sizeof(IndianaFormulas_BP_C_HackDifficultyNumRanges) == 0x000003, "Wrong size on IndianaFormulas_BP_C_HackDifficultyNumRanges");
static_assert(offsetof(IndianaFormulas_BP_C_HackDifficultyNumRanges, ReturnValue) == 0x000000, "Member 'IndianaFormulas_BP_C_HackDifficultyNumRanges::ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_HackDifficultyNumRanges, CallFunc_MakeLiteralByte_ReturnValue) == 0x000001, "Member 'IndianaFormulas_BP_C_HackDifficultyNumRanges::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_HackDifficultyNumRanges, CallFunc_Add_ByteByte_ReturnValue) == 0x000002, "Member 'IndianaFormulas_BP_C_HackDifficultyNumRanges::CallFunc_Add_ByteByte_ReturnValue' has a wrong offset!");

// Function IndianaFormulas_BP.IndianaFormulas_BP_C.HackDifficultyFullRange
// 0x0003 (0x0003 - 0x0000)
struct IndianaFormulas_BP_C_HackDifficultyFullRange final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Subtract_ByteByte_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Add_ByteByte_ReturnValue;                 // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IndianaFormulas_BP_C_HackDifficultyFullRange) == 0x000001, "Wrong alignment on IndianaFormulas_BP_C_HackDifficultyFullRange");
static_assert(sizeof(IndianaFormulas_BP_C_HackDifficultyFullRange) == 0x000003, "Wrong size on IndianaFormulas_BP_C_HackDifficultyFullRange");
static_assert(offsetof(IndianaFormulas_BP_C_HackDifficultyFullRange, ReturnValue) == 0x000000, "Member 'IndianaFormulas_BP_C_HackDifficultyFullRange::ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_HackDifficultyFullRange, CallFunc_Subtract_ByteByte_ReturnValue) == 0x000001, "Member 'IndianaFormulas_BP_C_HackDifficultyFullRange::CallFunc_Subtract_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_HackDifficultyFullRange, CallFunc_Add_ByteByte_ReturnValue) == 0x000002, "Member 'IndianaFormulas_BP_C_HackDifficultyFullRange::CallFunc_Add_ByteByte_ReturnValue' has a wrong offset!");

// Function IndianaFormulas_BP.IndianaFormulas_BP_C.ComputeExactHackDifficulty
// 0x0003 (0x0003 - 0x0000)
struct IndianaFormulas_BP_C_ComputeExactHackDifficulty final
{
public:
	EOCLDifficulty                                HackDifficulty;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetOCLSkillCheckValue_OCLSkillCheckValue; // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IndianaFormulas_BP_C_ComputeExactHackDifficulty) == 0x000001, "Wrong alignment on IndianaFormulas_BP_C_ComputeExactHackDifficulty");
static_assert(sizeof(IndianaFormulas_BP_C_ComputeExactHackDifficulty) == 0x000003, "Wrong size on IndianaFormulas_BP_C_ComputeExactHackDifficulty");
static_assert(offsetof(IndianaFormulas_BP_C_ComputeExactHackDifficulty, HackDifficulty) == 0x000000, "Member 'IndianaFormulas_BP_C_ComputeExactHackDifficulty::HackDifficulty' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_ComputeExactHackDifficulty, ReturnValue) == 0x000001, "Member 'IndianaFormulas_BP_C_ComputeExactHackDifficulty::ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_ComputeExactHackDifficulty, CallFunc_GetOCLSkillCheckValue_OCLSkillCheckValue) == 0x000002, "Member 'IndianaFormulas_BP_C_ComputeExactHackDifficulty::CallFunc_GetOCLSkillCheckValue_OCLSkillCheckValue' has a wrong offset!");

// Function IndianaFormulas_BP.IndianaFormulas_BP_C.CanHack
// 0x0018 (0x0018 - 0x0000)
struct IndianaFormulas_BP_C_CanHack final
{
public:
	uint8                                         ExactComputerDifficulty;                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerHackSkill;                                   // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue_1;             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanUseOCL_ReturnValue;                    // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(IndianaFormulas_BP_C_CanHack) == 0x000004, "Wrong alignment on IndianaFormulas_BP_C_CanHack");
static_assert(sizeof(IndianaFormulas_BP_C_CanHack) == 0x000018, "Wrong size on IndianaFormulas_BP_C_CanHack");
static_assert(offsetof(IndianaFormulas_BP_C_CanHack, ExactComputerDifficulty) == 0x000000, "Member 'IndianaFormulas_BP_C_CanHack::ExactComputerDifficulty' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_CanHack, PlayerHackSkill) == 0x000004, "Member 'IndianaFormulas_BP_C_CanHack::PlayerHackSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_CanHack, ReturnValue) == 0x000008, "Member 'IndianaFormulas_BP_C_CanHack::ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_CanHack, CallFunc_Conv_ByteToInt_ReturnValue) == 0x00000C, "Member 'IndianaFormulas_BP_C_CanHack::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_CanHack, CallFunc_Conv_ByteToInt_ReturnValue_1) == 0x000010, "Member 'IndianaFormulas_BP_C_CanHack::CallFunc_Conv_ByteToInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_CanHack, CallFunc_CanUseOCL_ReturnValue) == 0x000014, "Member 'IndianaFormulas_BP_C_CanHack::CallFunc_CanUseOCL_ReturnValue' has a wrong offset!");

// Function IndianaFormulas_BP.IndianaFormulas_BP_C.TrapToughness
// 0x0014 (0x0014 - 0x0000)
struct IndianaFormulas_BP_C_TrapToughness final
{
public:
	uint8                                         ExactTrapDifficulty;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerEngineeringSkill;                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_OCLToughness_ReturnValue;                 // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IndianaFormulas_BP_C_TrapToughness) == 0x000004, "Wrong alignment on IndianaFormulas_BP_C_TrapToughness");
static_assert(sizeof(IndianaFormulas_BP_C_TrapToughness) == 0x000014, "Wrong size on IndianaFormulas_BP_C_TrapToughness");
static_assert(offsetof(IndianaFormulas_BP_C_TrapToughness, ExactTrapDifficulty) == 0x000000, "Member 'IndianaFormulas_BP_C_TrapToughness::ExactTrapDifficulty' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_TrapToughness, PlayerEngineeringSkill) == 0x000004, "Member 'IndianaFormulas_BP_C_TrapToughness::PlayerEngineeringSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_TrapToughness, ReturnValue) == 0x000008, "Member 'IndianaFormulas_BP_C_TrapToughness::ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_TrapToughness, CallFunc_Conv_ByteToInt_ReturnValue) == 0x00000C, "Member 'IndianaFormulas_BP_C_TrapToughness::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_TrapToughness, CallFunc_OCLToughness_ReturnValue) == 0x000010, "Member 'IndianaFormulas_BP_C_TrapToughness::CallFunc_OCLToughness_ReturnValue' has a wrong offset!");

// Function IndianaFormulas_BP.IndianaFormulas_BP_C.ArmTime
// 0x000C (0x000C - 0x0000)
struct IndianaFormulas_BP_C_ArmTime final
{
public:
	uint8                                         ExactTrapDifficulty;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerEngineeringSkill;                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_TrapToughness_ReturnValue;                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Multiply_ByteByte_ReturnValue;            // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IndianaFormulas_BP_C_ArmTime) == 0x000004, "Wrong alignment on IndianaFormulas_BP_C_ArmTime");
static_assert(sizeof(IndianaFormulas_BP_C_ArmTime) == 0x00000C, "Wrong size on IndianaFormulas_BP_C_ArmTime");
static_assert(offsetof(IndianaFormulas_BP_C_ArmTime, ExactTrapDifficulty) == 0x000000, "Member 'IndianaFormulas_BP_C_ArmTime::ExactTrapDifficulty' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_ArmTime, PlayerEngineeringSkill) == 0x000004, "Member 'IndianaFormulas_BP_C_ArmTime::PlayerEngineeringSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_ArmTime, ReturnValue) == 0x000008, "Member 'IndianaFormulas_BP_C_ArmTime::ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_ArmTime, CallFunc_TrapToughness_ReturnValue) == 0x000009, "Member 'IndianaFormulas_BP_C_ArmTime::CallFunc_TrapToughness_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_ArmTime, CallFunc_Multiply_ByteByte_ReturnValue) == 0x00000A, "Member 'IndianaFormulas_BP_C_ArmTime::CallFunc_Multiply_ByteByte_ReturnValue' has a wrong offset!");

// Function IndianaFormulas_BP.IndianaFormulas_BP_C.DisarmTime
// 0x000C (0x000C - 0x0000)
struct IndianaFormulas_BP_C_DisarmTime final
{
public:
	uint8                                         ExactTrapDifficulty;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerEngineeringSkill;                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_TrapToughness_ReturnValue;                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Multiply_ByteByte_ReturnValue;            // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IndianaFormulas_BP_C_DisarmTime) == 0x000004, "Wrong alignment on IndianaFormulas_BP_C_DisarmTime");
static_assert(sizeof(IndianaFormulas_BP_C_DisarmTime) == 0x00000C, "Wrong size on IndianaFormulas_BP_C_DisarmTime");
static_assert(offsetof(IndianaFormulas_BP_C_DisarmTime, ExactTrapDifficulty) == 0x000000, "Member 'IndianaFormulas_BP_C_DisarmTime::ExactTrapDifficulty' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_DisarmTime, PlayerEngineeringSkill) == 0x000004, "Member 'IndianaFormulas_BP_C_DisarmTime::PlayerEngineeringSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_DisarmTime, ReturnValue) == 0x000008, "Member 'IndianaFormulas_BP_C_DisarmTime::ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_DisarmTime, CallFunc_TrapToughness_ReturnValue) == 0x000009, "Member 'IndianaFormulas_BP_C_DisarmTime::CallFunc_TrapToughness_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_DisarmTime, CallFunc_Multiply_ByteByte_ReturnValue) == 0x00000A, "Member 'IndianaFormulas_BP_C_DisarmTime::CallFunc_Multiply_ByteByte_ReturnValue' has a wrong offset!");

// Function IndianaFormulas_BP.IndianaFormulas_BP_C.TrapArmNoise
// 0x0018 (0x0018 - 0x0000)
struct IndianaFormulas_BP_C_TrapArmNoise final
{
public:
	uint8                                         ExactTrapDifficulty;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerEngineeringSkill;                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_TrapToughness_ReturnValue;                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_ByteToFloat_ReturnValue;             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IndianaFormulas_BP_C_TrapArmNoise) == 0x000004, "Wrong alignment on IndianaFormulas_BP_C_TrapArmNoise");
static_assert(sizeof(IndianaFormulas_BP_C_TrapArmNoise) == 0x000018, "Wrong size on IndianaFormulas_BP_C_TrapArmNoise");
static_assert(offsetof(IndianaFormulas_BP_C_TrapArmNoise, ExactTrapDifficulty) == 0x000000, "Member 'IndianaFormulas_BP_C_TrapArmNoise::ExactTrapDifficulty' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_TrapArmNoise, PlayerEngineeringSkill) == 0x000004, "Member 'IndianaFormulas_BP_C_TrapArmNoise::PlayerEngineeringSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_TrapArmNoise, ReturnValue) == 0x000008, "Member 'IndianaFormulas_BP_C_TrapArmNoise::ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_TrapArmNoise, CallFunc_TrapToughness_ReturnValue) == 0x00000C, "Member 'IndianaFormulas_BP_C_TrapArmNoise::CallFunc_TrapToughness_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_TrapArmNoise, CallFunc_Conv_ByteToFloat_ReturnValue) == 0x000010, "Member 'IndianaFormulas_BP_C_TrapArmNoise::CallFunc_Conv_ByteToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_TrapArmNoise, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000014, "Member 'IndianaFormulas_BP_C_TrapArmNoise::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");

// Function IndianaFormulas_BP.IndianaFormulas_BP_C.TrapDisarmNoise
// 0x0018 (0x0018 - 0x0000)
struct IndianaFormulas_BP_C_TrapDisarmNoise final
{
public:
	uint8                                         ExactTrapDifficulty;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerEngineeringSkill;                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_TrapToughness_ReturnValue;                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_ByteToFloat_ReturnValue;             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IndianaFormulas_BP_C_TrapDisarmNoise) == 0x000004, "Wrong alignment on IndianaFormulas_BP_C_TrapDisarmNoise");
static_assert(sizeof(IndianaFormulas_BP_C_TrapDisarmNoise) == 0x000018, "Wrong size on IndianaFormulas_BP_C_TrapDisarmNoise");
static_assert(offsetof(IndianaFormulas_BP_C_TrapDisarmNoise, ExactTrapDifficulty) == 0x000000, "Member 'IndianaFormulas_BP_C_TrapDisarmNoise::ExactTrapDifficulty' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_TrapDisarmNoise, PlayerEngineeringSkill) == 0x000004, "Member 'IndianaFormulas_BP_C_TrapDisarmNoise::PlayerEngineeringSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_TrapDisarmNoise, ReturnValue) == 0x000008, "Member 'IndianaFormulas_BP_C_TrapDisarmNoise::ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_TrapDisarmNoise, CallFunc_TrapToughness_ReturnValue) == 0x00000C, "Member 'IndianaFormulas_BP_C_TrapDisarmNoise::CallFunc_TrapToughness_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_TrapDisarmNoise, CallFunc_Conv_ByteToFloat_ReturnValue) == 0x000010, "Member 'IndianaFormulas_BP_C_TrapDisarmNoise::CallFunc_Conv_ByteToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_TrapDisarmNoise, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000014, "Member 'IndianaFormulas_BP_C_TrapDisarmNoise::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");

// Function IndianaFormulas_BP.IndianaFormulas_BP_C.CanArm
// 0x0018 (0x0018 - 0x0000)
struct IndianaFormulas_BP_C_CanArm final
{
public:
	uint8                                         ExactTrapDifficulty;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerEngineeringSkill;                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue_1;             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanUseOCL_ReturnValue;                    // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(IndianaFormulas_BP_C_CanArm) == 0x000004, "Wrong alignment on IndianaFormulas_BP_C_CanArm");
static_assert(sizeof(IndianaFormulas_BP_C_CanArm) == 0x000018, "Wrong size on IndianaFormulas_BP_C_CanArm");
static_assert(offsetof(IndianaFormulas_BP_C_CanArm, ExactTrapDifficulty) == 0x000000, "Member 'IndianaFormulas_BP_C_CanArm::ExactTrapDifficulty' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_CanArm, PlayerEngineeringSkill) == 0x000004, "Member 'IndianaFormulas_BP_C_CanArm::PlayerEngineeringSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_CanArm, ReturnValue) == 0x000008, "Member 'IndianaFormulas_BP_C_CanArm::ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_CanArm, CallFunc_Conv_ByteToInt_ReturnValue) == 0x00000C, "Member 'IndianaFormulas_BP_C_CanArm::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_CanArm, CallFunc_Conv_ByteToInt_ReturnValue_1) == 0x000010, "Member 'IndianaFormulas_BP_C_CanArm::CallFunc_Conv_ByteToInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_CanArm, CallFunc_CanUseOCL_ReturnValue) == 0x000014, "Member 'IndianaFormulas_BP_C_CanArm::CallFunc_CanUseOCL_ReturnValue' has a wrong offset!");

// Function IndianaFormulas_BP.IndianaFormulas_BP_C.CanDisarm
// 0x0018 (0x0018 - 0x0000)
struct IndianaFormulas_BP_C_CanDisarm final
{
public:
	uint8                                         ExactTrapDifficulty;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerEngineeringSkill;                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue_1;             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanUseOCL_ReturnValue;                    // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(IndianaFormulas_BP_C_CanDisarm) == 0x000004, "Wrong alignment on IndianaFormulas_BP_C_CanDisarm");
static_assert(sizeof(IndianaFormulas_BP_C_CanDisarm) == 0x000018, "Wrong size on IndianaFormulas_BP_C_CanDisarm");
static_assert(offsetof(IndianaFormulas_BP_C_CanDisarm, ExactTrapDifficulty) == 0x000000, "Member 'IndianaFormulas_BP_C_CanDisarm::ExactTrapDifficulty' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_CanDisarm, PlayerEngineeringSkill) == 0x000004, "Member 'IndianaFormulas_BP_C_CanDisarm::PlayerEngineeringSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_CanDisarm, ReturnValue) == 0x000008, "Member 'IndianaFormulas_BP_C_CanDisarm::ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_CanDisarm, CallFunc_Conv_ByteToInt_ReturnValue) == 0x00000C, "Member 'IndianaFormulas_BP_C_CanDisarm::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_CanDisarm, CallFunc_Conv_ByteToInt_ReturnValue_1) == 0x000010, "Member 'IndianaFormulas_BP_C_CanDisarm::CallFunc_Conv_ByteToInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_CanDisarm, CallFunc_CanUseOCL_ReturnValue) == 0x000014, "Member 'IndianaFormulas_BP_C_CanDisarm::CallFunc_CanUseOCL_ReturnValue' has a wrong offset!");

// Function IndianaFormulas_BP.IndianaFormulas_BP_C.ComputeExactTrapDifficulty
// 0x0003 (0x0003 - 0x0000)
struct IndianaFormulas_BP_C_ComputeExactTrapDifficulty final
{
public:
	ETrapDifficulty                               TrapDifficulty;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetOCLSkillCheckValue_OCLSkillCheckValue; // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IndianaFormulas_BP_C_ComputeExactTrapDifficulty) == 0x000001, "Wrong alignment on IndianaFormulas_BP_C_ComputeExactTrapDifficulty");
static_assert(sizeof(IndianaFormulas_BP_C_ComputeExactTrapDifficulty) == 0x000003, "Wrong size on IndianaFormulas_BP_C_ComputeExactTrapDifficulty");
static_assert(offsetof(IndianaFormulas_BP_C_ComputeExactTrapDifficulty, TrapDifficulty) == 0x000000, "Member 'IndianaFormulas_BP_C_ComputeExactTrapDifficulty::TrapDifficulty' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_ComputeExactTrapDifficulty, ReturnValue) == 0x000001, "Member 'IndianaFormulas_BP_C_ComputeExactTrapDifficulty::ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_ComputeExactTrapDifficulty, CallFunc_GetOCLSkillCheckValue_OCLSkillCheckValue) == 0x000002, "Member 'IndianaFormulas_BP_C_ComputeExactTrapDifficulty::CallFunc_GetOCLSkillCheckValue_OCLSkillCheckValue' has a wrong offset!");

// Function IndianaFormulas_BP.IndianaFormulas_BP_C.TrapDifficultyFullRange
// 0x0003 (0x0003 - 0x0000)
struct IndianaFormulas_BP_C_TrapDifficultyFullRange final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Subtract_ByteByte_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Add_ByteByte_ReturnValue;                 // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IndianaFormulas_BP_C_TrapDifficultyFullRange) == 0x000001, "Wrong alignment on IndianaFormulas_BP_C_TrapDifficultyFullRange");
static_assert(sizeof(IndianaFormulas_BP_C_TrapDifficultyFullRange) == 0x000003, "Wrong size on IndianaFormulas_BP_C_TrapDifficultyFullRange");
static_assert(offsetof(IndianaFormulas_BP_C_TrapDifficultyFullRange, ReturnValue) == 0x000000, "Member 'IndianaFormulas_BP_C_TrapDifficultyFullRange::ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_TrapDifficultyFullRange, CallFunc_Subtract_ByteByte_ReturnValue) == 0x000001, "Member 'IndianaFormulas_BP_C_TrapDifficultyFullRange::CallFunc_Subtract_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_TrapDifficultyFullRange, CallFunc_Add_ByteByte_ReturnValue) == 0x000002, "Member 'IndianaFormulas_BP_C_TrapDifficultyFullRange::CallFunc_Add_ByteByte_ReturnValue' has a wrong offset!");

// Function IndianaFormulas_BP.IndianaFormulas_BP_C.TrapDifficultyNumRanges
// 0x0003 (0x0003 - 0x0000)
struct IndianaFormulas_BP_C_TrapDifficultyNumRanges final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Add_ByteByte_ReturnValue;                 // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IndianaFormulas_BP_C_TrapDifficultyNumRanges) == 0x000001, "Wrong alignment on IndianaFormulas_BP_C_TrapDifficultyNumRanges");
static_assert(sizeof(IndianaFormulas_BP_C_TrapDifficultyNumRanges) == 0x000003, "Wrong size on IndianaFormulas_BP_C_TrapDifficultyNumRanges");
static_assert(offsetof(IndianaFormulas_BP_C_TrapDifficultyNumRanges, ReturnValue) == 0x000000, "Member 'IndianaFormulas_BP_C_TrapDifficultyNumRanges::ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_TrapDifficultyNumRanges, CallFunc_MakeLiteralByte_ReturnValue) == 0x000001, "Member 'IndianaFormulas_BP_C_TrapDifficultyNumRanges::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_TrapDifficultyNumRanges, CallFunc_Add_ByteByte_ReturnValue) == 0x000002, "Member 'IndianaFormulas_BP_C_TrapDifficultyNumRanges::CallFunc_Add_ByteByte_ReturnValue' has a wrong offset!");

// Function IndianaFormulas_BP.IndianaFormulas_BP_C.TrapDifficultyRange
// 0x0014 (0x0014 - 0x0000)
struct IndianaFormulas_BP_C_TrapDifficultyRange final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_TrapDifficultyNumRanges_ReturnValue;      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_TrapDifficultyFullRange_ReturnValue;      // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_ByteToFloat_ReturnValue;             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_ByteToFloat_ReturnValue_1;           // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IndianaFormulas_BP_C_TrapDifficultyRange) == 0x000004, "Wrong alignment on IndianaFormulas_BP_C_TrapDifficultyRange");
static_assert(sizeof(IndianaFormulas_BP_C_TrapDifficultyRange) == 0x000014, "Wrong size on IndianaFormulas_BP_C_TrapDifficultyRange");
static_assert(offsetof(IndianaFormulas_BP_C_TrapDifficultyRange, ReturnValue) == 0x000000, "Member 'IndianaFormulas_BP_C_TrapDifficultyRange::ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_TrapDifficultyRange, CallFunc_TrapDifficultyNumRanges_ReturnValue) == 0x000004, "Member 'IndianaFormulas_BP_C_TrapDifficultyRange::CallFunc_TrapDifficultyNumRanges_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_TrapDifficultyRange, CallFunc_TrapDifficultyFullRange_ReturnValue) == 0x000005, "Member 'IndianaFormulas_BP_C_TrapDifficultyRange::CallFunc_TrapDifficultyFullRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_TrapDifficultyRange, CallFunc_Conv_ByteToFloat_ReturnValue) == 0x000008, "Member 'IndianaFormulas_BP_C_TrapDifficultyRange::CallFunc_Conv_ByteToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_TrapDifficultyRange, CallFunc_Conv_ByteToFloat_ReturnValue_1) == 0x00000C, "Member 'IndianaFormulas_BP_C_TrapDifficultyRange::CallFunc_Conv_ByteToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_TrapDifficultyRange, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000010, "Member 'IndianaFormulas_BP_C_TrapDifficultyRange::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");

// Function IndianaFormulas_BP.IndianaFormulas_BP_C.TrapDamagePercent
// 0x0018 (0x0018 - 0x0000)
struct IndianaFormulas_BP_C_TrapDamagePercent final
{
public:
	ETrapDifficulty                               TrapDifficulty;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IndianaFormulas_BP_C_TrapDamagePercent) == 0x000004, "Wrong alignment on IndianaFormulas_BP_C_TrapDamagePercent");
static_assert(sizeof(IndianaFormulas_BP_C_TrapDamagePercent) == 0x000018, "Wrong size on IndianaFormulas_BP_C_TrapDamagePercent");
static_assert(offsetof(IndianaFormulas_BP_C_TrapDamagePercent, TrapDifficulty) == 0x000000, "Member 'IndianaFormulas_BP_C_TrapDamagePercent::TrapDifficulty' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_TrapDamagePercent, ReturnValue) == 0x000004, "Member 'IndianaFormulas_BP_C_TrapDamagePercent::ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_TrapDamagePercent, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000008, "Member 'IndianaFormulas_BP_C_TrapDamagePercent::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_TrapDamagePercent, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'IndianaFormulas_BP_C_TrapDamagePercent::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_TrapDamagePercent, CallFunc_Multiply_IntInt_ReturnValue) == 0x000010, "Member 'IndianaFormulas_BP_C_TrapDamagePercent::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_TrapDamagePercent, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000014, "Member 'IndianaFormulas_BP_C_TrapDamagePercent::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");

// Function IndianaFormulas_BP.IndianaFormulas_BP_C.PlayerSneakEnemyDetectionRage
// 0x000C (0x000C - 0x0000)
struct IndianaFormulas_BP_C_PlayerSneakEnemyDetectionRage final
{
public:
	bool                                          bInterior;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerSneakSkill;                                  // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IndianaFormulas_BP_C_PlayerSneakEnemyDetectionRage) == 0x000004, "Wrong alignment on IndianaFormulas_BP_C_PlayerSneakEnemyDetectionRage");
static_assert(sizeof(IndianaFormulas_BP_C_PlayerSneakEnemyDetectionRage) == 0x00000C, "Wrong size on IndianaFormulas_BP_C_PlayerSneakEnemyDetectionRage");
static_assert(offsetof(IndianaFormulas_BP_C_PlayerSneakEnemyDetectionRage, bInterior) == 0x000000, "Member 'IndianaFormulas_BP_C_PlayerSneakEnemyDetectionRage::bInterior' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_PlayerSneakEnemyDetectionRage, PlayerSneakSkill) == 0x000004, "Member 'IndianaFormulas_BP_C_PlayerSneakEnemyDetectionRage::PlayerSneakSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_PlayerSneakEnemyDetectionRage, ReturnValue) == 0x000008, "Member 'IndianaFormulas_BP_C_PlayerSneakEnemyDetectionRage::ReturnValue' has a wrong offset!");

// Function IndianaFormulas_BP.IndianaFormulas_BP_C.ComputeSkillPointsForPrimaryAttribute
// 0x0010 (0x0010 - 0x0000)
struct IndianaFormulas_BP_C_ComputeSkillPointsForPrimaryAttribute final
{
public:
	uint8                                         AttributeRank;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(IndianaFormulas_BP_C_ComputeSkillPointsForPrimaryAttribute) == 0x000004, "Wrong alignment on IndianaFormulas_BP_C_ComputeSkillPointsForPrimaryAttribute");
static_assert(sizeof(IndianaFormulas_BP_C_ComputeSkillPointsForPrimaryAttribute) == 0x000010, "Wrong size on IndianaFormulas_BP_C_ComputeSkillPointsForPrimaryAttribute");
static_assert(offsetof(IndianaFormulas_BP_C_ComputeSkillPointsForPrimaryAttribute, AttributeRank) == 0x000000, "Member 'IndianaFormulas_BP_C_ComputeSkillPointsForPrimaryAttribute::AttributeRank' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_ComputeSkillPointsForPrimaryAttribute, ReturnValue) == 0x000004, "Member 'IndianaFormulas_BP_C_ComputeSkillPointsForPrimaryAttribute::ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_ComputeSkillPointsForPrimaryAttribute, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000008, "Member 'IndianaFormulas_BP_C_ComputeSkillPointsForPrimaryAttribute::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_ComputeSkillPointsForPrimaryAttribute, K2Node_SwitchInteger_CmpSuccess) == 0x00000C, "Member 'IndianaFormulas_BP_C_ComputeSkillPointsForPrimaryAttribute::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");

// Function IndianaFormulas_BP.IndianaFormulas_BP_C.ComputeSkillPointsForSecondaryAttribute
// 0x0010 (0x0010 - 0x0000)
struct IndianaFormulas_BP_C_ComputeSkillPointsForSecondaryAttribute final
{
public:
	uint8                                         AttributeRank;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(IndianaFormulas_BP_C_ComputeSkillPointsForSecondaryAttribute) == 0x000004, "Wrong alignment on IndianaFormulas_BP_C_ComputeSkillPointsForSecondaryAttribute");
static_assert(sizeof(IndianaFormulas_BP_C_ComputeSkillPointsForSecondaryAttribute) == 0x000010, "Wrong size on IndianaFormulas_BP_C_ComputeSkillPointsForSecondaryAttribute");
static_assert(offsetof(IndianaFormulas_BP_C_ComputeSkillPointsForSecondaryAttribute, AttributeRank) == 0x000000, "Member 'IndianaFormulas_BP_C_ComputeSkillPointsForSecondaryAttribute::AttributeRank' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_ComputeSkillPointsForSecondaryAttribute, ReturnValue) == 0x000004, "Member 'IndianaFormulas_BP_C_ComputeSkillPointsForSecondaryAttribute::ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_ComputeSkillPointsForSecondaryAttribute, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000008, "Member 'IndianaFormulas_BP_C_ComputeSkillPointsForSecondaryAttribute::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_ComputeSkillPointsForSecondaryAttribute, K2Node_SwitchInteger_CmpSuccess) == 0x00000C, "Member 'IndianaFormulas_BP_C_ComputeSkillPointsForSecondaryAttribute::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");

// Function IndianaFormulas_BP.IndianaFormulas_BP_C.ComputeFallingDamagePercent
// 0x0038 (0x0038 - 0x0000)
struct IndianaFormulas_BP_C_ComputeFallingDamagePercent final
{
public:
	float                                         DistanceFallen;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Distance_Fallen;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            DamageCurve;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxFallingDistance;                                // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinFallingDistance;                                // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(IndianaFormulas_BP_C_ComputeFallingDamagePercent) == 0x000008, "Wrong alignment on IndianaFormulas_BP_C_ComputeFallingDamagePercent");
static_assert(sizeof(IndianaFormulas_BP_C_ComputeFallingDamagePercent) == 0x000038, "Wrong size on IndianaFormulas_BP_C_ComputeFallingDamagePercent");
static_assert(offsetof(IndianaFormulas_BP_C_ComputeFallingDamagePercent, DistanceFallen) == 0x000000, "Member 'IndianaFormulas_BP_C_ComputeFallingDamagePercent::DistanceFallen' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_ComputeFallingDamagePercent, ReturnValue) == 0x000004, "Member 'IndianaFormulas_BP_C_ComputeFallingDamagePercent::ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_ComputeFallingDamagePercent, Distance_Fallen) == 0x000008, "Member 'IndianaFormulas_BP_C_ComputeFallingDamagePercent::Distance_Fallen' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_ComputeFallingDamagePercent, DamageCurve) == 0x000010, "Member 'IndianaFormulas_BP_C_ComputeFallingDamagePercent::DamageCurve' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_ComputeFallingDamagePercent, MaxFallingDistance) == 0x000018, "Member 'IndianaFormulas_BP_C_ComputeFallingDamagePercent::MaxFallingDistance' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_ComputeFallingDamagePercent, MinFallingDistance) == 0x00001C, "Member 'IndianaFormulas_BP_C_ComputeFallingDamagePercent::MinFallingDistance' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_ComputeFallingDamagePercent, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000020, "Member 'IndianaFormulas_BP_C_ComputeFallingDamagePercent::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_ComputeFallingDamagePercent, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000024, "Member 'IndianaFormulas_BP_C_ComputeFallingDamagePercent::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_ComputeFallingDamagePercent, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000028, "Member 'IndianaFormulas_BP_C_ComputeFallingDamagePercent::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_ComputeFallingDamagePercent, CallFunc_GetFloatValue_ReturnValue) == 0x00002C, "Member 'IndianaFormulas_BP_C_ComputeFallingDamagePercent::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_ComputeFallingDamagePercent, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000030, "Member 'IndianaFormulas_BP_C_ComputeFallingDamagePercent::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_ComputeFallingDamagePercent, CallFunc_Less_FloatFloat_ReturnValue) == 0x000031, "Member 'IndianaFormulas_BP_C_ComputeFallingDamagePercent::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");

// Function IndianaFormulas_BP.IndianaFormulas_BP_C.PickPocketTime
// 0x0028 (0x0028 - 0x0000)
struct IndianaFormulas_BP_C_PickPocketTime final
{
public:
	int32                                         LockpickSkill;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TargetPerception;                                  // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PerceptionAdd;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PerceptionMultiplier;                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Skill;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Divisor;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Dividend;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Multiply_ByteByte_ReturnValue;            // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_HackToughness_ReturnValue;                // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_ByteToFloat_ReturnValue;             // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IndianaFormulas_BP_C_PickPocketTime) == 0x000004, "Wrong alignment on IndianaFormulas_BP_C_PickPocketTime");
static_assert(sizeof(IndianaFormulas_BP_C_PickPocketTime) == 0x000028, "Wrong size on IndianaFormulas_BP_C_PickPocketTime");
static_assert(offsetof(IndianaFormulas_BP_C_PickPocketTime, LockpickSkill) == 0x000000, "Member 'IndianaFormulas_BP_C_PickPocketTime::LockpickSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_PickPocketTime, TargetPerception) == 0x000004, "Member 'IndianaFormulas_BP_C_PickPocketTime::TargetPerception' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_PickPocketTime, ReturnValue) == 0x000008, "Member 'IndianaFormulas_BP_C_PickPocketTime::ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_PickPocketTime, PerceptionAdd) == 0x00000C, "Member 'IndianaFormulas_BP_C_PickPocketTime::PerceptionAdd' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_PickPocketTime, PerceptionMultiplier) == 0x000010, "Member 'IndianaFormulas_BP_C_PickPocketTime::PerceptionMultiplier' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_PickPocketTime, Skill) == 0x000014, "Member 'IndianaFormulas_BP_C_PickPocketTime::Skill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_PickPocketTime, Divisor) == 0x000018, "Member 'IndianaFormulas_BP_C_PickPocketTime::Divisor' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_PickPocketTime, Dividend) == 0x00001C, "Member 'IndianaFormulas_BP_C_PickPocketTime::Dividend' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_PickPocketTime, CallFunc_Conv_IntToByte_ReturnValue) == 0x000020, "Member 'IndianaFormulas_BP_C_PickPocketTime::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_PickPocketTime, CallFunc_Multiply_ByteByte_ReturnValue) == 0x000021, "Member 'IndianaFormulas_BP_C_PickPocketTime::CallFunc_Multiply_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_PickPocketTime, CallFunc_HackToughness_ReturnValue) == 0x000022, "Member 'IndianaFormulas_BP_C_PickPocketTime::CallFunc_HackToughness_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_PickPocketTime, CallFunc_Conv_ByteToFloat_ReturnValue) == 0x000024, "Member 'IndianaFormulas_BP_C_PickPocketTime::CallFunc_Conv_ByteToFloat_ReturnValue' has a wrong offset!");

// Function IndianaFormulas_BP.IndianaFormulas_BP_C.ShouldDrawFireSwitchCompanionTargets
// 0x001C (0x001C - 0x0000)
struct IndianaFormulas_BP_C_ShouldDrawFireSwitchCompanionTargets final
{
public:
	float                                         OldHealth;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OldDTBody;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OldDTHead;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NewHealth;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NewDTBody;                                         // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NewDTHead;                                         // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(IndianaFormulas_BP_C_ShouldDrawFireSwitchCompanionTargets) == 0x000004, "Wrong alignment on IndianaFormulas_BP_C_ShouldDrawFireSwitchCompanionTargets");
static_assert(sizeof(IndianaFormulas_BP_C_ShouldDrawFireSwitchCompanionTargets) == 0x00001C, "Wrong size on IndianaFormulas_BP_C_ShouldDrawFireSwitchCompanionTargets");
static_assert(offsetof(IndianaFormulas_BP_C_ShouldDrawFireSwitchCompanionTargets, OldHealth) == 0x000000, "Member 'IndianaFormulas_BP_C_ShouldDrawFireSwitchCompanionTargets::OldHealth' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_ShouldDrawFireSwitchCompanionTargets, OldDTBody) == 0x000004, "Member 'IndianaFormulas_BP_C_ShouldDrawFireSwitchCompanionTargets::OldDTBody' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_ShouldDrawFireSwitchCompanionTargets, OldDTHead) == 0x000008, "Member 'IndianaFormulas_BP_C_ShouldDrawFireSwitchCompanionTargets::OldDTHead' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_ShouldDrawFireSwitchCompanionTargets, NewHealth) == 0x00000C, "Member 'IndianaFormulas_BP_C_ShouldDrawFireSwitchCompanionTargets::NewHealth' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_ShouldDrawFireSwitchCompanionTargets, NewDTBody) == 0x000010, "Member 'IndianaFormulas_BP_C_ShouldDrawFireSwitchCompanionTargets::NewDTBody' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_ShouldDrawFireSwitchCompanionTargets, NewDTHead) == 0x000014, "Member 'IndianaFormulas_BP_C_ShouldDrawFireSwitchCompanionTargets::NewDTHead' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_ShouldDrawFireSwitchCompanionTargets, ReturnValue) == 0x000018, "Member 'IndianaFormulas_BP_C_ShouldDrawFireSwitchCompanionTargets::ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_ShouldDrawFireSwitchCompanionTargets, CallFunc_Less_FloatFloat_ReturnValue) == 0x000019, "Member 'IndianaFormulas_BP_C_ShouldDrawFireSwitchCompanionTargets::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");

// Function IndianaFormulas_BP.IndianaFormulas_BP_C.CalculateIntialMorale
// 0x0008 (0x0008 - 0x0000)
struct IndianaFormulas_BP_C_CalculateIntialMorale final
{
public:
	int32                                         TemperamentAttribute;                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IndianaFormulas_BP_C_CalculateIntialMorale) == 0x000004, "Wrong alignment on IndianaFormulas_BP_C_CalculateIntialMorale");
static_assert(sizeof(IndianaFormulas_BP_C_CalculateIntialMorale) == 0x000008, "Wrong size on IndianaFormulas_BP_C_CalculateIntialMorale");
static_assert(offsetof(IndianaFormulas_BP_C_CalculateIntialMorale, TemperamentAttribute) == 0x000000, "Member 'IndianaFormulas_BP_C_CalculateIntialMorale::TemperamentAttribute' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_CalculateIntialMorale, ReturnValue) == 0x000004, "Member 'IndianaFormulas_BP_C_CalculateIntialMorale::ReturnValue' has a wrong offset!");

// Function IndianaFormulas_BP.IndianaFormulas_BP_C.CalculateMoraleAdjustment
// 0x0010 (0x0010 - 0x0000)
struct IndianaFormulas_BP_C_CalculateMoraleAdjustment final
{
public:
	float                                         AddedMoral;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CharmAttribute;                                    // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TemperamentAttribute;                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IndianaFormulas_BP_C_CalculateMoraleAdjustment) == 0x000004, "Wrong alignment on IndianaFormulas_BP_C_CalculateMoraleAdjustment");
static_assert(sizeof(IndianaFormulas_BP_C_CalculateMoraleAdjustment) == 0x000010, "Wrong size on IndianaFormulas_BP_C_CalculateMoraleAdjustment");
static_assert(offsetof(IndianaFormulas_BP_C_CalculateMoraleAdjustment, AddedMoral) == 0x000000, "Member 'IndianaFormulas_BP_C_CalculateMoraleAdjustment::AddedMoral' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_CalculateMoraleAdjustment, CharmAttribute) == 0x000004, "Member 'IndianaFormulas_BP_C_CalculateMoraleAdjustment::CharmAttribute' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_CalculateMoraleAdjustment, TemperamentAttribute) == 0x000008, "Member 'IndianaFormulas_BP_C_CalculateMoraleAdjustment::TemperamentAttribute' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_CalculateMoraleAdjustment, ReturnValue) == 0x00000C, "Member 'IndianaFormulas_BP_C_CalculateMoraleAdjustment::ReturnValue' has a wrong offset!");

// Function IndianaFormulas_BP.IndianaFormulas_BP_C.GetInterrogationBribeAmount
// 0x00C4 (0x00C4 - 0x0000)
struct IndianaFormulas_BP_C_GetInterrogationBribeAmount final
{
public:
	ECrimeType                                    CrimeType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bRestrictedArea;                                   // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDisguised;                                        // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DisguiseInterrogationsPassed;                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PlayerLevel;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MerchantSkill;                                     // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         StolenItemsValue;                                  // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InterrogationBribeDifficulty;                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InterrogationBribeAmt;                             // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_MakeLiteralFloat_ReturnValue;             // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FCeil_ReturnValue;                        // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_2;            // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue;                        // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue_1;              // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue_1;            // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_3;            // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue_1;                      // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue_2;              // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue_2;            // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue_2;                      // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue_3;                      // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_2;            // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_4;            // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue_3;              // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue_3;            // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue_4;                      // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IndianaFormulas_BP_C_GetInterrogationBribeAmount) == 0x000004, "Wrong alignment on IndianaFormulas_BP_C_GetInterrogationBribeAmount");
static_assert(sizeof(IndianaFormulas_BP_C_GetInterrogationBribeAmount) == 0x0000C4, "Wrong size on IndianaFormulas_BP_C_GetInterrogationBribeAmount");
static_assert(offsetof(IndianaFormulas_BP_C_GetInterrogationBribeAmount, CrimeType) == 0x000000, "Member 'IndianaFormulas_BP_C_GetInterrogationBribeAmount::CrimeType' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetInterrogationBribeAmount, bRestrictedArea) == 0x000001, "Member 'IndianaFormulas_BP_C_GetInterrogationBribeAmount::bRestrictedArea' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetInterrogationBribeAmount, bDisguised) == 0x000002, "Member 'IndianaFormulas_BP_C_GetInterrogationBribeAmount::bDisguised' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetInterrogationBribeAmount, DisguiseInterrogationsPassed) == 0x000004, "Member 'IndianaFormulas_BP_C_GetInterrogationBribeAmount::DisguiseInterrogationsPassed' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetInterrogationBribeAmount, PlayerLevel) == 0x000008, "Member 'IndianaFormulas_BP_C_GetInterrogationBribeAmount::PlayerLevel' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetInterrogationBribeAmount, MerchantSkill) == 0x00000C, "Member 'IndianaFormulas_BP_C_GetInterrogationBribeAmount::MerchantSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetInterrogationBribeAmount, StolenItemsValue) == 0x000010, "Member 'IndianaFormulas_BP_C_GetInterrogationBribeAmount::StolenItemsValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetInterrogationBribeAmount, ReturnValue) == 0x000014, "Member 'IndianaFormulas_BP_C_GetInterrogationBribeAmount::ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetInterrogationBribeAmount, InterrogationBribeDifficulty) == 0x000018, "Member 'IndianaFormulas_BP_C_GetInterrogationBribeAmount::InterrogationBribeDifficulty' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetInterrogationBribeAmount, InterrogationBribeAmt) == 0x00001C, "Member 'IndianaFormulas_BP_C_GetInterrogationBribeAmount::InterrogationBribeAmt' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetInterrogationBribeAmount, K2Node_SwitchEnum_CmpSuccess) == 0x000020, "Member 'IndianaFormulas_BP_C_GetInterrogationBribeAmount::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetInterrogationBribeAmount, K2Node_SwitchInteger_CmpSuccess) == 0x000021, "Member 'IndianaFormulas_BP_C_GetInterrogationBribeAmount::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetInterrogationBribeAmount, CallFunc_MakeLiteralFloat_ReturnValue) == 0x000024, "Member 'IndianaFormulas_BP_C_GetInterrogationBribeAmount::CallFunc_MakeLiteralFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetInterrogationBribeAmount, Temp_int_Variable) == 0x000028, "Member 'IndianaFormulas_BP_C_GetInterrogationBribeAmount::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetInterrogationBribeAmount, CallFunc_Divide_IntInt_ReturnValue) == 0x00002C, "Member 'IndianaFormulas_BP_C_GetInterrogationBribeAmount::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetInterrogationBribeAmount, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000030, "Member 'IndianaFormulas_BP_C_GetInterrogationBribeAmount::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetInterrogationBribeAmount, CallFunc_Subtract_IntInt_ReturnValue) == 0x000034, "Member 'IndianaFormulas_BP_C_GetInterrogationBribeAmount::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetInterrogationBribeAmount, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000038, "Member 'IndianaFormulas_BP_C_GetInterrogationBribeAmount::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetInterrogationBribeAmount, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x00003C, "Member 'IndianaFormulas_BP_C_GetInterrogationBribeAmount::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetInterrogationBribeAmount, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000040, "Member 'IndianaFormulas_BP_C_GetInterrogationBribeAmount::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetInterrogationBribeAmount, CallFunc_Add_FloatFloat_ReturnValue) == 0x000044, "Member 'IndianaFormulas_BP_C_GetInterrogationBribeAmount::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetInterrogationBribeAmount, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000048, "Member 'IndianaFormulas_BP_C_GetInterrogationBribeAmount::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetInterrogationBribeAmount, CallFunc_FCeil_ReturnValue) == 0x00004C, "Member 'IndianaFormulas_BP_C_GetInterrogationBribeAmount::CallFunc_FCeil_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetInterrogationBribeAmount, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000050, "Member 'IndianaFormulas_BP_C_GetInterrogationBribeAmount::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetInterrogationBribeAmount, CallFunc_Add_IntInt_ReturnValue) == 0x000054, "Member 'IndianaFormulas_BP_C_GetInterrogationBribeAmount::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetInterrogationBribeAmount, CallFunc_Add_IntInt_ReturnValue_1) == 0x000058, "Member 'IndianaFormulas_BP_C_GetInterrogationBribeAmount::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetInterrogationBribeAmount, CallFunc_Multiply_IntInt_ReturnValue) == 0x00005C, "Member 'IndianaFormulas_BP_C_GetInterrogationBribeAmount::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetInterrogationBribeAmount, CallFunc_Add_IntInt_ReturnValue_2) == 0x000060, "Member 'IndianaFormulas_BP_C_GetInterrogationBribeAmount::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetInterrogationBribeAmount, CallFunc_Subtract_IntInt_ReturnValue_2) == 0x000064, "Member 'IndianaFormulas_BP_C_GetInterrogationBribeAmount::CallFunc_Subtract_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetInterrogationBribeAmount, CallFunc_Clamp_ReturnValue) == 0x000068, "Member 'IndianaFormulas_BP_C_GetInterrogationBribeAmount::CallFunc_Clamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetInterrogationBribeAmount, CallFunc_Divide_IntInt_ReturnValue_1) == 0x00006C, "Member 'IndianaFormulas_BP_C_GetInterrogationBribeAmount::CallFunc_Divide_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetInterrogationBribeAmount, CallFunc_Multiply_IntInt_ReturnValue_1) == 0x000070, "Member 'IndianaFormulas_BP_C_GetInterrogationBribeAmount::CallFunc_Multiply_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetInterrogationBribeAmount, CallFunc_Add_IntInt_ReturnValue_3) == 0x000074, "Member 'IndianaFormulas_BP_C_GetInterrogationBribeAmount::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetInterrogationBribeAmount, CallFunc_Subtract_IntInt_ReturnValue_3) == 0x000078, "Member 'IndianaFormulas_BP_C_GetInterrogationBribeAmount::CallFunc_Subtract_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetInterrogationBribeAmount, CallFunc_Clamp_ReturnValue_1) == 0x00007C, "Member 'IndianaFormulas_BP_C_GetInterrogationBribeAmount::CallFunc_Clamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetInterrogationBribeAmount, CallFunc_Divide_IntInt_ReturnValue_2) == 0x000080, "Member 'IndianaFormulas_BP_C_GetInterrogationBribeAmount::CallFunc_Divide_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetInterrogationBribeAmount, CallFunc_Multiply_IntInt_ReturnValue_2) == 0x000084, "Member 'IndianaFormulas_BP_C_GetInterrogationBribeAmount::CallFunc_Multiply_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetInterrogationBribeAmount, Temp_int_Variable_1) == 0x000088, "Member 'IndianaFormulas_BP_C_GetInterrogationBribeAmount::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetInterrogationBribeAmount, CallFunc_Add_IntInt_ReturnValue_4) == 0x00008C, "Member 'IndianaFormulas_BP_C_GetInterrogationBribeAmount::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetInterrogationBribeAmount, CallFunc_Clamp_ReturnValue_2) == 0x000090, "Member 'IndianaFormulas_BP_C_GetInterrogationBribeAmount::CallFunc_Clamp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetInterrogationBribeAmount, CallFunc_Clamp_ReturnValue_3) == 0x000094, "Member 'IndianaFormulas_BP_C_GetInterrogationBribeAmount::CallFunc_Clamp_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetInterrogationBribeAmount, CallFunc_Conv_IntToFloat_ReturnValue_2) == 0x000098, "Member 'IndianaFormulas_BP_C_GetInterrogationBribeAmount::CallFunc_Conv_IntToFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetInterrogationBribeAmount, CallFunc_FMin_ReturnValue) == 0x00009C, "Member 'IndianaFormulas_BP_C_GetInterrogationBribeAmount::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetInterrogationBribeAmount, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0000A0, "Member 'IndianaFormulas_BP_C_GetInterrogationBribeAmount::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetInterrogationBribeAmount, CallFunc_Subtract_IntInt_ReturnValue_4) == 0x0000A4, "Member 'IndianaFormulas_BP_C_GetInterrogationBribeAmount::CallFunc_Subtract_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetInterrogationBribeAmount, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0000A8, "Member 'IndianaFormulas_BP_C_GetInterrogationBribeAmount::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetInterrogationBribeAmount, CallFunc_Divide_IntInt_ReturnValue_3) == 0x0000AC, "Member 'IndianaFormulas_BP_C_GetInterrogationBribeAmount::CallFunc_Divide_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetInterrogationBribeAmount, CallFunc_Multiply_IntFloat_ReturnValue) == 0x0000B0, "Member 'IndianaFormulas_BP_C_GetInterrogationBribeAmount::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetInterrogationBribeAmount, CallFunc_Multiply_IntInt_ReturnValue_3) == 0x0000B4, "Member 'IndianaFormulas_BP_C_GetInterrogationBribeAmount::CallFunc_Multiply_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetInterrogationBribeAmount, CallFunc_FTrunc_ReturnValue) == 0x0000B8, "Member 'IndianaFormulas_BP_C_GetInterrogationBribeAmount::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetInterrogationBribeAmount, CallFunc_Add_IntInt_ReturnValue_5) == 0x0000BC, "Member 'IndianaFormulas_BP_C_GetInterrogationBribeAmount::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetInterrogationBribeAmount, CallFunc_Clamp_ReturnValue_4) == 0x0000C0, "Member 'IndianaFormulas_BP_C_GetInterrogationBribeAmount::CallFunc_Clamp_ReturnValue_4' has a wrong offset!");

// Function IndianaFormulas_BP.IndianaFormulas_BP_C.GetBribeAmount
// 0x007C (0x007C - 0x0000)
struct IndianaFormulas_BP_C_GetBribeAmount final
{
public:
	EBribeDifficulty                              BribeDifficulty;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Level;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MerchantSkill;                                     // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BribeAmount;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeLiteralFloat_ReturnValue;             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue;                        // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue_1;            // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue_1;              // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue_1;                      // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue_2;            // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue_2;                      // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_2;            // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue_2;              // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue_3;            // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue_3;                      // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IndianaFormulas_BP_C_GetBribeAmount) == 0x000004, "Wrong alignment on IndianaFormulas_BP_C_GetBribeAmount");
static_assert(sizeof(IndianaFormulas_BP_C_GetBribeAmount) == 0x00007C, "Wrong size on IndianaFormulas_BP_C_GetBribeAmount");
static_assert(offsetof(IndianaFormulas_BP_C_GetBribeAmount, BribeDifficulty) == 0x000000, "Member 'IndianaFormulas_BP_C_GetBribeAmount::BribeDifficulty' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetBribeAmount, Level) == 0x000004, "Member 'IndianaFormulas_BP_C_GetBribeAmount::Level' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetBribeAmount, MerchantSkill) == 0x000008, "Member 'IndianaFormulas_BP_C_GetBribeAmount::MerchantSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetBribeAmount, ReturnValue) == 0x00000C, "Member 'IndianaFormulas_BP_C_GetBribeAmount::ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetBribeAmount, BribeAmount) == 0x000010, "Member 'IndianaFormulas_BP_C_GetBribeAmount::BribeAmount' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetBribeAmount, CallFunc_MakeLiteralFloat_ReturnValue) == 0x000014, "Member 'IndianaFormulas_BP_C_GetBribeAmount::CallFunc_MakeLiteralFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetBribeAmount, K2Node_SwitchEnum_CmpSuccess) == 0x000018, "Member 'IndianaFormulas_BP_C_GetBribeAmount::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetBribeAmount, CallFunc_Conv_IntToFloat_ReturnValue) == 0x00001C, "Member 'IndianaFormulas_BP_C_GetBribeAmount::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetBribeAmount, CallFunc_Subtract_IntInt_ReturnValue) == 0x000020, "Member 'IndianaFormulas_BP_C_GetBribeAmount::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetBribeAmount, CallFunc_FMin_ReturnValue) == 0x000024, "Member 'IndianaFormulas_BP_C_GetBribeAmount::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetBribeAmount, CallFunc_Divide_IntInt_ReturnValue) == 0x000028, "Member 'IndianaFormulas_BP_C_GetBribeAmount::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetBribeAmount, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00002C, "Member 'IndianaFormulas_BP_C_GetBribeAmount::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetBribeAmount, CallFunc_Multiply_IntInt_ReturnValue) == 0x000030, "Member 'IndianaFormulas_BP_C_GetBribeAmount::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetBribeAmount, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000034, "Member 'IndianaFormulas_BP_C_GetBribeAmount::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetBribeAmount, CallFunc_Add_IntInt_ReturnValue) == 0x000038, "Member 'IndianaFormulas_BP_C_GetBribeAmount::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetBribeAmount, CallFunc_Multiply_IntFloat_ReturnValue) == 0x00003C, "Member 'IndianaFormulas_BP_C_GetBribeAmount::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetBribeAmount, CallFunc_Clamp_ReturnValue) == 0x000040, "Member 'IndianaFormulas_BP_C_GetBribeAmount::CallFunc_Clamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetBribeAmount, CallFunc_FTrunc_ReturnValue) == 0x000044, "Member 'IndianaFormulas_BP_C_GetBribeAmount::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetBribeAmount, CallFunc_Multiply_IntInt_ReturnValue_1) == 0x000048, "Member 'IndianaFormulas_BP_C_GetBribeAmount::CallFunc_Multiply_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetBribeAmount, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x00004C, "Member 'IndianaFormulas_BP_C_GetBribeAmount::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetBribeAmount, CallFunc_Add_IntInt_ReturnValue_1) == 0x000050, "Member 'IndianaFormulas_BP_C_GetBribeAmount::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetBribeAmount, CallFunc_Divide_IntInt_ReturnValue_1) == 0x000054, "Member 'IndianaFormulas_BP_C_GetBribeAmount::CallFunc_Divide_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetBribeAmount, CallFunc_Clamp_ReturnValue_1) == 0x000058, "Member 'IndianaFormulas_BP_C_GetBribeAmount::CallFunc_Clamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetBribeAmount, CallFunc_Multiply_IntInt_ReturnValue_2) == 0x00005C, "Member 'IndianaFormulas_BP_C_GetBribeAmount::CallFunc_Multiply_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetBribeAmount, CallFunc_Add_IntInt_ReturnValue_2) == 0x000060, "Member 'IndianaFormulas_BP_C_GetBribeAmount::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetBribeAmount, CallFunc_Clamp_ReturnValue_2) == 0x000064, "Member 'IndianaFormulas_BP_C_GetBribeAmount::CallFunc_Clamp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetBribeAmount, CallFunc_Subtract_IntInt_ReturnValue_2) == 0x000068, "Member 'IndianaFormulas_BP_C_GetBribeAmount::CallFunc_Subtract_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetBribeAmount, CallFunc_Divide_IntInt_ReturnValue_2) == 0x00006C, "Member 'IndianaFormulas_BP_C_GetBribeAmount::CallFunc_Divide_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetBribeAmount, CallFunc_Multiply_IntInt_ReturnValue_3) == 0x000070, "Member 'IndianaFormulas_BP_C_GetBribeAmount::CallFunc_Multiply_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetBribeAmount, CallFunc_Add_IntInt_ReturnValue_3) == 0x000074, "Member 'IndianaFormulas_BP_C_GetBribeAmount::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetBribeAmount, CallFunc_Clamp_ReturnValue_3) == 0x000078, "Member 'IndianaFormulas_BP_C_GetBribeAmount::CallFunc_Clamp_ReturnValue_3' has a wrong offset!");

// Function IndianaFormulas_BP.IndianaFormulas_BP_C.ConversationSkillNearMissThreshold
// 0x0004 (0x0004 - 0x0000)
struct IndianaFormulas_BP_C_ConversationSkillNearMissThreshold final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IndianaFormulas_BP_C_ConversationSkillNearMissThreshold) == 0x000004, "Wrong alignment on IndianaFormulas_BP_C_ConversationSkillNearMissThreshold");
static_assert(sizeof(IndianaFormulas_BP_C_ConversationSkillNearMissThreshold) == 0x000004, "Wrong size on IndianaFormulas_BP_C_ConversationSkillNearMissThreshold");
static_assert(offsetof(IndianaFormulas_BP_C_ConversationSkillNearMissThreshold, ReturnValue) == 0x000000, "Member 'IndianaFormulas_BP_C_ConversationSkillNearMissThreshold::ReturnValue' has a wrong offset!");

// Function IndianaFormulas_BP.IndianaFormulas_BP_C.ComputeSkillValueToRange
// 0x000C (0x000C - 0x0000)
struct IndianaFormulas_BP_C_ComputeSkillValueToRange final
{
public:
	int32                                         SkillValue;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterSkillRange                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterSkillRange                          SkillRange;                                        // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(IndianaFormulas_BP_C_ComputeSkillValueToRange) == 0x000004, "Wrong alignment on IndianaFormulas_BP_C_ComputeSkillValueToRange");
static_assert(sizeof(IndianaFormulas_BP_C_ComputeSkillValueToRange) == 0x00000C, "Wrong size on IndianaFormulas_BP_C_ComputeSkillValueToRange");
static_assert(offsetof(IndianaFormulas_BP_C_ComputeSkillValueToRange, SkillValue) == 0x000000, "Member 'IndianaFormulas_BP_C_ComputeSkillValueToRange::SkillValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_ComputeSkillValueToRange, ReturnValue) == 0x000004, "Member 'IndianaFormulas_BP_C_ComputeSkillValueToRange::ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_ComputeSkillValueToRange, SkillRange) == 0x000005, "Member 'IndianaFormulas_BP_C_ComputeSkillValueToRange::SkillRange' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_ComputeSkillValueToRange, CallFunc_Less_IntInt_ReturnValue) == 0x000006, "Member 'IndianaFormulas_BP_C_ComputeSkillValueToRange::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_ComputeSkillValueToRange, CallFunc_Less_IntInt_ReturnValue_1) == 0x000007, "Member 'IndianaFormulas_BP_C_ComputeSkillValueToRange::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_ComputeSkillValueToRange, CallFunc_Less_IntInt_ReturnValue_2) == 0x000008, "Member 'IndianaFormulas_BP_C_ComputeSkillValueToRange::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");

// Function IndianaFormulas_BP.IndianaFormulas_BP_C.ConversationAttributeNearMissThreshold
// 0x0004 (0x0004 - 0x0000)
struct IndianaFormulas_BP_C_ConversationAttributeNearMissThreshold final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IndianaFormulas_BP_C_ConversationAttributeNearMissThreshold) == 0x000004, "Wrong alignment on IndianaFormulas_BP_C_ConversationAttributeNearMissThreshold");
static_assert(sizeof(IndianaFormulas_BP_C_ConversationAttributeNearMissThreshold) == 0x000004, "Wrong size on IndianaFormulas_BP_C_ConversationAttributeNearMissThreshold");
static_assert(offsetof(IndianaFormulas_BP_C_ConversationAttributeNearMissThreshold, ReturnValue) == 0x000000, "Member 'IndianaFormulas_BP_C_ConversationAttributeNearMissThreshold::ReturnValue' has a wrong offset!");

// Function IndianaFormulas_BP.IndianaFormulas_BP_C.ConversationNearMissMaxOptions
// 0x0004 (0x0004 - 0x0000)
struct IndianaFormulas_BP_C_ConversationNearMissMaxOptions final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IndianaFormulas_BP_C_ConversationNearMissMaxOptions) == 0x000004, "Wrong alignment on IndianaFormulas_BP_C_ConversationNearMissMaxOptions");
static_assert(sizeof(IndianaFormulas_BP_C_ConversationNearMissMaxOptions) == 0x000004, "Wrong size on IndianaFormulas_BP_C_ConversationNearMissMaxOptions");
static_assert(offsetof(IndianaFormulas_BP_C_ConversationNearMissMaxOptions, ReturnValue) == 0x000000, "Member 'IndianaFormulas_BP_C_ConversationNearMissMaxOptions::ReturnValue' has a wrong offset!");

// Function IndianaFormulas_BP.IndianaFormulas_BP_C.GetDisguiseDrainRate
// 0x002C (0x002C - 0x0000)
struct IndianaFormulas_BP_C_GetDisguiseDrainRate final
{
public:
	int32                                         StealthSkill;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bMoving;                                           // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bSprinting;                                        // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bCrouching;                                        // 0x0006(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StealthSkillModifier;                              // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MultipleDetectorDrainRate;                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NearestDetectorDrainRate;                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BaseDrainRate;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IndianaFormulas_BP_C_GetDisguiseDrainRate) == 0x000004, "Wrong alignment on IndianaFormulas_BP_C_GetDisguiseDrainRate");
static_assert(sizeof(IndianaFormulas_BP_C_GetDisguiseDrainRate) == 0x00002C, "Wrong size on IndianaFormulas_BP_C_GetDisguiseDrainRate");
static_assert(offsetof(IndianaFormulas_BP_C_GetDisguiseDrainRate, StealthSkill) == 0x000000, "Member 'IndianaFormulas_BP_C_GetDisguiseDrainRate::StealthSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetDisguiseDrainRate, bMoving) == 0x000004, "Member 'IndianaFormulas_BP_C_GetDisguiseDrainRate::bMoving' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetDisguiseDrainRate, bSprinting) == 0x000005, "Member 'IndianaFormulas_BP_C_GetDisguiseDrainRate::bSprinting' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetDisguiseDrainRate, bCrouching) == 0x000006, "Member 'IndianaFormulas_BP_C_GetDisguiseDrainRate::bCrouching' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetDisguiseDrainRate, ReturnValue) == 0x000008, "Member 'IndianaFormulas_BP_C_GetDisguiseDrainRate::ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetDisguiseDrainRate, StealthSkillModifier) == 0x00000C, "Member 'IndianaFormulas_BP_C_GetDisguiseDrainRate::StealthSkillModifier' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetDisguiseDrainRate, MultipleDetectorDrainRate) == 0x000010, "Member 'IndianaFormulas_BP_C_GetDisguiseDrainRate::MultipleDetectorDrainRate' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetDisguiseDrainRate, NearestDetectorDrainRate) == 0x000014, "Member 'IndianaFormulas_BP_C_GetDisguiseDrainRate::NearestDetectorDrainRate' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetDisguiseDrainRate, BaseDrainRate) == 0x000018, "Member 'IndianaFormulas_BP_C_GetDisguiseDrainRate::BaseDrainRate' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetDisguiseDrainRate, CallFunc_Conv_IntToFloat_ReturnValue) == 0x00001C, "Member 'IndianaFormulas_BP_C_GetDisguiseDrainRate::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetDisguiseDrainRate, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000020, "Member 'IndianaFormulas_BP_C_GetDisguiseDrainRate::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetDisguiseDrainRate, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000024, "Member 'IndianaFormulas_BP_C_GetDisguiseDrainRate::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetDisguiseDrainRate, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000028, "Member 'IndianaFormulas_BP_C_GetDisguiseDrainRate::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function IndianaFormulas_BP.IndianaFormulas_BP_C.HackRobotTime
// 0x000C (0x000C - 0x0000)
struct IndianaFormulas_BP_C_HackRobotTime final
{
public:
	uint8                                         ExactHackDifficulty;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerHackSkill;                                   // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Multiply_ByteByte_ReturnValue;            // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_HackToughness_ReturnValue;                // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IndianaFormulas_BP_C_HackRobotTime) == 0x000004, "Wrong alignment on IndianaFormulas_BP_C_HackRobotTime");
static_assert(sizeof(IndianaFormulas_BP_C_HackRobotTime) == 0x00000C, "Wrong size on IndianaFormulas_BP_C_HackRobotTime");
static_assert(offsetof(IndianaFormulas_BP_C_HackRobotTime, ExactHackDifficulty) == 0x000000, "Member 'IndianaFormulas_BP_C_HackRobotTime::ExactHackDifficulty' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_HackRobotTime, PlayerHackSkill) == 0x000004, "Member 'IndianaFormulas_BP_C_HackRobotTime::PlayerHackSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_HackRobotTime, ReturnValue) == 0x000008, "Member 'IndianaFormulas_BP_C_HackRobotTime::ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_HackRobotTime, CallFunc_Multiply_ByteByte_ReturnValue) == 0x000009, "Member 'IndianaFormulas_BP_C_HackRobotTime::CallFunc_Multiply_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_HackRobotTime, CallFunc_HackToughness_ReturnValue) == 0x00000A, "Member 'IndianaFormulas_BP_C_HackRobotTime::CallFunc_HackToughness_ReturnValue' has a wrong offset!");

// Function IndianaFormulas_BP.IndianaFormulas_BP_C.OCLToughness
// 0x0020 (0x0020 - 0x0000)
struct IndianaFormulas_BP_C_OCLToughness final
{
public:
	int32                                         Difficulty;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PlayerSkill;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue;                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Subtract_ByteByte_ReturnValue;            // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IndianaFormulas_BP_C_OCLToughness) == 0x000004, "Wrong alignment on IndianaFormulas_BP_C_OCLToughness");
static_assert(sizeof(IndianaFormulas_BP_C_OCLToughness) == 0x000020, "Wrong size on IndianaFormulas_BP_C_OCLToughness");
static_assert(offsetof(IndianaFormulas_BP_C_OCLToughness, Difficulty) == 0x000000, "Member 'IndianaFormulas_BP_C_OCLToughness::Difficulty' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_OCLToughness, PlayerSkill) == 0x000004, "Member 'IndianaFormulas_BP_C_OCLToughness::PlayerSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_OCLToughness, ReturnValue) == 0x000008, "Member 'IndianaFormulas_BP_C_OCLToughness::ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_OCLToughness, CallFunc_Subtract_IntInt_ReturnValue) == 0x00000C, "Member 'IndianaFormulas_BP_C_OCLToughness::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_OCLToughness, CallFunc_Max_ReturnValue) == 0x000010, "Member 'IndianaFormulas_BP_C_OCLToughness::CallFunc_Max_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_OCLToughness, CallFunc_Divide_IntInt_ReturnValue) == 0x000014, "Member 'IndianaFormulas_BP_C_OCLToughness::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_OCLToughness, CallFunc_Clamp_ReturnValue) == 0x000018, "Member 'IndianaFormulas_BP_C_OCLToughness::CallFunc_Clamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_OCLToughness, CallFunc_Conv_IntToByte_ReturnValue) == 0x00001C, "Member 'IndianaFormulas_BP_C_OCLToughness::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_OCLToughness, CallFunc_Subtract_ByteByte_ReturnValue) == 0x00001D, "Member 'IndianaFormulas_BP_C_OCLToughness::CallFunc_Subtract_ByteByte_ReturnValue' has a wrong offset!");

// Function IndianaFormulas_BP.IndianaFormulas_BP_C.CanUseOCL
// 0x0018 (0x0018 - 0x0000)
struct IndianaFormulas_BP_C_CanUseOCL final
{
public:
	int32                                         Difficulty;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PlayerSkill;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxDelta;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(IndianaFormulas_BP_C_CanUseOCL) == 0x000004, "Wrong alignment on IndianaFormulas_BP_C_CanUseOCL");
static_assert(sizeof(IndianaFormulas_BP_C_CanUseOCL) == 0x000018, "Wrong size on IndianaFormulas_BP_C_CanUseOCL");
static_assert(offsetof(IndianaFormulas_BP_C_CanUseOCL, Difficulty) == 0x000000, "Member 'IndianaFormulas_BP_C_CanUseOCL::Difficulty' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_CanUseOCL, PlayerSkill) == 0x000004, "Member 'IndianaFormulas_BP_C_CanUseOCL::PlayerSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_CanUseOCL, MaxDelta) == 0x000008, "Member 'IndianaFormulas_BP_C_CanUseOCL::MaxDelta' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_CanUseOCL, ReturnValue) == 0x00000C, "Member 'IndianaFormulas_BP_C_CanUseOCL::ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_CanUseOCL, CallFunc_Subtract_IntInt_ReturnValue) == 0x000010, "Member 'IndianaFormulas_BP_C_CanUseOCL::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_CanUseOCL, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000014, "Member 'IndianaFormulas_BP_C_CanUseOCL::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");

// Function IndianaFormulas_BP.IndianaFormulas_BP_C.BaseRepairPartCost
// 0x0024 (0x0024 - 0x0000)
struct IndianaFormulas_BP_C_BaseRepairPartCost final
{
public:
	float                                         Durability;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ItemLevel;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IndianaFormulas_BP_C_BaseRepairPartCost) == 0x000004, "Wrong alignment on IndianaFormulas_BP_C_BaseRepairPartCost");
static_assert(sizeof(IndianaFormulas_BP_C_BaseRepairPartCost) == 0x000024, "Wrong size on IndianaFormulas_BP_C_BaseRepairPartCost");
static_assert(offsetof(IndianaFormulas_BP_C_BaseRepairPartCost, Durability) == 0x000000, "Member 'IndianaFormulas_BP_C_BaseRepairPartCost::Durability' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_BaseRepairPartCost, ItemLevel) == 0x000004, "Member 'IndianaFormulas_BP_C_BaseRepairPartCost::ItemLevel' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_BaseRepairPartCost, ReturnValue) == 0x000008, "Member 'IndianaFormulas_BP_C_BaseRepairPartCost::ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_BaseRepairPartCost, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00000C, "Member 'IndianaFormulas_BP_C_BaseRepairPartCost::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_BaseRepairPartCost, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000010, "Member 'IndianaFormulas_BP_C_BaseRepairPartCost::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_BaseRepairPartCost, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000014, "Member 'IndianaFormulas_BP_C_BaseRepairPartCost::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_BaseRepairPartCost, CallFunc_Add_FloatFloat_ReturnValue) == 0x000018, "Member 'IndianaFormulas_BP_C_BaseRepairPartCost::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_BaseRepairPartCost, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x00001C, "Member 'IndianaFormulas_BP_C_BaseRepairPartCost::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_BaseRepairPartCost, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000020, "Member 'IndianaFormulas_BP_C_BaseRepairPartCost::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function IndianaFormulas_BP.IndianaFormulas_BP_C.FieldRepairPartCost
// 0x003C (0x003C - 0x0000)
struct IndianaFormulas_BP_C_FieldRepairPartCost final
{
public:
	float                                         Durability;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ItemLevel;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EngineerSkill;                                     // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue;                        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IndianaFormulas_BP_C_FieldRepairPartCost) == 0x000004, "Wrong alignment on IndianaFormulas_BP_C_FieldRepairPartCost");
static_assert(sizeof(IndianaFormulas_BP_C_FieldRepairPartCost) == 0x00003C, "Wrong size on IndianaFormulas_BP_C_FieldRepairPartCost");
static_assert(offsetof(IndianaFormulas_BP_C_FieldRepairPartCost, Durability) == 0x000000, "Member 'IndianaFormulas_BP_C_FieldRepairPartCost::Durability' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_FieldRepairPartCost, ItemLevel) == 0x000004, "Member 'IndianaFormulas_BP_C_FieldRepairPartCost::ItemLevel' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_FieldRepairPartCost, EngineerSkill) == 0x000008, "Member 'IndianaFormulas_BP_C_FieldRepairPartCost::EngineerSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_FieldRepairPartCost, ReturnValue) == 0x00000C, "Member 'IndianaFormulas_BP_C_FieldRepairPartCost::ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_FieldRepairPartCost, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000010, "Member 'IndianaFormulas_BP_C_FieldRepairPartCost::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_FieldRepairPartCost, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000014, "Member 'IndianaFormulas_BP_C_FieldRepairPartCost::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_FieldRepairPartCost, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x000018, "Member 'IndianaFormulas_BP_C_FieldRepairPartCost::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_FieldRepairPartCost, CallFunc_Add_FloatFloat_ReturnValue) == 0x00001C, "Member 'IndianaFormulas_BP_C_FieldRepairPartCost::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_FieldRepairPartCost, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000020, "Member 'IndianaFormulas_BP_C_FieldRepairPartCost::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_FieldRepairPartCost, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000024, "Member 'IndianaFormulas_BP_C_FieldRepairPartCost::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_FieldRepairPartCost, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000028, "Member 'IndianaFormulas_BP_C_FieldRepairPartCost::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_FieldRepairPartCost, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x00002C, "Member 'IndianaFormulas_BP_C_FieldRepairPartCost::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_FieldRepairPartCost, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x000030, "Member 'IndianaFormulas_BP_C_FieldRepairPartCost::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_FieldRepairPartCost, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000034, "Member 'IndianaFormulas_BP_C_FieldRepairPartCost::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_FieldRepairPartCost, CallFunc_Round_ReturnValue) == 0x000038, "Member 'IndianaFormulas_BP_C_FieldRepairPartCost::CallFunc_Round_ReturnValue' has a wrong offset!");

// Function IndianaFormulas_BP.IndianaFormulas_BP_C.WorkbenchRepairPartCost
// 0x0040 (0x0040 - 0x0000)
struct IndianaFormulas_BP_C_WorkbenchRepairPartCost final
{
public:
	float                                         Durability;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ItemLevel;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EngineerSkill;                                     // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue;                        // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IndianaFormulas_BP_C_WorkbenchRepairPartCost) == 0x000004, "Wrong alignment on IndianaFormulas_BP_C_WorkbenchRepairPartCost");
static_assert(sizeof(IndianaFormulas_BP_C_WorkbenchRepairPartCost) == 0x000040, "Wrong size on IndianaFormulas_BP_C_WorkbenchRepairPartCost");
static_assert(offsetof(IndianaFormulas_BP_C_WorkbenchRepairPartCost, Durability) == 0x000000, "Member 'IndianaFormulas_BP_C_WorkbenchRepairPartCost::Durability' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_WorkbenchRepairPartCost, ItemLevel) == 0x000004, "Member 'IndianaFormulas_BP_C_WorkbenchRepairPartCost::ItemLevel' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_WorkbenchRepairPartCost, EngineerSkill) == 0x000008, "Member 'IndianaFormulas_BP_C_WorkbenchRepairPartCost::EngineerSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_WorkbenchRepairPartCost, ReturnValue) == 0x00000C, "Member 'IndianaFormulas_BP_C_WorkbenchRepairPartCost::ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_WorkbenchRepairPartCost, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000010, "Member 'IndianaFormulas_BP_C_WorkbenchRepairPartCost::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_WorkbenchRepairPartCost, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000014, "Member 'IndianaFormulas_BP_C_WorkbenchRepairPartCost::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_WorkbenchRepairPartCost, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x000018, "Member 'IndianaFormulas_BP_C_WorkbenchRepairPartCost::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_WorkbenchRepairPartCost, CallFunc_Add_FloatFloat_ReturnValue) == 0x00001C, "Member 'IndianaFormulas_BP_C_WorkbenchRepairPartCost::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_WorkbenchRepairPartCost, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000020, "Member 'IndianaFormulas_BP_C_WorkbenchRepairPartCost::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_WorkbenchRepairPartCost, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000024, "Member 'IndianaFormulas_BP_C_WorkbenchRepairPartCost::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_WorkbenchRepairPartCost, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000028, "Member 'IndianaFormulas_BP_C_WorkbenchRepairPartCost::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_WorkbenchRepairPartCost, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x00002C, "Member 'IndianaFormulas_BP_C_WorkbenchRepairPartCost::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_WorkbenchRepairPartCost, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x000030, "Member 'IndianaFormulas_BP_C_WorkbenchRepairPartCost::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_WorkbenchRepairPartCost, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000034, "Member 'IndianaFormulas_BP_C_WorkbenchRepairPartCost::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_WorkbenchRepairPartCost, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x000038, "Member 'IndianaFormulas_BP_C_WorkbenchRepairPartCost::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_WorkbenchRepairPartCost, CallFunc_Round_ReturnValue) == 0x00003C, "Member 'IndianaFormulas_BP_C_WorkbenchRepairPartCost::CallFunc_Round_ReturnValue' has a wrong offset!");

// Function IndianaFormulas_BP.IndianaFormulas_BP_C.VendorRepairCurrencyCost
// 0x002C (0x002C - 0x0000)
struct IndianaFormulas_BP_C_VendorRepairCurrencyCost final
{
public:
	float                                         Durability;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ItemLevel;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue;                        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IndianaFormulas_BP_C_VendorRepairCurrencyCost) == 0x000004, "Wrong alignment on IndianaFormulas_BP_C_VendorRepairCurrencyCost");
static_assert(sizeof(IndianaFormulas_BP_C_VendorRepairCurrencyCost) == 0x00002C, "Wrong size on IndianaFormulas_BP_C_VendorRepairCurrencyCost");
static_assert(offsetof(IndianaFormulas_BP_C_VendorRepairCurrencyCost, Durability) == 0x000000, "Member 'IndianaFormulas_BP_C_VendorRepairCurrencyCost::Durability' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_VendorRepairCurrencyCost, ItemLevel) == 0x000004, "Member 'IndianaFormulas_BP_C_VendorRepairCurrencyCost::ItemLevel' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_VendorRepairCurrencyCost, ReturnValue) == 0x000008, "Member 'IndianaFormulas_BP_C_VendorRepairCurrencyCost::ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_VendorRepairCurrencyCost, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00000C, "Member 'IndianaFormulas_BP_C_VendorRepairCurrencyCost::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_VendorRepairCurrencyCost, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000010, "Member 'IndianaFormulas_BP_C_VendorRepairCurrencyCost::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_VendorRepairCurrencyCost, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000014, "Member 'IndianaFormulas_BP_C_VendorRepairCurrencyCost::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_VendorRepairCurrencyCost, CallFunc_Add_FloatFloat_ReturnValue) == 0x000018, "Member 'IndianaFormulas_BP_C_VendorRepairCurrencyCost::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_VendorRepairCurrencyCost, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x00001C, "Member 'IndianaFormulas_BP_C_VendorRepairCurrencyCost::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_VendorRepairCurrencyCost, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000020, "Member 'IndianaFormulas_BP_C_VendorRepairCurrencyCost::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_VendorRepairCurrencyCost, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000024, "Member 'IndianaFormulas_BP_C_VendorRepairCurrencyCost::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_VendorRepairCurrencyCost, CallFunc_Round_ReturnValue) == 0x000028, "Member 'IndianaFormulas_BP_C_VendorRepairCurrencyCost::CallFunc_Round_ReturnValue' has a wrong offset!");

// Function IndianaFormulas_BP.IndianaFormulas_BP_C.GetRespecCost
// 0x001C (0x001C - 0x0000)
struct IndianaFormulas_BP_C_GetRespecCost final
{
public:
	int32                                         NumRespecs;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyMultiply_FloatFloat_ReturnValue;  // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IndianaFormulas_BP_C_GetRespecCost) == 0x000004, "Wrong alignment on IndianaFormulas_BP_C_GetRespecCost");
static_assert(sizeof(IndianaFormulas_BP_C_GetRespecCost) == 0x00001C, "Wrong size on IndianaFormulas_BP_C_GetRespecCost");
static_assert(offsetof(IndianaFormulas_BP_C_GetRespecCost, NumRespecs) == 0x000000, "Member 'IndianaFormulas_BP_C_GetRespecCost::NumRespecs' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetRespecCost, ReturnValue) == 0x000004, "Member 'IndianaFormulas_BP_C_GetRespecCost::ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetRespecCost, CallFunc_MakeLiteralInt_ReturnValue) == 0x000008, "Member 'IndianaFormulas_BP_C_GetRespecCost::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetRespecCost, CallFunc_Conv_IntToFloat_ReturnValue) == 0x00000C, "Member 'IndianaFormulas_BP_C_GetRespecCost::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetRespecCost, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue) == 0x000010, "Member 'IndianaFormulas_BP_C_GetRespecCost::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetRespecCost, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000014, "Member 'IndianaFormulas_BP_C_GetRespecCost::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetRespecCost, CallFunc_FTrunc_ReturnValue) == 0x000018, "Member 'IndianaFormulas_BP_C_GetRespecCost::CallFunc_FTrunc_ReturnValue' has a wrong offset!");

// Function IndianaFormulas_BP.IndianaFormulas_BP_C.GetOCLSkillCheckValue
// 0x0090 (0x0090 - 0x0000)
struct IndianaFormulas_BP_C_GetOCLSkillCheckValue final
{
public:
	uint8                                         OCLDifficulty;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         OCLSkillCheckValue;                                // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SkillCheckValue;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsINX1Installed_ReturnValue;              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsINX2Installed_ReturnValue;              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Min_ReturnValue;                          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Min_ReturnValue_1;                        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AIndianaPlayerCharacter*                CallFunc_GetIndianaPC_ReturnValue;                 // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetLevelScaledAtLocation_ReturnValue;     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue_1;            // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_2;            // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_3;            // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_1;                     // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue_2;            // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_2;            // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_2;          // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_2;                     // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue_3;            // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IndianaFormulas_BP_C_GetOCLSkillCheckValue) == 0x000008, "Wrong alignment on IndianaFormulas_BP_C_GetOCLSkillCheckValue");
static_assert(sizeof(IndianaFormulas_BP_C_GetOCLSkillCheckValue) == 0x000090, "Wrong size on IndianaFormulas_BP_C_GetOCLSkillCheckValue");
static_assert(offsetof(IndianaFormulas_BP_C_GetOCLSkillCheckValue, OCLDifficulty) == 0x000000, "Member 'IndianaFormulas_BP_C_GetOCLSkillCheckValue::OCLDifficulty' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetOCLSkillCheckValue, OCLSkillCheckValue) == 0x000001, "Member 'IndianaFormulas_BP_C_GetOCLSkillCheckValue::OCLSkillCheckValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetOCLSkillCheckValue, SkillCheckValue) == 0x000004, "Member 'IndianaFormulas_BP_C_GetOCLSkillCheckValue::SkillCheckValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetOCLSkillCheckValue, CallFunc_IsINX1Installed_ReturnValue) == 0x000008, "Member 'IndianaFormulas_BP_C_GetOCLSkillCheckValue::CallFunc_IsINX1Installed_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetOCLSkillCheckValue, CallFunc_GetValidValue_ReturnValue) == 0x000009, "Member 'IndianaFormulas_BP_C_GetOCLSkillCheckValue::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetOCLSkillCheckValue, CallFunc_IsINX2Installed_ReturnValue) == 0x00000A, "Member 'IndianaFormulas_BP_C_GetOCLSkillCheckValue::CallFunc_IsINX2Installed_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetOCLSkillCheckValue, CallFunc_BooleanOR_ReturnValue) == 0x00000B, "Member 'IndianaFormulas_BP_C_GetOCLSkillCheckValue::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetOCLSkillCheckValue, K2Node_SwitchEnum_CmpSuccess) == 0x00000C, "Member 'IndianaFormulas_BP_C_GetOCLSkillCheckValue::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetOCLSkillCheckValue, CallFunc_Min_ReturnValue) == 0x000010, "Member 'IndianaFormulas_BP_C_GetOCLSkillCheckValue::CallFunc_Min_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetOCLSkillCheckValue, CallFunc_Min_ReturnValue_1) == 0x000014, "Member 'IndianaFormulas_BP_C_GetOCLSkillCheckValue::CallFunc_Min_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetOCLSkillCheckValue, CallFunc_GetIndianaPC_ReturnValue) == 0x000018, "Member 'IndianaFormulas_BP_C_GetOCLSkillCheckValue::CallFunc_GetIndianaPC_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetOCLSkillCheckValue, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000020, "Member 'IndianaFormulas_BP_C_GetOCLSkillCheckValue::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetOCLSkillCheckValue, CallFunc_Conv_IntToByte_ReturnValue) == 0x00002C, "Member 'IndianaFormulas_BP_C_GetOCLSkillCheckValue::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetOCLSkillCheckValue, CallFunc_GetLevelScaledAtLocation_ReturnValue) == 0x000030, "Member 'IndianaFormulas_BP_C_GetOCLSkillCheckValue::CallFunc_GetLevelScaledAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetOCLSkillCheckValue, CallFunc_Subtract_IntInt_ReturnValue) == 0x000034, "Member 'IndianaFormulas_BP_C_GetOCLSkillCheckValue::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetOCLSkillCheckValue, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000038, "Member 'IndianaFormulas_BP_C_GetOCLSkillCheckValue::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetOCLSkillCheckValue, CallFunc_Conv_IntToFloat_ReturnValue) == 0x00003C, "Member 'IndianaFormulas_BP_C_GetOCLSkillCheckValue::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetOCLSkillCheckValue, CallFunc_Multiply_IntInt_ReturnValue) == 0x000040, "Member 'IndianaFormulas_BP_C_GetOCLSkillCheckValue::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetOCLSkillCheckValue, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000044, "Member 'IndianaFormulas_BP_C_GetOCLSkillCheckValue::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetOCLSkillCheckValue, CallFunc_Add_IntInt_ReturnValue) == 0x000048, "Member 'IndianaFormulas_BP_C_GetOCLSkillCheckValue::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetOCLSkillCheckValue, CallFunc_FTrunc_ReturnValue) == 0x00004C, "Member 'IndianaFormulas_BP_C_GetOCLSkillCheckValue::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetOCLSkillCheckValue, CallFunc_Multiply_IntInt_ReturnValue_1) == 0x000050, "Member 'IndianaFormulas_BP_C_GetOCLSkillCheckValue::CallFunc_Multiply_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetOCLSkillCheckValue, CallFunc_Subtract_IntInt_ReturnValue_2) == 0x000054, "Member 'IndianaFormulas_BP_C_GetOCLSkillCheckValue::CallFunc_Subtract_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetOCLSkillCheckValue, CallFunc_Add_IntInt_ReturnValue_1) == 0x000058, "Member 'IndianaFormulas_BP_C_GetOCLSkillCheckValue::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetOCLSkillCheckValue, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x00005C, "Member 'IndianaFormulas_BP_C_GetOCLSkillCheckValue::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetOCLSkillCheckValue, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000060, "Member 'IndianaFormulas_BP_C_GetOCLSkillCheckValue::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetOCLSkillCheckValue, CallFunc_Subtract_IntInt_ReturnValue_3) == 0x000064, "Member 'IndianaFormulas_BP_C_GetOCLSkillCheckValue::CallFunc_Subtract_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetOCLSkillCheckValue, CallFunc_FTrunc_ReturnValue_1) == 0x000068, "Member 'IndianaFormulas_BP_C_GetOCLSkillCheckValue::CallFunc_FTrunc_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetOCLSkillCheckValue, CallFunc_Max_ReturnValue) == 0x00006C, "Member 'IndianaFormulas_BP_C_GetOCLSkillCheckValue::CallFunc_Max_ReturnValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetOCLSkillCheckValue, CallFunc_Multiply_IntInt_ReturnValue_2) == 0x000070, "Member 'IndianaFormulas_BP_C_GetOCLSkillCheckValue::CallFunc_Multiply_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetOCLSkillCheckValue, CallFunc_Conv_IntToFloat_ReturnValue_2) == 0x000074, "Member 'IndianaFormulas_BP_C_GetOCLSkillCheckValue::CallFunc_Conv_IntToFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetOCLSkillCheckValue, CallFunc_Add_IntInt_ReturnValue_2) == 0x000078, "Member 'IndianaFormulas_BP_C_GetOCLSkillCheckValue::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetOCLSkillCheckValue, CallFunc_Divide_FloatFloat_ReturnValue_2) == 0x00007C, "Member 'IndianaFormulas_BP_C_GetOCLSkillCheckValue::CallFunc_Divide_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetOCLSkillCheckValue, CallFunc_FTrunc_ReturnValue_2) == 0x000080, "Member 'IndianaFormulas_BP_C_GetOCLSkillCheckValue::CallFunc_FTrunc_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetOCLSkillCheckValue, CallFunc_Multiply_IntInt_ReturnValue_3) == 0x000084, "Member 'IndianaFormulas_BP_C_GetOCLSkillCheckValue::CallFunc_Multiply_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BP_C_GetOCLSkillCheckValue, CallFunc_Add_IntInt_ReturnValue_3) == 0x000088, "Member 'IndianaFormulas_BP_C_GetOCLSkillCheckValue::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");

}

