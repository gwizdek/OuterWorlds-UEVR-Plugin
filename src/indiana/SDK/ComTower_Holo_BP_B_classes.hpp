#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ComTower_Holo_BP_B

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass ComTower_Holo_BP_B.ComTower_Holo_BP_B_C
// 0x0020 (0x02D8 - 0x02B8)
class AComTower_Holo_BP_B_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   CommTwr_HoloSign;                                  // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        SharedRoot;                                        // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RotationPerSec;                                    // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_ComTower_Holo_BP_B(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ComTower_Holo_BP_B_C">();
	}
	static class AComTower_Holo_BP_B_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AComTower_Holo_BP_B_C>();
	}
};
static_assert(alignof(AComTower_Holo_BP_B_C) == 0x000008, "Wrong alignment on AComTower_Holo_BP_B_C");
static_assert(sizeof(AComTower_Holo_BP_B_C) == 0x0002D8, "Wrong size on AComTower_Holo_BP_B_C");
static_assert(offsetof(AComTower_Holo_BP_B_C, UberGraphFrame) == 0x0002B8, "Member 'AComTower_Holo_BP_B_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AComTower_Holo_BP_B_C, CommTwr_HoloSign) == 0x0002C0, "Member 'AComTower_Holo_BP_B_C::CommTwr_HoloSign' has a wrong offset!");
static_assert(offsetof(AComTower_Holo_BP_B_C, SharedRoot) == 0x0002C8, "Member 'AComTower_Holo_BP_B_C::SharedRoot' has a wrong offset!");
static_assert(offsetof(AComTower_Holo_BP_B_C, RotationPerSec) == 0x0002D0, "Member 'AComTower_Holo_BP_B_C::RotationPerSec' has a wrong offset!");

}

