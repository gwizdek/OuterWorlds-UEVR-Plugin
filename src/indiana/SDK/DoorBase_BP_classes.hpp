#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DoorBase_BP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Indiana_structs.hpp"
#include "Indiana_classes.hpp"
#include "AkAudio_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass DoorBase_BP.DoorBase_BP_C
// 0x0108 (0x0528 - 0x0420)
class ADoorBase_BP_C : public ADoor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0420(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          Overlap_Register;                                  // 0x0428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        AkDoorSide2;                                       // 0x0430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        AkDoorSide1;                                       // 0x0438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        BarAttachmentCAC;                                  // 0x0440(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        RearAttachmentCAC;                                 // 0x0448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        FrontAttachmentCAC;                                // 0x0450(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x0458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          UseFrontCAC;                                       // 0x0460(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UseRearCAC;                                        // 0x0461(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_462[0x6];                                      // 0x0462(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UChildActorComponent*>           ActiveCAC;                                         // 0x0468(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class AActor*                                 FrontCACActor;                                     // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 RearCACActor;                                      // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnoreSound;                                       // 0x0488(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_489[0x7];                                      // 0x0489(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CACClass;                                          // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 OCLAudioComponentClass;                            // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOCLAudioComponent*                     OCLAudioComponent;                                 // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 BarClass;                                          // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASwitch*                                BarActor;                                          // 0x04B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTravelDestinationData*                 TravelDestination;                                 // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HideTransition;                                    // 0x04C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C1[0x7];                                      // 0x04C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class AAkAcousticPortal>       LinkedAkAcousticPortal;                            // 0x04C8(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          NeedsAkAcousticPortal;                             // 0x04F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          OverrideAkAcousticPortal;                          // 0x04F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Force_UseCac;                                      // 0x04F2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4F3[0x5];                                      // 0x04F3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkComponent*                           NewVar_0;                                          // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          Open_Sound;                                        // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          Close_Sound;                                       // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          Travel_Sound;                                      // 0x0510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          Single_Open__WARN_;                                // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          Single_Close__WARN_;                               // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__OCLComponent_K2Node_ComponentBoundEvent_6_OCLLocked__DelegateSignature(class AActor* Initiator, bool IgnoreSound_0, bool InstantAnimation);
	void BndEvt__OCLComponent_K2Node_ComponentBoundEvent_5_OCLOpenAttemptedLocked__DelegateSignature(class AActor* Initiator);
	void PlayOpeningAudio();
	void OnTravelInitiated_Event_0(const class UTravelDestinationData* TravelDestinationData);
	void PlayTravelAudio();
	void BndEvt__OCLComponent_K2Node_ComponentBoundEvent_4_OCLOpenAttemptedLocked__DelegateSignature(class AActor* Initiator);
	void BndEvt__OCLComponent_K2Node_ComponentBoundEvent_0_OCLBarred__DelegateSignature(class AActor* Initiator);
	void PlayClosingAudio();
	void PlayUnbarredAudio();
	void BndEvt__OCLComponent_K2Node_ComponentBoundEvent_3_OCLCloseEnd__DelegateSignature(class AActor* Initiator);
	void PlayAmbientAudio();
	void BndEvt__OCLComponent_K2Node_ComponentBoundEvent_2_OCLCloseStart__DelegateSignature(class AActor* Initiator);
	void OnSwitchStateChanged_Event_0(class AActor* Initiator, int32 StateIndex);
	void BndEvt__OCLComponent_K2Node_ComponentBoundEvent_0_OCLUnsealed__DelegateSignature(class AActor* Initiator);
	void PlayUnsealedAudio();
	void BndEvt__OCLComponent_K2Node_ComponentBoundEvent_0_OCLSealed__DelegateSignature(class AActor* Initiator, bool IgnoreSound_0, bool InstantAnimation);
	void BndEvt__OCLComponent_K2Node_ComponentBoundEvent_1_OCLOpenEnd__DelegateSignature(class AActor* Initiator);
	void OpenOCL(class AActor* Initiator, bool Force, bool Seal, bool IgnoreLockStatus, bool IgnoreStartEvent, bool IgnoreEndEvent, bool IgnoreSound_0, bool IgnoreAnimation);
	void CloseOCL(class AActor* Initiator, bool Force, bool Lock, bool Seal, bool IgnoreStartEvent, bool IgnoreEndEvent, bool IgnoreSound_0, bool IgnoreAnimation);
	void BndEvt__OCLComponent_K2Node_ComponentBoundEvent_0_OCLOpenStart__DelegateSignature(class AActor* Initiator);
	void OnStateChanged();
	void OnAnimateClose(bool IgnoreSound_0, bool InstantAnimation);
	void UpdateLinkedPortalState();
	void PlayUnlockedAudio();
	void PlayLockedAudio();
	void PlayClosedAudio();
	void OnAnimateOpen(bool InstantAnimation);
	void BndEvt__OCLComponent_K2Node_ComponentBoundEvent_10_OCLLockpickLoopStop__DelegateSignature(class AActor* Initiator);
	void ExecuteUbergraph_DoorBase_BP(int32 EntryPoint);
	void OnPostConstruction();
	void BndEvt__OCLComponent_K2Node_ComponentBoundEvent_7_OCLUnlocked__DelegateSignature(class AActor* Initiator);
	void OnAnimateCloseComplete();
	void OnAnimateOpenComplete();
	void ReceiveBeginPlay();
	void BndEvt__OCLComponent_K2Node_ComponentBoundEvent_8_OCLUnbarred__DelegateSignature(class AActor* Initiator);
	void BndEvt__OCLComponent_K2Node_ComponentBoundEvent_4_OCLLockpickSuccess__DelegateSignature(class AActor* Initiator);
	void BndEvt__OCLComponent_K2Node_ComponentBoundEvent_3_OCLLockpickInterrupted__DelegateSignature(class AActor* Initiator);
	void BndEvt__OCLComponent_K2Node_ComponentBoundEvent_2_OCLLockpickStart__DelegateSignature(class AActor* Initiator, float LockpickSeconds, int32 LockpickNumResources);
	void PlayOpenAudio();
	void BndEvt__OCLComponent_K2Node_ComponentBoundEvent_1_OCLAnimateClose__DelegateSignature(class AActor* Initiator, bool IgnoreSound_0, bool InstantAnimation);
	void BndEvt__OCLComponent_K2Node_ComponentBoundEvent_0_OCLAnimateOpen__DelegateSignature(class AActor* Initiator, bool InFrontOfDoor, bool IgnoreSound_0, bool InstantAnimation);
	void StopLockpickAudio();
	void PlayLockpickAudio();
	void PlayLockpickInterruptedAudio();
	void PlayLockpickSucceedAudio();
	void PlayBarredAudio();
	void UserConstructionScript();
	void CheckCAC(bool Use, class AActor*& CAC_Actor, class USceneComponent* Attach_Point);
	void Update();
	void SignalAnimationComplete();
	void SetupCAC();
	void IsLocked(bool* IsLocked_0);
	void IsOpen(bool* IsOpen_0, bool* IsOpening);
	void SetIsLocked(bool IsLocked, bool* IsLockedOut);
	void IsBarred(bool* IsBarred_0);
	void IsClosed(bool* IsClosed_0);
	void IsSealed(bool* IsSealed_0);
	void ToggleOpenCloseState(class AActor* Initiator, bool Force, bool Lock, bool Seal, bool IgnoreLockStatus, bool IgnoreStartEvent, bool IgnoreEndEvent, bool IgnoreSound_0, bool InstantAnimation, bool* IsOpen, bool* IsOpening, bool* IsClosed, bool* IsClosing);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"DoorBase_BP_C">();
	}
	static class ADoorBase_BP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADoorBase_BP_C>();
	}
};
static_assert(alignof(ADoorBase_BP_C) == 0x000008, "Wrong alignment on ADoorBase_BP_C");
static_assert(sizeof(ADoorBase_BP_C) == 0x000528, "Wrong size on ADoorBase_BP_C");
static_assert(offsetof(ADoorBase_BP_C, UberGraphFrame) == 0x000420, "Member 'ADoorBase_BP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ADoorBase_BP_C, Overlap_Register) == 0x000428, "Member 'ADoorBase_BP_C::Overlap_Register' has a wrong offset!");
static_assert(offsetof(ADoorBase_BP_C, AkDoorSide2) == 0x000430, "Member 'ADoorBase_BP_C::AkDoorSide2' has a wrong offset!");
static_assert(offsetof(ADoorBase_BP_C, AkDoorSide1) == 0x000438, "Member 'ADoorBase_BP_C::AkDoorSide1' has a wrong offset!");
static_assert(offsetof(ADoorBase_BP_C, BarAttachmentCAC) == 0x000440, "Member 'ADoorBase_BP_C::BarAttachmentCAC' has a wrong offset!");
static_assert(offsetof(ADoorBase_BP_C, RearAttachmentCAC) == 0x000448, "Member 'ADoorBase_BP_C::RearAttachmentCAC' has a wrong offset!");
static_assert(offsetof(ADoorBase_BP_C, FrontAttachmentCAC) == 0x000450, "Member 'ADoorBase_BP_C::FrontAttachmentCAC' has a wrong offset!");
static_assert(offsetof(ADoorBase_BP_C, Arrow) == 0x000458, "Member 'ADoorBase_BP_C::Arrow' has a wrong offset!");
static_assert(offsetof(ADoorBase_BP_C, UseFrontCAC) == 0x000460, "Member 'ADoorBase_BP_C::UseFrontCAC' has a wrong offset!");
static_assert(offsetof(ADoorBase_BP_C, UseRearCAC) == 0x000461, "Member 'ADoorBase_BP_C::UseRearCAC' has a wrong offset!");
static_assert(offsetof(ADoorBase_BP_C, ActiveCAC) == 0x000468, "Member 'ADoorBase_BP_C::ActiveCAC' has a wrong offset!");
static_assert(offsetof(ADoorBase_BP_C, FrontCACActor) == 0x000478, "Member 'ADoorBase_BP_C::FrontCACActor' has a wrong offset!");
static_assert(offsetof(ADoorBase_BP_C, RearCACActor) == 0x000480, "Member 'ADoorBase_BP_C::RearCACActor' has a wrong offset!");
static_assert(offsetof(ADoorBase_BP_C, IgnoreSound) == 0x000488, "Member 'ADoorBase_BP_C::IgnoreSound' has a wrong offset!");
static_assert(offsetof(ADoorBase_BP_C, CACClass) == 0x000490, "Member 'ADoorBase_BP_C::CACClass' has a wrong offset!");
static_assert(offsetof(ADoorBase_BP_C, OCLAudioComponentClass) == 0x000498, "Member 'ADoorBase_BP_C::OCLAudioComponentClass' has a wrong offset!");
static_assert(offsetof(ADoorBase_BP_C, OCLAudioComponent) == 0x0004A0, "Member 'ADoorBase_BP_C::OCLAudioComponent' has a wrong offset!");
static_assert(offsetof(ADoorBase_BP_C, BarClass) == 0x0004A8, "Member 'ADoorBase_BP_C::BarClass' has a wrong offset!");
static_assert(offsetof(ADoorBase_BP_C, BarActor) == 0x0004B0, "Member 'ADoorBase_BP_C::BarActor' has a wrong offset!");
static_assert(offsetof(ADoorBase_BP_C, TravelDestination) == 0x0004B8, "Member 'ADoorBase_BP_C::TravelDestination' has a wrong offset!");
static_assert(offsetof(ADoorBase_BP_C, HideTransition) == 0x0004C0, "Member 'ADoorBase_BP_C::HideTransition' has a wrong offset!");
static_assert(offsetof(ADoorBase_BP_C, LinkedAkAcousticPortal) == 0x0004C8, "Member 'ADoorBase_BP_C::LinkedAkAcousticPortal' has a wrong offset!");
static_assert(offsetof(ADoorBase_BP_C, NeedsAkAcousticPortal) == 0x0004F0, "Member 'ADoorBase_BP_C::NeedsAkAcousticPortal' has a wrong offset!");
static_assert(offsetof(ADoorBase_BP_C, OverrideAkAcousticPortal) == 0x0004F1, "Member 'ADoorBase_BP_C::OverrideAkAcousticPortal' has a wrong offset!");
static_assert(offsetof(ADoorBase_BP_C, Force_UseCac) == 0x0004F2, "Member 'ADoorBase_BP_C::Force_UseCac' has a wrong offset!");
static_assert(offsetof(ADoorBase_BP_C, NewVar_0) == 0x0004F8, "Member 'ADoorBase_BP_C::NewVar_0' has a wrong offset!");
static_assert(offsetof(ADoorBase_BP_C, Open_Sound) == 0x000500, "Member 'ADoorBase_BP_C::Open_Sound' has a wrong offset!");
static_assert(offsetof(ADoorBase_BP_C, Close_Sound) == 0x000508, "Member 'ADoorBase_BP_C::Close_Sound' has a wrong offset!");
static_assert(offsetof(ADoorBase_BP_C, Travel_Sound) == 0x000510, "Member 'ADoorBase_BP_C::Travel_Sound' has a wrong offset!");
static_assert(offsetof(ADoorBase_BP_C, Single_Open__WARN_) == 0x000518, "Member 'ADoorBase_BP_C::Single_Open__WARN_' has a wrong offset!");
static_assert(offsetof(ADoorBase_BP_C, Single_Close__WARN_) == 0x000520, "Member 'ADoorBase_BP_C::Single_Close__WARN_' has a wrong offset!");

}

