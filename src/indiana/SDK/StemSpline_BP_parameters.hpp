#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: StemSpline_BP

#include "Basic.hpp"

#include "SubStemStarter_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "SkelMeshToSpawnAlong_structs.hpp"
#include "MeshToSpawnAlong_structs.hpp"


namespace SDK::Params
{

// Function StemSpline_BP.StemSpline_BP_C.UserConstructionScript
// 0x0270 (0x0270 - 0x0000)
struct StemSpline_BP_C_UserConstructionScript final
{
public:
	struct FVector                                subStarterStartDirection;                          // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                subStarterSurfaceNormal;                           // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         subStarterLevel;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                subStarterStartLocation;                           // 0x001C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       addingSpline;                                      // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Temp_struct_Variable;                              // 0x0060(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	class USplineComponent*                       CallFunc_AddComponent_ReturnValue;                 // 0x0090(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult;       // 0x00A8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_131[0x3];                                      // 0x0131(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x013C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13D[0x3];                                      // 0x013D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USplineComponent*                       CallFunc_Array_Get_Item;                           // 0x0140(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_149[0x3];                                      // 0x0149(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_4;                  // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0154(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_155[0x3];                                      // 0x0155(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15C[0x4];                                      // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Temp_struct_Variable_1;                            // 0x0160(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_194[0x4];                                      // 0x0194(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USplineComponent*                       CallFunc_AddComponent_ReturnValue_1;               // 0x0198(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A1[0x3];                                      // 0x01A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_4;                   // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USplineMeshComponent*                   CallFunc_Array_Get_Item_1;                         // 0x01A8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B1[0x3];                                      // 0x01B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumberOfSplinePoints_ReturnValue;      // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue;                        // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item_2;                         // 0x01CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x01DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1DD[0x3];                                      // 0x01DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Array_Get_Item_3;                         // 0x01E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_WorldLocToSplineTimeApprox_bestTime;      // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x01F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F5[0x3];                                      // 0x01F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1FC[0x4];                                      // 0x01FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USplineComponent*                       CallFunc_Array_Get_Item_4;                         // 0x0200(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_5;               // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_4;                // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_211[0x3];                                      // 0x0211(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0219(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21A[0x2];                                      // 0x021A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_6;                 // 0x021C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSubStemStarter                        CallFunc_Array_Get_Item_5;                         // 0x0224(0x0028)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_6;               // 0x024C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_5;                // 0x0250(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_251[0x3];                                      // 0x0251(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_FindStartPoint_StartLoc;                  // 0x0254(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_FindStartPoint_StartNormal;               // 0x0260(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(StemSpline_BP_C_UserConstructionScript) == 0x000010, "Wrong alignment on StemSpline_BP_C_UserConstructionScript");
static_assert(sizeof(StemSpline_BP_C_UserConstructionScript) == 0x000270, "Wrong size on StemSpline_BP_C_UserConstructionScript");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, subStarterStartDirection) == 0x000000, "Member 'StemSpline_BP_C_UserConstructionScript::subStarterStartDirection' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, subStarterSurfaceNormal) == 0x00000C, "Member 'StemSpline_BP_C_UserConstructionScript::subStarterSurfaceNormal' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, subStarterLevel) == 0x000018, "Member 'StemSpline_BP_C_UserConstructionScript::subStarterLevel' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, subStarterStartLocation) == 0x00001C, "Member 'StemSpline_BP_C_UserConstructionScript::subStarterStartLocation' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, addingSpline) == 0x000028, "Member 'StemSpline_BP_C_UserConstructionScript::addingSpline' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, Temp_int_Loop_Counter_Variable) == 0x000030, "Member 'StemSpline_BP_C_UserConstructionScript::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, CallFunc_Add_IntInt_ReturnValue) == 0x000034, "Member 'StemSpline_BP_C_UserConstructionScript::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, Temp_int_Array_Index_Variable) == 0x000038, "Member 'StemSpline_BP_C_UserConstructionScript::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, Temp_int_Loop_Counter_Variable_1) == 0x00003C, "Member 'StemSpline_BP_C_UserConstructionScript::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, CallFunc_Add_IntInt_ReturnValue_1) == 0x000040, "Member 'StemSpline_BP_C_UserConstructionScript::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, Temp_int_Loop_Counter_Variable_2) == 0x000044, "Member 'StemSpline_BP_C_UserConstructionScript::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, Temp_int_Loop_Counter_Variable_3) == 0x000048, "Member 'StemSpline_BP_C_UserConstructionScript::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, CallFunc_Add_IntInt_ReturnValue_2) == 0x00004C, "Member 'StemSpline_BP_C_UserConstructionScript::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, CallFunc_Add_IntInt_ReturnValue_3) == 0x000050, "Member 'StemSpline_BP_C_UserConstructionScript::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, Temp_int_Array_Index_Variable_1) == 0x000054, "Member 'StemSpline_BP_C_UserConstructionScript::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, Temp_struct_Variable) == 0x000060, "Member 'StemSpline_BP_C_UserConstructionScript::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, CallFunc_AddComponent_ReturnValue) == 0x000090, "Member 'StemSpline_BP_C_UserConstructionScript::CallFunc_AddComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, CallFunc_Array_Length_ReturnValue) == 0x000098, "Member 'StemSpline_BP_C_UserConstructionScript::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x00009C, "Member 'StemSpline_BP_C_UserConstructionScript::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, CallFunc_K2_SetWorldRotation_SweepHitResult) == 0x0000A8, "Member 'StemSpline_BP_C_UserConstructionScript::CallFunc_K2_SetWorldRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, CallFunc_IsValid_ReturnValue) == 0x000130, "Member 'StemSpline_BP_C_UserConstructionScript::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, CallFunc_Array_Length_ReturnValue_1) == 0x000134, "Member 'StemSpline_BP_C_UserConstructionScript::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, Temp_int_Array_Index_Variable_2) == 0x000138, "Member 'StemSpline_BP_C_UserConstructionScript::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, CallFunc_Less_IntInt_ReturnValue) == 0x00013C, "Member 'StemSpline_BP_C_UserConstructionScript::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, CallFunc_Array_Get_Item) == 0x000140, "Member 'StemSpline_BP_C_UserConstructionScript::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, CallFunc_IsValid_ReturnValue_1) == 0x000148, "Member 'StemSpline_BP_C_UserConstructionScript::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, Temp_int_Loop_Counter_Variable_4) == 0x00014C, "Member 'StemSpline_BP_C_UserConstructionScript::Temp_int_Loop_Counter_Variable_4' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, Temp_int_Array_Index_Variable_3) == 0x000150, "Member 'StemSpline_BP_C_UserConstructionScript::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, CallFunc_Less_IntInt_ReturnValue_1) == 0x000154, "Member 'StemSpline_BP_C_UserConstructionScript::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, CallFunc_Add_IntInt_ReturnValue_4) == 0x000158, "Member 'StemSpline_BP_C_UserConstructionScript::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, Temp_struct_Variable_1) == 0x000160, "Member 'StemSpline_BP_C_UserConstructionScript::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, CallFunc_Array_Length_ReturnValue_2) == 0x000190, "Member 'StemSpline_BP_C_UserConstructionScript::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, CallFunc_AddComponent_ReturnValue_1) == 0x000198, "Member 'StemSpline_BP_C_UserConstructionScript::CallFunc_AddComponent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, CallFunc_Greater_IntInt_ReturnValue) == 0x0001A0, "Member 'StemSpline_BP_C_UserConstructionScript::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, Temp_int_Array_Index_Variable_4) == 0x0001A4, "Member 'StemSpline_BP_C_UserConstructionScript::Temp_int_Array_Index_Variable_4' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, CallFunc_Array_Get_Item_1) == 0x0001A8, "Member 'StemSpline_BP_C_UserConstructionScript::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, CallFunc_IsValid_ReturnValue_2) == 0x0001B0, "Member 'StemSpline_BP_C_UserConstructionScript::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, Temp_int_Variable) == 0x0001B4, "Member 'StemSpline_BP_C_UserConstructionScript::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, CallFunc_Add_IntInt_ReturnValue_5) == 0x0001B8, "Member 'StemSpline_BP_C_UserConstructionScript::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, CallFunc_GetNumberOfSplinePoints_ReturnValue) == 0x0001BC, "Member 'StemSpline_BP_C_UserConstructionScript::CallFunc_GetNumberOfSplinePoints_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, CallFunc_Multiply_IntInt_ReturnValue) == 0x0001C0, "Member 'StemSpline_BP_C_UserConstructionScript::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, CallFunc_Clamp_ReturnValue) == 0x0001C4, "Member 'StemSpline_BP_C_UserConstructionScript::CallFunc_Clamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, Temp_int_Variable_1) == 0x0001C8, "Member 'StemSpline_BP_C_UserConstructionScript::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, CallFunc_Array_Get_Item_2) == 0x0001CC, "Member 'StemSpline_BP_C_UserConstructionScript::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, CallFunc_Array_Length_ReturnValue_3) == 0x0001D8, "Member 'StemSpline_BP_C_UserConstructionScript::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, CallFunc_Less_IntInt_ReturnValue_2) == 0x0001DC, "Member 'StemSpline_BP_C_UserConstructionScript::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, CallFunc_Array_Get_Item_3) == 0x0001E0, "Member 'StemSpline_BP_C_UserConstructionScript::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, CallFunc_WorldLocToSplineTimeApprox_bestTime) == 0x0001EC, "Member 'StemSpline_BP_C_UserConstructionScript::CallFunc_WorldLocToSplineTimeApprox_bestTime' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, CallFunc_Array_Length_ReturnValue_4) == 0x0001F0, "Member 'StemSpline_BP_C_UserConstructionScript::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, CallFunc_Less_IntInt_ReturnValue_3) == 0x0001F4, "Member 'StemSpline_BP_C_UserConstructionScript::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, CallFunc_Array_Add_ReturnValue) == 0x0001F8, "Member 'StemSpline_BP_C_UserConstructionScript::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, CallFunc_Array_Get_Item_4) == 0x000200, "Member 'StemSpline_BP_C_UserConstructionScript::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, CallFunc_Array_Add_ReturnValue_1) == 0x000208, "Member 'StemSpline_BP_C_UserConstructionScript::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, CallFunc_Array_Length_ReturnValue_5) == 0x00020C, "Member 'StemSpline_BP_C_UserConstructionScript::CallFunc_Array_Length_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, CallFunc_Less_IntInt_ReturnValue_4) == 0x000210, "Member 'StemSpline_BP_C_UserConstructionScript::CallFunc_Less_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, CallFunc_Subtract_IntInt_ReturnValue) == 0x000214, "Member 'StemSpline_BP_C_UserConstructionScript::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000218, "Member 'StemSpline_BP_C_UserConstructionScript::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000219, "Member 'StemSpline_BP_C_UserConstructionScript::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, CallFunc_Add_IntInt_ReturnValue_6) == 0x00021C, "Member 'StemSpline_BP_C_UserConstructionScript::CallFunc_Add_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, CallFunc_Array_Add_ReturnValue_2) == 0x000220, "Member 'StemSpline_BP_C_UserConstructionScript::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, CallFunc_Array_Get_Item_5) == 0x000224, "Member 'StemSpline_BP_C_UserConstructionScript::CallFunc_Array_Get_Item_5' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, CallFunc_Array_Length_ReturnValue_6) == 0x00024C, "Member 'StemSpline_BP_C_UserConstructionScript::CallFunc_Array_Length_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, CallFunc_Less_IntInt_ReturnValue_5) == 0x000250, "Member 'StemSpline_BP_C_UserConstructionScript::CallFunc_Less_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, CallFunc_FindStartPoint_StartLoc) == 0x000254, "Member 'StemSpline_BP_C_UserConstructionScript::CallFunc_FindStartPoint_StartLoc' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_UserConstructionScript, CallFunc_FindStartPoint_StartNormal) == 0x000260, "Member 'StemSpline_BP_C_UserConstructionScript::CallFunc_FindStartPoint_StartNormal' has a wrong offset!");

// Function StemSpline_BP.StemSpline_BP_C.FindStartPoint
// 0x0198 (0x0198 - 0x0000)
struct StemSpline_BP_C_FindStartPoint final
{
public:
	struct FVector                                StartLoc;                                          // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                StartNormal;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0018(0x0010)(ConstParm, ReferenceParm)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x0070(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_FB[0x1];                                       // 0x00FB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0104(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0110(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x011C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0128(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0148(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0164(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0170(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x018C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(StemSpline_BP_C_FindStartPoint) == 0x000008, "Wrong alignment on StemSpline_BP_C_FindStartPoint");
static_assert(sizeof(StemSpline_BP_C_FindStartPoint) == 0x000198, "Wrong size on StemSpline_BP_C_FindStartPoint");
static_assert(offsetof(StemSpline_BP_C_FindStartPoint, StartLoc) == 0x000000, "Member 'StemSpline_BP_C_FindStartPoint::StartLoc' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindStartPoint, StartNormal) == 0x00000C, "Member 'StemSpline_BP_C_FindStartPoint::StartNormal' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindStartPoint, Temp_object_Variable) == 0x000018, "Member 'StemSpline_BP_C_FindStartPoint::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindStartPoint, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000028, "Member 'StemSpline_BP_C_FindStartPoint::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindStartPoint, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000034, "Member 'StemSpline_BP_C_FindStartPoint::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindStartPoint, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x000040, "Member 'StemSpline_BP_C_FindStartPoint::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindStartPoint, CallFunc_Add_VectorVector_ReturnValue) == 0x00004C, "Member 'StemSpline_BP_C_FindStartPoint::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindStartPoint, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000058, "Member 'StemSpline_BP_C_FindStartPoint::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindStartPoint, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000064, "Member 'StemSpline_BP_C_FindStartPoint::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindStartPoint, CallFunc_LineTraceSingle_OutHit) == 0x000070, "Member 'StemSpline_BP_C_FindStartPoint::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindStartPoint, CallFunc_LineTraceSingle_ReturnValue) == 0x0000F8, "Member 'StemSpline_BP_C_FindStartPoint::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindStartPoint, CallFunc_BreakHitResult_bBlockingHit) == 0x0000F9, "Member 'StemSpline_BP_C_FindStartPoint::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindStartPoint, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000FA, "Member 'StemSpline_BP_C_FindStartPoint::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindStartPoint, CallFunc_BreakHitResult_Time) == 0x0000FC, "Member 'StemSpline_BP_C_FindStartPoint::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindStartPoint, CallFunc_BreakHitResult_Distance) == 0x000100, "Member 'StemSpline_BP_C_FindStartPoint::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindStartPoint, CallFunc_BreakHitResult_Location) == 0x000104, "Member 'StemSpline_BP_C_FindStartPoint::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindStartPoint, CallFunc_BreakHitResult_ImpactPoint) == 0x000110, "Member 'StemSpline_BP_C_FindStartPoint::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindStartPoint, CallFunc_BreakHitResult_Normal) == 0x00011C, "Member 'StemSpline_BP_C_FindStartPoint::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindStartPoint, CallFunc_BreakHitResult_ImpactNormal) == 0x000128, "Member 'StemSpline_BP_C_FindStartPoint::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindStartPoint, CallFunc_BreakHitResult_PhysMat) == 0x000138, "Member 'StemSpline_BP_C_FindStartPoint::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindStartPoint, CallFunc_BreakHitResult_HitActor) == 0x000140, "Member 'StemSpline_BP_C_FindStartPoint::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindStartPoint, CallFunc_BreakHitResult_HitComponent) == 0x000148, "Member 'StemSpline_BP_C_FindStartPoint::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindStartPoint, CallFunc_BreakHitResult_HitBoneName) == 0x000150, "Member 'StemSpline_BP_C_FindStartPoint::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindStartPoint, CallFunc_BreakHitResult_HitItem) == 0x000158, "Member 'StemSpline_BP_C_FindStartPoint::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindStartPoint, CallFunc_BreakHitResult_ElementIndex) == 0x00015C, "Member 'StemSpline_BP_C_FindStartPoint::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindStartPoint, CallFunc_BreakHitResult_FaceIndex) == 0x000160, "Member 'StemSpline_BP_C_FindStartPoint::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindStartPoint, CallFunc_BreakHitResult_TraceStart) == 0x000164, "Member 'StemSpline_BP_C_FindStartPoint::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindStartPoint, CallFunc_BreakHitResult_TraceEnd) == 0x000170, "Member 'StemSpline_BP_C_FindStartPoint::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindStartPoint, CallFunc_BreakVector_X) == 0x00017C, "Member 'StemSpline_BP_C_FindStartPoint::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindStartPoint, CallFunc_BreakVector_Y) == 0x000180, "Member 'StemSpline_BP_C_FindStartPoint::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindStartPoint, CallFunc_BreakVector_Z) == 0x000184, "Member 'StemSpline_BP_C_FindStartPoint::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindStartPoint, CallFunc_Add_FloatFloat_ReturnValue) == 0x000188, "Member 'StemSpline_BP_C_FindStartPoint::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindStartPoint, CallFunc_MakeVector_ReturnValue) == 0x00018C, "Member 'StemSpline_BP_C_FindStartPoint::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

// Function StemSpline_BP.StemSpline_BP_C.TraceTowardsDirection
// 0x0288 (0x0288 - 0x0000)
struct StemSpline_BP_C_TraceTowardsDirection final
{
public:
	struct FVector                                StartLocation;                                     // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                relativeNormal;                                    // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          forSubStem;                                        // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitLocation;                                       // 0x001C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitNormal;                                         // 0x0028(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                lastLocation;                                      // 0x0034(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                traceDirection;                                    // 0x0040(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          hitSomething;                                      // 0x004C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          forSubStem_;                                       // 0x004D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                relativeNormal_;                                   // 0x0050(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                StartLoc;                                          // 0x005C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         randomIrregularity;                                // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SelectVector_ReturnValue;                 // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SelectVector_ReturnValue_1;               // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0098(0x0010)(ConstParm, ReferenceParm)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue;           // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x00B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SelectVector_ReturnValue_2;               // 0x00C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_1;         // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x00E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue_1;      // 0x00F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0104(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_105[0x3];                                      // 0x0105(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_SelectVector_ReturnValue_3;               // 0x0108(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SelectVector_ReturnValue_4;               // 0x0114(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SelectVector_ReturnValue_5;               // 0x0120(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue_1;          // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue_1;                // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x0134(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0140(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue_2;                // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SelectVector_ReturnValue_6;               // 0x0150(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue;              // 0x015C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x0168(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F1[0x3];                                      // 0x01F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue_1;            // 0x01F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0201(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_202[0x2];                                      // 0x0202(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0204(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x020C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0218(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0224(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0230(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23C[0x4];                                      // 0x023C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0240(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0250(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0258(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0260(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0264(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0268(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x026C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0278(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(StemSpline_BP_C_TraceTowardsDirection) == 0x000008, "Wrong alignment on StemSpline_BP_C_TraceTowardsDirection");
static_assert(sizeof(StemSpline_BP_C_TraceTowardsDirection) == 0x000288, "Wrong size on StemSpline_BP_C_TraceTowardsDirection");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, StartLocation) == 0x000000, "Member 'StemSpline_BP_C_TraceTowardsDirection::StartLocation' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, relativeNormal) == 0x00000C, "Member 'StemSpline_BP_C_TraceTowardsDirection::relativeNormal' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, forSubStem) == 0x000018, "Member 'StemSpline_BP_C_TraceTowardsDirection::forSubStem' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, HitLocation) == 0x00001C, "Member 'StemSpline_BP_C_TraceTowardsDirection::HitLocation' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, HitNormal) == 0x000028, "Member 'StemSpline_BP_C_TraceTowardsDirection::HitNormal' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, lastLocation) == 0x000034, "Member 'StemSpline_BP_C_TraceTowardsDirection::lastLocation' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, traceDirection) == 0x000040, "Member 'StemSpline_BP_C_TraceTowardsDirection::traceDirection' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, hitSomething) == 0x00004C, "Member 'StemSpline_BP_C_TraceTowardsDirection::hitSomething' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, forSubStem_) == 0x00004D, "Member 'StemSpline_BP_C_TraceTowardsDirection::forSubStem_' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, relativeNormal_) == 0x000050, "Member 'StemSpline_BP_C_TraceTowardsDirection::relativeNormal_' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, StartLoc) == 0x00005C, "Member 'StemSpline_BP_C_TraceTowardsDirection::StartLoc' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, randomIrregularity) == 0x000068, "Member 'StemSpline_BP_C_TraceTowardsDirection::randomIrregularity' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, CallFunc_Greater_IntInt_ReturnValue) == 0x00006C, "Member 'StemSpline_BP_C_TraceTowardsDirection::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000070, "Member 'StemSpline_BP_C_TraceTowardsDirection::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, CallFunc_SelectVector_ReturnValue) == 0x000074, "Member 'StemSpline_BP_C_TraceTowardsDirection::CallFunc_SelectVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, CallFunc_SelectVector_ReturnValue_1) == 0x000080, "Member 'StemSpline_BP_C_TraceTowardsDirection::CallFunc_SelectVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00008C, "Member 'StemSpline_BP_C_TraceTowardsDirection::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, CallFunc_RandomFloatInRange_ReturnValue) == 0x000090, "Member 'StemSpline_BP_C_TraceTowardsDirection::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, CallFunc_SelectFloat_ReturnValue) == 0x000094, "Member 'StemSpline_BP_C_TraceTowardsDirection::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, Temp_object_Variable) == 0x000098, "Member 'StemSpline_BP_C_TraceTowardsDirection::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, CallFunc_Cross_VectorVector_ReturnValue) == 0x0000A8, "Member 'StemSpline_BP_C_TraceTowardsDirection::CallFunc_Cross_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, CallFunc_Normal_ReturnValue) == 0x0000B4, "Member 'StemSpline_BP_C_TraceTowardsDirection::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x0000C0, "Member 'StemSpline_BP_C_TraceTowardsDirection::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, CallFunc_SelectVector_ReturnValue_2) == 0x0000C4, "Member 'StemSpline_BP_C_TraceTowardsDirection::CallFunc_SelectVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, CallFunc_RandomFloatInRange_ReturnValue_1) == 0x0000D0, "Member 'StemSpline_BP_C_TraceTowardsDirection::CallFunc_RandomFloatInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000D4, "Member 'StemSpline_BP_C_TraceTowardsDirection::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, CallFunc_GetActorForwardVector_ReturnValue) == 0x0000E0, "Member 'StemSpline_BP_C_TraceTowardsDirection::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000EC, "Member 'StemSpline_BP_C_TraceTowardsDirection::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, CallFunc_GetActorForwardVector_ReturnValue_1) == 0x0000F8, "Member 'StemSpline_BP_C_TraceTowardsDirection::CallFunc_GetActorForwardVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000104, "Member 'StemSpline_BP_C_TraceTowardsDirection::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, CallFunc_SelectVector_ReturnValue_3) == 0x000108, "Member 'StemSpline_BP_C_TraceTowardsDirection::CallFunc_SelectVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, CallFunc_SelectVector_ReturnValue_4) == 0x000114, "Member 'StemSpline_BP_C_TraceTowardsDirection::CallFunc_SelectVector_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, CallFunc_SelectVector_ReturnValue_5) == 0x000120, "Member 'StemSpline_BP_C_TraceTowardsDirection::CallFunc_SelectVector_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, CallFunc_Multiply_IntFloat_ReturnValue_1) == 0x00012C, "Member 'StemSpline_BP_C_TraceTowardsDirection::CallFunc_Multiply_IntFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, CallFunc_SelectFloat_ReturnValue_1) == 0x000130, "Member 'StemSpline_BP_C_TraceTowardsDirection::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x000134, "Member 'StemSpline_BP_C_TraceTowardsDirection::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, CallFunc_Add_VectorVector_ReturnValue) == 0x000140, "Member 'StemSpline_BP_C_TraceTowardsDirection::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, CallFunc_SelectFloat_ReturnValue_2) == 0x00014C, "Member 'StemSpline_BP_C_TraceTowardsDirection::CallFunc_SelectFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, CallFunc_SelectVector_ReturnValue_6) == 0x000150, "Member 'StemSpline_BP_C_TraceTowardsDirection::CallFunc_SelectVector_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, CallFunc_RotateAngleAxis_ReturnValue) == 0x00015C, "Member 'StemSpline_BP_C_TraceTowardsDirection::CallFunc_RotateAngleAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, CallFunc_LineTraceSingle_OutHit) == 0x000168, "Member 'StemSpline_BP_C_TraceTowardsDirection::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, CallFunc_LineTraceSingle_ReturnValue) == 0x0001F0, "Member 'StemSpline_BP_C_TraceTowardsDirection::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, CallFunc_RotateAngleAxis_ReturnValue_1) == 0x0001F4, "Member 'StemSpline_BP_C_TraceTowardsDirection::CallFunc_RotateAngleAxis_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, CallFunc_BreakHitResult_bBlockingHit) == 0x000200, "Member 'StemSpline_BP_C_TraceTowardsDirection::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, CallFunc_BreakHitResult_bInitialOverlap) == 0x000201, "Member 'StemSpline_BP_C_TraceTowardsDirection::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, CallFunc_BreakHitResult_Time) == 0x000204, "Member 'StemSpline_BP_C_TraceTowardsDirection::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, CallFunc_BreakHitResult_Distance) == 0x000208, "Member 'StemSpline_BP_C_TraceTowardsDirection::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, CallFunc_BreakHitResult_Location) == 0x00020C, "Member 'StemSpline_BP_C_TraceTowardsDirection::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, CallFunc_BreakHitResult_ImpactPoint) == 0x000218, "Member 'StemSpline_BP_C_TraceTowardsDirection::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, CallFunc_BreakHitResult_Normal) == 0x000224, "Member 'StemSpline_BP_C_TraceTowardsDirection::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, CallFunc_BreakHitResult_ImpactNormal) == 0x000230, "Member 'StemSpline_BP_C_TraceTowardsDirection::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, CallFunc_BreakHitResult_PhysMat) == 0x000240, "Member 'StemSpline_BP_C_TraceTowardsDirection::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, CallFunc_BreakHitResult_HitActor) == 0x000248, "Member 'StemSpline_BP_C_TraceTowardsDirection::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, CallFunc_BreakHitResult_HitComponent) == 0x000250, "Member 'StemSpline_BP_C_TraceTowardsDirection::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, CallFunc_BreakHitResult_HitBoneName) == 0x000258, "Member 'StemSpline_BP_C_TraceTowardsDirection::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, CallFunc_BreakHitResult_HitItem) == 0x000260, "Member 'StemSpline_BP_C_TraceTowardsDirection::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, CallFunc_BreakHitResult_ElementIndex) == 0x000264, "Member 'StemSpline_BP_C_TraceTowardsDirection::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, CallFunc_BreakHitResult_FaceIndex) == 0x000268, "Member 'StemSpline_BP_C_TraceTowardsDirection::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, CallFunc_BreakHitResult_TraceStart) == 0x00026C, "Member 'StemSpline_BP_C_TraceTowardsDirection::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceTowardsDirection, CallFunc_BreakHitResult_TraceEnd) == 0x000278, "Member 'StemSpline_BP_C_TraceTowardsDirection::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");

// Function StemSpline_BP.StemSpline_BP_C.TraceDown
// 0x0170 (0x0170 - 0x0000)
struct StemSpline_BP_C_TraceDown final
{
public:
	struct FVector                                StartLocation;                                     // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                relativeNormal;                                    // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          forBridgeSeek;                                     // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitLocation;                                       // 0x001C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitNormal;                                         // 0x0028(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          hitSomething;                                      // 0x0034(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0038(0x0010)(ConstParm, ReferenceParm)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x0064(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x00EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00ED(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00EE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_EF[0x1];                                       // 0x00EF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0104(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0110(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x011C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0138(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0154(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0160(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(StemSpline_BP_C_TraceDown) == 0x000008, "Wrong alignment on StemSpline_BP_C_TraceDown");
static_assert(sizeof(StemSpline_BP_C_TraceDown) == 0x000170, "Wrong size on StemSpline_BP_C_TraceDown");
static_assert(offsetof(StemSpline_BP_C_TraceDown, StartLocation) == 0x000000, "Member 'StemSpline_BP_C_TraceDown::StartLocation' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceDown, relativeNormal) == 0x00000C, "Member 'StemSpline_BP_C_TraceDown::relativeNormal' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceDown, forBridgeSeek) == 0x000018, "Member 'StemSpline_BP_C_TraceDown::forBridgeSeek' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceDown, HitLocation) == 0x00001C, "Member 'StemSpline_BP_C_TraceDown::HitLocation' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceDown, HitNormal) == 0x000028, "Member 'StemSpline_BP_C_TraceDown::HitNormal' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceDown, hitSomething) == 0x000034, "Member 'StemSpline_BP_C_TraceDown::hitSomething' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceDown, Temp_object_Variable) == 0x000038, "Member 'StemSpline_BP_C_TraceDown::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceDown, CallFunc_SelectFloat_ReturnValue) == 0x000048, "Member 'StemSpline_BP_C_TraceDown::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceDown, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00004C, "Member 'StemSpline_BP_C_TraceDown::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceDown, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000058, "Member 'StemSpline_BP_C_TraceDown::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceDown, CallFunc_LineTraceSingle_OutHit) == 0x000064, "Member 'StemSpline_BP_C_TraceDown::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceDown, CallFunc_LineTraceSingle_ReturnValue) == 0x0000EC, "Member 'StemSpline_BP_C_TraceDown::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceDown, CallFunc_BreakHitResult_bBlockingHit) == 0x0000ED, "Member 'StemSpline_BP_C_TraceDown::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceDown, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000EE, "Member 'StemSpline_BP_C_TraceDown::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceDown, CallFunc_BreakHitResult_Time) == 0x0000F0, "Member 'StemSpline_BP_C_TraceDown::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceDown, CallFunc_BreakHitResult_Distance) == 0x0000F4, "Member 'StemSpline_BP_C_TraceDown::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceDown, CallFunc_BreakHitResult_Location) == 0x0000F8, "Member 'StemSpline_BP_C_TraceDown::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceDown, CallFunc_BreakHitResult_ImpactPoint) == 0x000104, "Member 'StemSpline_BP_C_TraceDown::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceDown, CallFunc_BreakHitResult_Normal) == 0x000110, "Member 'StemSpline_BP_C_TraceDown::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceDown, CallFunc_BreakHitResult_ImpactNormal) == 0x00011C, "Member 'StemSpline_BP_C_TraceDown::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceDown, CallFunc_BreakHitResult_PhysMat) == 0x000128, "Member 'StemSpline_BP_C_TraceDown::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceDown, CallFunc_BreakHitResult_HitActor) == 0x000130, "Member 'StemSpline_BP_C_TraceDown::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceDown, CallFunc_BreakHitResult_HitComponent) == 0x000138, "Member 'StemSpline_BP_C_TraceDown::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceDown, CallFunc_BreakHitResult_HitBoneName) == 0x000140, "Member 'StemSpline_BP_C_TraceDown::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceDown, CallFunc_BreakHitResult_HitItem) == 0x000148, "Member 'StemSpline_BP_C_TraceDown::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceDown, CallFunc_BreakHitResult_ElementIndex) == 0x00014C, "Member 'StemSpline_BP_C_TraceDown::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceDown, CallFunc_BreakHitResult_FaceIndex) == 0x000150, "Member 'StemSpline_BP_C_TraceDown::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceDown, CallFunc_BreakHitResult_TraceStart) == 0x000154, "Member 'StemSpline_BP_C_TraceDown::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_TraceDown, CallFunc_BreakHitResult_TraceEnd) == 0x000160, "Member 'StemSpline_BP_C_TraceDown::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");

// Function StemSpline_BP.StemSpline_BP_C.DoCheckSegment
// 0x0618 (0x0618 - 0x0000)
struct StemSpline_BP_C_DoCheckSegment final
{
public:
	struct FVector                                StartLocation;                                     // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                relativeNormal;                                    // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                bridgeSeek_surfaceNormal;                          // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        bridgeSeek_Points;                                 // 0x0028(0x0010)(Edit, BlueprintVisible)
	struct FVector                                foundEdgeNormal;                                   // 0x0038(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                foundEdgeLocation;                                 // 0x0044(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        bridgeSeekPoints;                                  // 0x0050(0x0010)(Edit, BlueprintVisible)
	struct FVector                                locFromTraceDownWithHeight;                        // 0x0060(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                hitNormalFromTraceDown;                            // 0x006C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                hitLocFromTraceDown;                               // 0x0078(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                traceDirectionFromTraceTowards;                    // 0x0084(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                hitNormalFromTraceTowards;                         // 0x0090(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                hitLocFromTraceTowards;                            // 0x009C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                subStarterStartDirection;                          // 0x00A8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                addingEdgePoint;                                   // 0x00B4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                locAfterDirTrace;                                  // 0x00C0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                subSegmentStartLocation;                           // 0x00CC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                subSegmentStartSurfaceNormal;                      // 0x00D8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x00E8(0x0010)(ConstParm, ReferenceParm)
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item;                           // 0x00FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue_1;            // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0114(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Divide_VectorInt_ReturnValue;             // 0x0120(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_VectorVector_ReturnValue;      // 0x012C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12D[0x3];                                      // 0x012D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_LastIndex_ReturnValue_2;            // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0134(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_135[0x3];                                      // 0x0135(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegAcos_ReturnValue;                      // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0144(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Divide_VectorInt_ReturnValue_1;           // 0x0154(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item_1;                         // 0x0160(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x016C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_179[0x3];                                      // 0x0179(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x017C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_VectorVector_ReturnValue_1;    // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0189(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_18A[0x2];                                      // 0x018A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_LastIndex_ReturnValue_3;            // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item_2;                         // 0x0190(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue_4;            // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A9[0x3];                                      // 0x01A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_VectorVector_ReturnValue_2;    // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B1[0x3];                                      // 0x01B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x01B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1BA[0x2];                                      // 0x01BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue_5;            // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item_3;                         // 0x01C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_3;           // 0x01D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Divide_VectorInt_ReturnValue_2;           // 0x01E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x01EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x01F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0204(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0209(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_20A[0x2];                                      // 0x020A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_2;       // 0x020C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0218(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_3;       // 0x0224(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_VectorVector_ReturnValue_3;    // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_VectorVector_ReturnValue_4;    // 0x0231(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x0232(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_4;                // 0x0233(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0234(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_235[0x3];                                      // 0x0235(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x023C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x023D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23E[0x2];                                      // 0x023E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetForwardVector_ReturnValue_1;           // 0x0240(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_4;       // 0x024C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_4;           // 0x0258(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x0264(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x02EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x02ED(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_5;                // 0x02EE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x02EF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x02F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item_4;                         // 0x02F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SeekForBridge_bridgeBuilt;                // 0x0300(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_301[0x7];                                      // 0x0301(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        CallFunc_SeekForBridge_bridgePoints;               // 0x0308(0x0010)(ReferenceParm)
	struct FVector                                CallFunc_SeekForBridge_newSurfaceNormal;           // 0x0318(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0324(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0328(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x032C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32D[0x3];                                      // 0x032D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x0330(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x0334(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x0335(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0336(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_337[0x1];                                      // 0x0337(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x0338(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_3;                  // 0x033C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SeekForBridge_bridgeBuilt_1;              // 0x0340(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_341[0x7];                                      // 0x0341(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        CallFunc_SeekForBridge_bridgePoints_1;             // 0x0348(0x0010)(ReferenceParm)
	struct FVector                                CallFunc_SeekForBridge_newSurfaceNormal_1;         // 0x0358(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0364(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0368(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_369[0x3];                                      // 0x0369(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_4;                  // 0x036C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_6;                 // 0x0370(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_7;                 // 0x0371(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_VectorVector_ReturnValue_5;    // 0x0372(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_8;                 // 0x0373(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_X;                            // 0x0374(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0378(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x037C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_5;           // 0x0380(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x038C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_2;          // 0x0398(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_399[0x3];                                      // 0x0399(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X_1;                          // 0x039C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x03A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x03A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x03A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x03AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x03B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x03C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_RotatorToVector_ReturnValue;         // 0x03C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x03D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_5;       // 0x03D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_6;           // 0x03E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x03F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F1[0x3];                                      // 0x03F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x03F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_5;                  // 0x03F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_4;                // 0x03FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_1;    // 0x03FD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_9;                 // 0x03FE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_VectorVector_ReturnValue_6;    // 0x03FF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_10;                // 0x0400(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_11;                // 0x0401(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_5;                // 0x0402(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_403[0x1];                                      // 0x0403(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_4;                               // 0x0404(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_5;                               // 0x0408(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x040C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_6;                  // 0x0410(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_6;                // 0x0414(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_12;                // 0x0415(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_416[0x2];                                      // 0x0416(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_LastIndex_ReturnValue_6;            // 0x0418(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_13;                // 0x041C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41D[0x3];                                      // 0x041D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Array_Get_Item_5;                         // 0x0420(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x042C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item_6;                         // 0x0430(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x043C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue_1;                      // 0x0448(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x044C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_44D[0x3];                                      // 0x044D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_LastIndex_ReturnValue_7;            // 0x0450(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0454(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item_7;                         // 0x0460(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_2;      // 0x046C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue_2;                      // 0x0478(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x047C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x0480(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_14;                // 0x0481(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_7;                // 0x0482(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_483[0x1];                                      // 0x0483(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_2;            // 0x0484(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_3;            // 0x0488(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_1;         // 0x048C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0490(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0494(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_1;       // 0x0495(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_2;    // 0x0496(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_15;                // 0x0497(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_16;                // 0x0498(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_499[0x3];                                      // 0x0499(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x049C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_17;                // 0x04A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A1[0x3];                                      // 0x04A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_RandomFloatInRange_ReturnValue_2;         // 0x04A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RandomBool_ReturnValue;                   // 0x04A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A9[0x3];                                      // 0x04A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x04AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSubStemStarter                        K2Node_MakeStruct_SubStemStarter;                  // 0x04B0(0x0028)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x04D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x04DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_7;                  // 0x04E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue;              // 0x04E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue;           // 0x04F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_8;                  // 0x04FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0500(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_6;       // 0x050C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_8;                // 0x0518(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_519[0x3];                                      // 0x0519(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_7;           // 0x051C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_8;           // 0x0528(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_9;                  // 0x0534(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_6;                 // 0x0538(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_7;       // 0x053C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_9;           // 0x0548(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_10;          // 0x0554(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Divide_VectorInt_ReturnValue_3;           // 0x0560(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_8;       // 0x056C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_11;          // 0x0578(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SearchForEdge_FoundAnEdge_;               // 0x0584(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_585[0x3];                                      // 0x0585(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_SearchForEdge_foundEdgeLocation;          // 0x0588(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SearchForEdge_foundEdgeNormal;            // 0x0594(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_6;                // 0x05A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A1[0x3];                                      // 0x05A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_10;                 // 0x05A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_9;       // 0x05A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TraceDown_hitLocation;                    // 0x05B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TraceDown_hitNormal;                      // 0x05C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TraceDown_hitSomething;                   // 0x05CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5CD[0x3];                                      // 0x05CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_12;          // 0x05D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TraceTowardsDirection_hitLocation;        // 0x05DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TraceTowardsDirection_hitNormal;          // 0x05E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TraceTowardsDirection_lastLocation;       // 0x05F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TraceTowardsDirection_traceDirection;     // 0x0600(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TraceTowardsDirection_hitSomething;       // 0x060C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_9;                // 0x060D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_60E[0x2];                                      // 0x060E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_7;                 // 0x0610(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(StemSpline_BP_C_DoCheckSegment) == 0x000008, "Wrong alignment on StemSpline_BP_C_DoCheckSegment");
static_assert(sizeof(StemSpline_BP_C_DoCheckSegment) == 0x000618, "Wrong size on StemSpline_BP_C_DoCheckSegment");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, StartLocation) == 0x000000, "Member 'StemSpline_BP_C_DoCheckSegment::StartLocation' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, relativeNormal) == 0x00000C, "Member 'StemSpline_BP_C_DoCheckSegment::relativeNormal' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, bridgeSeek_surfaceNormal) == 0x000018, "Member 'StemSpline_BP_C_DoCheckSegment::bridgeSeek_surfaceNormal' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, bridgeSeek_Points) == 0x000028, "Member 'StemSpline_BP_C_DoCheckSegment::bridgeSeek_Points' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, foundEdgeNormal) == 0x000038, "Member 'StemSpline_BP_C_DoCheckSegment::foundEdgeNormal' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, foundEdgeLocation) == 0x000044, "Member 'StemSpline_BP_C_DoCheckSegment::foundEdgeLocation' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, bridgeSeekPoints) == 0x000050, "Member 'StemSpline_BP_C_DoCheckSegment::bridgeSeekPoints' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, locFromTraceDownWithHeight) == 0x000060, "Member 'StemSpline_BP_C_DoCheckSegment::locFromTraceDownWithHeight' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, hitNormalFromTraceDown) == 0x00006C, "Member 'StemSpline_BP_C_DoCheckSegment::hitNormalFromTraceDown' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, hitLocFromTraceDown) == 0x000078, "Member 'StemSpline_BP_C_DoCheckSegment::hitLocFromTraceDown' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, traceDirectionFromTraceTowards) == 0x000084, "Member 'StemSpline_BP_C_DoCheckSegment::traceDirectionFromTraceTowards' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, hitNormalFromTraceTowards) == 0x000090, "Member 'StemSpline_BP_C_DoCheckSegment::hitNormalFromTraceTowards' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, hitLocFromTraceTowards) == 0x00009C, "Member 'StemSpline_BP_C_DoCheckSegment::hitLocFromTraceTowards' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, subStarterStartDirection) == 0x0000A8, "Member 'StemSpline_BP_C_DoCheckSegment::subStarterStartDirection' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, addingEdgePoint) == 0x0000B4, "Member 'StemSpline_BP_C_DoCheckSegment::addingEdgePoint' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, locAfterDirTrace) == 0x0000C0, "Member 'StemSpline_BP_C_DoCheckSegment::locAfterDirTrace' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, subSegmentStartLocation) == 0x0000CC, "Member 'StemSpline_BP_C_DoCheckSegment::subSegmentStartLocation' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, subSegmentStartSurfaceNormal) == 0x0000D8, "Member 'StemSpline_BP_C_DoCheckSegment::subSegmentStartSurfaceNormal' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, Temp_int_Variable) == 0x0000E4, "Member 'StemSpline_BP_C_DoCheckSegment::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, Temp_object_Variable) == 0x0000E8, "Member 'StemSpline_BP_C_DoCheckSegment::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Array_LastIndex_ReturnValue) == 0x0000F8, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Array_Get_Item) == 0x0000FC, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Array_LastIndex_ReturnValue_1) == 0x000108, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Array_LastIndex_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Array_Length_ReturnValue) == 0x00010C, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, Temp_int_Variable_1) == 0x000110, "Member 'StemSpline_BP_C_DoCheckSegment::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Add_VectorVector_ReturnValue) == 0x000114, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Divide_VectorInt_ReturnValue) == 0x000120, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Divide_VectorInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_EqualEqual_VectorVector_ReturnValue) == 0x00012C, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_EqualEqual_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Array_LastIndex_ReturnValue_2) == 0x000130, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Array_LastIndex_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Not_PreBool_ReturnValue) == 0x000134, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Dot_VectorVector_ReturnValue) == 0x000138, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_DegAcos_ReturnValue) == 0x00013C, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_DegAcos_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, Temp_int_Variable_2) == 0x000140, "Member 'StemSpline_BP_C_DoCheckSegment::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000144, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, Temp_int_Array_Index_Variable) == 0x000150, "Member 'StemSpline_BP_C_DoCheckSegment::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Divide_VectorInt_ReturnValue_1) == 0x000154, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Divide_VectorInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Array_Get_Item_1) == 0x000160, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00016C, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000178, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Add_VectorVector_ReturnValue_2) == 0x00017C, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_EqualEqual_VectorVector_ReturnValue_1) == 0x000188, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_EqualEqual_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Not_PreBool_ReturnValue_1) == 0x000189, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Array_LastIndex_ReturnValue_3) == 0x00018C, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Array_LastIndex_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Array_Get_Item_2) == 0x000190, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Array_LastIndex_ReturnValue_4) == 0x00019C, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Array_LastIndex_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Array_Length_ReturnValue_1) == 0x0001A0, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, Temp_int_Loop_Counter_Variable) == 0x0001A4, "Member 'StemSpline_BP_C_DoCheckSegment::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Less_IntInt_ReturnValue) == 0x0001A8, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Add_IntInt_ReturnValue) == 0x0001AC, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_EqualEqual_VectorVector_ReturnValue_2) == 0x0001B0, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_EqualEqual_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, Temp_int_Loop_Counter_Variable_1) == 0x0001B4, "Member 'StemSpline_BP_C_DoCheckSegment::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Not_PreBool_ReturnValue_2) == 0x0001B8, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Less_IntInt_ReturnValue_1) == 0x0001B9, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Add_IntInt_ReturnValue_1) == 0x0001BC, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, Temp_int_Variable_3) == 0x0001C0, "Member 'StemSpline_BP_C_DoCheckSegment::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Array_LastIndex_ReturnValue_5) == 0x0001C4, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Array_LastIndex_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Array_Get_Item_3) == 0x0001C8, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Add_VectorVector_ReturnValue_3) == 0x0001D4, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Add_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Divide_VectorInt_ReturnValue_2) == 0x0001E0, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Divide_VectorInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x0001EC, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0001F8, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_VSize_ReturnValue) == 0x000204, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000208, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_BooleanAND_ReturnValue) == 0x000209, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Multiply_VectorFloat_ReturnValue_2) == 0x00020C, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Multiply_VectorFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_GetForwardVector_ReturnValue) == 0x000218, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Multiply_VectorFloat_ReturnValue_3) == 0x000224, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Multiply_VectorFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_EqualEqual_VectorVector_ReturnValue_3) == 0x000230, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_EqualEqual_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_EqualEqual_VectorVector_ReturnValue_4) == 0x000231, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_EqualEqual_VectorVector_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Not_PreBool_ReturnValue_3) == 0x000232, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Not_PreBool_ReturnValue_4) == 0x000233, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Not_PreBool_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_BooleanAND_ReturnValue_1) == 0x000234, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Add_IntInt_ReturnValue_2) == 0x000238, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Less_IntInt_ReturnValue_2) == 0x00023C, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_BooleanAND_ReturnValue_2) == 0x00023D, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_GetForwardVector_ReturnValue_1) == 0x000240, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_GetForwardVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Multiply_VectorFloat_ReturnValue_4) == 0x00024C, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Multiply_VectorFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Add_VectorVector_ReturnValue_4) == 0x000258, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Add_VectorVector_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_LineTraceSingle_OutHit) == 0x000264, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_LineTraceSingle_ReturnValue) == 0x0002EC, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x0002ED, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Not_PreBool_ReturnValue_5) == 0x0002EE, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Not_PreBool_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_BooleanAND_ReturnValue_3) == 0x0002EF, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, Temp_int_Array_Index_Variable_1) == 0x0002F0, "Member 'StemSpline_BP_C_DoCheckSegment::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Array_Get_Item_4) == 0x0002F4, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_SeekForBridge_bridgeBuilt) == 0x000300, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_SeekForBridge_bridgeBuilt' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_SeekForBridge_bridgePoints) == 0x000308, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_SeekForBridge_bridgePoints' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_SeekForBridge_newSurfaceNormal) == 0x000318, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_SeekForBridge_newSurfaceNormal' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Array_Add_ReturnValue) == 0x000324, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Array_Add_ReturnValue_1) == 0x000328, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x00032C, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_RandomFloatInRange_ReturnValue) == 0x000330, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_BooleanAND_ReturnValue_4) == 0x000334, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_BooleanAND_ReturnValue_5) == 0x000335, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Less_FloatFloat_ReturnValue) == 0x000336, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Array_Add_ReturnValue_2) == 0x000338, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Array_Add_ReturnValue_3) == 0x00033C, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Array_Add_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_SeekForBridge_bridgeBuilt_1) == 0x000340, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_SeekForBridge_bridgeBuilt_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_SeekForBridge_bridgePoints_1) == 0x000348, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_SeekForBridge_bridgePoints_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_SeekForBridge_newSurfaceNormal_1) == 0x000358, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_SeekForBridge_newSurfaceNormal_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Array_Length_ReturnValue_2) == 0x000364, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Greater_IntInt_ReturnValue) == 0x000368, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Array_Add_ReturnValue_4) == 0x00036C, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Array_Add_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_BooleanAND_ReturnValue_6) == 0x000370, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_BooleanAND_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_BooleanAND_ReturnValue_7) == 0x000371, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_BooleanAND_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_EqualEqual_VectorVector_ReturnValue_5) == 0x000372, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_EqualEqual_VectorVector_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_BooleanAND_ReturnValue_8) == 0x000373, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_BooleanAND_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_BreakVector_X) == 0x000374, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_BreakVector_Y) == 0x000378, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_BreakVector_Z) == 0x00037C, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Add_VectorVector_ReturnValue_5) == 0x000380, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Add_VectorVector_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_MakeVector_ReturnValue) == 0x00038C, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_EqualEqual_IntInt_ReturnValue_2) == 0x000398, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_EqualEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_BreakVector_X_1) == 0x00039C, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_BreakVector_Y_1) == 0x0003A0, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_BreakVector_Z_1) == 0x0003A4, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Conv_IntToFloat_ReturnValue) == 0x0003A8, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_MakeVector_ReturnValue_1) == 0x0003AC, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_FindLookAtRotation_ReturnValue) == 0x0003B8, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x0003C4, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Conv_RotatorToVector_ReturnValue) == 0x0003C8, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Conv_RotatorToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0003D4, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Multiply_VectorFloat_ReturnValue_5) == 0x0003D8, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Multiply_VectorFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Add_VectorVector_ReturnValue_6) == 0x0003E4, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Add_VectorVector_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Less_IntInt_ReturnValue_3) == 0x0003F0, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Add_IntInt_ReturnValue_3) == 0x0003F4, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Array_Add_ReturnValue_5) == 0x0003F8, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Array_Add_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Less_IntInt_ReturnValue_4) == 0x0003FC, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Less_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_GreaterEqual_FloatFloat_ReturnValue_1) == 0x0003FD, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_GreaterEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_BooleanAND_ReturnValue_9) == 0x0003FE, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_BooleanAND_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_EqualEqual_VectorVector_ReturnValue_6) == 0x0003FF, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_EqualEqual_VectorVector_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_BooleanAND_ReturnValue_10) == 0x000400, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_BooleanAND_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_BooleanAND_ReturnValue_11) == 0x000401, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_BooleanAND_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Less_IntInt_ReturnValue_5) == 0x000402, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Less_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, Temp_int_Variable_4) == 0x000404, "Member 'StemSpline_BP_C_DoCheckSegment::Temp_int_Variable_4' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, Temp_int_Variable_5) == 0x000408, "Member 'StemSpline_BP_C_DoCheckSegment::Temp_int_Variable_5' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Add_IntInt_ReturnValue_4) == 0x00040C, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Array_Add_ReturnValue_6) == 0x000410, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Array_Add_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Less_IntInt_ReturnValue_6) == 0x000414, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Less_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_BooleanAND_ReturnValue_12) == 0x000415, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_BooleanAND_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Array_LastIndex_ReturnValue_6) == 0x000418, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Array_LastIndex_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_BooleanAND_ReturnValue_13) == 0x00041C, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_BooleanAND_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Array_Get_Item_5) == 0x000420, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Array_Get_Item_5' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Subtract_IntInt_ReturnValue) == 0x00042C, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Array_Get_Item_6) == 0x000430, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Array_Get_Item_6' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x00043C, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_VSize_ReturnValue_1) == 0x000448, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_VSize_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x00044C, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Array_LastIndex_ReturnValue_7) == 0x000450, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Array_LastIndex_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_GetActorForwardVector_ReturnValue) == 0x000454, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Array_Get_Item_7) == 0x000460, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Array_Get_Item_7' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Subtract_VectorVector_ReturnValue_2) == 0x00046C, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Subtract_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_VSize_ReturnValue_2) == 0x000478, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_VSize_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Add_IntInt_ReturnValue_5) == 0x00047C, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x000480, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_BooleanAND_ReturnValue_14) == 0x000481, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_BooleanAND_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Less_IntInt_ReturnValue_7) == 0x000482, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Less_IntInt_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Conv_IntToFloat_ReturnValue_2) == 0x000484, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Conv_IntToFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Conv_IntToFloat_ReturnValue_3) == 0x000488, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Conv_IntToFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_RandomFloatInRange_ReturnValue_1) == 0x00048C, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_RandomFloatInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000490, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000494, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_LessEqual_FloatFloat_ReturnValue_1) == 0x000495, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_LessEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_GreaterEqual_FloatFloat_ReturnValue_2) == 0x000496, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_GreaterEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_BooleanAND_ReturnValue_15) == 0x000497, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_BooleanAND_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_BooleanAND_ReturnValue_16) == 0x000498, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_BooleanAND_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Add_FloatFloat_ReturnValue) == 0x00049C, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_BooleanAND_ReturnValue_17) == 0x0004A0, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_BooleanAND_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_RandomFloatInRange_ReturnValue_2) == 0x0004A4, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_RandomFloatInRange_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_RandomBool_ReturnValue) == 0x0004A8, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_RandomBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_SelectFloat_ReturnValue) == 0x0004AC, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, K2Node_MakeStruct_SubStemStarter) == 0x0004B0, "Member 'StemSpline_BP_C_DoCheckSegment::K2Node_MakeStruct_SubStemStarter' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0004D8, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x0004DC, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Array_Add_ReturnValue_7) == 0x0004E0, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Array_Add_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_RotateAngleAxis_ReturnValue) == 0x0004E4, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_RotateAngleAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Cross_VectorVector_ReturnValue) == 0x0004F0, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Cross_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Array_Add_ReturnValue_8) == 0x0004FC, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Array_Add_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Normal_ReturnValue) == 0x000500, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Multiply_VectorFloat_ReturnValue_6) == 0x00050C, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Multiply_VectorFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Less_IntInt_ReturnValue_8) == 0x000518, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Less_IntInt_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Add_VectorVector_ReturnValue_7) == 0x00051C, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Add_VectorVector_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Add_VectorVector_ReturnValue_8) == 0x000528, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Add_VectorVector_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Array_Add_ReturnValue_9) == 0x000534, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Array_Add_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Add_IntInt_ReturnValue_6) == 0x000538, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Add_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Multiply_VectorFloat_ReturnValue_7) == 0x00053C, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Multiply_VectorFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Add_VectorVector_ReturnValue_9) == 0x000548, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Add_VectorVector_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Add_VectorVector_ReturnValue_10) == 0x000554, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Add_VectorVector_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Divide_VectorInt_ReturnValue_3) == 0x000560, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Divide_VectorInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Multiply_VectorFloat_ReturnValue_8) == 0x00056C, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Multiply_VectorFloat_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Add_VectorVector_ReturnValue_11) == 0x000578, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Add_VectorVector_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_SearchForEdge_FoundAnEdge_) == 0x000584, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_SearchForEdge_FoundAnEdge_' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_SearchForEdge_foundEdgeLocation) == 0x000588, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_SearchForEdge_foundEdgeLocation' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_SearchForEdge_foundEdgeNormal) == 0x000594, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_SearchForEdge_foundEdgeNormal' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Not_PreBool_ReturnValue_6) == 0x0005A0, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Not_PreBool_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Array_Add_ReturnValue_10) == 0x0005A4, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Array_Add_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Multiply_VectorFloat_ReturnValue_9) == 0x0005A8, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Multiply_VectorFloat_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_TraceDown_hitLocation) == 0x0005B4, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_TraceDown_hitLocation' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_TraceDown_hitNormal) == 0x0005C0, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_TraceDown_hitNormal' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_TraceDown_hitSomething) == 0x0005CC, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_TraceDown_hitSomething' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Add_VectorVector_ReturnValue_12) == 0x0005D0, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Add_VectorVector_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_TraceTowardsDirection_hitLocation) == 0x0005DC, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_TraceTowardsDirection_hitLocation' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_TraceTowardsDirection_hitNormal) == 0x0005E8, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_TraceTowardsDirection_hitNormal' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_TraceTowardsDirection_lastLocation) == 0x0005F4, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_TraceTowardsDirection_lastLocation' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_TraceTowardsDirection_traceDirection) == 0x000600, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_TraceTowardsDirection_traceDirection' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_TraceTowardsDirection_hitSomething) == 0x00060C, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_TraceTowardsDirection_hitSomething' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Less_IntInt_ReturnValue_9) == 0x00060D, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Less_IntInt_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_DoCheckSegment, CallFunc_Add_IntInt_ReturnValue_7) == 0x000610, "Member 'StemSpline_BP_C_DoCheckSegment::CallFunc_Add_IntInt_ReturnValue_7' has a wrong offset!");

// Function StemSpline_BP.StemSpline_BP_C.SearchForEdge
// 0x0260 (0x0260 - 0x0000)
struct StemSpline_BP_C_SearchForEdge final
{
public:
	struct FVector                                searchStartLocation;                               // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                searchDirectionNormal;                             // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          forSubStem;                                        // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          FoundAnEdge_;                                      // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                foundEdgeLocation;                                 // 0x001C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                foundEdgeNormal;                                   // 0x0028(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         I;                                                 // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          forSubStem_;                                       // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                searchStartLoc;                                    // 0x003C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                searchDirNormal;                                   // 0x0048(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                edgeNormal;                                        // 0x0054(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                edgeLocation;                                      // 0x0060(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          foundAnEdge;                                       // 0x006C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue_1;      // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SelectVector_ReturnValue;                 // 0x0094(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue_1;                // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_SelectInt_ReturnValue_1;                  // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_SelectVector_ReturnValue_1;               // 0x00AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SelectVector_ReturnValue_2;               // 0x00B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue;              // 0x00C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue_1;          // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue;           // 0x00FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x0108(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0114(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_115[0x3];                                      // 0x0115(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0118(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0124(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0138(0x0010)(ConstParm, ReferenceParm)
	int32                                         Temp_int_Variable;                                 // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x014C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x01D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x01D5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x01D6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D7[0x1];                                      // 0x01D7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x01E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x01EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x01F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0204(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0220(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x023C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0248(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0254(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0258(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0259(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(StemSpline_BP_C_SearchForEdge) == 0x000008, "Wrong alignment on StemSpline_BP_C_SearchForEdge");
static_assert(sizeof(StemSpline_BP_C_SearchForEdge) == 0x000260, "Wrong size on StemSpline_BP_C_SearchForEdge");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, searchStartLocation) == 0x000000, "Member 'StemSpline_BP_C_SearchForEdge::searchStartLocation' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, searchDirectionNormal) == 0x00000C, "Member 'StemSpline_BP_C_SearchForEdge::searchDirectionNormal' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, forSubStem) == 0x000018, "Member 'StemSpline_BP_C_SearchForEdge::forSubStem' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, FoundAnEdge_) == 0x000019, "Member 'StemSpline_BP_C_SearchForEdge::FoundAnEdge_' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, foundEdgeLocation) == 0x00001C, "Member 'StemSpline_BP_C_SearchForEdge::foundEdgeLocation' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, foundEdgeNormal) == 0x000028, "Member 'StemSpline_BP_C_SearchForEdge::foundEdgeNormal' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, I) == 0x000034, "Member 'StemSpline_BP_C_SearchForEdge::I' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, forSubStem_) == 0x000038, "Member 'StemSpline_BP_C_SearchForEdge::forSubStem_' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, searchStartLoc) == 0x00003C, "Member 'StemSpline_BP_C_SearchForEdge::searchStartLoc' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, searchDirNormal) == 0x000048, "Member 'StemSpline_BP_C_SearchForEdge::searchDirNormal' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, edgeNormal) == 0x000054, "Member 'StemSpline_BP_C_SearchForEdge::edgeNormal' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, edgeLocation) == 0x000060, "Member 'StemSpline_BP_C_SearchForEdge::edgeLocation' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, foundAnEdge) == 0x00006C, "Member 'StemSpline_BP_C_SearchForEdge::foundAnEdge' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, CallFunc_GetActorForwardVector_ReturnValue) == 0x000070, "Member 'StemSpline_BP_C_SearchForEdge::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, CallFunc_SelectFloat_ReturnValue) == 0x00007C, "Member 'StemSpline_BP_C_SearchForEdge::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, CallFunc_SelectInt_ReturnValue) == 0x000080, "Member 'StemSpline_BP_C_SearchForEdge::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, CallFunc_GetActorForwardVector_ReturnValue_1) == 0x000084, "Member 'StemSpline_BP_C_SearchForEdge::CallFunc_GetActorForwardVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000090, "Member 'StemSpline_BP_C_SearchForEdge::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, CallFunc_SelectVector_ReturnValue) == 0x000094, "Member 'StemSpline_BP_C_SearchForEdge::CallFunc_SelectVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, CallFunc_SelectFloat_ReturnValue_1) == 0x0000A0, "Member 'StemSpline_BP_C_SearchForEdge::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, CallFunc_SelectInt_ReturnValue_1) == 0x0000A4, "Member 'StemSpline_BP_C_SearchForEdge::CallFunc_SelectInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, CallFunc_Greater_IntInt_ReturnValue) == 0x0000A8, "Member 'StemSpline_BP_C_SearchForEdge::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, CallFunc_SelectVector_ReturnValue_1) == 0x0000AC, "Member 'StemSpline_BP_C_SearchForEdge::CallFunc_SelectVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, CallFunc_SelectVector_ReturnValue_2) == 0x0000B8, "Member 'StemSpline_BP_C_SearchForEdge::CallFunc_SelectVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, CallFunc_Conv_IntToFloat_ReturnValue) == 0x0000C4, "Member 'StemSpline_BP_C_SearchForEdge::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, CallFunc_RotateAngleAxis_ReturnValue) == 0x0000C8, "Member 'StemSpline_BP_C_SearchForEdge::CallFunc_RotateAngleAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0000D4, "Member 'StemSpline_BP_C_SearchForEdge::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, CallFunc_Dot_VectorVector_ReturnValue) == 0x0000D8, "Member 'StemSpline_BP_C_SearchForEdge::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0000DC, "Member 'StemSpline_BP_C_SearchForEdge::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, CallFunc_Abs_ReturnValue) == 0x0000E0, "Member 'StemSpline_BP_C_SearchForEdge::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, CallFunc_Add_FloatFloat_ReturnValue) == 0x0000E4, "Member 'StemSpline_BP_C_SearchForEdge::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x0000E8, "Member 'StemSpline_BP_C_SearchForEdge::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000EC, "Member 'StemSpline_BP_C_SearchForEdge::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, CallFunc_Multiply_IntFloat_ReturnValue_1) == 0x0000F8, "Member 'StemSpline_BP_C_SearchForEdge::CallFunc_Multiply_IntFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, CallFunc_Cross_VectorVector_ReturnValue) == 0x0000FC, "Member 'StemSpline_BP_C_SearchForEdge::CallFunc_Cross_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x000108, "Member 'StemSpline_BP_C_SearchForEdge::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, Temp_bool_Variable) == 0x000114, "Member 'StemSpline_BP_C_SearchForEdge::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, CallFunc_Add_VectorVector_ReturnValue) == 0x000118, "Member 'StemSpline_BP_C_SearchForEdge::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000124, "Member 'StemSpline_BP_C_SearchForEdge::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, CallFunc_Not_PreBool_ReturnValue) == 0x000130, "Member 'StemSpline_BP_C_SearchForEdge::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, Temp_object_Variable) == 0x000138, "Member 'StemSpline_BP_C_SearchForEdge::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, Temp_int_Variable) == 0x000148, "Member 'StemSpline_BP_C_SearchForEdge::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, CallFunc_LineTraceSingle_OutHit) == 0x00014C, "Member 'StemSpline_BP_C_SearchForEdge::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, CallFunc_LineTraceSingle_ReturnValue) == 0x0001D4, "Member 'StemSpline_BP_C_SearchForEdge::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, CallFunc_BreakHitResult_bBlockingHit) == 0x0001D5, "Member 'StemSpline_BP_C_SearchForEdge::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, CallFunc_BreakHitResult_bInitialOverlap) == 0x0001D6, "Member 'StemSpline_BP_C_SearchForEdge::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, CallFunc_BreakHitResult_Time) == 0x0001D8, "Member 'StemSpline_BP_C_SearchForEdge::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, CallFunc_BreakHitResult_Distance) == 0x0001DC, "Member 'StemSpline_BP_C_SearchForEdge::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, CallFunc_BreakHitResult_Location) == 0x0001E0, "Member 'StemSpline_BP_C_SearchForEdge::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, CallFunc_BreakHitResult_ImpactPoint) == 0x0001EC, "Member 'StemSpline_BP_C_SearchForEdge::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, CallFunc_BreakHitResult_Normal) == 0x0001F8, "Member 'StemSpline_BP_C_SearchForEdge::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, CallFunc_BreakHitResult_ImpactNormal) == 0x000204, "Member 'StemSpline_BP_C_SearchForEdge::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, CallFunc_BreakHitResult_PhysMat) == 0x000210, "Member 'StemSpline_BP_C_SearchForEdge::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, CallFunc_BreakHitResult_HitActor) == 0x000218, "Member 'StemSpline_BP_C_SearchForEdge::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, CallFunc_BreakHitResult_HitComponent) == 0x000220, "Member 'StemSpline_BP_C_SearchForEdge::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, CallFunc_BreakHitResult_HitBoneName) == 0x000228, "Member 'StemSpline_BP_C_SearchForEdge::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, CallFunc_BreakHitResult_HitItem) == 0x000230, "Member 'StemSpline_BP_C_SearchForEdge::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, CallFunc_BreakHitResult_ElementIndex) == 0x000234, "Member 'StemSpline_BP_C_SearchForEdge::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, CallFunc_BreakHitResult_FaceIndex) == 0x000238, "Member 'StemSpline_BP_C_SearchForEdge::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, CallFunc_BreakHitResult_TraceStart) == 0x00023C, "Member 'StemSpline_BP_C_SearchForEdge::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, CallFunc_BreakHitResult_TraceEnd) == 0x000248, "Member 'StemSpline_BP_C_SearchForEdge::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, CallFunc_Add_IntInt_ReturnValue) == 0x000254, "Member 'StemSpline_BP_C_SearchForEdge::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000258, "Member 'StemSpline_BP_C_SearchForEdge::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SearchForEdge, CallFunc_BooleanAND_ReturnValue) == 0x000259, "Member 'StemSpline_BP_C_SearchForEdge::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function StemSpline_BP.StemSpline_BP_C.AddSplinePoints
// 0x005C (0x005C - 0x0000)
struct StemSpline_BP_C_AddSplinePoints final
{
public:
	ESplinePointType                              Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESplinePointType                              Temp_byte_Variable_1;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumberOfSplinePoints_ReturnValue;      // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue;                        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESplinePointType                              K2Node_Select_Default;                             // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item;                           // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_WorldLocToSplineTimeApprox_bestTime;      // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item_1;                         // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(StemSpline_BP_C_AddSplinePoints) == 0x000004, "Wrong alignment on StemSpline_BP_C_AddSplinePoints");
static_assert(sizeof(StemSpline_BP_C_AddSplinePoints) == 0x00005C, "Wrong size on StemSpline_BP_C_AddSplinePoints");
static_assert(offsetof(StemSpline_BP_C_AddSplinePoints, Temp_byte_Variable) == 0x000000, "Member 'StemSpline_BP_C_AddSplinePoints::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplinePoints, Temp_byte_Variable_1) == 0x000001, "Member 'StemSpline_BP_C_AddSplinePoints::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplinePoints, Temp_bool_Variable) == 0x000002, "Member 'StemSpline_BP_C_AddSplinePoints::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplinePoints, Temp_int_Array_Index_Variable) == 0x000004, "Member 'StemSpline_BP_C_AddSplinePoints::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplinePoints, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'StemSpline_BP_C_AddSplinePoints::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplinePoints, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'StemSpline_BP_C_AddSplinePoints::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplinePoints, Temp_int_Array_Index_Variable_1) == 0x000010, "Member 'StemSpline_BP_C_AddSplinePoints::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplinePoints, CallFunc_GetNumberOfSplinePoints_ReturnValue) == 0x000014, "Member 'StemSpline_BP_C_AddSplinePoints::CallFunc_GetNumberOfSplinePoints_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplinePoints, CallFunc_Multiply_IntInt_ReturnValue) == 0x000018, "Member 'StemSpline_BP_C_AddSplinePoints::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplinePoints, CallFunc_Clamp_ReturnValue) == 0x00001C, "Member 'StemSpline_BP_C_AddSplinePoints::CallFunc_Clamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplinePoints, K2Node_Select_Default) == 0x000020, "Member 'StemSpline_BP_C_AddSplinePoints::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplinePoints, Temp_int_Loop_Counter_Variable_1) == 0x000024, "Member 'StemSpline_BP_C_AddSplinePoints::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplinePoints, CallFunc_Array_Get_Item) == 0x000028, "Member 'StemSpline_BP_C_AddSplinePoints::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplinePoints, CallFunc_Array_Length_ReturnValue) == 0x000034, "Member 'StemSpline_BP_C_AddSplinePoints::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplinePoints, CallFunc_WorldLocToSplineTimeApprox_bestTime) == 0x000038, "Member 'StemSpline_BP_C_AddSplinePoints::CallFunc_WorldLocToSplineTimeApprox_bestTime' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplinePoints, CallFunc_Less_IntInt_ReturnValue) == 0x00003C, "Member 'StemSpline_BP_C_AddSplinePoints::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplinePoints, CallFunc_Array_Add_ReturnValue) == 0x000040, "Member 'StemSpline_BP_C_AddSplinePoints::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplinePoints, CallFunc_Add_IntInt_ReturnValue_1) == 0x000044, "Member 'StemSpline_BP_C_AddSplinePoints::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplinePoints, CallFunc_Array_Get_Item_1) == 0x000048, "Member 'StemSpline_BP_C_AddSplinePoints::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplinePoints, CallFunc_Array_Length_ReturnValue_1) == 0x000054, "Member 'StemSpline_BP_C_AddSplinePoints::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplinePoints, CallFunc_Array_Contains_ReturnValue) == 0x000058, "Member 'StemSpline_BP_C_AddSplinePoints::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplinePoints, CallFunc_Less_IntInt_ReturnValue_1) == 0x000059, "Member 'StemSpline_BP_C_AddSplinePoints::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");

// Function StemSpline_BP.StemSpline_BP_C.AddSplineMeshes
// 0x0250 (0x0250 - 0x0000)
struct StemSpline_BP_C_AddSplineMeshes final
{
public:
	class USplineComponent*                       SplineComponent;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USplineMeshComponent*                   addingMesh;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         meshStartTime;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         edgeTime;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                endTan;                                            // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EndLoc;                                            // 0x0024(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                startTan;                                          // 0x0030(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                StartLoc;                                          // 0x003C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         J;                                                 // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         meshaddStem2;                                      // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         meshAddStep;                                       // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LastIndex;                                         // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         I;                                                 // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USplineComponent*                       SplineComp;                                        // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Conv_RotatorToVector_ReturnValue;         // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_VectorVector_ReturnValue;      // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetDirectionAtTime_ReturnValue;           // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_VectorVector_ReturnValue_1;    // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x009A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x009B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x009D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9E[0x2];                                       // 0x009E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetTangentAtTime_ReturnValue;             // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            K2Node_Select_Default;                             // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Array_Get_Item;                           // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocationAtTime_ReturnValue;            // 0x00BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DD[0x3];                                       // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_VSize_ReturnValue_1;                      // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x00E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E5[0x3];                                       // 0x00E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_SelectVector_ReturnValue;                 // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SelectVector_ReturnValue_1;               // 0x0100(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x010C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SelectVector_ReturnValue_2;               // 0x0118(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0124(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0125(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0126(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_127[0x1];                                      // 0x0127(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FindClosestValue_closestValueIndex_;      // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_2;       // 0x0134(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_141[0x3];                                      // 0x0141(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_3;       // 0x0148(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Array_Get_Item_1;                         // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetTangentAtTime_ReturnValue_1;           // 0x015C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocationAtTime_ReturnValue_1;          // 0x0168(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_179[0x3];                                      // 0x0179(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Array_Get_Item_2;                         // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SelectVector_ReturnValue_3;               // 0x0188(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0194(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_195[0x3];                                      // 0x0195(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x019C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x019D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19E[0x2];                                      // 0x019E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A4[0x4];                                      // 0x01A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            K2Node_Select_Default_1;                           // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Array_Get_Item_3;                         // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B4[0x4];                                      // 0x01B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            K2Node_Select_Default_2;                           // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetStaticMesh_ReturnValue;                // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1C1[0x3];                                      // 0x01C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetNumberOfSplinePoints_ReturnValue;      // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D9[0x3];                                      // 0x01D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue_1;          // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue_2;          // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x01F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F5[0x3];                                      // 0x01F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue_1;                // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_2;          // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_2;          // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_201[0x3];                                      // 0x0201(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x0204(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue;       // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0210(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector2D                              K2Node_Select_Default_3;                           // 0x0240(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USplineMeshComponent*                   CallFunc_AddComponent_ReturnValue;                 // 0x0248(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(StemSpline_BP_C_AddSplineMeshes) == 0x000010, "Wrong alignment on StemSpline_BP_C_AddSplineMeshes");
static_assert(sizeof(StemSpline_BP_C_AddSplineMeshes) == 0x000250, "Wrong size on StemSpline_BP_C_AddSplineMeshes");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, SplineComponent) == 0x000000, "Member 'StemSpline_BP_C_AddSplineMeshes::SplineComponent' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, addingMesh) == 0x000008, "Member 'StemSpline_BP_C_AddSplineMeshes::addingMesh' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, meshStartTime) == 0x000010, "Member 'StemSpline_BP_C_AddSplineMeshes::meshStartTime' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, edgeTime) == 0x000014, "Member 'StemSpline_BP_C_AddSplineMeshes::edgeTime' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, endTan) == 0x000018, "Member 'StemSpline_BP_C_AddSplineMeshes::endTan' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, EndLoc) == 0x000024, "Member 'StemSpline_BP_C_AddSplineMeshes::EndLoc' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, startTan) == 0x000030, "Member 'StemSpline_BP_C_AddSplineMeshes::startTan' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, StartLoc) == 0x00003C, "Member 'StemSpline_BP_C_AddSplineMeshes::StartLoc' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, J) == 0x000048, "Member 'StemSpline_BP_C_AddSplineMeshes::J' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, meshaddStem2) == 0x00004C, "Member 'StemSpline_BP_C_AddSplineMeshes::meshaddStem2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, meshAddStep) == 0x000050, "Member 'StemSpline_BP_C_AddSplineMeshes::meshAddStep' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, LastIndex) == 0x000054, "Member 'StemSpline_BP_C_AddSplineMeshes::LastIndex' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, I) == 0x000058, "Member 'StemSpline_BP_C_AddSplineMeshes::I' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, SplineComp) == 0x000060, "Member 'StemSpline_BP_C_AddSplineMeshes::SplineComp' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_FindLookAtRotation_ReturnValue) == 0x000068, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_Conv_RotatorToVector_ReturnValue) == 0x000074, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_Conv_RotatorToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_EqualEqual_VectorVector_ReturnValue) == 0x000080, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_EqualEqual_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_Array_LastIndex_ReturnValue) == 0x000084, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000088, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_GetDirectionAtTime_ReturnValue) == 0x00008C, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_GetDirectionAtTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000098, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_EqualEqual_VectorVector_ReturnValue_1) == 0x000099, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_EqualEqual_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_BooleanOR_ReturnValue) == 0x00009A, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_BooleanAND_ReturnValue) == 0x00009B, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_BooleanAND_ReturnValue_1) == 0x00009C, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, Temp_bool_Variable) == 0x00009D, "Member 'StemSpline_BP_C_AddSplineMeshes::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_GetTangentAtTime_ReturnValue) == 0x0000A0, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_GetTangentAtTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, Temp_bool_Variable_1) == 0x0000AC, "Member 'StemSpline_BP_C_AddSplineMeshes::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, K2Node_Select_Default) == 0x0000B0, "Member 'StemSpline_BP_C_AddSplineMeshes::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_Array_Get_Item) == 0x0000B8, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_GetLocationAtTime_ReturnValue) == 0x0000BC, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_GetLocationAtTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, Temp_int_Variable) == 0x0000C8, "Member 'StemSpline_BP_C_AddSplineMeshes::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_Add_IntInt_ReturnValue) == 0x0000CC, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, Temp_int_Loop_Counter_Variable) == 0x0000D0, "Member 'StemSpline_BP_C_AddSplineMeshes::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_Add_IntInt_ReturnValue_1) == 0x0000D4, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_VSize_ReturnValue) == 0x0000D8, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_Less_FloatFloat_ReturnValue) == 0x0000DC, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_VSize_ReturnValue_1) == 0x0000E0, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_VSize_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x0000E4, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_SelectVector_ReturnValue) == 0x0000E8, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_SelectVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000F4, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_SelectVector_ReturnValue_1) == 0x000100, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_SelectVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x00010C, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_SelectVector_ReturnValue_2) == 0x000118, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_SelectVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_Array_Contains_ReturnValue) == 0x000124, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_Not_PreBool_ReturnValue) == 0x000125, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_BooleanAND_ReturnValue_2) == 0x000126, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_SelectFloat_ReturnValue) == 0x000128, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00012C, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_FindClosestValue_closestValueIndex_) == 0x000130, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_FindClosestValue_closestValueIndex_' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_Multiply_VectorFloat_ReturnValue_2) == 0x000134, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_Multiply_VectorFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_Greater_IntInt_ReturnValue) == 0x000140, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_Subtract_IntInt_ReturnValue) == 0x000144, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_Multiply_VectorFloat_ReturnValue_3) == 0x000148, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_Multiply_VectorFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, Temp_int_Array_Index_Variable) == 0x000154, "Member 'StemSpline_BP_C_AddSplineMeshes::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_Array_Get_Item_1) == 0x000158, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_GetTangentAtTime_ReturnValue_1) == 0x00015C, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_GetTangentAtTime_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_GetLocationAtTime_ReturnValue_1) == 0x000168, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_GetLocationAtTime_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_Array_Length_ReturnValue) == 0x000174, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_Less_IntInt_ReturnValue) == 0x000178, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_Array_Get_Item_2) == 0x00017C, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_Array_Length_ReturnValue_1) == 0x000180, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, Temp_int_Loop_Counter_Variable_1) == 0x000184, "Member 'StemSpline_BP_C_AddSplineMeshes::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_SelectVector_ReturnValue_3) == 0x000188, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_SelectVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_Less_IntInt_ReturnValue_1) == 0x000194, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_Add_IntInt_ReturnValue_2) == 0x000198, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, Temp_bool_Variable_2) == 0x00019C, "Member 'StemSpline_BP_C_AddSplineMeshes::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, Temp_bool_Variable_3) == 0x00019D, "Member 'StemSpline_BP_C_AddSplineMeshes::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, Temp_int_Array_Index_Variable_1) == 0x0001A0, "Member 'StemSpline_BP_C_AddSplineMeshes::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, K2Node_Select_Default_1) == 0x0001A8, "Member 'StemSpline_BP_C_AddSplineMeshes::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_Array_Get_Item_3) == 0x0001B0, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, K2Node_Select_Default_2) == 0x0001B8, "Member 'StemSpline_BP_C_AddSplineMeshes::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_SetStaticMesh_ReturnValue) == 0x0001C0, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_SetStaticMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_GetNumberOfSplinePoints_ReturnValue) == 0x0001C4, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_GetNumberOfSplinePoints_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x0001C8, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_FTrunc_ReturnValue) == 0x0001CC, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_Add_IntInt_ReturnValue_3) == 0x0001D0, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x0001D4, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0001D8, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_Multiply_IntFloat_ReturnValue) == 0x0001DC, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_Array_Add_ReturnValue) == 0x0001E0, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_Multiply_IntFloat_ReturnValue_1) == 0x0001E4, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_Multiply_IntFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_Multiply_IntFloat_ReturnValue_2) == 0x0001E8, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_Multiply_IntFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_Array_Add_ReturnValue_1) == 0x0001EC, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_Add_FloatFloat_ReturnValue) == 0x0001F0, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x0001F4, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_SelectFloat_ReturnValue_1) == 0x0001F8, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_Divide_FloatFloat_ReturnValue_2) == 0x0001FC, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_Divide_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_EqualEqual_IntInt_ReturnValue_2) == 0x000200, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_EqualEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_Array_Add_ReturnValue_2) == 0x000204, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_Multiply_Vector2DFloat_ReturnValue) == 0x000208, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_Multiply_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_GetTransform_ReturnValue) == 0x000210, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, K2Node_Select_Default_3) == 0x000240, "Member 'StemSpline_BP_C_AddSplineMeshes::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSplineMeshes, CallFunc_AddComponent_ReturnValue) == 0x000248, "Member 'StemSpline_BP_C_AddSplineMeshes::CallFunc_AddComponent_ReturnValue' has a wrong offset!");

// Function StemSpline_BP.StemSpline_BP_C.AddSubStem
// 0x001C (0x001C - 0x0000)
struct StemSpline_BP_C_AddSubStem final
{
public:
	struct FVector                                StartLoc;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                StartNormal;                                       // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         currentSubLevel;                                   // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(StemSpline_BP_C_AddSubStem) == 0x000004, "Wrong alignment on StemSpline_BP_C_AddSubStem");
static_assert(sizeof(StemSpline_BP_C_AddSubStem) == 0x00001C, "Wrong size on StemSpline_BP_C_AddSubStem");
static_assert(offsetof(StemSpline_BP_C_AddSubStem, StartLoc) == 0x000000, "Member 'StemSpline_BP_C_AddSubStem::StartLoc' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSubStem, StartNormal) == 0x00000C, "Member 'StemSpline_BP_C_AddSubStem::StartNormal' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSubStem, currentSubLevel) == 0x000018, "Member 'StemSpline_BP_C_AddSubStem::currentSubLevel' has a wrong offset!");

// Function StemSpline_BP.StemSpline_BP_C.AddMeshesAlongSpline
// 0x08E0 (0x08E0 - 0x0000)
struct StemSpline_BP_C_AddMeshesAlongSpline final
{
public:
	class USplineComponent*                       SplineComp;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                traceHitNormal;                                    // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         heightAboveSurface;                                // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         scaleRandom;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         lengthSecTolerance;                                // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         lengthSection;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         meshAmount;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               base___RandomRotation;                             // 0x0028(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         minDistBetweenMeshes;                              // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               BaseRotation;                                      // 0x0038(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          useWorldRot;                                       // 0x0044(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   addingMesh;                                        // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       Spline;                                            // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          rotateWithSpline;                                  // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          onlyMidAir;                                        // 0x0059(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          onlyNearSurfaces;                                  // 0x005A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5B[0x1];                                       // 0x005B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Scale;                                             // 0x005C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            Mesh;                                              // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         I;                                                 // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         randomLength;                                      // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0078(0x0010)(ConstParm, ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue; // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_AddWorldOffset_SweepHitResult;         // 0x00C8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_159[0x3];                                      // 0x0159(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult;       // 0x0164(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x01EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1ED[0x3];                                      // 0x01ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x01F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue_1; // 0x01F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_AddLocalRotation_SweepHitResult;       // 0x0204(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x028C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetUpVector_ReturnValue;                  // 0x0298(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x02A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x02A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x02AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_VectorVector_ReturnValue;        // 0x02B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B1[0x3];                                      // 0x02B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x02B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult_1;     // 0x02C0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_348[0x8];                                      // 0x0348(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0350(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_TransformLocation_ReturnValue;            // 0x0380(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_2;            // 0x038C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0390(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetDirectionAtDistanceAlongSpline_ReturnValue; // 0x039C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_SphereTraceSingle_OutHit;                 // 0x03A8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceSingle_ReturnValue;            // 0x0430(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_431[0x3];                                      // 0x0431(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x0434(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0440(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0441(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_442[0x2];                                      // 0x0442(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0444(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0448(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x044C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0458(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0464(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0470(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_47C[0x4];                                      // 0x047C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0480(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0488(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0490(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0498(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x04A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x04A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x04A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x04AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x04B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x04C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x04C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x04CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x04D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x04DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x04E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult_2;     // 0x04F4(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x057C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0588(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSplineLength_ReturnValue;              // 0x058C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0590(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0594(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x0598(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x059C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x05A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x05A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x05A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_1;                     // 0x05AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue;         // 0x05B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B4[0x4];                                      // 0x05B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable_1;                            // 0x05B8(0x0010)(ConstParm, ReferenceParm)
	TArray<class AActor*>                         Temp_object_Variable_2;                            // 0x05C8(0x0010)(ConstParm, ReferenceParm)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x05D8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x0660(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_1;            // 0x0661(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_1;         // 0x0662(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_663[0x1];                                      // 0x0663(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_1;                    // 0x0664(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_1;                // 0x0668(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location_1;                // 0x066C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_1;             // 0x0678(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_1;                  // 0x0684(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_1;            // 0x0690(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69C[0x4];                                      // 0x069C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_1;                 // 0x06A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_1;                // 0x06A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_1;            // 0x06B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_1;             // 0x06B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_1;                 // 0x06C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex_1;            // 0x06C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_1;               // 0x06C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart_1;              // 0x06CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_1;                // 0x06D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x06E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E5[0x3];                                      // 0x06E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_2;       // 0x06E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F4[0xC];                                      // 0x06F4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue_1;               // 0x0700(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetStaticMesh_ReturnValue;                // 0x0730(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_731[0x3];                                      // 0x0731(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_TransformLocation_ReturnValue_1;          // 0x0734(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x0740(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x0744(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0750(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_751[0x3];                                      // 0x0751(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_SphereTraceSingle_OutHit_1;               // 0x0754(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceSingle_ReturnValue_1;          // 0x07DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7DD[0x3];                                      // 0x07DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMeshToSpawnAlong                      CallFunc_Array_Get_Item;                           // 0x07E0(0x0058)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0838(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x083C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83D[0x3];                                      // 0x083D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X_1;                          // 0x0840(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0844(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0848(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_2;                          // 0x084C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x0850(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x0854(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_1;         // 0x0858(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_2;         // 0x085C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_3;         // 0x0860(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_2;                // 0x0864(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x0870(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x087C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0880(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0884(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_885[0x3];                                      // 0x0885(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_3;            // 0x0888(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue_2; // 0x088C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0898(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89C[0x4];                                      // 0x089C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x08A0(0x0030)(IsPlainOldData, NoDestructor)
	class UStaticMeshComponent*                   CallFunc_AddComponent_ReturnValue;                 // 0x08D0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(StemSpline_BP_C_AddMeshesAlongSpline) == 0x000010, "Wrong alignment on StemSpline_BP_C_AddMeshesAlongSpline");
static_assert(sizeof(StemSpline_BP_C_AddMeshesAlongSpline) == 0x0008E0, "Wrong size on StemSpline_BP_C_AddMeshesAlongSpline");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, SplineComp) == 0x000000, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::SplineComp' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, traceHitNormal) == 0x000008, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::traceHitNormal' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, heightAboveSurface) == 0x000014, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::heightAboveSurface' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, scaleRandom) == 0x000018, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::scaleRandom' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, lengthSecTolerance) == 0x00001C, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::lengthSecTolerance' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, lengthSection) == 0x000020, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::lengthSection' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, meshAmount) == 0x000024, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::meshAmount' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, base___RandomRotation) == 0x000028, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::base___RandomRotation' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, minDistBetweenMeshes) == 0x000034, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::minDistBetweenMeshes' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, BaseRotation) == 0x000038, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::BaseRotation' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, useWorldRot) == 0x000044, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::useWorldRot' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, addingMesh) == 0x000048, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::addingMesh' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, Spline) == 0x000050, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::Spline' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, rotateWithSpline) == 0x000058, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::rotateWithSpline' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, onlyMidAir) == 0x000059, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::onlyMidAir' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, onlyNearSurfaces) == 0x00005A, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::onlyNearSurfaces' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, Scale) == 0x00005C, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::Scale' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, Mesh) == 0x000068, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::Mesh' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, I) == 0x000070, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::I' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, randomLength) == 0x000074, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::randomLength' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, Temp_object_Variable) == 0x000078, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, Temp_int_Array_Index_Variable) == 0x000088, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, Temp_int_Variable) == 0x00008C, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_Add_IntInt_ReturnValue) == 0x000090, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, Temp_int_Variable_1) == 0x000094, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_Add_IntInt_ReturnValue_1) == 0x000098, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_BreakVector_X) == 0x00009C, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_BreakVector_Y) == 0x0000A0, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_BreakVector_Z) == 0x0000A4, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_MapRangeClamped_ReturnValue) == 0x0000A8, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_Conv_IntToFloat_ReturnValue) == 0x0000AC, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue) == 0x0000B0, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000BC, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_K2_AddWorldOffset_SweepHitResult) == 0x0000C8, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_K2_AddWorldOffset_SweepHitResult' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000150, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_Add_FloatFloat_ReturnValue) == 0x000154, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000158, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_RandomFloatInRange_ReturnValue) == 0x00015C, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_Add_IntInt_ReturnValue_2) == 0x000160, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_K2_SetWorldRotation_SweepHitResult) == 0x000164, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_K2_SetWorldRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x0001EC, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x0001F0, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0001F4, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue_1) == 0x0001F8, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_K2_AddLocalRotation_SweepHitResult) == 0x000204, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_K2_AddLocalRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x00028C, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_GetUpVector_ReturnValue) == 0x000298, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_GetUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_BreakRotator_Roll) == 0x0002A4, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_BreakRotator_Pitch) == 0x0002A8, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_BreakRotator_Yaw) == 0x0002AC, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_NotEqual_VectorVector_ReturnValue) == 0x0002B0, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_NotEqual_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_MakeRotator_ReturnValue) == 0x0002B4, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_K2_SetWorldRotation_SweepHitResult_1) == 0x0002C0, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_K2_SetWorldRotation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_GetTransform_ReturnValue) == 0x000350, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_TransformLocation_ReturnValue) == 0x000380, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_TransformLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_Conv_IntToFloat_ReturnValue_2) == 0x00038C, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_Conv_IntToFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_Add_VectorVector_ReturnValue) == 0x000390, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_GetDirectionAtDistanceAlongSpline_ReturnValue) == 0x00039C, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_GetDirectionAtDistanceAlongSpline_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_SphereTraceSingle_OutHit) == 0x0003A8, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_SphereTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_SphereTraceSingle_ReturnValue) == 0x000430, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_SphereTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x000434, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_BreakHitResult_bBlockingHit) == 0x000440, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_BreakHitResult_bInitialOverlap) == 0x000441, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_BreakHitResult_Time) == 0x000444, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_BreakHitResult_Distance) == 0x000448, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_BreakHitResult_Location) == 0x00044C, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_BreakHitResult_ImpactPoint) == 0x000458, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_BreakHitResult_Normal) == 0x000464, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_BreakHitResult_ImpactNormal) == 0x000470, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_BreakHitResult_PhysMat) == 0x000480, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_BreakHitResult_HitActor) == 0x000488, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_BreakHitResult_HitComponent) == 0x000490, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_BreakHitResult_HitBoneName) == 0x000498, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_BreakHitResult_HitItem) == 0x0004A0, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_BreakHitResult_ElementIndex) == 0x0004A4, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_BreakHitResult_FaceIndex) == 0x0004A8, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_BreakHitResult_TraceStart) == 0x0004AC, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_BreakHitResult_TraceEnd) == 0x0004B8, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_BreakRotator_Roll_1) == 0x0004C4, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_BreakRotator_Pitch_1) == 0x0004C8, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_BreakRotator_Yaw_1) == 0x0004CC, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x0004D0, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_MakeRotator_ReturnValue_1) == 0x0004DC, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0004E8, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_K2_SetWorldRotation_SweepHitResult_2) == 0x0004F4, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_K2_SetWorldRotation_SweepHitResult_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_Add_VectorVector_ReturnValue_1) == 0x00057C, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, Temp_int_Loop_Counter_Variable) == 0x000588, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_GetSplineLength_ReturnValue) == 0x00058C, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_GetSplineLength_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000590, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000594, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x000598, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_Add_IntInt_ReturnValue_3) == 0x00059C, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x0005A0, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_FTrunc_ReturnValue) == 0x0005A4, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x0005A8, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_FTrunc_ReturnValue_1) == 0x0005AC, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_FTrunc_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_RandomIntegerInRange_ReturnValue) == 0x0005B0, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_RandomIntegerInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, Temp_object_Variable_1) == 0x0005B8, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, Temp_object_Variable_2) == 0x0005C8, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_LineTraceSingle_OutHit) == 0x0005D8, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_LineTraceSingle_ReturnValue) == 0x000660, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_BreakHitResult_bBlockingHit_1) == 0x000661, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_BreakHitResult_bBlockingHit_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_BreakHitResult_bInitialOverlap_1) == 0x000662, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_BreakHitResult_bInitialOverlap_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_BreakHitResult_Time_1) == 0x000664, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_BreakHitResult_Time_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_BreakHitResult_Distance_1) == 0x000668, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_BreakHitResult_Distance_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_BreakHitResult_Location_1) == 0x00066C, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_BreakHitResult_Location_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_BreakHitResult_ImpactPoint_1) == 0x000678, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_BreakHitResult_ImpactPoint_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_BreakHitResult_Normal_1) == 0x000684, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_BreakHitResult_Normal_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_BreakHitResult_ImpactNormal_1) == 0x000690, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_BreakHitResult_ImpactNormal_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_BreakHitResult_PhysMat_1) == 0x0006A0, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_BreakHitResult_PhysMat_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_BreakHitResult_HitActor_1) == 0x0006A8, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_BreakHitResult_HitActor_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_BreakHitResult_HitComponent_1) == 0x0006B0, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_BreakHitResult_HitComponent_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_BreakHitResult_HitBoneName_1) == 0x0006B8, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_BreakHitResult_HitBoneName_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_BreakHitResult_HitItem_1) == 0x0006C0, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_BreakHitResult_HitItem_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_BreakHitResult_ElementIndex_1) == 0x0006C4, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_BreakHitResult_ElementIndex_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_BreakHitResult_FaceIndex_1) == 0x0006C8, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_BreakHitResult_FaceIndex_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_BreakHitResult_TraceStart_1) == 0x0006CC, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_BreakHitResult_TraceStart_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_BreakHitResult_TraceEnd_1) == 0x0006D8, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_BreakHitResult_TraceEnd_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_BooleanOR_ReturnValue) == 0x0006E4, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_Multiply_VectorFloat_ReturnValue_2) == 0x0006E8, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_Multiply_VectorFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_GetTransform_ReturnValue_1) == 0x000700, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_GetTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_SetStaticMesh_ReturnValue) == 0x000730, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_SetStaticMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_TransformLocation_ReturnValue_1) == 0x000734, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_TransformLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, Temp_int_Variable_2) == 0x000740, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_Add_VectorVector_ReturnValue_2) == 0x000744, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_Less_IntInt_ReturnValue) == 0x000750, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_SphereTraceSingle_OutHit_1) == 0x000754, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_SphereTraceSingle_OutHit_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_SphereTraceSingle_ReturnValue_1) == 0x0007DC, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_SphereTraceSingle_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_Array_Get_Item) == 0x0007E0, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_Array_Length_ReturnValue) == 0x000838, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_Less_IntInt_ReturnValue_1) == 0x00083C, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_BreakVector_X_1) == 0x000840, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_BreakVector_Y_1) == 0x000844, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_BreakVector_Z_1) == 0x000848, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_BreakVector_X_2) == 0x00084C, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_BreakVector_Y_2) == 0x000850, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_BreakVector_Z_2) == 0x000854, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_RandomFloatInRange_ReturnValue_1) == 0x000858, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_RandomFloatInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_RandomFloatInRange_ReturnValue_2) == 0x00085C, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_RandomFloatInRange_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_RandomFloatInRange_ReturnValue_3) == 0x000860, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_RandomFloatInRange_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_MakeRotator_ReturnValue_2) == 0x000864, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_MakeRotator_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_ComposeRotators_ReturnValue) == 0x000870, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_Add_IntInt_ReturnValue_4) == 0x00087C, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_Array_Add_ReturnValue) == 0x000880, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_Array_Contains_ReturnValue) == 0x000884, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_Conv_IntToFloat_ReturnValue_3) == 0x000888, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_Conv_IntToFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue_2) == 0x00088C, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_Subtract_IntInt_ReturnValue) == 0x000898, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_MakeTransform_ReturnValue) == 0x0008A0, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddMeshesAlongSpline, CallFunc_AddComponent_ReturnValue) == 0x0008D0, "Member 'StemSpline_BP_C_AddMeshesAlongSpline::CallFunc_AddComponent_ReturnValue' has a wrong offset!");

// Function StemSpline_BP.StemSpline_BP_C.CheckIfContainsValueInRange
// 0x0050 (0x0050 - 0x0000)
struct StemSpline_BP_C_CheckIfContainsValueInRange final
{
public:
	TArray<float>                                 Array;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	float                                         Range__Min;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Range__Max;                                        // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Contains_;                                         // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Max;                                               // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Min;                                               // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         containsIndex;                                     // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Contains;                                          // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Array_Get_Item;                           // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_InRange_FloatFloat_ReturnValue;           // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(StemSpline_BP_C_CheckIfContainsValueInRange) == 0x000008, "Wrong alignment on StemSpline_BP_C_CheckIfContainsValueInRange");
static_assert(sizeof(StemSpline_BP_C_CheckIfContainsValueInRange) == 0x000050, "Wrong size on StemSpline_BP_C_CheckIfContainsValueInRange");
static_assert(offsetof(StemSpline_BP_C_CheckIfContainsValueInRange, Array) == 0x000000, "Member 'StemSpline_BP_C_CheckIfContainsValueInRange::Array' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_CheckIfContainsValueInRange, Range__Min) == 0x000010, "Member 'StemSpline_BP_C_CheckIfContainsValueInRange::Range__Min' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_CheckIfContainsValueInRange, Range__Max) == 0x000014, "Member 'StemSpline_BP_C_CheckIfContainsValueInRange::Range__Max' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_CheckIfContainsValueInRange, Contains_) == 0x000018, "Member 'StemSpline_BP_C_CheckIfContainsValueInRange::Contains_' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_CheckIfContainsValueInRange, Max) == 0x00001C, "Member 'StemSpline_BP_C_CheckIfContainsValueInRange::Max' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_CheckIfContainsValueInRange, Min) == 0x000020, "Member 'StemSpline_BP_C_CheckIfContainsValueInRange::Min' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_CheckIfContainsValueInRange, containsIndex) == 0x000024, "Member 'StemSpline_BP_C_CheckIfContainsValueInRange::containsIndex' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_CheckIfContainsValueInRange, Contains) == 0x000028, "Member 'StemSpline_BP_C_CheckIfContainsValueInRange::Contains' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_CheckIfContainsValueInRange, CallFunc_Array_Length_ReturnValue) == 0x00002C, "Member 'StemSpline_BP_C_CheckIfContainsValueInRange::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_CheckIfContainsValueInRange, Temp_bool_True_if_break_was_hit_Variable) == 0x000030, "Member 'StemSpline_BP_C_CheckIfContainsValueInRange::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_CheckIfContainsValueInRange, Temp_int_Array_Index_Variable) == 0x000034, "Member 'StemSpline_BP_C_CheckIfContainsValueInRange::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_CheckIfContainsValueInRange, CallFunc_Array_Get_Item) == 0x000038, "Member 'StemSpline_BP_C_CheckIfContainsValueInRange::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_CheckIfContainsValueInRange, CallFunc_Not_PreBool_ReturnValue) == 0x00003C, "Member 'StemSpline_BP_C_CheckIfContainsValueInRange::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_CheckIfContainsValueInRange, Temp_int_Loop_Counter_Variable) == 0x000040, "Member 'StemSpline_BP_C_CheckIfContainsValueInRange::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_CheckIfContainsValueInRange, CallFunc_Less_IntInt_ReturnValue) == 0x000044, "Member 'StemSpline_BP_C_CheckIfContainsValueInRange::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_CheckIfContainsValueInRange, CallFunc_Add_IntInt_ReturnValue) == 0x000048, "Member 'StemSpline_BP_C_CheckIfContainsValueInRange::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_CheckIfContainsValueInRange, CallFunc_BooleanAND_ReturnValue) == 0x00004C, "Member 'StemSpline_BP_C_CheckIfContainsValueInRange::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_CheckIfContainsValueInRange, CallFunc_InRange_FloatFloat_ReturnValue) == 0x00004D, "Member 'StemSpline_BP_C_CheckIfContainsValueInRange::CallFunc_InRange_FloatFloat_ReturnValue' has a wrong offset!");

// Function StemSpline_BP.StemSpline_BP_C.FindClosestValue
// 0x0058 (0x0058 - 0x0000)
struct StemSpline_BP_C_FindClosestValue final
{
public:
	TArray<float>                                 inArray;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	float                                         toValue;                                           // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         closestValueIndex_;                                // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Value;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         closestValueIndex;                                 // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         closestDistance;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Array_Get_Item;                           // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Array_Get_Item_1;                         // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_1;                        // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(StemSpline_BP_C_FindClosestValue) == 0x000008, "Wrong alignment on StemSpline_BP_C_FindClosestValue");
static_assert(sizeof(StemSpline_BP_C_FindClosestValue) == 0x000058, "Wrong size on StemSpline_BP_C_FindClosestValue");
static_assert(offsetof(StemSpline_BP_C_FindClosestValue, inArray) == 0x000000, "Member 'StemSpline_BP_C_FindClosestValue::inArray' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindClosestValue, toValue) == 0x000010, "Member 'StemSpline_BP_C_FindClosestValue::toValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindClosestValue, closestValueIndex_) == 0x000014, "Member 'StemSpline_BP_C_FindClosestValue::closestValueIndex_' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindClosestValue, Value) == 0x000018, "Member 'StemSpline_BP_C_FindClosestValue::Value' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindClosestValue, closestValueIndex) == 0x00001C, "Member 'StemSpline_BP_C_FindClosestValue::closestValueIndex' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindClosestValue, closestDistance) == 0x000020, "Member 'StemSpline_BP_C_FindClosestValue::closestDistance' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindClosestValue, Temp_int_Array_Index_Variable) == 0x000024, "Member 'StemSpline_BP_C_FindClosestValue::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindClosestValue, CallFunc_Array_Get_Item) == 0x000028, "Member 'StemSpline_BP_C_FindClosestValue::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindClosestValue, CallFunc_Array_Get_Item_1) == 0x00002C, "Member 'StemSpline_BP_C_FindClosestValue::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindClosestValue, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'StemSpline_BP_C_FindClosestValue::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindClosestValue, Temp_int_Loop_Counter_Variable) == 0x000034, "Member 'StemSpline_BP_C_FindClosestValue::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindClosestValue, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000038, "Member 'StemSpline_BP_C_FindClosestValue::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindClosestValue, CallFunc_Less_IntInt_ReturnValue) == 0x00003C, "Member 'StemSpline_BP_C_FindClosestValue::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindClosestValue, CallFunc_Abs_ReturnValue) == 0x000040, "Member 'StemSpline_BP_C_FindClosestValue::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindClosestValue, CallFunc_Add_IntInt_ReturnValue) == 0x000044, "Member 'StemSpline_BP_C_FindClosestValue::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindClosestValue, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000048, "Member 'StemSpline_BP_C_FindClosestValue::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindClosestValue, CallFunc_Abs_ReturnValue_1) == 0x00004C, "Member 'StemSpline_BP_C_FindClosestValue::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindClosestValue, CallFunc_Less_FloatFloat_ReturnValue) == 0x000050, "Member 'StemSpline_BP_C_FindClosestValue::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");

// Function StemSpline_BP.StemSpline_BP_C.CheckIfContainsVectorInDistance
// 0x0080 (0x0080 - 0x0000)
struct StemSpline_BP_C_CheckIfContainsVectorInDistance final
{
public:
	TArray<struct FVector>                        Array;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	float                                         inDistance;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Vector;                                            // 0x0014(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Contains_;                                         // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                vector_;                                           // 0x0024(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         inDistance_;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         containsIndex;                                     // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Contains;                                          // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item;                           // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(StemSpline_BP_C_CheckIfContainsVectorInDistance) == 0x000008, "Wrong alignment on StemSpline_BP_C_CheckIfContainsVectorInDistance");
static_assert(sizeof(StemSpline_BP_C_CheckIfContainsVectorInDistance) == 0x000080, "Wrong size on StemSpline_BP_C_CheckIfContainsVectorInDistance");
static_assert(offsetof(StemSpline_BP_C_CheckIfContainsVectorInDistance, Array) == 0x000000, "Member 'StemSpline_BP_C_CheckIfContainsVectorInDistance::Array' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_CheckIfContainsVectorInDistance, inDistance) == 0x000010, "Member 'StemSpline_BP_C_CheckIfContainsVectorInDistance::inDistance' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_CheckIfContainsVectorInDistance, Vector) == 0x000014, "Member 'StemSpline_BP_C_CheckIfContainsVectorInDistance::Vector' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_CheckIfContainsVectorInDistance, Contains_) == 0x000020, "Member 'StemSpline_BP_C_CheckIfContainsVectorInDistance::Contains_' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_CheckIfContainsVectorInDistance, vector_) == 0x000024, "Member 'StemSpline_BP_C_CheckIfContainsVectorInDistance::vector_' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_CheckIfContainsVectorInDistance, inDistance_) == 0x000030, "Member 'StemSpline_BP_C_CheckIfContainsVectorInDistance::inDistance_' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_CheckIfContainsVectorInDistance, containsIndex) == 0x000034, "Member 'StemSpline_BP_C_CheckIfContainsVectorInDistance::containsIndex' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_CheckIfContainsVectorInDistance, Contains) == 0x000038, "Member 'StemSpline_BP_C_CheckIfContainsVectorInDistance::Contains' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_CheckIfContainsVectorInDistance, CallFunc_Array_Length_ReturnValue) == 0x00003C, "Member 'StemSpline_BP_C_CheckIfContainsVectorInDistance::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_CheckIfContainsVectorInDistance, Temp_bool_True_if_break_was_hit_Variable) == 0x000040, "Member 'StemSpline_BP_C_CheckIfContainsVectorInDistance::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_CheckIfContainsVectorInDistance, Temp_int_Array_Index_Variable) == 0x000044, "Member 'StemSpline_BP_C_CheckIfContainsVectorInDistance::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_CheckIfContainsVectorInDistance, CallFunc_Array_Get_Item) == 0x000048, "Member 'StemSpline_BP_C_CheckIfContainsVectorInDistance::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_CheckIfContainsVectorInDistance, CallFunc_Not_PreBool_ReturnValue) == 0x000054, "Member 'StemSpline_BP_C_CheckIfContainsVectorInDistance::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_CheckIfContainsVectorInDistance, Temp_int_Loop_Counter_Variable) == 0x000058, "Member 'StemSpline_BP_C_CheckIfContainsVectorInDistance::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_CheckIfContainsVectorInDistance, CallFunc_Less_IntInt_ReturnValue) == 0x00005C, "Member 'StemSpline_BP_C_CheckIfContainsVectorInDistance::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_CheckIfContainsVectorInDistance, CallFunc_Add_IntInt_ReturnValue) == 0x000060, "Member 'StemSpline_BP_C_CheckIfContainsVectorInDistance::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_CheckIfContainsVectorInDistance, CallFunc_BooleanAND_ReturnValue) == 0x000064, "Member 'StemSpline_BP_C_CheckIfContainsVectorInDistance::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_CheckIfContainsVectorInDistance, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000068, "Member 'StemSpline_BP_C_CheckIfContainsVectorInDistance::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_CheckIfContainsVectorInDistance, CallFunc_VSize_ReturnValue) == 0x000074, "Member 'StemSpline_BP_C_CheckIfContainsVectorInDistance::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_CheckIfContainsVectorInDistance, CallFunc_Less_FloatFloat_ReturnValue) == 0x000078, "Member 'StemSpline_BP_C_CheckIfContainsVectorInDistance::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");

// Function StemSpline_BP.StemSpline_BP_C.FindClosestVector
// 0x0088 (0x0088 - 0x0000)
struct StemSpline_BP_C_FindClosestVector final
{
public:
	TArray<struct FVector>                        inArray;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FVector                                toVector;                                          // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         closestValueIndex_;                                // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                toVector_;                                         // 0x0020(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         closestValueIndex;                                 // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         closestDistance;                                   // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item;                           // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item_1;                         // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue_1;                      // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(StemSpline_BP_C_FindClosestVector) == 0x000008, "Wrong alignment on StemSpline_BP_C_FindClosestVector");
static_assert(sizeof(StemSpline_BP_C_FindClosestVector) == 0x000088, "Wrong size on StemSpline_BP_C_FindClosestVector");
static_assert(offsetof(StemSpline_BP_C_FindClosestVector, inArray) == 0x000000, "Member 'StemSpline_BP_C_FindClosestVector::inArray' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindClosestVector, toVector) == 0x000010, "Member 'StemSpline_BP_C_FindClosestVector::toVector' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindClosestVector, closestValueIndex_) == 0x00001C, "Member 'StemSpline_BP_C_FindClosestVector::closestValueIndex_' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindClosestVector, toVector_) == 0x000020, "Member 'StemSpline_BP_C_FindClosestVector::toVector_' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindClosestVector, closestValueIndex) == 0x00002C, "Member 'StemSpline_BP_C_FindClosestVector::closestValueIndex' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindClosestVector, closestDistance) == 0x000030, "Member 'StemSpline_BP_C_FindClosestVector::closestDistance' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindClosestVector, CallFunc_Array_Get_Item) == 0x000034, "Member 'StemSpline_BP_C_FindClosestVector::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindClosestVector, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'StemSpline_BP_C_FindClosestVector::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindClosestVector, Temp_int_Array_Index_Variable) == 0x000044, "Member 'StemSpline_BP_C_FindClosestVector::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindClosestVector, Temp_int_Loop_Counter_Variable) == 0x000048, "Member 'StemSpline_BP_C_FindClosestVector::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindClosestVector, CallFunc_Array_Get_Item_1) == 0x00004C, "Member 'StemSpline_BP_C_FindClosestVector::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindClosestVector, CallFunc_Less_IntInt_ReturnValue) == 0x000058, "Member 'StemSpline_BP_C_FindClosestVector::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindClosestVector, CallFunc_Add_IntInt_ReturnValue) == 0x00005C, "Member 'StemSpline_BP_C_FindClosestVector::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindClosestVector, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000060, "Member 'StemSpline_BP_C_FindClosestVector::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindClosestVector, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x00006C, "Member 'StemSpline_BP_C_FindClosestVector::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindClosestVector, CallFunc_VSize_ReturnValue) == 0x000078, "Member 'StemSpline_BP_C_FindClosestVector::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindClosestVector, CallFunc_VSize_ReturnValue_1) == 0x00007C, "Member 'StemSpline_BP_C_FindClosestVector::CallFunc_VSize_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindClosestVector, CallFunc_Less_FloatFloat_ReturnValue) == 0x000080, "Member 'StemSpline_BP_C_FindClosestVector::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");

// Function StemSpline_BP.StemSpline_BP_C.WorldLocToSplineTimeApprox
// 0x00C8 (0x00C8 - 0x0000)
struct StemSpline_BP_C_WorldLocToSplineTimeApprox final
{
public:
	struct FVector                                worldLoc;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Iterations;                                        // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         distanceTolerance_;                                // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USplineComponent*                       SplineComponent;                                   // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartTime;                                         // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EndTime;                                           // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         bestTime;                                          // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USplineComponent*                       SplineComp;                                        // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         best;                                              // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         end_Distance;                                      // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         start_Distance;                                    // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         End;                                               // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Start;                                             // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         distanceTolerance;                                 // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Num;                                               // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                locationToCheck;                                   // 0x0054(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_1;                       // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocationAtTime_ReturnValue;            // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocationAtTime_ReturnValue_1;          // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_WorldLocToSplineTimeApprox_bestTime;      // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_WorldLocToSplineTimeApprox_bestTime_1;    // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_1;       // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x00B5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B6[0x2];                                       // 0x00B6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x00B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue_1;                      // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(StemSpline_BP_C_WorldLocToSplineTimeApprox) == 0x000008, "Wrong alignment on StemSpline_BP_C_WorldLocToSplineTimeApprox");
static_assert(sizeof(StemSpline_BP_C_WorldLocToSplineTimeApprox) == 0x0000C8, "Wrong size on StemSpline_BP_C_WorldLocToSplineTimeApprox");
static_assert(offsetof(StemSpline_BP_C_WorldLocToSplineTimeApprox, worldLoc) == 0x000000, "Member 'StemSpline_BP_C_WorldLocToSplineTimeApprox::worldLoc' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_WorldLocToSplineTimeApprox, Iterations) == 0x00000C, "Member 'StemSpline_BP_C_WorldLocToSplineTimeApprox::Iterations' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_WorldLocToSplineTimeApprox, distanceTolerance_) == 0x000010, "Member 'StemSpline_BP_C_WorldLocToSplineTimeApprox::distanceTolerance_' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_WorldLocToSplineTimeApprox, SplineComponent) == 0x000018, "Member 'StemSpline_BP_C_WorldLocToSplineTimeApprox::SplineComponent' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_WorldLocToSplineTimeApprox, StartTime) == 0x000020, "Member 'StemSpline_BP_C_WorldLocToSplineTimeApprox::StartTime' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_WorldLocToSplineTimeApprox, EndTime) == 0x000024, "Member 'StemSpline_BP_C_WorldLocToSplineTimeApprox::EndTime' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_WorldLocToSplineTimeApprox, bestTime) == 0x000028, "Member 'StemSpline_BP_C_WorldLocToSplineTimeApprox::bestTime' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_WorldLocToSplineTimeApprox, SplineComp) == 0x000030, "Member 'StemSpline_BP_C_WorldLocToSplineTimeApprox::SplineComp' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_WorldLocToSplineTimeApprox, best) == 0x000038, "Member 'StemSpline_BP_C_WorldLocToSplineTimeApprox::best' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_WorldLocToSplineTimeApprox, end_Distance) == 0x00003C, "Member 'StemSpline_BP_C_WorldLocToSplineTimeApprox::end_Distance' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_WorldLocToSplineTimeApprox, start_Distance) == 0x000040, "Member 'StemSpline_BP_C_WorldLocToSplineTimeApprox::start_Distance' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_WorldLocToSplineTimeApprox, End) == 0x000044, "Member 'StemSpline_BP_C_WorldLocToSplineTimeApprox::End' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_WorldLocToSplineTimeApprox, Start) == 0x000048, "Member 'StemSpline_BP_C_WorldLocToSplineTimeApprox::Start' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_WorldLocToSplineTimeApprox, distanceTolerance) == 0x00004C, "Member 'StemSpline_BP_C_WorldLocToSplineTimeApprox::distanceTolerance' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_WorldLocToSplineTimeApprox, Num) == 0x000050, "Member 'StemSpline_BP_C_WorldLocToSplineTimeApprox::Num' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_WorldLocToSplineTimeApprox, locationToCheck) == 0x000054, "Member 'StemSpline_BP_C_WorldLocToSplineTimeApprox::locationToCheck' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_WorldLocToSplineTimeApprox, Temp_int_Variable) == 0x000060, "Member 'StemSpline_BP_C_WorldLocToSplineTimeApprox::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_WorldLocToSplineTimeApprox, CallFunc_Lerp_ReturnValue) == 0x000064, "Member 'StemSpline_BP_C_WorldLocToSplineTimeApprox::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_WorldLocToSplineTimeApprox, CallFunc_Lerp_ReturnValue_1) == 0x000068, "Member 'StemSpline_BP_C_WorldLocToSplineTimeApprox::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_WorldLocToSplineTimeApprox, CallFunc_GetLocationAtTime_ReturnValue) == 0x00006C, "Member 'StemSpline_BP_C_WorldLocToSplineTimeApprox::CallFunc_GetLocationAtTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_WorldLocToSplineTimeApprox, CallFunc_GetLocationAtTime_ReturnValue_1) == 0x000078, "Member 'StemSpline_BP_C_WorldLocToSplineTimeApprox::CallFunc_GetLocationAtTime_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_WorldLocToSplineTimeApprox, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000084, "Member 'StemSpline_BP_C_WorldLocToSplineTimeApprox::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_WorldLocToSplineTimeApprox, CallFunc_VSize_ReturnValue) == 0x000090, "Member 'StemSpline_BP_C_WorldLocToSplineTimeApprox::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_WorldLocToSplineTimeApprox, CallFunc_WorldLocToSplineTimeApprox_bestTime) == 0x000094, "Member 'StemSpline_BP_C_WorldLocToSplineTimeApprox::CallFunc_WorldLocToSplineTimeApprox_bestTime' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_WorldLocToSplineTimeApprox, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000098, "Member 'StemSpline_BP_C_WorldLocToSplineTimeApprox::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_WorldLocToSplineTimeApprox, CallFunc_Subtract_IntInt_ReturnValue) == 0x00009C, "Member 'StemSpline_BP_C_WorldLocToSplineTimeApprox::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_WorldLocToSplineTimeApprox, Temp_int_Variable_1) == 0x0000A0, "Member 'StemSpline_BP_C_WorldLocToSplineTimeApprox::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_WorldLocToSplineTimeApprox, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0000A4, "Member 'StemSpline_BP_C_WorldLocToSplineTimeApprox::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_WorldLocToSplineTimeApprox, CallFunc_WorldLocToSplineTimeApprox_bestTime_1) == 0x0000A8, "Member 'StemSpline_BP_C_WorldLocToSplineTimeApprox::CallFunc_WorldLocToSplineTimeApprox_bestTime_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_WorldLocToSplineTimeApprox, CallFunc_LessEqual_FloatFloat_ReturnValue_1) == 0x0000AC, "Member 'StemSpline_BP_C_WorldLocToSplineTimeApprox::CallFunc_LessEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_WorldLocToSplineTimeApprox, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x0000B0, "Member 'StemSpline_BP_C_WorldLocToSplineTimeApprox::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_WorldLocToSplineTimeApprox, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x0000B4, "Member 'StemSpline_BP_C_WorldLocToSplineTimeApprox::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_WorldLocToSplineTimeApprox, CallFunc_Less_FloatFloat_ReturnValue) == 0x0000B5, "Member 'StemSpline_BP_C_WorldLocToSplineTimeApprox::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_WorldLocToSplineTimeApprox, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x0000B8, "Member 'StemSpline_BP_C_WorldLocToSplineTimeApprox::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_WorldLocToSplineTimeApprox, CallFunc_VSize_ReturnValue_1) == 0x0000C4, "Member 'StemSpline_BP_C_WorldLocToSplineTimeApprox::CallFunc_VSize_ReturnValue_1' has a wrong offset!");

// Function StemSpline_BP.StemSpline_BP_C.FindBridgeEdge
// 0x018C (0x018C - 0x0000)
struct StemSpline_BP_C_FindBridgeEdge final
{
public:
	int32                                         maxSegmentChecks;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                fromWhere;                                         // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                StartNormal;                                       // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Direction;                                         // 0x001C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          found;                                             // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                edgeLocation;                                      // 0x002C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                edgeNormal;                                        // 0x0038(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitNormal;                                         // 0x0044(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                hitLoc;                                            // 0x0050(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                lastLoc;                                           // 0x005C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         maxSegmentChecks_;                                 // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         segmentsChecked;                                   // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                direction_;                                        // 0x0070(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                currentNormal;                                     // 0x007C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                StartLoc;                                          // 0x0088(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TraceDown_hitLocation;                    // 0x00B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TraceDown_hitNormal;                      // 0x00C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TraceDown_hitSomething;                   // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SearchForEdge_FoundAnEdge_;               // 0x00CD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CE[0x2];                                       // 0x00CE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_SearchForEdge_foundEdgeLocation;          // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SearchForEdge_foundEdgeNormal;            // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E9[0x3];                                       // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x00EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Divide_VectorInt_ReturnValue;             // 0x00F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x0104(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x0110(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_2;       // 0x0120(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_3;           // 0x012C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_139[0x3];                                      // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_3;       // 0x013C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_4;           // 0x014C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc__Bridge__TraceTowardsDirection_hitSomething; // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_159[0x3];                                      // 0x0159(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc__Bridge__TraceTowardsDirection_lastLocation; // 0x015C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc__Bridge__TraceTowardsDirection_hitLocation; // 0x0168(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc__Bridge__TraceTowardsDirection_hitNormal; // 0x0174(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc__Bridge__TraceTowardsDirection_traceDirection; // 0x0180(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(StemSpline_BP_C_FindBridgeEdge) == 0x000004, "Wrong alignment on StemSpline_BP_C_FindBridgeEdge");
static_assert(sizeof(StemSpline_BP_C_FindBridgeEdge) == 0x00018C, "Wrong size on StemSpline_BP_C_FindBridgeEdge");
static_assert(offsetof(StemSpline_BP_C_FindBridgeEdge, maxSegmentChecks) == 0x000000, "Member 'StemSpline_BP_C_FindBridgeEdge::maxSegmentChecks' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindBridgeEdge, fromWhere) == 0x000004, "Member 'StemSpline_BP_C_FindBridgeEdge::fromWhere' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindBridgeEdge, StartNormal) == 0x000010, "Member 'StemSpline_BP_C_FindBridgeEdge::StartNormal' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindBridgeEdge, Direction) == 0x00001C, "Member 'StemSpline_BP_C_FindBridgeEdge::Direction' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindBridgeEdge, found) == 0x000028, "Member 'StemSpline_BP_C_FindBridgeEdge::found' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindBridgeEdge, edgeLocation) == 0x00002C, "Member 'StemSpline_BP_C_FindBridgeEdge::edgeLocation' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindBridgeEdge, edgeNormal) == 0x000038, "Member 'StemSpline_BP_C_FindBridgeEdge::edgeNormal' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindBridgeEdge, HitNormal) == 0x000044, "Member 'StemSpline_BP_C_FindBridgeEdge::HitNormal' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindBridgeEdge, hitLoc) == 0x000050, "Member 'StemSpline_BP_C_FindBridgeEdge::hitLoc' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindBridgeEdge, lastLoc) == 0x00005C, "Member 'StemSpline_BP_C_FindBridgeEdge::lastLoc' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindBridgeEdge, maxSegmentChecks_) == 0x000068, "Member 'StemSpline_BP_C_FindBridgeEdge::maxSegmentChecks_' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindBridgeEdge, segmentsChecked) == 0x00006C, "Member 'StemSpline_BP_C_FindBridgeEdge::segmentsChecked' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindBridgeEdge, direction_) == 0x000070, "Member 'StemSpline_BP_C_FindBridgeEdge::direction_' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindBridgeEdge, currentNormal) == 0x00007C, "Member 'StemSpline_BP_C_FindBridgeEdge::currentNormal' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindBridgeEdge, StartLoc) == 0x000088, "Member 'StemSpline_BP_C_FindBridgeEdge::StartLoc' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindBridgeEdge, Temp_int_Variable) == 0x000094, "Member 'StemSpline_BP_C_FindBridgeEdge::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindBridgeEdge, Temp_int_Variable_1) == 0x000098, "Member 'StemSpline_BP_C_FindBridgeEdge::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindBridgeEdge, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00009C, "Member 'StemSpline_BP_C_FindBridgeEdge::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindBridgeEdge, CallFunc_Add_VectorVector_ReturnValue) == 0x0000A8, "Member 'StemSpline_BP_C_FindBridgeEdge::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindBridgeEdge, CallFunc_TraceDown_hitLocation) == 0x0000B4, "Member 'StemSpline_BP_C_FindBridgeEdge::CallFunc_TraceDown_hitLocation' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindBridgeEdge, CallFunc_TraceDown_hitNormal) == 0x0000C0, "Member 'StemSpline_BP_C_FindBridgeEdge::CallFunc_TraceDown_hitNormal' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindBridgeEdge, CallFunc_TraceDown_hitSomething) == 0x0000CC, "Member 'StemSpline_BP_C_FindBridgeEdge::CallFunc_TraceDown_hitSomething' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindBridgeEdge, CallFunc_SearchForEdge_FoundAnEdge_) == 0x0000CD, "Member 'StemSpline_BP_C_FindBridgeEdge::CallFunc_SearchForEdge_FoundAnEdge_' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindBridgeEdge, CallFunc_SearchForEdge_foundEdgeLocation) == 0x0000D0, "Member 'StemSpline_BP_C_FindBridgeEdge::CallFunc_SearchForEdge_foundEdgeLocation' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindBridgeEdge, CallFunc_SearchForEdge_foundEdgeNormal) == 0x0000DC, "Member 'StemSpline_BP_C_FindBridgeEdge::CallFunc_SearchForEdge_foundEdgeNormal' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindBridgeEdge, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0000E8, "Member 'StemSpline_BP_C_FindBridgeEdge::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindBridgeEdge, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0000EC, "Member 'StemSpline_BP_C_FindBridgeEdge::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindBridgeEdge, CallFunc_Divide_VectorInt_ReturnValue) == 0x0000F8, "Member 'StemSpline_BP_C_FindBridgeEdge::CallFunc_Divide_VectorInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindBridgeEdge, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x000104, "Member 'StemSpline_BP_C_FindBridgeEdge::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindBridgeEdge, CallFunc_Add_VectorVector_ReturnValue_2) == 0x000110, "Member 'StemSpline_BP_C_FindBridgeEdge::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindBridgeEdge, CallFunc_Add_IntInt_ReturnValue) == 0x00011C, "Member 'StemSpline_BP_C_FindBridgeEdge::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindBridgeEdge, CallFunc_Multiply_VectorFloat_ReturnValue_2) == 0x000120, "Member 'StemSpline_BP_C_FindBridgeEdge::CallFunc_Multiply_VectorFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindBridgeEdge, CallFunc_Add_VectorVector_ReturnValue_3) == 0x00012C, "Member 'StemSpline_BP_C_FindBridgeEdge::CallFunc_Add_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindBridgeEdge, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x000138, "Member 'StemSpline_BP_C_FindBridgeEdge::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindBridgeEdge, CallFunc_Multiply_VectorFloat_ReturnValue_3) == 0x00013C, "Member 'StemSpline_BP_C_FindBridgeEdge::CallFunc_Multiply_VectorFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindBridgeEdge, CallFunc_Add_IntInt_ReturnValue_1) == 0x000148, "Member 'StemSpline_BP_C_FindBridgeEdge::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindBridgeEdge, CallFunc_Add_VectorVector_ReturnValue_4) == 0x00014C, "Member 'StemSpline_BP_C_FindBridgeEdge::CallFunc_Add_VectorVector_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindBridgeEdge, CallFunc__Bridge__TraceTowardsDirection_hitSomething) == 0x000158, "Member 'StemSpline_BP_C_FindBridgeEdge::CallFunc__Bridge__TraceTowardsDirection_hitSomething' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindBridgeEdge, CallFunc__Bridge__TraceTowardsDirection_lastLocation) == 0x00015C, "Member 'StemSpline_BP_C_FindBridgeEdge::CallFunc__Bridge__TraceTowardsDirection_lastLocation' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindBridgeEdge, CallFunc__Bridge__TraceTowardsDirection_hitLocation) == 0x000168, "Member 'StemSpline_BP_C_FindBridgeEdge::CallFunc__Bridge__TraceTowardsDirection_hitLocation' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindBridgeEdge, CallFunc__Bridge__TraceTowardsDirection_hitNormal) == 0x000174, "Member 'StemSpline_BP_C_FindBridgeEdge::CallFunc__Bridge__TraceTowardsDirection_hitNormal' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_FindBridgeEdge, CallFunc__Bridge__TraceTowardsDirection_traceDirection) == 0x000180, "Member 'StemSpline_BP_C_FindBridgeEdge::CallFunc__Bridge__TraceTowardsDirection_traceDirection' has a wrong offset!");

// Function StemSpline_BP.StemSpline_BP_C.(Bridge)_TraceTowardsDirection
// 0x01C0 (0x01C0 - 0x0000)
struct StemSpline_BP_C__Bridge__TraceTowardsDirection final
{
public:
	struct FVector                                StartLocation;                                     // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                relativeNormal;                                    // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Direction;                                         // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          hitSomething;                                      // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                lastLocation;                                      // 0x0028(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitLocation;                                       // 0x0034(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitNormal;                                         // 0x0040(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                traceDirection;                                    // 0x004C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                relNormal;                                         // 0x0058(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                StartLoc;                                          // 0x0064(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         randomIrregularity;                                // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue;           // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0080(0x0010)(ConstParm, ReferenceParm)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x00B4(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x013C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x013D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x013E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13F[0x1];                                      // 0x013F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0148(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0154(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0160(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x016C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0188(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x01A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x01B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(StemSpline_BP_C__Bridge__TraceTowardsDirection) == 0x000008, "Wrong alignment on StemSpline_BP_C__Bridge__TraceTowardsDirection");
static_assert(sizeof(StemSpline_BP_C__Bridge__TraceTowardsDirection) == 0x0001C0, "Wrong size on StemSpline_BP_C__Bridge__TraceTowardsDirection");
static_assert(offsetof(StemSpline_BP_C__Bridge__TraceTowardsDirection, StartLocation) == 0x000000, "Member 'StemSpline_BP_C__Bridge__TraceTowardsDirection::StartLocation' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__Bridge__TraceTowardsDirection, relativeNormal) == 0x00000C, "Member 'StemSpline_BP_C__Bridge__TraceTowardsDirection::relativeNormal' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__Bridge__TraceTowardsDirection, Direction) == 0x000018, "Member 'StemSpline_BP_C__Bridge__TraceTowardsDirection::Direction' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__Bridge__TraceTowardsDirection, hitSomething) == 0x000024, "Member 'StemSpline_BP_C__Bridge__TraceTowardsDirection::hitSomething' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__Bridge__TraceTowardsDirection, lastLocation) == 0x000028, "Member 'StemSpline_BP_C__Bridge__TraceTowardsDirection::lastLocation' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__Bridge__TraceTowardsDirection, HitLocation) == 0x000034, "Member 'StemSpline_BP_C__Bridge__TraceTowardsDirection::HitLocation' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__Bridge__TraceTowardsDirection, HitNormal) == 0x000040, "Member 'StemSpline_BP_C__Bridge__TraceTowardsDirection::HitNormal' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__Bridge__TraceTowardsDirection, traceDirection) == 0x00004C, "Member 'StemSpline_BP_C__Bridge__TraceTowardsDirection::traceDirection' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__Bridge__TraceTowardsDirection, relNormal) == 0x000058, "Member 'StemSpline_BP_C__Bridge__TraceTowardsDirection::relNormal' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__Bridge__TraceTowardsDirection, StartLoc) == 0x000064, "Member 'StemSpline_BP_C__Bridge__TraceTowardsDirection::StartLoc' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__Bridge__TraceTowardsDirection, randomIrregularity) == 0x000070, "Member 'StemSpline_BP_C__Bridge__TraceTowardsDirection::randomIrregularity' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__Bridge__TraceTowardsDirection, CallFunc_Cross_VectorVector_ReturnValue) == 0x000074, "Member 'StemSpline_BP_C__Bridge__TraceTowardsDirection::CallFunc_Cross_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__Bridge__TraceTowardsDirection, Temp_object_Variable) == 0x000080, "Member 'StemSpline_BP_C__Bridge__TraceTowardsDirection::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__Bridge__TraceTowardsDirection, CallFunc_Normal_ReturnValue) == 0x000090, "Member 'StemSpline_BP_C__Bridge__TraceTowardsDirection::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__Bridge__TraceTowardsDirection, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00009C, "Member 'StemSpline_BP_C__Bridge__TraceTowardsDirection::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__Bridge__TraceTowardsDirection, CallFunc_Add_VectorVector_ReturnValue) == 0x0000A8, "Member 'StemSpline_BP_C__Bridge__TraceTowardsDirection::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__Bridge__TraceTowardsDirection, CallFunc_LineTraceSingle_OutHit) == 0x0000B4, "Member 'StemSpline_BP_C__Bridge__TraceTowardsDirection::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__Bridge__TraceTowardsDirection, CallFunc_LineTraceSingle_ReturnValue) == 0x00013C, "Member 'StemSpline_BP_C__Bridge__TraceTowardsDirection::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__Bridge__TraceTowardsDirection, CallFunc_BreakHitResult_bBlockingHit) == 0x00013D, "Member 'StemSpline_BP_C__Bridge__TraceTowardsDirection::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__Bridge__TraceTowardsDirection, CallFunc_BreakHitResult_bInitialOverlap) == 0x00013E, "Member 'StemSpline_BP_C__Bridge__TraceTowardsDirection::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__Bridge__TraceTowardsDirection, CallFunc_BreakHitResult_Time) == 0x000140, "Member 'StemSpline_BP_C__Bridge__TraceTowardsDirection::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__Bridge__TraceTowardsDirection, CallFunc_BreakHitResult_Distance) == 0x000144, "Member 'StemSpline_BP_C__Bridge__TraceTowardsDirection::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__Bridge__TraceTowardsDirection, CallFunc_BreakHitResult_Location) == 0x000148, "Member 'StemSpline_BP_C__Bridge__TraceTowardsDirection::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__Bridge__TraceTowardsDirection, CallFunc_BreakHitResult_ImpactPoint) == 0x000154, "Member 'StemSpline_BP_C__Bridge__TraceTowardsDirection::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__Bridge__TraceTowardsDirection, CallFunc_BreakHitResult_Normal) == 0x000160, "Member 'StemSpline_BP_C__Bridge__TraceTowardsDirection::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__Bridge__TraceTowardsDirection, CallFunc_BreakHitResult_ImpactNormal) == 0x00016C, "Member 'StemSpline_BP_C__Bridge__TraceTowardsDirection::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__Bridge__TraceTowardsDirection, CallFunc_BreakHitResult_PhysMat) == 0x000178, "Member 'StemSpline_BP_C__Bridge__TraceTowardsDirection::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__Bridge__TraceTowardsDirection, CallFunc_BreakHitResult_HitActor) == 0x000180, "Member 'StemSpline_BP_C__Bridge__TraceTowardsDirection::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__Bridge__TraceTowardsDirection, CallFunc_BreakHitResult_HitComponent) == 0x000188, "Member 'StemSpline_BP_C__Bridge__TraceTowardsDirection::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__Bridge__TraceTowardsDirection, CallFunc_BreakHitResult_HitBoneName) == 0x000190, "Member 'StemSpline_BP_C__Bridge__TraceTowardsDirection::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__Bridge__TraceTowardsDirection, CallFunc_BreakHitResult_HitItem) == 0x000198, "Member 'StemSpline_BP_C__Bridge__TraceTowardsDirection::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__Bridge__TraceTowardsDirection, CallFunc_BreakHitResult_ElementIndex) == 0x00019C, "Member 'StemSpline_BP_C__Bridge__TraceTowardsDirection::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__Bridge__TraceTowardsDirection, CallFunc_BreakHitResult_FaceIndex) == 0x0001A0, "Member 'StemSpline_BP_C__Bridge__TraceTowardsDirection::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__Bridge__TraceTowardsDirection, CallFunc_BreakHitResult_TraceStart) == 0x0001A4, "Member 'StemSpline_BP_C__Bridge__TraceTowardsDirection::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__Bridge__TraceTowardsDirection, CallFunc_BreakHitResult_TraceEnd) == 0x0001B0, "Member 'StemSpline_BP_C__Bridge__TraceTowardsDirection::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");

// Function StemSpline_BP.StemSpline_BP_C.SeekForBridge
// 0x0488 (0x0488 - 0x0000)
struct StemSpline_BP_C_SeekForBridge final
{
public:
	struct FVector                                StartLoc;                                          // 0x0000(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                StartNormal;                                       // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bridgeBuilt;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        bridgePoints;                                      // 0x0020(0x0010)(Parm, OutParm)
	struct FVector                                newSurfaceNormal;                                  // 0x0030(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                newEdgeNormal;                                     // 0x003C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                detectedNormal;                                    // 0x0048(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                detectedLoc;                                       // 0x0054(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TraceEnd;                                          // 0x0060(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TraceStart;                                        // 0x006C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TwondCheckDone;                                    // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         randomizedGravity;                                 // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         currentTraceCount;                                 // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         currentTraceAngle;                                 // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                newEdgePoint;                                      // 0x0088(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                startEdgePoint;                                    // 0x0094(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        bridgePoints_;                                     // 0x00A0(0x0010)(Edit, BlueprintVisible)
	float                                         bridgeSegmentLength;                               // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         nrOfBridgeSegments;                                // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x00C8(0x0010)(ConstParm, ReferenceParm)
	EDrawDebugTrace                               Temp_byte_Variable;                                // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDrawDebugTrace                               Temp_byte_Variable_1;                              // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DA[0x2];                                       // 0x00DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_2;                               // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x00E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SelectVector_ReturnValue;                 // 0x00F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0104(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0110(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x011C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11D[0x3];                                      // 0x011D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable_1;                            // 0x0128(0x0010)(ConstParm, ReferenceParm)
	EDrawDebugTrace                               Temp_byte_Variable_2;                              // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_139[0x3];                                      // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_141[0x3];                                      // 0x0141(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDrawDebugTrace                               Temp_byte_Variable_3;                              // 0x014C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14D[0x3];                                      // 0x014D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EDrawDebugTrace                               K2Node_Select_Default;                             // 0x0159(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15A[0x2];                                      // 0x015A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0160(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x016C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x0178(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0184(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0190(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x01A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x01B0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0239(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x023A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23B[0x1];                                      // 0x023B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x023C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0244(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0250(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x025C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0268(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_274[0x4];                                      // 0x0274(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0278(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0280(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0288(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0290(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0298(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x029C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x02A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x02A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x02B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x02BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_VectorVector_ReturnValue;        // 0x02C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C1[0x3];                                      // 0x02C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x02C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x02C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C9[0x3];                                      // 0x02C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x02CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_VectorVector_ReturnValue_1;      // 0x02D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D1[0x3];                                      // 0x02D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x02D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x02E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E1[0x3];                                      // 0x02E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x02E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x02E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Conv_RotatorToVector_ReturnValue;         // 0x02F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_2;       // 0x0300(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x030C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_3;           // 0x0318(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0324(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_2;      // 0x0328(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0334(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0338(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_2;           // 0x0339(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EDrawDebugTrace                               K2Node_Select_Default_1;                           // 0x033A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33B[0x1];                                      // 0x033B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit_1;                 // 0x033C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue_1;            // 0x03C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C5[0x3];                                      // 0x03C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_2;            // 0x03C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_1;            // 0x03CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_1;         // 0x03CD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3CE[0x2];                                      // 0x03CE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_1;                    // 0x03D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_1;                // 0x03D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location_1;                // 0x03D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_1;             // 0x03E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_1;                  // 0x03F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_1;            // 0x03FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_1;                 // 0x0408(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_1;                // 0x0410(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_1;            // 0x0418(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_1;             // 0x0420(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_1;                 // 0x0428(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex_1;            // 0x042C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_1;               // 0x0430(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart_1;              // 0x0434(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_1;                // 0x0440(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x044C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_VectorVector_ReturnValue_2;      // 0x0450(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_VectorVector_ReturnValue_3;      // 0x0451(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0452(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0453(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_2;          // 0x0454(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0458(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FFloor_ReturnValue;                       // 0x0464(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_FindBridgeEdge_found;                     // 0x0468(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_469[0x3];                                      // 0x0469(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_FindBridgeEdge_edgeLocation;              // 0x046C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_FindBridgeEdge_edgeNormal;                // 0x0478(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(StemSpline_BP_C_SeekForBridge) == 0x000008, "Wrong alignment on StemSpline_BP_C_SeekForBridge");
static_assert(sizeof(StemSpline_BP_C_SeekForBridge) == 0x000488, "Wrong size on StemSpline_BP_C_SeekForBridge");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, StartLoc) == 0x000000, "Member 'StemSpline_BP_C_SeekForBridge::StartLoc' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, StartNormal) == 0x00000C, "Member 'StemSpline_BP_C_SeekForBridge::StartNormal' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, bridgeBuilt) == 0x000018, "Member 'StemSpline_BP_C_SeekForBridge::bridgeBuilt' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, bridgePoints) == 0x000020, "Member 'StemSpline_BP_C_SeekForBridge::bridgePoints' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, newSurfaceNormal) == 0x000030, "Member 'StemSpline_BP_C_SeekForBridge::newSurfaceNormal' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, newEdgeNormal) == 0x00003C, "Member 'StemSpline_BP_C_SeekForBridge::newEdgeNormal' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, detectedNormal) == 0x000048, "Member 'StemSpline_BP_C_SeekForBridge::detectedNormal' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, detectedLoc) == 0x000054, "Member 'StemSpline_BP_C_SeekForBridge::detectedLoc' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, TraceEnd) == 0x000060, "Member 'StemSpline_BP_C_SeekForBridge::TraceEnd' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, TraceStart) == 0x00006C, "Member 'StemSpline_BP_C_SeekForBridge::TraceStart' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, TwondCheckDone) == 0x000078, "Member 'StemSpline_BP_C_SeekForBridge::TwondCheckDone' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, randomizedGravity) == 0x00007C, "Member 'StemSpline_BP_C_SeekForBridge::randomizedGravity' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, currentTraceCount) == 0x000080, "Member 'StemSpline_BP_C_SeekForBridge::currentTraceCount' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, currentTraceAngle) == 0x000084, "Member 'StemSpline_BP_C_SeekForBridge::currentTraceAngle' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, newEdgePoint) == 0x000088, "Member 'StemSpline_BP_C_SeekForBridge::newEdgePoint' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, startEdgePoint) == 0x000094, "Member 'StemSpline_BP_C_SeekForBridge::startEdgePoint' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, bridgePoints_) == 0x0000A0, "Member 'StemSpline_BP_C_SeekForBridge::bridgePoints_' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, bridgeSegmentLength) == 0x0000B0, "Member 'StemSpline_BP_C_SeekForBridge::bridgeSegmentLength' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, nrOfBridgeSegments) == 0x0000B4, "Member 'StemSpline_BP_C_SeekForBridge::nrOfBridgeSegments' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, Temp_int_Variable) == 0x0000B8, "Member 'StemSpline_BP_C_SeekForBridge::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, Temp_int_Variable_1) == 0x0000BC, "Member 'StemSpline_BP_C_SeekForBridge::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_Conv_IntToFloat_ReturnValue) == 0x0000C0, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_Add_IntInt_ReturnValue) == 0x0000C4, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, Temp_object_Variable) == 0x0000C8, "Member 'StemSpline_BP_C_SeekForBridge::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, Temp_byte_Variable) == 0x0000D8, "Member 'StemSpline_BP_C_SeekForBridge::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, Temp_byte_Variable_1) == 0x0000D9, "Member 'StemSpline_BP_C_SeekForBridge::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, Temp_int_Variable_2) == 0x0000DC, "Member 'StemSpline_BP_C_SeekForBridge::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_GetForwardVector_ReturnValue) == 0x0000E0, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_MakeVector_ReturnValue) == 0x0000EC, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_SelectVector_ReturnValue) == 0x0000F8, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_SelectVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_Normal_ReturnValue) == 0x000104, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_MakeVector_ReturnValue_1) == 0x000110, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, Temp_bool_Variable) == 0x00011C, "Member 'StemSpline_BP_C_SeekForBridge::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_Add_FloatFloat_ReturnValue) == 0x000120, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, Temp_object_Variable_1) == 0x000128, "Member 'StemSpline_BP_C_SeekForBridge::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, Temp_byte_Variable_2) == 0x000138, "Member 'StemSpline_BP_C_SeekForBridge::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_Add_IntInt_ReturnValue_1) == 0x00013C, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000140, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000144, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_RandomFloatInRange_ReturnValue) == 0x000148, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, Temp_byte_Variable_3) == 0x00014C, "Member 'StemSpline_BP_C_SeekForBridge::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000150, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_Add_IntInt_ReturnValue_2) == 0x000154, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x000158, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, K2Node_Select_Default) == 0x000159, "Member 'StemSpline_BP_C_SeekForBridge::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x00015C, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000160, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_Add_VectorVector_ReturnValue) == 0x00016C, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x000178, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000184, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000190, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x00019C, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_Add_VectorVector_ReturnValue_2) == 0x0001A0, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0001AC, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_LineTraceSingle_OutHit) == 0x0001B0, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_LineTraceSingle_ReturnValue) == 0x000238, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_BreakHitResult_bBlockingHit) == 0x000239, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_BreakHitResult_bInitialOverlap) == 0x00023A, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_BreakHitResult_Time) == 0x00023C, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_BreakHitResult_Distance) == 0x000240, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_BreakHitResult_Location) == 0x000244, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_BreakHitResult_ImpactPoint) == 0x000250, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_BreakHitResult_Normal) == 0x00025C, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_BreakHitResult_ImpactNormal) == 0x000268, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_BreakHitResult_PhysMat) == 0x000278, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_BreakHitResult_HitActor) == 0x000280, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_BreakHitResult_HitComponent) == 0x000288, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_BreakHitResult_HitBoneName) == 0x000290, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_BreakHitResult_HitItem) == 0x000298, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_BreakHitResult_ElementIndex) == 0x00029C, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_BreakHitResult_FaceIndex) == 0x0002A0, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_BreakHitResult_TraceStart) == 0x0002A4, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_BreakHitResult_TraceEnd) == 0x0002B0, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_GetFloatValue_ReturnValue) == 0x0002BC, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_NotEqual_VectorVector_ReturnValue) == 0x0002C0, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_NotEqual_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x0002C4, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_BooleanAND_ReturnValue) == 0x0002C8, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0002CC, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_NotEqual_VectorVector_ReturnValue_1) == 0x0002D0, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_NotEqual_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_MakeVector_ReturnValue_2) == 0x0002D4, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_BooleanAND_ReturnValue_1) == 0x0002E0, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_Multiply_IntFloat_ReturnValue) == 0x0002E4, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_FindLookAtRotation_ReturnValue) == 0x0002E8, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_Conv_RotatorToVector_ReturnValue) == 0x0002F4, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_Conv_RotatorToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_Multiply_VectorFloat_ReturnValue_2) == 0x000300, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_Multiply_VectorFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x00030C, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_Add_VectorVector_ReturnValue_3) == 0x000318, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_Add_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_VSize_ReturnValue) == 0x000324, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_Subtract_VectorVector_ReturnValue_2) == 0x000328, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_Subtract_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_Array_Add_ReturnValue) == 0x000334, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, Temp_bool_Variable_1) == 0x000338, "Member 'StemSpline_BP_C_SeekForBridge::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_LessEqual_IntInt_ReturnValue_2) == 0x000339, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_LessEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, K2Node_Select_Default_1) == 0x00033A, "Member 'StemSpline_BP_C_SeekForBridge::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_LineTraceSingle_OutHit_1) == 0x00033C, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_LineTraceSingle_OutHit_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_LineTraceSingle_ReturnValue_1) == 0x0003C4, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_LineTraceSingle_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_Conv_IntToFloat_ReturnValue_2) == 0x0003C8, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_Conv_IntToFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_BreakHitResult_bBlockingHit_1) == 0x0003CC, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_BreakHitResult_bBlockingHit_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_BreakHitResult_bInitialOverlap_1) == 0x0003CD, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_BreakHitResult_bInitialOverlap_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_BreakHitResult_Time_1) == 0x0003D0, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_BreakHitResult_Time_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_BreakHitResult_Distance_1) == 0x0003D4, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_BreakHitResult_Distance_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_BreakHitResult_Location_1) == 0x0003D8, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_BreakHitResult_Location_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_BreakHitResult_ImpactPoint_1) == 0x0003E4, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_BreakHitResult_ImpactPoint_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_BreakHitResult_Normal_1) == 0x0003F0, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_BreakHitResult_Normal_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_BreakHitResult_ImpactNormal_1) == 0x0003FC, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_BreakHitResult_ImpactNormal_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_BreakHitResult_PhysMat_1) == 0x000408, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_BreakHitResult_PhysMat_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_BreakHitResult_HitActor_1) == 0x000410, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_BreakHitResult_HitActor_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_BreakHitResult_HitComponent_1) == 0x000418, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_BreakHitResult_HitComponent_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_BreakHitResult_HitBoneName_1) == 0x000420, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_BreakHitResult_HitBoneName_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_BreakHitResult_HitItem_1) == 0x000428, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_BreakHitResult_HitItem_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_BreakHitResult_ElementIndex_1) == 0x00042C, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_BreakHitResult_ElementIndex_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_BreakHitResult_FaceIndex_1) == 0x000430, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_BreakHitResult_FaceIndex_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_BreakHitResult_TraceStart_1) == 0x000434, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_BreakHitResult_TraceStart_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_BreakHitResult_TraceEnd_1) == 0x000440, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_BreakHitResult_TraceEnd_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x00044C, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_NotEqual_VectorVector_ReturnValue_2) == 0x000450, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_NotEqual_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_NotEqual_VectorVector_ReturnValue_3) == 0x000451, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_NotEqual_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_BooleanAND_ReturnValue_2) == 0x000452, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_BooleanAND_ReturnValue_3) == 0x000453, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_Divide_FloatFloat_ReturnValue_2) == 0x000454, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_Divide_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_GetActorForwardVector_ReturnValue) == 0x000458, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_FFloor_ReturnValue) == 0x000464, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_FFloor_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_FindBridgeEdge_found) == 0x000468, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_FindBridgeEdge_found' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_FindBridgeEdge_edgeLocation) == 0x00046C, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_FindBridgeEdge_edgeLocation' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_SeekForBridge, CallFunc_FindBridgeEdge_edgeNormal) == 0x000478, "Member 'StemSpline_BP_C_SeekForBridge::CallFunc_FindBridgeEdge_edgeNormal' has a wrong offset!");

// Function StemSpline_BP.StemSpline_BP_C.[SubStem]-DoCheckSegment
// 0x0640 (0x0640 - 0x0000)
struct StemSpline_BP_C__SubStem__DoCheckSegment final
{
public:
	struct FVector                                StartLocation;                                     // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                relativeNormal;                                    // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         currentSubLevel;                                   // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         currSubLevel;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                bridgeSeek_surfaceNormal;                          // 0x0020(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        bridgeSeek_Points;                                 // 0x0030(0x0010)(Edit, BlueprintVisible)
	struct FVector                                foundEdgeNormal;                                   // 0x0040(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                foundEdgeLocation;                                 // 0x004C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        bridgeSeekPoints;                                  // 0x0058(0x0010)(Edit, BlueprintVisible)
	struct FVector                                locFromTraceDownWithHeight;                        // 0x0068(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                hitNormalFromTraceDown;                            // 0x0074(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                hitLocFromTraceDown;                               // 0x0080(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                traceDirectionFromTraceTowards;                    // 0x008C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                hitNormalFromTraceTowards;                         // 0x0098(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                hitLocFromTraceTowards;                            // 0x00A4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                subStarterStartDirection;                          // 0x00B0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                addingEdgePoint;                                   // 0x00BC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                locAfterDirTrace;                                  // 0x00C8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                subSegmentStartLocation;                           // 0x00D4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                subSegmentStartSurfaceNormal;                      // 0x00E0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x00F0(0x0010)(ConstParm, ReferenceParm)
	int32                                         Temp_int_Variable;                                 // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue_1;            // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue_2;            // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item;                           // 0x0118(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item_1;                         // 0x0124(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item_2;                         // 0x0134(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0144(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_151[0x3];                                      // 0x0151(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_159[0x3];                                      // 0x0159(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue_1;          // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_2;            // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_1;                     // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_3;            // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_2;          // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_4;            // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_3;          // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue_2;          // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_2;                     // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue_3;            // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item_3;                         // 0x01A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_5;            // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_4;          // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue_3;          // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_6;            // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_5;          // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_2;            // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue_4;            // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item_4;                         // 0x01D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x01E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Divide_VectorInt_ReturnValue;             // 0x01F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_VectorVector_ReturnValue;      // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_201[0x3];                                      // 0x0201(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x0204(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_209[0x3];                                      // 0x0209(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_DegAcos_ReturnValue;                      // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_211[0x3];                                      // 0x0211(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_2;                               // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0218(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0224(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_225[0x3];                                      // 0x0225(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Divide_VectorInt_ReturnValue_1;           // 0x0228(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0234(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x0240(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x024C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue_1;                      // 0x025C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item_5;                         // 0x0260(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x026C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26D[0x3];                                      // 0x026D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0270(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0274(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_VectorVector_ReturnValue_1;    // 0x0275(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0276(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_277[0x1];                                      // 0x0277(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_LastIndex_ReturnValue_5;            // 0x0278(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item_6;                         // 0x027C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0288(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x028C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_VectorVector_ReturnValue_2;    // 0x028D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28E[0x2];                                      // 0x028E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_3;                               // 0x0290(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0294(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0295(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_296[0x2];                                      // 0x0296(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0298(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x029C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29D[0x3];                                      // 0x029D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x02A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_3;           // 0x02A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Divide_VectorInt_ReturnValue_2;           // 0x02B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_2;      // 0x02BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x02C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue_2;                      // 0x02D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x02D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x02D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2DA[0x2];                                      // 0x02DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_2;       // 0x02DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x02E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_3;       // 0x02F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_VectorVector_ReturnValue_3;    // 0x0300(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_VectorVector_ReturnValue_4;    // 0x0301(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x0302(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_4;                // 0x0303(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0304(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_305[0x3];                                      // 0x0305(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x0308(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_4;                // 0x030C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x030D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_30E[0x2];                                      // 0x030E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetForwardVector_ReturnValue_1;           // 0x0310(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_4;       // 0x031C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_4;           // 0x0328(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x0334(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x03BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x03BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_5;                // 0x03BE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x03BF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_6;                 // 0x03C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_7;                 // 0x03C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SeekForBridge_bridgeBuilt;                // 0x03C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C3[0x5];                                      // 0x03C3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        CallFunc_SeekForBridge_bridgePoints;               // 0x03C8(0x0010)(ReferenceParm)
	struct FVector                                CallFunc_SeekForBridge_newSurfaceNormal;           // 0x03D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x03E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x03E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x03EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3ED[0x3];                                      // 0x03ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Array_Get_Item_7;                         // 0x03F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_8;                 // 0x03FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FD[0x3];                                      // 0x03FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x0400(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_9;                 // 0x0404(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SeekForBridge_bridgeBuilt_1;              // 0x0405(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_406[0x2];                                      // 0x0406(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        CallFunc_SeekForBridge_bridgePoints_1;             // 0x0408(0x0010)(ReferenceParm)
	struct FVector                                CallFunc_SeekForBridge_newSurfaceNormal_1;         // 0x0418(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_3;                  // 0x0424(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_VectorVector_ReturnValue_5;    // 0x0428(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_429[0x3];                                      // 0x0429(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X;                            // 0x042C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0430(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0434(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_5;           // 0x0438(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0444(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_4;                  // 0x0450(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0454(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_455[0x3];                                      // 0x0455(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X_1;                          // 0x0458(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x045C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0460(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0464(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_5;                // 0x0470(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_471[0x3];                                      // 0x0471(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0474(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Conv_RotatorToVector_ReturnValue;         // 0x0480(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_5;       // 0x048C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_6;           // 0x0498(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_5;                  // 0x04A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x04A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_6;                // 0x04AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_1;    // 0x04AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_10;                // 0x04AE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_VectorVector_ReturnValue_6;    // 0x04AF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_11;                // 0x04B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_12;                // 0x04B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_7;                // 0x04B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B3[0x1];                                      // 0x04B3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_4;                               // 0x04B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_5;                               // 0x04B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_6;                 // 0x04BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_8;                // 0x04C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_13;                // 0x04C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_14;                // 0x04C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C3[0x1];                                      // 0x04C3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_7;                 // 0x04C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_9;                // 0x04C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x04C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_2;    // 0x04CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CB[0x1];                                      // 0x04CB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_RandomFloatInRange_ReturnValue_1;         // 0x04CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_15;                // 0x04D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_1;       // 0x04D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_16;                // 0x04D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D3[0x1];                                      // 0x04D3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x04D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_17;                // 0x04D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D9[0x3];                                      // 0x04D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_RandomFloatInRange_ReturnValue_2;         // 0x04DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RandomBool_ReturnValue;                   // 0x04E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4E1[0x3];                                      // 0x04E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x04E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSubStemStarter                        K2Node_MakeStruct_SubStemStarter;                  // 0x04E8(0x0028)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0510(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0514(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_6;                  // 0x0518(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue;              // 0x051C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue;           // 0x0528(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_6;       // 0x0534(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0540(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_7;           // 0x054C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_8;           // 0x0558(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_7;                  // 0x0564(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_7;       // 0x0568(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_9;           // 0x0574(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_10;          // 0x0580(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Divide_VectorInt_ReturnValue_3;           // 0x058C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_8;       // 0x0598(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_11;          // 0x05A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SearchForEdge_FoundAnEdge_;               // 0x05B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5B1[0x3];                                      // 0x05B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_SearchForEdge_foundEdgeLocation;          // 0x05B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SearchForEdge_foundEdgeNormal;            // 0x05C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_6;                // 0x05CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5CD[0x3];                                      // 0x05CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_8;                  // 0x05D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_9;       // 0x05D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TraceDown_hitLocation;                    // 0x05E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TraceDown_hitNormal;                      // 0x05EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TraceDown_hitSomething;                   // 0x05F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F9[0x3];                                      // 0x05F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_12;          // 0x05FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TraceTowardsDirection_hitLocation;        // 0x0608(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TraceTowardsDirection_hitNormal;          // 0x0614(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TraceTowardsDirection_lastLocation;       // 0x0620(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TraceTowardsDirection_traceDirection;     // 0x062C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TraceTowardsDirection_hitSomething;       // 0x0638(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(StemSpline_BP_C__SubStem__DoCheckSegment) == 0x000008, "Wrong alignment on StemSpline_BP_C__SubStem__DoCheckSegment");
static_assert(sizeof(StemSpline_BP_C__SubStem__DoCheckSegment) == 0x000640, "Wrong size on StemSpline_BP_C__SubStem__DoCheckSegment");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, StartLocation) == 0x000000, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::StartLocation' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, relativeNormal) == 0x00000C, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::relativeNormal' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, currentSubLevel) == 0x000018, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::currentSubLevel' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, currSubLevel) == 0x00001C, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::currSubLevel' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, bridgeSeek_surfaceNormal) == 0x000020, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::bridgeSeek_surfaceNormal' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, bridgeSeek_Points) == 0x000030, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::bridgeSeek_Points' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, foundEdgeNormal) == 0x000040, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::foundEdgeNormal' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, foundEdgeLocation) == 0x00004C, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::foundEdgeLocation' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, bridgeSeekPoints) == 0x000058, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::bridgeSeekPoints' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, locFromTraceDownWithHeight) == 0x000068, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::locFromTraceDownWithHeight' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, hitNormalFromTraceDown) == 0x000074, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::hitNormalFromTraceDown' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, hitLocFromTraceDown) == 0x000080, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::hitLocFromTraceDown' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, traceDirectionFromTraceTowards) == 0x00008C, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::traceDirectionFromTraceTowards' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, hitNormalFromTraceTowards) == 0x000098, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::hitNormalFromTraceTowards' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, hitLocFromTraceTowards) == 0x0000A4, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::hitLocFromTraceTowards' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, subStarterStartDirection) == 0x0000B0, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::subStarterStartDirection' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, addingEdgePoint) == 0x0000BC, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::addingEdgePoint' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, locAfterDirTrace) == 0x0000C8, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::locAfterDirTrace' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, subSegmentStartLocation) == 0x0000D4, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::subSegmentStartLocation' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, subSegmentStartSurfaceNormal) == 0x0000E0, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::subSegmentStartSurfaceNormal' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, Temp_object_Variable) == 0x0000F0, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, Temp_int_Variable) == 0x000100, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, Temp_int_Loop_Counter_Variable) == 0x000104, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Add_IntInt_ReturnValue) == 0x000108, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Array_LastIndex_ReturnValue) == 0x00010C, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Array_LastIndex_ReturnValue_1) == 0x000110, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Array_LastIndex_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Array_LastIndex_ReturnValue_2) == 0x000114, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Array_LastIndex_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Array_Get_Item) == 0x000118, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Array_Get_Item_1) == 0x000124, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Subtract_IntInt_ReturnValue) == 0x000130, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Array_Get_Item_2) == 0x000134, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Array_Length_ReturnValue) == 0x000140, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000144, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Greater_IntInt_ReturnValue) == 0x000150, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_VSize_ReturnValue) == 0x000154, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000158, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Conv_IntToFloat_ReturnValue) == 0x00015C, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000160, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000164, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Add_IntInt_ReturnValue_1) == 0x000168, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_FTrunc_ReturnValue) == 0x00016C, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Array_Add_ReturnValue) == 0x000170, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x000174, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000178, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Multiply_IntFloat_ReturnValue_1) == 0x00017C, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Multiply_IntFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Conv_IntToFloat_ReturnValue_2) == 0x000180, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Conv_IntToFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_FTrunc_ReturnValue_1) == 0x000184, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_FTrunc_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Conv_IntToFloat_ReturnValue_3) == 0x000188, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Conv_IntToFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Divide_FloatFloat_ReturnValue_2) == 0x00018C, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Divide_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Conv_IntToFloat_ReturnValue_4) == 0x000190, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Conv_IntToFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Divide_FloatFloat_ReturnValue_3) == 0x000194, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Divide_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Multiply_IntFloat_ReturnValue_2) == 0x000198, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Multiply_IntFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Add_IntInt_ReturnValue_2) == 0x00019C, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_FTrunc_ReturnValue_2) == 0x0001A0, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_FTrunc_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Array_LastIndex_ReturnValue_3) == 0x0001A4, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Array_LastIndex_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Array_Get_Item_3) == 0x0001A8, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Conv_IntToFloat_ReturnValue_5) == 0x0001B4, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Conv_IntToFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Divide_FloatFloat_ReturnValue_4) == 0x0001B8, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Divide_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Multiply_IntFloat_ReturnValue_3) == 0x0001BC, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Multiply_IntFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Conv_IntToFloat_ReturnValue_6) == 0x0001C0, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Conv_IntToFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Divide_FloatFloat_ReturnValue_5) == 0x0001C4, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Divide_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x0001C8, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Subtract_IntInt_ReturnValue_2) == 0x0001CC, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Subtract_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Array_LastIndex_ReturnValue_4) == 0x0001D0, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Array_LastIndex_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Array_Get_Item_4) == 0x0001D4, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Array_Length_ReturnValue_1) == 0x0001E0, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, Temp_int_Variable_1) == 0x0001E4, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Add_VectorVector_ReturnValue) == 0x0001E8, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Divide_VectorInt_ReturnValue) == 0x0001F4, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Divide_VectorInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_EqualEqual_VectorVector_ReturnValue) == 0x000200, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_EqualEqual_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Dot_VectorVector_ReturnValue) == 0x000204, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Not_PreBool_ReturnValue) == 0x000208, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_DegAcos_ReturnValue) == 0x00020C, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_DegAcos_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_BooleanAND_ReturnValue) == 0x000210, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, Temp_int_Variable_2) == 0x000214, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000218, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Less_IntInt_ReturnValue) == 0x000224, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Divide_VectorInt_ReturnValue_1) == 0x000228, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Divide_VectorInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000234, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Add_VectorVector_ReturnValue_2) == 0x000240, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x00024C, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, Temp_int_Array_Index_Variable) == 0x000258, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_VSize_ReturnValue_1) == 0x00025C, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_VSize_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Array_Get_Item_5) == 0x000260, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Array_Get_Item_5' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Less_FloatFloat_ReturnValue) == 0x00026C, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Array_Add_ReturnValue_1) == 0x000270, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_BooleanAND_ReturnValue_1) == 0x000274, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_EqualEqual_VectorVector_ReturnValue_1) == 0x000275, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_EqualEqual_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Not_PreBool_ReturnValue_1) == 0x000276, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Array_LastIndex_ReturnValue_5) == 0x000278, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Array_LastIndex_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Array_Get_Item_6) == 0x00027C, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Array_Get_Item_6' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Array_Length_ReturnValue_2) == 0x000288, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Less_IntInt_ReturnValue_1) == 0x00028C, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_EqualEqual_VectorVector_ReturnValue_2) == 0x00028D, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_EqualEqual_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, Temp_int_Variable_3) == 0x000290, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Not_PreBool_ReturnValue_2) == 0x000294, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Less_IntInt_ReturnValue_2) == 0x000295, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, Temp_int_Loop_Counter_Variable_1) == 0x000298, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Less_IntInt_ReturnValue_3) == 0x00029C, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Add_IntInt_ReturnValue_3) == 0x0002A0, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Add_VectorVector_ReturnValue_3) == 0x0002A4, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Add_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Divide_VectorInt_ReturnValue_2) == 0x0002B0, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Divide_VectorInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Subtract_VectorVector_ReturnValue_2) == 0x0002BC, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Subtract_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x0002C8, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_VSize_ReturnValue_2) == 0x0002D4, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_VSize_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x0002D8, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_BooleanAND_ReturnValue_2) == 0x0002D9, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Multiply_VectorFloat_ReturnValue_2) == 0x0002DC, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Multiply_VectorFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_GetForwardVector_ReturnValue) == 0x0002E8, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Multiply_VectorFloat_ReturnValue_3) == 0x0002F4, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Multiply_VectorFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_EqualEqual_VectorVector_ReturnValue_3) == 0x000300, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_EqualEqual_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_EqualEqual_VectorVector_ReturnValue_4) == 0x000301, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_EqualEqual_VectorVector_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Not_PreBool_ReturnValue_3) == 0x000302, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Not_PreBool_ReturnValue_4) == 0x000303, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Not_PreBool_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_BooleanAND_ReturnValue_3) == 0x000304, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Add_IntInt_ReturnValue_4) == 0x000308, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Less_IntInt_ReturnValue_4) == 0x00030C, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Less_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_BooleanAND_ReturnValue_4) == 0x00030D, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_GetForwardVector_ReturnValue_1) == 0x000310, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_GetForwardVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Multiply_VectorFloat_ReturnValue_4) == 0x00031C, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Multiply_VectorFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Add_VectorVector_ReturnValue_4) == 0x000328, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Add_VectorVector_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_LineTraceSingle_OutHit) == 0x000334, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_LineTraceSingle_ReturnValue) == 0x0003BC, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x0003BD, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Not_PreBool_ReturnValue_5) == 0x0003BE, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Not_PreBool_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_BooleanAND_ReturnValue_5) == 0x0003BF, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_BooleanAND_ReturnValue_6) == 0x0003C0, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_BooleanAND_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_BooleanAND_ReturnValue_7) == 0x0003C1, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_BooleanAND_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_SeekForBridge_bridgeBuilt) == 0x0003C2, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_SeekForBridge_bridgeBuilt' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_SeekForBridge_bridgePoints) == 0x0003C8, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_SeekForBridge_bridgePoints' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_SeekForBridge_newSurfaceNormal) == 0x0003D8, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_SeekForBridge_newSurfaceNormal' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_RandomFloatInRange_ReturnValue) == 0x0003E4, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, Temp_int_Array_Index_Variable_1) == 0x0003E8, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x0003EC, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Array_Get_Item_7) == 0x0003F0, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Array_Get_Item_7' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_BooleanAND_ReturnValue_8) == 0x0003FC, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_BooleanAND_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Array_Add_ReturnValue_2) == 0x000400, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_BooleanAND_ReturnValue_9) == 0x000404, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_BooleanAND_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_SeekForBridge_bridgeBuilt_1) == 0x000405, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_SeekForBridge_bridgeBuilt_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_SeekForBridge_bridgePoints_1) == 0x000408, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_SeekForBridge_bridgePoints_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_SeekForBridge_newSurfaceNormal_1) == 0x000418, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_SeekForBridge_newSurfaceNormal_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Array_Add_ReturnValue_3) == 0x000424, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Array_Add_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_EqualEqual_VectorVector_ReturnValue_5) == 0x000428, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_EqualEqual_VectorVector_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_BreakVector_X) == 0x00042C, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_BreakVector_Y) == 0x000430, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_BreakVector_Z) == 0x000434, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Add_VectorVector_ReturnValue_5) == 0x000438, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Add_VectorVector_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_MakeVector_ReturnValue) == 0x000444, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Array_Add_ReturnValue_4) == 0x000450, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Array_Add_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000454, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_BreakVector_X_1) == 0x000458, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_BreakVector_Y_1) == 0x00045C, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_BreakVector_Z_1) == 0x000460, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_MakeVector_ReturnValue_1) == 0x000464, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Less_IntInt_ReturnValue_5) == 0x000470, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Less_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_FindLookAtRotation_ReturnValue) == 0x000474, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Conv_RotatorToVector_ReturnValue) == 0x000480, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Conv_RotatorToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Multiply_VectorFloat_ReturnValue_5) == 0x00048C, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Multiply_VectorFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Add_VectorVector_ReturnValue_6) == 0x000498, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Add_VectorVector_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Array_Add_ReturnValue_5) == 0x0004A4, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Array_Add_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Add_IntInt_ReturnValue_5) == 0x0004A8, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Less_IntInt_ReturnValue_6) == 0x0004AC, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Less_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_GreaterEqual_FloatFloat_ReturnValue_1) == 0x0004AD, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_GreaterEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_BooleanAND_ReturnValue_10) == 0x0004AE, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_BooleanAND_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_EqualEqual_VectorVector_ReturnValue_6) == 0x0004AF, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_EqualEqual_VectorVector_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_BooleanAND_ReturnValue_11) == 0x0004B0, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_BooleanAND_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_BooleanAND_ReturnValue_12) == 0x0004B1, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_BooleanAND_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Less_IntInt_ReturnValue_7) == 0x0004B2, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Less_IntInt_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, Temp_int_Variable_4) == 0x0004B4, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::Temp_int_Variable_4' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, Temp_int_Variable_5) == 0x0004B8, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::Temp_int_Variable_5' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Add_IntInt_ReturnValue_6) == 0x0004BC, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Add_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Less_IntInt_ReturnValue_8) == 0x0004C0, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Less_IntInt_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_BooleanAND_ReturnValue_13) == 0x0004C1, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_BooleanAND_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_BooleanAND_ReturnValue_14) == 0x0004C2, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_BooleanAND_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Add_IntInt_ReturnValue_7) == 0x0004C4, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Add_IntInt_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Less_IntInt_ReturnValue_9) == 0x0004C8, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Less_IntInt_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x0004C9, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_GreaterEqual_FloatFloat_ReturnValue_2) == 0x0004CA, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_GreaterEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_RandomFloatInRange_ReturnValue_1) == 0x0004CC, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_RandomFloatInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_BooleanAND_ReturnValue_15) == 0x0004D0, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_BooleanAND_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_LessEqual_FloatFloat_ReturnValue_1) == 0x0004D1, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_LessEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_BooleanAND_ReturnValue_16) == 0x0004D2, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_BooleanAND_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Add_FloatFloat_ReturnValue) == 0x0004D4, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_BooleanAND_ReturnValue_17) == 0x0004D8, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_BooleanAND_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_RandomFloatInRange_ReturnValue_2) == 0x0004DC, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_RandomFloatInRange_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_RandomBool_ReturnValue) == 0x0004E0, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_RandomBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_SelectFloat_ReturnValue) == 0x0004E4, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, K2Node_MakeStruct_SubStemStarter) == 0x0004E8, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::K2Node_MakeStruct_SubStemStarter' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000510, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000514, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Array_Add_ReturnValue_6) == 0x000518, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Array_Add_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_RotateAngleAxis_ReturnValue) == 0x00051C, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_RotateAngleAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Cross_VectorVector_ReturnValue) == 0x000528, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Cross_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Multiply_VectorFloat_ReturnValue_6) == 0x000534, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Multiply_VectorFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Normal_ReturnValue) == 0x000540, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Add_VectorVector_ReturnValue_7) == 0x00054C, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Add_VectorVector_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Add_VectorVector_ReturnValue_8) == 0x000558, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Add_VectorVector_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Array_Add_ReturnValue_7) == 0x000564, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Array_Add_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Multiply_VectorFloat_ReturnValue_7) == 0x000568, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Multiply_VectorFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Add_VectorVector_ReturnValue_9) == 0x000574, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Add_VectorVector_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Add_VectorVector_ReturnValue_10) == 0x000580, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Add_VectorVector_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Divide_VectorInt_ReturnValue_3) == 0x00058C, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Divide_VectorInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Multiply_VectorFloat_ReturnValue_8) == 0x000598, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Multiply_VectorFloat_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Add_VectorVector_ReturnValue_11) == 0x0005A4, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Add_VectorVector_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_SearchForEdge_FoundAnEdge_) == 0x0005B0, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_SearchForEdge_FoundAnEdge_' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_SearchForEdge_foundEdgeLocation) == 0x0005B4, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_SearchForEdge_foundEdgeLocation' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_SearchForEdge_foundEdgeNormal) == 0x0005C0, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_SearchForEdge_foundEdgeNormal' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Not_PreBool_ReturnValue_6) == 0x0005CC, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Not_PreBool_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Array_Add_ReturnValue_8) == 0x0005D0, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Array_Add_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Multiply_VectorFloat_ReturnValue_9) == 0x0005D4, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Multiply_VectorFloat_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_TraceDown_hitLocation) == 0x0005E0, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_TraceDown_hitLocation' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_TraceDown_hitNormal) == 0x0005EC, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_TraceDown_hitNormal' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_TraceDown_hitSomething) == 0x0005F8, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_TraceDown_hitSomething' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_Add_VectorVector_ReturnValue_12) == 0x0005FC, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_Add_VectorVector_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_TraceTowardsDirection_hitLocation) == 0x000608, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_TraceTowardsDirection_hitLocation' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_TraceTowardsDirection_hitNormal) == 0x000614, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_TraceTowardsDirection_hitNormal' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_TraceTowardsDirection_lastLocation) == 0x000620, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_TraceTowardsDirection_lastLocation' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_TraceTowardsDirection_traceDirection) == 0x00062C, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_TraceTowardsDirection_traceDirection' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C__SubStem__DoCheckSegment, CallFunc_TraceTowardsDirection_hitSomething) == 0x000638, "Member 'StemSpline_BP_C__SubStem__DoCheckSegment::CallFunc_TraceTowardsDirection_hitSomething' has a wrong offset!");

// Function StemSpline_BP.StemSpline_BP_C.AddSkelMeshesAlongSpline
// 0x09B0 (0x09B0 - 0x0000)
struct StemSpline_BP_C_AddSkelMeshesAlongSpline final
{
public:
	class USplineComponent*                       SplineComp;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                traceHitNormal;                                    // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         heightAboveSurface;                                // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         scaleRandom;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         lengthSecTolerance;                                // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         lengthSection;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         meshAmount;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               base___RandomRotation;                             // 0x0028(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         minDistBetweenMeshes;                              // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               BaseRotation;                                      // 0x0038(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          useWorldRot;                                       // 0x0044(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UPoseableMeshComponent*                 addingMesh;                                        // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       Spline;                                            // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          rotateWithSpline;                                  // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          onlyMidAir;                                        // 0x0059(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          onlyNearSurfaces;                                  // 0x005A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5B[0x1];                                       // 0x005B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Scale;                                             // 0x005C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMesh*                          meshSkel;                                          // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         I;                                                 // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         randomLength;                                      // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             Temp_struct_Variable;                              // 0x0080(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	int32                                         Temp_int_Variable_1;                               // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBillboardComponent*                    CallFunc_AddComponent_ReturnValue;                 // 0x00B8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetBoneLocationByName_ReturnValue;        // 0x00C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_WorldLocToSplineTimeApprox_bestTime;      // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocationAtTime_ReturnValue;            // 0x00D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x00E4(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_BreakVector_X;                            // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue; // 0x0180(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x018C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_AddWorldOffset_SweepHitResult;         // 0x0198(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0224(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_229[0x3];                                      // 0x0229(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0234(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_235[0x3];                                      // 0x0235(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult;       // 0x023C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x02C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C5[0x3];                                      // 0x02C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x02C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x02CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue_1; // 0x02D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_AddLocalRotation_SweepHitResult;       // 0x02DC(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0364(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetUpVector_ReturnValue;                  // 0x0370(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x037C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0380(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0384(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_VectorVector_ReturnValue;        // 0x0388(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_389[0x3];                                      // 0x0389(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x038C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult_1;     // 0x0398(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0420(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0424(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_428[0x8];                                      // 0x0428(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0430(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_TransformLocation_ReturnValue;            // 0x0460(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_2;            // 0x046C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0470(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetDirectionAtDistanceAlongSpline_ReturnValue; // 0x047C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x0488(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0494(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x0498(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x049C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSplineLength_ReturnValue;              // 0x04A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x04A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x04B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult_2;     // 0x04B4(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x053C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x0540(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_544[0x4];                                      // 0x0544(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0548(0x0010)(ConstParm, ReferenceParm)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0558(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x055C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0560(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_1;                     // 0x0564(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable_1;                            // 0x0568(0x0010)(ConstParm, ReferenceParm)
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue;         // 0x0578(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_57C[0x4];                                      // 0x057C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable_2;                            // 0x0580(0x0010)(ConstParm, ReferenceParm)
	struct FHitResult                             CallFunc_SphereTraceSingle_OutHit;                 // 0x0590(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceSingle_ReturnValue;            // 0x0618(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0619(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x061A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61B[0x1];                                      // 0x061B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x061C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0620(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0624(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0630(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x063C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0648(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_654[0x4];                                      // 0x0654(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0658(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0660(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0668(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0670(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0678(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x067C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0680(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0684(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0690(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x069C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x06A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x06B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x06C0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x0748(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_1;            // 0x0749(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_1;         // 0x074A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_74B[0x1];                                      // 0x074B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_1;                    // 0x074C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_1;                // 0x0750(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location_1;                // 0x0754(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_1;             // 0x0760(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_1;                  // 0x076C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_1;            // 0x0778(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_784[0x4];                                      // 0x0784(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_1;                 // 0x0788(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_1;                // 0x0790(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_1;            // 0x0798(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_1;             // 0x07A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_1;                 // 0x07A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex_1;            // 0x07AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_1;               // 0x07B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart_1;              // 0x07B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_1;                // 0x07C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x07CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7CD[0x3];                                      // 0x07CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_2;       // 0x07D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7DC[0x4];                                      // 0x07DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue_1;               // 0x07E0(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_TransformLocation_ReturnValue_1;          // 0x0810(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x081C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x0828(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_SphereTraceSingle_OutHit_1;               // 0x082C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceSingle_ReturnValue_1;          // 0x08B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B5[0x3];                                      // 0x08B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSkelMeshToSpawnAlong                  CallFunc_Array_Get_Item;                           // 0x08B8(0x0058)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0910(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0914(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_915[0x3];                                      // 0x0915(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X_1;                          // 0x0918(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x091C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0920(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_2;                          // 0x0924(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x0928(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x092C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_1;         // 0x0930(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_2;         // 0x0934(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_3;         // 0x0938(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_2;                // 0x093C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x0948(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0954(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0958(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_959[0x3];                                      // 0x0959(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_3;            // 0x095C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue_2; // 0x0960(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x096C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0970(0x0030)(IsPlainOldData, NoDestructor)
	class UPoseableMeshComponent*                 CallFunc_AddComponent_ReturnValue_1;               // 0x09A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(StemSpline_BP_C_AddSkelMeshesAlongSpline) == 0x000010, "Wrong alignment on StemSpline_BP_C_AddSkelMeshesAlongSpline");
static_assert(sizeof(StemSpline_BP_C_AddSkelMeshesAlongSpline) == 0x0009B0, "Wrong size on StemSpline_BP_C_AddSkelMeshesAlongSpline");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, SplineComp) == 0x000000, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::SplineComp' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, traceHitNormal) == 0x000008, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::traceHitNormal' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, heightAboveSurface) == 0x000014, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::heightAboveSurface' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, scaleRandom) == 0x000018, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::scaleRandom' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, lengthSecTolerance) == 0x00001C, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::lengthSecTolerance' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, lengthSection) == 0x000020, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::lengthSection' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, meshAmount) == 0x000024, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::meshAmount' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, base___RandomRotation) == 0x000028, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::base___RandomRotation' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, minDistBetweenMeshes) == 0x000034, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::minDistBetweenMeshes' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, BaseRotation) == 0x000038, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::BaseRotation' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, useWorldRot) == 0x000044, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::useWorldRot' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, addingMesh) == 0x000048, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::addingMesh' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, Spline) == 0x000050, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::Spline' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, rotateWithSpline) == 0x000058, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::rotateWithSpline' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, onlyMidAir) == 0x000059, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::onlyMidAir' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, onlyNearSurfaces) == 0x00005A, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::onlyNearSurfaces' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, Scale) == 0x00005C, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::Scale' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, meshSkel) == 0x000068, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::meshSkel' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, I) == 0x000070, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::I' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, randomLength) == 0x000074, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::randomLength' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, Temp_int_Variable) == 0x000078, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_Add_IntInt_ReturnValue) == 0x00007C, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, Temp_struct_Variable) == 0x000080, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, Temp_int_Variable_1) == 0x0000B0, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_AddComponent_ReturnValue) == 0x0000B8, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_AddComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_Add_IntInt_ReturnValue_1) == 0x0000C0, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, Temp_int_Array_Index_Variable) == 0x0000C4, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_GetBoneLocationByName_ReturnValue) == 0x0000C8, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_GetBoneLocationByName_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_WorldLocToSplineTimeApprox_bestTime) == 0x0000D4, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_WorldLocToSplineTimeApprox_bestTime' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_GetLocationAtTime_ReturnValue) == 0x0000D8, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_GetLocationAtTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x0000E4, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_BreakVector_X) == 0x00016C, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_BreakVector_Y) == 0x000170, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_BreakVector_Z) == 0x000174, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_MapRangeClamped_ReturnValue) == 0x000178, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_Conv_IntToFloat_ReturnValue) == 0x00017C, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue) == 0x000180, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00018C, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_K2_AddWorldOffset_SweepHitResult) == 0x000198, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_K2_AddWorldOffset_SweepHitResult' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000220, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_Add_FloatFloat_ReturnValue) == 0x000224, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000228, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_RandomFloatInRange_ReturnValue) == 0x00022C, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, Temp_int_Variable_2) == 0x000230, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_Less_IntInt_ReturnValue) == 0x000234, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_Add_IntInt_ReturnValue_2) == 0x000238, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_K2_SetWorldRotation_SweepHitResult) == 0x00023C, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_K2_SetWorldRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x0002C4, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x0002C8, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0002CC, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue_1) == 0x0002D0, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_K2_AddLocalRotation_SweepHitResult) == 0x0002DC, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_K2_AddLocalRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000364, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_GetUpVector_ReturnValue) == 0x000370, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_GetUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_BreakRotator_Roll) == 0x00037C, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_BreakRotator_Pitch) == 0x000380, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_BreakRotator_Yaw) == 0x000384, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_NotEqual_VectorVector_ReturnValue) == 0x000388, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_NotEqual_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_MakeRotator_ReturnValue) == 0x00038C, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_K2_SetWorldRotation_SweepHitResult_1) == 0x000398, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_K2_SetWorldRotation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, Temp_int_Loop_Counter_Variable) == 0x000420, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_Add_IntInt_ReturnValue_3) == 0x000424, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_GetTransform_ReturnValue) == 0x000430, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_TransformLocation_ReturnValue) == 0x000460, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_TransformLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_Conv_IntToFloat_ReturnValue_2) == 0x00046C, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_Conv_IntToFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_Add_VectorVector_ReturnValue) == 0x000470, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_GetDirectionAtDistanceAlongSpline_ReturnValue) == 0x00047C, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_GetDirectionAtDistanceAlongSpline_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x000488, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_BreakRotator_Roll_1) == 0x000494, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_BreakRotator_Pitch_1) == 0x000498, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_BreakRotator_Yaw_1) == 0x00049C, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_GetSplineLength_ReturnValue) == 0x0004A0, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_GetSplineLength_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_MakeRotator_ReturnValue_1) == 0x0004A4, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x0004B0, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_K2_SetWorldRotation_SweepHitResult_2) == 0x0004B4, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_K2_SetWorldRotation_SweepHitResult_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x00053C, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x000540, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, Temp_object_Variable) == 0x000548, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000558, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x00055C, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_FTrunc_ReturnValue) == 0x000560, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_FTrunc_ReturnValue_1) == 0x000564, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_FTrunc_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, Temp_object_Variable_1) == 0x000568, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_RandomIntegerInRange_ReturnValue) == 0x000578, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_RandomIntegerInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, Temp_object_Variable_2) == 0x000580, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_SphereTraceSingle_OutHit) == 0x000590, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_SphereTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_SphereTraceSingle_ReturnValue) == 0x000618, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_SphereTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_BreakHitResult_bBlockingHit) == 0x000619, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_BreakHitResult_bInitialOverlap) == 0x00061A, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_BreakHitResult_Time) == 0x00061C, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_BreakHitResult_Distance) == 0x000620, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_BreakHitResult_Location) == 0x000624, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_BreakHitResult_ImpactPoint) == 0x000630, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_BreakHitResult_Normal) == 0x00063C, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_BreakHitResult_ImpactNormal) == 0x000648, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_BreakHitResult_PhysMat) == 0x000658, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_BreakHitResult_HitActor) == 0x000660, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_BreakHitResult_HitComponent) == 0x000668, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_BreakHitResult_HitBoneName) == 0x000670, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_BreakHitResult_HitItem) == 0x000678, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_BreakHitResult_ElementIndex) == 0x00067C, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_BreakHitResult_FaceIndex) == 0x000680, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_BreakHitResult_TraceStart) == 0x000684, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_BreakHitResult_TraceEnd) == 0x000690, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x00069C, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0006A8, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0006B4, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_LineTraceSingle_OutHit) == 0x0006C0, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_LineTraceSingle_ReturnValue) == 0x000748, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_BreakHitResult_bBlockingHit_1) == 0x000749, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_BreakHitResult_bBlockingHit_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_BreakHitResult_bInitialOverlap_1) == 0x00074A, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_BreakHitResult_bInitialOverlap_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_BreakHitResult_Time_1) == 0x00074C, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_BreakHitResult_Time_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_BreakHitResult_Distance_1) == 0x000750, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_BreakHitResult_Distance_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_BreakHitResult_Location_1) == 0x000754, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_BreakHitResult_Location_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_BreakHitResult_ImpactPoint_1) == 0x000760, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_BreakHitResult_ImpactPoint_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_BreakHitResult_Normal_1) == 0x00076C, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_BreakHitResult_Normal_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_BreakHitResult_ImpactNormal_1) == 0x000778, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_BreakHitResult_ImpactNormal_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_BreakHitResult_PhysMat_1) == 0x000788, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_BreakHitResult_PhysMat_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_BreakHitResult_HitActor_1) == 0x000790, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_BreakHitResult_HitActor_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_BreakHitResult_HitComponent_1) == 0x000798, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_BreakHitResult_HitComponent_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_BreakHitResult_HitBoneName_1) == 0x0007A0, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_BreakHitResult_HitBoneName_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_BreakHitResult_HitItem_1) == 0x0007A8, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_BreakHitResult_HitItem_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_BreakHitResult_ElementIndex_1) == 0x0007AC, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_BreakHitResult_ElementIndex_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_BreakHitResult_FaceIndex_1) == 0x0007B0, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_BreakHitResult_FaceIndex_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_BreakHitResult_TraceStart_1) == 0x0007B4, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_BreakHitResult_TraceStart_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_BreakHitResult_TraceEnd_1) == 0x0007C0, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_BreakHitResult_TraceEnd_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_BooleanOR_ReturnValue) == 0x0007CC, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_Multiply_VectorFloat_ReturnValue_2) == 0x0007D0, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_Multiply_VectorFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_GetTransform_ReturnValue_1) == 0x0007E0, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_GetTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_TransformLocation_ReturnValue_1) == 0x000810, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_TransformLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_Add_VectorVector_ReturnValue_2) == 0x00081C, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_Add_IntInt_ReturnValue_4) == 0x000828, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_SphereTraceSingle_OutHit_1) == 0x00082C, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_SphereTraceSingle_OutHit_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_SphereTraceSingle_ReturnValue_1) == 0x0008B4, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_SphereTraceSingle_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_Array_Get_Item) == 0x0008B8, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_Array_Length_ReturnValue) == 0x000910, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_Less_IntInt_ReturnValue_1) == 0x000914, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_BreakVector_X_1) == 0x000918, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_BreakVector_Y_1) == 0x00091C, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_BreakVector_Z_1) == 0x000920, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_BreakVector_X_2) == 0x000924, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_BreakVector_Y_2) == 0x000928, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_BreakVector_Z_2) == 0x00092C, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_RandomFloatInRange_ReturnValue_1) == 0x000930, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_RandomFloatInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_RandomFloatInRange_ReturnValue_2) == 0x000934, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_RandomFloatInRange_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_RandomFloatInRange_ReturnValue_3) == 0x000938, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_RandomFloatInRange_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_MakeRotator_ReturnValue_2) == 0x00093C, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_MakeRotator_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_ComposeRotators_ReturnValue) == 0x000948, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_Array_Add_ReturnValue) == 0x000954, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_Array_Contains_ReturnValue) == 0x000958, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_Conv_IntToFloat_ReturnValue_3) == 0x00095C, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_Conv_IntToFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue_2) == 0x000960, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_Subtract_IntInt_ReturnValue) == 0x00096C, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_MakeTransform_ReturnValue) == 0x000970, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(StemSpline_BP_C_AddSkelMeshesAlongSpline, CallFunc_AddComponent_ReturnValue_1) == 0x0009A0, "Member 'StemSpline_BP_C_AddSkelMeshesAlongSpline::CallFunc_AddComponent_ReturnValue_1' has a wrong offset!");

}

