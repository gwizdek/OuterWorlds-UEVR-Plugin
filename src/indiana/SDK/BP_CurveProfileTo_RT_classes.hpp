#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CurveProfileTo_RT

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CurveProfileTo_RT.BP_CurveProfileTo_RT_C
// 0x0088 (0x0340 - 0x02B8)
class ABP_CurveProfileTo_RT_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UJumpFloodComponent_2D_C*               JumpFloodComponent_2D;                             // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 Seed_Curve_RT;                                     // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 Curve_Line_Equation_RT;                            // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 Accumulated_Distance_Fields;                       // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 JumpFlood_Result_RT;                               // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      Curve;                                             // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              Resolution;                                        // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Seed_Curve_MID;                                    // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Composite_Result_MID;                              // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Preview_MID;                                       // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Show_Jump_Flood;                                   // 0x0320(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_321[0x7];                                      // 0x0321(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Texture_Name;                                      // 0x0328(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	int32                                         Channel;                                           // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Encoding_Bias;                                     // 0x033C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_CurveProfileTo_RT(int32 EntryPoint);
	void Save();
	void Clear();
	void Draw();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CurveProfileTo_RT_C">();
	}
	static class ABP_CurveProfileTo_RT_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_CurveProfileTo_RT_C>();
	}
};
static_assert(alignof(ABP_CurveProfileTo_RT_C) == 0x000008, "Wrong alignment on ABP_CurveProfileTo_RT_C");
static_assert(sizeof(ABP_CurveProfileTo_RT_C) == 0x000340, "Wrong size on ABP_CurveProfileTo_RT_C");
static_assert(offsetof(ABP_CurveProfileTo_RT_C, UberGraphFrame) == 0x0002B8, "Member 'ABP_CurveProfileTo_RT_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_CurveProfileTo_RT_C, JumpFloodComponent_2D) == 0x0002C0, "Member 'ABP_CurveProfileTo_RT_C::JumpFloodComponent_2D' has a wrong offset!");
static_assert(offsetof(ABP_CurveProfileTo_RT_C, StaticMesh) == 0x0002C8, "Member 'ABP_CurveProfileTo_RT_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_CurveProfileTo_RT_C, DefaultSceneRoot) == 0x0002D0, "Member 'ABP_CurveProfileTo_RT_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_CurveProfileTo_RT_C, Seed_Curve_RT) == 0x0002D8, "Member 'ABP_CurveProfileTo_RT_C::Seed_Curve_RT' has a wrong offset!");
static_assert(offsetof(ABP_CurveProfileTo_RT_C, Curve_Line_Equation_RT) == 0x0002E0, "Member 'ABP_CurveProfileTo_RT_C::Curve_Line_Equation_RT' has a wrong offset!");
static_assert(offsetof(ABP_CurveProfileTo_RT_C, Accumulated_Distance_Fields) == 0x0002E8, "Member 'ABP_CurveProfileTo_RT_C::Accumulated_Distance_Fields' has a wrong offset!");
static_assert(offsetof(ABP_CurveProfileTo_RT_C, JumpFlood_Result_RT) == 0x0002F0, "Member 'ABP_CurveProfileTo_RT_C::JumpFlood_Result_RT' has a wrong offset!");
static_assert(offsetof(ABP_CurveProfileTo_RT_C, Curve) == 0x0002F8, "Member 'ABP_CurveProfileTo_RT_C::Curve' has a wrong offset!");
static_assert(offsetof(ABP_CurveProfileTo_RT_C, Resolution) == 0x000300, "Member 'ABP_CurveProfileTo_RT_C::Resolution' has a wrong offset!");
static_assert(offsetof(ABP_CurveProfileTo_RT_C, Seed_Curve_MID) == 0x000308, "Member 'ABP_CurveProfileTo_RT_C::Seed_Curve_MID' has a wrong offset!");
static_assert(offsetof(ABP_CurveProfileTo_RT_C, Composite_Result_MID) == 0x000310, "Member 'ABP_CurveProfileTo_RT_C::Composite_Result_MID' has a wrong offset!");
static_assert(offsetof(ABP_CurveProfileTo_RT_C, Preview_MID) == 0x000318, "Member 'ABP_CurveProfileTo_RT_C::Preview_MID' has a wrong offset!");
static_assert(offsetof(ABP_CurveProfileTo_RT_C, Show_Jump_Flood) == 0x000320, "Member 'ABP_CurveProfileTo_RT_C::Show_Jump_Flood' has a wrong offset!");
static_assert(offsetof(ABP_CurveProfileTo_RT_C, Texture_Name) == 0x000328, "Member 'ABP_CurveProfileTo_RT_C::Texture_Name' has a wrong offset!");
static_assert(offsetof(ABP_CurveProfileTo_RT_C, Channel) == 0x000338, "Member 'ABP_CurveProfileTo_RT_C::Channel' has a wrong offset!");
static_assert(offsetof(ABP_CurveProfileTo_RT_C, Encoding_Bias) == 0x00033C, "Member 'ABP_CurveProfileTo_RT_C::Encoding_Bias' has a wrong offset!");

}

