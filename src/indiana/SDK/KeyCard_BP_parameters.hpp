#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KeyCard_BP

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Indiana_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function KeyCard_BP.KeyCard_BP_C.Update
// 0x0002 (0x0002 - 0x0000)
struct KeyCard_BP_C_Update final
{
public:
	bool                                          IsEmpty;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Unused;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(KeyCard_BP_C_Update) == 0x000001, "Wrong alignment on KeyCard_BP_C_Update");
static_assert(sizeof(KeyCard_BP_C_Update) == 0x000002, "Wrong size on KeyCard_BP_C_Update");
static_assert(offsetof(KeyCard_BP_C_Update, IsEmpty) == 0x000000, "Member 'KeyCard_BP_C_Update::IsEmpty' has a wrong offset!");
static_assert(offsetof(KeyCard_BP_C_Update, Unused) == 0x000001, "Member 'KeyCard_BP_C_Update::Unused' has a wrong offset!");

// Function KeyCard_BP.KeyCard_BP_C.Setup
// 0x0010 (0x0010 - 0x0000)
struct KeyCard_BP_C_Setup final
{
public:
	class UOCLComponent*                          OCL_0;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Unused;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(KeyCard_BP_C_Setup) == 0x000008, "Wrong alignment on KeyCard_BP_C_Setup");
static_assert(sizeof(KeyCard_BP_C_Setup) == 0x000010, "Wrong size on KeyCard_BP_C_Setup");
static_assert(offsetof(KeyCard_BP_C_Setup, OCL_0) == 0x000000, "Member 'KeyCard_BP_C_Setup::OCL_0' has a wrong offset!");
static_assert(offsetof(KeyCard_BP_C_Setup, Unused) == 0x000008, "Member 'KeyCard_BP_C_Setup::Unused' has a wrong offset!");
static_assert(offsetof(KeyCard_BP_C_Setup, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'KeyCard_BP_C_Setup::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function KeyCard_BP.KeyCard_BP_C.Set_ContainerState
// 0x0001 (0x0001 - 0x0000)
struct KeyCard_BP_C_Set_ContainerState final
{
public:
	bool                                          Container_Empty_Value;                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(KeyCard_BP_C_Set_ContainerState) == 0x000001, "Wrong alignment on KeyCard_BP_C_Set_ContainerState");
static_assert(sizeof(KeyCard_BP_C_Set_ContainerState) == 0x000001, "Wrong size on KeyCard_BP_C_Set_ContainerState");
static_assert(offsetof(KeyCard_BP_C_Set_ContainerState, Container_Empty_Value) == 0x000000, "Member 'KeyCard_BP_C_Set_ContainerState::Container_Empty_Value' has a wrong offset!");

// Function KeyCard_BP.KeyCard_BP_C.ApplyLights
// 0x0078 (0x0078 - 0x0000)
struct KeyCard_BP_C_ApplyLights final
{
public:
	bool                                          IsEmpty;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BrightnessValue;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   BrightnessName;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           UnlockedColor;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           LockedColor;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSealed_ReturnValue;                     // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBarred_ReturnValue;                     // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLocked_ReturnValue;                     // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               K2Node_Select_Default;                             // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_SelectColor_ReturnValue;                  // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_K2_GetVectorParameterValue_ReturnValue;   // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue_1;                // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue_2;                // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue_3;                // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KeyCard_BP_C_ApplyLights) == 0x000008, "Wrong alignment on KeyCard_BP_C_ApplyLights");
static_assert(sizeof(KeyCard_BP_C_ApplyLights) == 0x000078, "Wrong size on KeyCard_BP_C_ApplyLights");
static_assert(offsetof(KeyCard_BP_C_ApplyLights, IsEmpty) == 0x000000, "Member 'KeyCard_BP_C_ApplyLights::IsEmpty' has a wrong offset!");
static_assert(offsetof(KeyCard_BP_C_ApplyLights, BrightnessValue) == 0x000004, "Member 'KeyCard_BP_C_ApplyLights::BrightnessValue' has a wrong offset!");
static_assert(offsetof(KeyCard_BP_C_ApplyLights, BrightnessName) == 0x000008, "Member 'KeyCard_BP_C_ApplyLights::BrightnessName' has a wrong offset!");
static_assert(offsetof(KeyCard_BP_C_ApplyLights, UnlockedColor) == 0x000010, "Member 'KeyCard_BP_C_ApplyLights::UnlockedColor' has a wrong offset!");
static_assert(offsetof(KeyCard_BP_C_ApplyLights, LockedColor) == 0x000020, "Member 'KeyCard_BP_C_ApplyLights::LockedColor' has a wrong offset!");
static_assert(offsetof(KeyCard_BP_C_ApplyLights, Temp_bool_Variable) == 0x000030, "Member 'KeyCard_BP_C_ApplyLights::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(KeyCard_BP_C_ApplyLights, CallFunc_IsSealed_ReturnValue) == 0x000031, "Member 'KeyCard_BP_C_ApplyLights::CallFunc_IsSealed_ReturnValue' has a wrong offset!");
static_assert(offsetof(KeyCard_BP_C_ApplyLights, CallFunc_IsBarred_ReturnValue) == 0x000032, "Member 'KeyCard_BP_C_ApplyLights::CallFunc_IsBarred_ReturnValue' has a wrong offset!");
static_assert(offsetof(KeyCard_BP_C_ApplyLights, CallFunc_IsLocked_ReturnValue) == 0x000033, "Member 'KeyCard_BP_C_ApplyLights::CallFunc_IsLocked_ReturnValue' has a wrong offset!");
static_assert(offsetof(KeyCard_BP_C_ApplyLights, CallFunc_BooleanOR_ReturnValue) == 0x000034, "Member 'KeyCard_BP_C_ApplyLights::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(KeyCard_BP_C_ApplyLights, CallFunc_SelectFloat_ReturnValue) == 0x000038, "Member 'KeyCard_BP_C_ApplyLights::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(KeyCard_BP_C_ApplyLights, K2Node_Select_Default) == 0x000040, "Member 'KeyCard_BP_C_ApplyLights::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(KeyCard_BP_C_ApplyLights, CallFunc_SelectColor_ReturnValue) == 0x000048, "Member 'KeyCard_BP_C_ApplyLights::CallFunc_SelectColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(KeyCard_BP_C_ApplyLights, CallFunc_K2_GetVectorParameterValue_ReturnValue) == 0x000058, "Member 'KeyCard_BP_C_ApplyLights::CallFunc_K2_GetVectorParameterValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(KeyCard_BP_C_ApplyLights, CallFunc_BooleanOR_ReturnValue_1) == 0x000068, "Member 'KeyCard_BP_C_ApplyLights::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(KeyCard_BP_C_ApplyLights, CallFunc_SelectFloat_ReturnValue_1) == 0x00006C, "Member 'KeyCard_BP_C_ApplyLights::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(KeyCard_BP_C_ApplyLights, CallFunc_SelectFloat_ReturnValue_2) == 0x000070, "Member 'KeyCard_BP_C_ApplyLights::CallFunc_SelectFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(KeyCard_BP_C_ApplyLights, CallFunc_SelectFloat_ReturnValue_3) == 0x000074, "Member 'KeyCard_BP_C_ApplyLights::CallFunc_SelectFloat_ReturnValue_3' has a wrong offset!");

// Function KeyCard_BP.KeyCard_BP_C.UserConstructionScript
// 0x0018 (0x0018 - 0x0000)
struct KeyCard_BP_C_UserConstructionScript final
{
public:
	class UMaterialInstanceDynamic*               CallFunc_AssignMaterialInstanceBySlotName_Out;     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_AssignMaterialInstanceBySlotName_Out_1;   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_AssignMaterialInstanceBySlotName_Out_2;   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KeyCard_BP_C_UserConstructionScript) == 0x000008, "Wrong alignment on KeyCard_BP_C_UserConstructionScript");
static_assert(sizeof(KeyCard_BP_C_UserConstructionScript) == 0x000018, "Wrong size on KeyCard_BP_C_UserConstructionScript");
static_assert(offsetof(KeyCard_BP_C_UserConstructionScript, CallFunc_AssignMaterialInstanceBySlotName_Out) == 0x000000, "Member 'KeyCard_BP_C_UserConstructionScript::CallFunc_AssignMaterialInstanceBySlotName_Out' has a wrong offset!");
static_assert(offsetof(KeyCard_BP_C_UserConstructionScript, CallFunc_AssignMaterialInstanceBySlotName_Out_1) == 0x000008, "Member 'KeyCard_BP_C_UserConstructionScript::CallFunc_AssignMaterialInstanceBySlotName_Out_1' has a wrong offset!");
static_assert(offsetof(KeyCard_BP_C_UserConstructionScript, CallFunc_AssignMaterialInstanceBySlotName_Out_2) == 0x000010, "Member 'KeyCard_BP_C_UserConstructionScript::CallFunc_AssignMaterialInstanceBySlotName_Out_2' has a wrong offset!");

// Function KeyCard_BP.KeyCard_BP_C.BindEvents
// 0x0008 (0x0008 - 0x0000)
struct KeyCard_BP_C_BindEvents final
{
public:
	class UOCLComponent*                          OCL_0;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KeyCard_BP_C_BindEvents) == 0x000008, "Wrong alignment on KeyCard_BP_C_BindEvents");
static_assert(sizeof(KeyCard_BP_C_BindEvents) == 0x000008, "Wrong size on KeyCard_BP_C_BindEvents");
static_assert(offsetof(KeyCard_BP_C_BindEvents, OCL_0) == 0x000000, "Member 'KeyCard_BP_C_BindEvents::OCL_0' has a wrong offset!");

// Function KeyCard_BP.KeyCard_BP_C.OnOCLLockpickStart_Event_0
// 0x0010 (0x0010 - 0x0000)
struct KeyCard_BP_C_OnOCLLockpickStart_Event_0 final
{
public:
	class AActor*                                 Initiator;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LockpickSeconds;                                   // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LockpickNumResources;                              // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KeyCard_BP_C_OnOCLLockpickStart_Event_0) == 0x000008, "Wrong alignment on KeyCard_BP_C_OnOCLLockpickStart_Event_0");
static_assert(sizeof(KeyCard_BP_C_OnOCLLockpickStart_Event_0) == 0x000010, "Wrong size on KeyCard_BP_C_OnOCLLockpickStart_Event_0");
static_assert(offsetof(KeyCard_BP_C_OnOCLLockpickStart_Event_0, Initiator) == 0x000000, "Member 'KeyCard_BP_C_OnOCLLockpickStart_Event_0::Initiator' has a wrong offset!");
static_assert(offsetof(KeyCard_BP_C_OnOCLLockpickStart_Event_0, LockpickSeconds) == 0x000008, "Member 'KeyCard_BP_C_OnOCLLockpickStart_Event_0::LockpickSeconds' has a wrong offset!");
static_assert(offsetof(KeyCard_BP_C_OnOCLLockpickStart_Event_0, LockpickNumResources) == 0x00000C, "Member 'KeyCard_BP_C_OnOCLLockpickStart_Event_0::LockpickNumResources' has a wrong offset!");

// Function KeyCard_BP.KeyCard_BP_C.OnOCLLockpickInterrupted_Event_0
// 0x0008 (0x0008 - 0x0000)
struct KeyCard_BP_C_OnOCLLockpickInterrupted_Event_0 final
{
public:
	class AActor*                                 Initiator;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KeyCard_BP_C_OnOCLLockpickInterrupted_Event_0) == 0x000008, "Wrong alignment on KeyCard_BP_C_OnOCLLockpickInterrupted_Event_0");
static_assert(sizeof(KeyCard_BP_C_OnOCLLockpickInterrupted_Event_0) == 0x000008, "Wrong size on KeyCard_BP_C_OnOCLLockpickInterrupted_Event_0");
static_assert(offsetof(KeyCard_BP_C_OnOCLLockpickInterrupted_Event_0, Initiator) == 0x000000, "Member 'KeyCard_BP_C_OnOCLLockpickInterrupted_Event_0::Initiator' has a wrong offset!");

// Function KeyCard_BP.KeyCard_BP_C.OnOCLLockpickSuccess_Event_0
// 0x0008 (0x0008 - 0x0000)
struct KeyCard_BP_C_OnOCLLockpickSuccess_Event_0 final
{
public:
	class AActor*                                 Initiator;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KeyCard_BP_C_OnOCLLockpickSuccess_Event_0) == 0x000008, "Wrong alignment on KeyCard_BP_C_OnOCLLockpickSuccess_Event_0");
static_assert(sizeof(KeyCard_BP_C_OnOCLLockpickSuccess_Event_0) == 0x000008, "Wrong size on KeyCard_BP_C_OnOCLLockpickSuccess_Event_0");
static_assert(offsetof(KeyCard_BP_C_OnOCLLockpickSuccess_Event_0, Initiator) == 0x000000, "Member 'KeyCard_BP_C_OnOCLLockpickSuccess_Event_0::Initiator' has a wrong offset!");

// Function KeyCard_BP.KeyCard_BP_C.OnOCLAnimateOpen_Event_0
// 0x0010 (0x0010 - 0x0000)
struct KeyCard_BP_C_OnOCLAnimateOpen_Event_0 final
{
public:
	class AActor*                                 Initiator;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InFrontOfDoor;                                     // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IgnoreSound;                                       // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          InstantAnimation;                                  // 0x000A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(KeyCard_BP_C_OnOCLAnimateOpen_Event_0) == 0x000008, "Wrong alignment on KeyCard_BP_C_OnOCLAnimateOpen_Event_0");
static_assert(sizeof(KeyCard_BP_C_OnOCLAnimateOpen_Event_0) == 0x000010, "Wrong size on KeyCard_BP_C_OnOCLAnimateOpen_Event_0");
static_assert(offsetof(KeyCard_BP_C_OnOCLAnimateOpen_Event_0, Initiator) == 0x000000, "Member 'KeyCard_BP_C_OnOCLAnimateOpen_Event_0::Initiator' has a wrong offset!");
static_assert(offsetof(KeyCard_BP_C_OnOCLAnimateOpen_Event_0, InFrontOfDoor) == 0x000008, "Member 'KeyCard_BP_C_OnOCLAnimateOpen_Event_0::InFrontOfDoor' has a wrong offset!");
static_assert(offsetof(KeyCard_BP_C_OnOCLAnimateOpen_Event_0, IgnoreSound) == 0x000009, "Member 'KeyCard_BP_C_OnOCLAnimateOpen_Event_0::IgnoreSound' has a wrong offset!");
static_assert(offsetof(KeyCard_BP_C_OnOCLAnimateOpen_Event_0, InstantAnimation) == 0x00000A, "Member 'KeyCard_BP_C_OnOCLAnimateOpen_Event_0::InstantAnimation' has a wrong offset!");

// Function KeyCard_BP.KeyCard_BP_C.OnOCLAnimateClose_Event_0
// 0x0010 (0x0010 - 0x0000)
struct KeyCard_BP_C_OnOCLAnimateClose_Event_0 final
{
public:
	class AActor*                                 Initiator;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnoreSound;                                       // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          InstantAnimation;                                  // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(KeyCard_BP_C_OnOCLAnimateClose_Event_0) == 0x000008, "Wrong alignment on KeyCard_BP_C_OnOCLAnimateClose_Event_0");
static_assert(sizeof(KeyCard_BP_C_OnOCLAnimateClose_Event_0) == 0x000010, "Wrong size on KeyCard_BP_C_OnOCLAnimateClose_Event_0");
static_assert(offsetof(KeyCard_BP_C_OnOCLAnimateClose_Event_0, Initiator) == 0x000000, "Member 'KeyCard_BP_C_OnOCLAnimateClose_Event_0::Initiator' has a wrong offset!");
static_assert(offsetof(KeyCard_BP_C_OnOCLAnimateClose_Event_0, IgnoreSound) == 0x000008, "Member 'KeyCard_BP_C_OnOCLAnimateClose_Event_0::IgnoreSound' has a wrong offset!");
static_assert(offsetof(KeyCard_BP_C_OnOCLAnimateClose_Event_0, InstantAnimation) == 0x000009, "Member 'KeyCard_BP_C_OnOCLAnimateClose_Event_0::InstantAnimation' has a wrong offset!");

// Function KeyCard_BP.KeyCard_BP_C.ExecuteUbergraph_KeyCard_BP
// 0x01C8 (0x01C8 - 0x0000)
struct KeyCard_BP_C_ExecuteUbergraph_KeyCard_BP final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class AActor* Initiator, float LockpickSeconds, int32 LockpickNumResources)> K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class AActor* Initiator)>      K2Node_CreateDelegate_OutputDelegate_1;            // 0x0014(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class AActor* Initiator)>      K2Node_CreateDelegate_OutputDelegate_2;            // 0x0024(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class AActor* Initiator, bool InFrontOfDoor, bool IgnoreSound, bool InstantAnimation)> K2Node_CreateDelegate_OutputDelegate_3;            // 0x0034(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class AActor* Initiator, bool IgnoreSound, bool InstantAnimation)> K2Node_CreateDelegate_OutputDelegate_4;            // 0x0044(0x0010)(ZeroConstructor, NoDestructor)
	struct FRotator                               CallFunc_RLerp_ReturnValue;                        // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_RLerp_ReturnValue_1;                      // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x006C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult_1;  // 0x00F4(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_17C[0x4];                                      // 0x017C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UOCLComponent*                          K2Node_CustomEvent_OCL;                            // 0x0180(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_Initiator_4;                    // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_LockpickSeconds;                // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_LockpickNumResources;           // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_Initiator_3;                    // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_Initiator_2;                    // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_Initiator_1;                    // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_InFrontOfDoor;                  // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_IgnoreSound_1;                  // 0x01B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_InstantAnimation_1;             // 0x01B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B3[0x5];                                      // 0x01B3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_CustomEvent_Initiator;                      // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_IgnoreSound;                    // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_InstantAnimation;               // 0x01C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(KeyCard_BP_C_ExecuteUbergraph_KeyCard_BP) == 0x000008, "Wrong alignment on KeyCard_BP_C_ExecuteUbergraph_KeyCard_BP");
static_assert(sizeof(KeyCard_BP_C_ExecuteUbergraph_KeyCard_BP) == 0x0001C8, "Wrong size on KeyCard_BP_C_ExecuteUbergraph_KeyCard_BP");
static_assert(offsetof(KeyCard_BP_C_ExecuteUbergraph_KeyCard_BP, EntryPoint) == 0x000000, "Member 'KeyCard_BP_C_ExecuteUbergraph_KeyCard_BP::EntryPoint' has a wrong offset!");
static_assert(offsetof(KeyCard_BP_C_ExecuteUbergraph_KeyCard_BP, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'KeyCard_BP_C_ExecuteUbergraph_KeyCard_BP::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(KeyCard_BP_C_ExecuteUbergraph_KeyCard_BP, K2Node_CreateDelegate_OutputDelegate_1) == 0x000014, "Member 'KeyCard_BP_C_ExecuteUbergraph_KeyCard_BP::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(KeyCard_BP_C_ExecuteUbergraph_KeyCard_BP, K2Node_CreateDelegate_OutputDelegate_2) == 0x000024, "Member 'KeyCard_BP_C_ExecuteUbergraph_KeyCard_BP::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(KeyCard_BP_C_ExecuteUbergraph_KeyCard_BP, K2Node_CreateDelegate_OutputDelegate_3) == 0x000034, "Member 'KeyCard_BP_C_ExecuteUbergraph_KeyCard_BP::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(KeyCard_BP_C_ExecuteUbergraph_KeyCard_BP, K2Node_CreateDelegate_OutputDelegate_4) == 0x000044, "Member 'KeyCard_BP_C_ExecuteUbergraph_KeyCard_BP::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(KeyCard_BP_C_ExecuteUbergraph_KeyCard_BP, CallFunc_RLerp_ReturnValue) == 0x000054, "Member 'KeyCard_BP_C_ExecuteUbergraph_KeyCard_BP::CallFunc_RLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(KeyCard_BP_C_ExecuteUbergraph_KeyCard_BP, CallFunc_RLerp_ReturnValue_1) == 0x000060, "Member 'KeyCard_BP_C_ExecuteUbergraph_KeyCard_BP::CallFunc_RLerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(KeyCard_BP_C_ExecuteUbergraph_KeyCard_BP, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x00006C, "Member 'KeyCard_BP_C_ExecuteUbergraph_KeyCard_BP::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(KeyCard_BP_C_ExecuteUbergraph_KeyCard_BP, CallFunc_K2_SetRelativeRotation_SweepHitResult_1) == 0x0000F4, "Member 'KeyCard_BP_C_ExecuteUbergraph_KeyCard_BP::CallFunc_K2_SetRelativeRotation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(KeyCard_BP_C_ExecuteUbergraph_KeyCard_BP, K2Node_CustomEvent_OCL) == 0x000180, "Member 'KeyCard_BP_C_ExecuteUbergraph_KeyCard_BP::K2Node_CustomEvent_OCL' has a wrong offset!");
static_assert(offsetof(KeyCard_BP_C_ExecuteUbergraph_KeyCard_BP, K2Node_CustomEvent_Initiator_4) == 0x000188, "Member 'KeyCard_BP_C_ExecuteUbergraph_KeyCard_BP::K2Node_CustomEvent_Initiator_4' has a wrong offset!");
static_assert(offsetof(KeyCard_BP_C_ExecuteUbergraph_KeyCard_BP, K2Node_CustomEvent_LockpickSeconds) == 0x000190, "Member 'KeyCard_BP_C_ExecuteUbergraph_KeyCard_BP::K2Node_CustomEvent_LockpickSeconds' has a wrong offset!");
static_assert(offsetof(KeyCard_BP_C_ExecuteUbergraph_KeyCard_BP, K2Node_CustomEvent_LockpickNumResources) == 0x000194, "Member 'KeyCard_BP_C_ExecuteUbergraph_KeyCard_BP::K2Node_CustomEvent_LockpickNumResources' has a wrong offset!");
static_assert(offsetof(KeyCard_BP_C_ExecuteUbergraph_KeyCard_BP, K2Node_CustomEvent_Initiator_3) == 0x000198, "Member 'KeyCard_BP_C_ExecuteUbergraph_KeyCard_BP::K2Node_CustomEvent_Initiator_3' has a wrong offset!");
static_assert(offsetof(KeyCard_BP_C_ExecuteUbergraph_KeyCard_BP, K2Node_CustomEvent_Initiator_2) == 0x0001A0, "Member 'KeyCard_BP_C_ExecuteUbergraph_KeyCard_BP::K2Node_CustomEvent_Initiator_2' has a wrong offset!");
static_assert(offsetof(KeyCard_BP_C_ExecuteUbergraph_KeyCard_BP, K2Node_CustomEvent_Initiator_1) == 0x0001A8, "Member 'KeyCard_BP_C_ExecuteUbergraph_KeyCard_BP::K2Node_CustomEvent_Initiator_1' has a wrong offset!");
static_assert(offsetof(KeyCard_BP_C_ExecuteUbergraph_KeyCard_BP, K2Node_CustomEvent_InFrontOfDoor) == 0x0001B0, "Member 'KeyCard_BP_C_ExecuteUbergraph_KeyCard_BP::K2Node_CustomEvent_InFrontOfDoor' has a wrong offset!");
static_assert(offsetof(KeyCard_BP_C_ExecuteUbergraph_KeyCard_BP, K2Node_CustomEvent_IgnoreSound_1) == 0x0001B1, "Member 'KeyCard_BP_C_ExecuteUbergraph_KeyCard_BP::K2Node_CustomEvent_IgnoreSound_1' has a wrong offset!");
static_assert(offsetof(KeyCard_BP_C_ExecuteUbergraph_KeyCard_BP, K2Node_CustomEvent_InstantAnimation_1) == 0x0001B2, "Member 'KeyCard_BP_C_ExecuteUbergraph_KeyCard_BP::K2Node_CustomEvent_InstantAnimation_1' has a wrong offset!");
static_assert(offsetof(KeyCard_BP_C_ExecuteUbergraph_KeyCard_BP, K2Node_CustomEvent_Initiator) == 0x0001B8, "Member 'KeyCard_BP_C_ExecuteUbergraph_KeyCard_BP::K2Node_CustomEvent_Initiator' has a wrong offset!");
static_assert(offsetof(KeyCard_BP_C_ExecuteUbergraph_KeyCard_BP, K2Node_CustomEvent_IgnoreSound) == 0x0001C0, "Member 'KeyCard_BP_C_ExecuteUbergraph_KeyCard_BP::K2Node_CustomEvent_IgnoreSound' has a wrong offset!");
static_assert(offsetof(KeyCard_BP_C_ExecuteUbergraph_KeyCard_BP, K2Node_CustomEvent_InstantAnimation) == 0x0001C1, "Member 'KeyCard_BP_C_ExecuteUbergraph_KeyCard_BP::K2Node_CustomEvent_InstantAnimation' has a wrong offset!");

// Function KeyCard_BP.KeyCard_BP_C.CanInteract
// 0x0048 (0x0048 - 0x0000)
struct KeyCard_BP_C_CanInteract final
{
public:
	class AIndianaCharacter*                      Initiator;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FInteractPayload                       Payload;                                           // 0x0008(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetParentActor_ReturnValue;               // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IInteractionInterface> K2Node_DynamicCast_AsInteraction_Interface;        // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanInteract_ReturnValue;                  // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(KeyCard_BP_C_CanInteract) == 0x000008, "Wrong alignment on KeyCard_BP_C_CanInteract");
static_assert(sizeof(KeyCard_BP_C_CanInteract) == 0x000048, "Wrong size on KeyCard_BP_C_CanInteract");
static_assert(offsetof(KeyCard_BP_C_CanInteract, Initiator) == 0x000000, "Member 'KeyCard_BP_C_CanInteract::Initiator' has a wrong offset!");
static_assert(offsetof(KeyCard_BP_C_CanInteract, Payload) == 0x000008, "Member 'KeyCard_BP_C_CanInteract::Payload' has a wrong offset!");
static_assert(offsetof(KeyCard_BP_C_CanInteract, ReturnValue) == 0x000020, "Member 'KeyCard_BP_C_CanInteract::ReturnValue' has a wrong offset!");
static_assert(offsetof(KeyCard_BP_C_CanInteract, Temp_bool_Variable) == 0x000021, "Member 'KeyCard_BP_C_CanInteract::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(KeyCard_BP_C_CanInteract, CallFunc_GetParentActor_ReturnValue) == 0x000028, "Member 'KeyCard_BP_C_CanInteract::CallFunc_GetParentActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(KeyCard_BP_C_CanInteract, K2Node_DynamicCast_AsInteraction_Interface) == 0x000030, "Member 'KeyCard_BP_C_CanInteract::K2Node_DynamicCast_AsInteraction_Interface' has a wrong offset!");
static_assert(offsetof(KeyCard_BP_C_CanInteract, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'KeyCard_BP_C_CanInteract::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(KeyCard_BP_C_CanInteract, CallFunc_CanInteract_ReturnValue) == 0x000041, "Member 'KeyCard_BP_C_CanInteract::CallFunc_CanInteract_ReturnValue' has a wrong offset!");

}

