#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: J_PlasmaRifle_AnimBlueprint

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function J_PlasmaRifle_AnimBlueprint.J_PlasmaRifle_AnimBlueprint_C.ExecuteUbergraph_J_PlasmaRifle_AnimBlueprint
// 0x0038 (0x0038 - 0x0000)
struct J_PlasmaRifle_AnimBlueprint_C_ExecuteUbergraph_J_PlasmaRifle_AnimBlueprint final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WeaponCharging_ReturnValue;               // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaTimeX;                           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Percent_FloatFloat_ReturnValue;           // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(J_PlasmaRifle_AnimBlueprint_C_ExecuteUbergraph_J_PlasmaRifle_AnimBlueprint) == 0x000004, "Wrong alignment on J_PlasmaRifle_AnimBlueprint_C_ExecuteUbergraph_J_PlasmaRifle_AnimBlueprint");
static_assert(sizeof(J_PlasmaRifle_AnimBlueprint_C_ExecuteUbergraph_J_PlasmaRifle_AnimBlueprint) == 0x000038, "Wrong size on J_PlasmaRifle_AnimBlueprint_C_ExecuteUbergraph_J_PlasmaRifle_AnimBlueprint");
static_assert(offsetof(J_PlasmaRifle_AnimBlueprint_C_ExecuteUbergraph_J_PlasmaRifle_AnimBlueprint, EntryPoint) == 0x000000, "Member 'J_PlasmaRifle_AnimBlueprint_C_ExecuteUbergraph_J_PlasmaRifle_AnimBlueprint::EntryPoint' has a wrong offset!");
static_assert(offsetof(J_PlasmaRifle_AnimBlueprint_C_ExecuteUbergraph_J_PlasmaRifle_AnimBlueprint, CallFunc_WeaponCharging_ReturnValue) == 0x000004, "Member 'J_PlasmaRifle_AnimBlueprint_C_ExecuteUbergraph_J_PlasmaRifle_AnimBlueprint::CallFunc_WeaponCharging_ReturnValue' has a wrong offset!");
static_assert(offsetof(J_PlasmaRifle_AnimBlueprint_C_ExecuteUbergraph_J_PlasmaRifle_AnimBlueprint, K2Node_Event_DeltaTimeX) == 0x000008, "Member 'J_PlasmaRifle_AnimBlueprint_C_ExecuteUbergraph_J_PlasmaRifle_AnimBlueprint::K2Node_Event_DeltaTimeX' has a wrong offset!");
static_assert(offsetof(J_PlasmaRifle_AnimBlueprint_C_ExecuteUbergraph_J_PlasmaRifle_AnimBlueprint, CallFunc_Multiply_IntFloat_ReturnValue) == 0x00000C, "Member 'J_PlasmaRifle_AnimBlueprint_C_ExecuteUbergraph_J_PlasmaRifle_AnimBlueprint::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(J_PlasmaRifle_AnimBlueprint_C_ExecuteUbergraph_J_PlasmaRifle_AnimBlueprint, CallFunc_MakeRotator_ReturnValue) == 0x000010, "Member 'J_PlasmaRifle_AnimBlueprint_C_ExecuteUbergraph_J_PlasmaRifle_AnimBlueprint::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(J_PlasmaRifle_AnimBlueprint_C_ExecuteUbergraph_J_PlasmaRifle_AnimBlueprint, CallFunc_MakeRotator_ReturnValue_1) == 0x00001C, "Member 'J_PlasmaRifle_AnimBlueprint_C_ExecuteUbergraph_J_PlasmaRifle_AnimBlueprint::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(J_PlasmaRifle_AnimBlueprint_C_ExecuteUbergraph_J_PlasmaRifle_AnimBlueprint, CallFunc_Lerp_ReturnValue) == 0x000028, "Member 'J_PlasmaRifle_AnimBlueprint_C_ExecuteUbergraph_J_PlasmaRifle_AnimBlueprint::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(J_PlasmaRifle_AnimBlueprint_C_ExecuteUbergraph_J_PlasmaRifle_AnimBlueprint, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00002C, "Member 'J_PlasmaRifle_AnimBlueprint_C_ExecuteUbergraph_J_PlasmaRifle_AnimBlueprint::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(J_PlasmaRifle_AnimBlueprint_C_ExecuteUbergraph_J_PlasmaRifle_AnimBlueprint, CallFunc_Add_FloatFloat_ReturnValue) == 0x000030, "Member 'J_PlasmaRifle_AnimBlueprint_C_ExecuteUbergraph_J_PlasmaRifle_AnimBlueprint::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(J_PlasmaRifle_AnimBlueprint_C_ExecuteUbergraph_J_PlasmaRifle_AnimBlueprint, CallFunc_Percent_FloatFloat_ReturnValue) == 0x000034, "Member 'J_PlasmaRifle_AnimBlueprint_C_ExecuteUbergraph_J_PlasmaRifle_AnimBlueprint::CallFunc_Percent_FloatFloat_ReturnValue' has a wrong offset!");

// Function J_PlasmaRifle_AnimBlueprint.J_PlasmaRifle_AnimBlueprint_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct J_PlasmaRifle_AnimBlueprint_C_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(J_PlasmaRifle_AnimBlueprint_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on J_PlasmaRifle_AnimBlueprint_C_BlueprintUpdateAnimation");
static_assert(sizeof(J_PlasmaRifle_AnimBlueprint_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on J_PlasmaRifle_AnimBlueprint_C_BlueprintUpdateAnimation");
static_assert(offsetof(J_PlasmaRifle_AnimBlueprint_C_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'J_PlasmaRifle_AnimBlueprint_C_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function J_PlasmaRifle_AnimBlueprint.J_PlasmaRifle_AnimBlueprint_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct J_PlasmaRifle_AnimBlueprint_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(J_PlasmaRifle_AnimBlueprint_C_AnimGraph) == 0x000008, "Wrong alignment on J_PlasmaRifle_AnimBlueprint_C_AnimGraph");
static_assert(sizeof(J_PlasmaRifle_AnimBlueprint_C_AnimGraph) == 0x000010, "Wrong size on J_PlasmaRifle_AnimBlueprint_C_AnimGraph");
static_assert(offsetof(J_PlasmaRifle_AnimBlueprint_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'J_PlasmaRifle_AnimBlueprint_C_AnimGraph::AnimGraph_0' has a wrong offset!");

}

