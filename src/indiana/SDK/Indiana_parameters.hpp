#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Indiana

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "AIModule_structs.hpp"
#include "Indiana_structs.hpp"
#include "UMG_structs.hpp"
#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Slate_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK::Params
{

// Function Indiana.IndianaUserWidget.OnInputDeviceChanged
// 0x0001 (0x0001 - 0x0000)
struct IndianaUserWidget_OnInputDeviceChanged final
{
public:
	bool                                          bUsingGamepad;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaUserWidget_OnInputDeviceChanged) == 0x000001, "Wrong alignment on IndianaUserWidget_OnInputDeviceChanged");
static_assert(sizeof(IndianaUserWidget_OnInputDeviceChanged) == 0x000001, "Wrong size on IndianaUserWidget_OnInputDeviceChanged");
static_assert(offsetof(IndianaUserWidget_OnInputDeviceChanged, bUsingGamepad) == 0x000000, "Member 'IndianaUserWidget_OnInputDeviceChanged::bUsingGamepad' has a wrong offset!");

// Function Indiana.IndianaUserWidget.OnIntro
// 0x0014 (0x0014 - 0x0000)
struct IndianaUserWidget_OnIntro final
{
public:
	TDelegate<void()>                             AnimationCompleteCallback;                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaUserWidget_OnIntro) == 0x000004, "Wrong alignment on IndianaUserWidget_OnIntro");
static_assert(sizeof(IndianaUserWidget_OnIntro) == 0x000014, "Wrong size on IndianaUserWidget_OnIntro");
static_assert(offsetof(IndianaUserWidget_OnIntro, AnimationCompleteCallback) == 0x000000, "Member 'IndianaUserWidget_OnIntro::AnimationCompleteCallback' has a wrong offset!");
static_assert(offsetof(IndianaUserWidget_OnIntro, ReturnValue) == 0x000010, "Member 'IndianaUserWidget_OnIntro::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaUserWidget.OnMaximize
// 0x0014 (0x0014 - 0x0000)
struct IndianaUserWidget_OnMaximize final
{
public:
	TDelegate<void()>                             AnimationCompleteCallback;                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaUserWidget_OnMaximize) == 0x000004, "Wrong alignment on IndianaUserWidget_OnMaximize");
static_assert(sizeof(IndianaUserWidget_OnMaximize) == 0x000014, "Wrong size on IndianaUserWidget_OnMaximize");
static_assert(offsetof(IndianaUserWidget_OnMaximize, AnimationCompleteCallback) == 0x000000, "Member 'IndianaUserWidget_OnMaximize::AnimationCompleteCallback' has a wrong offset!");
static_assert(offsetof(IndianaUserWidget_OnMaximize, ReturnValue) == 0x000010, "Member 'IndianaUserWidget_OnMaximize::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaUserWidget.OnMinimize
// 0x0014 (0x0014 - 0x0000)
struct IndianaUserWidget_OnMinimize final
{
public:
	TDelegate<void()>                             AnimationCompleteCallback;                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaUserWidget_OnMinimize) == 0x000004, "Wrong alignment on IndianaUserWidget_OnMinimize");
static_assert(sizeof(IndianaUserWidget_OnMinimize) == 0x000014, "Wrong size on IndianaUserWidget_OnMinimize");
static_assert(offsetof(IndianaUserWidget_OnMinimize, AnimationCompleteCallback) == 0x000000, "Member 'IndianaUserWidget_OnMinimize::AnimationCompleteCallback' has a wrong offset!");
static_assert(offsetof(IndianaUserWidget_OnMinimize, ReturnValue) == 0x000010, "Member 'IndianaUserWidget_OnMinimize::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaUserWidget.OnOutro
// 0x0014 (0x0014 - 0x0000)
struct IndianaUserWidget_OnOutro final
{
public:
	TDelegate<void()>                             AnimationCompleteCallback;                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaUserWidget_OnOutro) == 0x000004, "Wrong alignment on IndianaUserWidget_OnOutro");
static_assert(sizeof(IndianaUserWidget_OnOutro) == 0x000014, "Wrong size on IndianaUserWidget_OnOutro");
static_assert(offsetof(IndianaUserWidget_OnOutro, AnimationCompleteCallback) == 0x000000, "Member 'IndianaUserWidget_OnOutro::AnimationCompleteCallback' has a wrong offset!");
static_assert(offsetof(IndianaUserWidget_OnOutro, ReturnValue) == 0x000010, "Member 'IndianaUserWidget_OnOutro::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaUserWidget.GetIndianaUI
// 0x0008 (0x0008 - 0x0000)
struct IndianaUserWidget_GetIndianaUI final
{
public:
	class AIndianaUI*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaUserWidget_GetIndianaUI) == 0x000008, "Wrong alignment on IndianaUserWidget_GetIndianaUI");
static_assert(sizeof(IndianaUserWidget_GetIndianaUI) == 0x000008, "Wrong size on IndianaUserWidget_GetIndianaUI");
static_assert(offsetof(IndianaUserWidget_GetIndianaUI, ReturnValue) == 0x000000, "Member 'IndianaUserWidget_GetIndianaUI::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaUserWidget.GetOpenState
// 0x0001 (0x0001 - 0x0000)
struct IndianaUserWidget_GetOpenState final
{
public:
	EWidgetOpenState                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaUserWidget_GetOpenState) == 0x000001, "Wrong alignment on IndianaUserWidget_GetOpenState");
static_assert(sizeof(IndianaUserWidget_GetOpenState) == 0x000001, "Wrong size on IndianaUserWidget_GetOpenState");
static_assert(offsetof(IndianaUserWidget_GetOpenState, ReturnValue) == 0x000000, "Member 'IndianaUserWidget_GetOpenState::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaUserWidget.IsMaximized
// 0x0002 (0x0002 - 0x0000)
struct IndianaUserWidget_IsMaximized final
{
public:
	bool                                          bIncludeTransitioning;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaUserWidget_IsMaximized) == 0x000001, "Wrong alignment on IndianaUserWidget_IsMaximized");
static_assert(sizeof(IndianaUserWidget_IsMaximized) == 0x000002, "Wrong size on IndianaUserWidget_IsMaximized");
static_assert(offsetof(IndianaUserWidget_IsMaximized, bIncludeTransitioning) == 0x000000, "Member 'IndianaUserWidget_IsMaximized::bIncludeTransitioning' has a wrong offset!");
static_assert(offsetof(IndianaUserWidget_IsMaximized, ReturnValue) == 0x000001, "Member 'IndianaUserWidget_IsMaximized::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaUserWidget.IsMinimized
// 0x0002 (0x0002 - 0x0000)
struct IndianaUserWidget_IsMinimized final
{
public:
	bool                                          bIncludeTransitioning;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaUserWidget_IsMinimized) == 0x000001, "Wrong alignment on IndianaUserWidget_IsMinimized");
static_assert(sizeof(IndianaUserWidget_IsMinimized) == 0x000002, "Wrong size on IndianaUserWidget_IsMinimized");
static_assert(offsetof(IndianaUserWidget_IsMinimized, bIncludeTransitioning) == 0x000000, "Member 'IndianaUserWidget_IsMinimized::bIncludeTransitioning' has a wrong offset!");
static_assert(offsetof(IndianaUserWidget_IsMinimized, ReturnValue) == 0x000001, "Member 'IndianaUserWidget_IsMinimized::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaUserWidget.IsShuttingDown
// 0x0002 (0x0002 - 0x0000)
struct IndianaUserWidget_IsShuttingDown final
{
public:
	bool                                          bIncludeTransitioning;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaUserWidget_IsShuttingDown) == 0x000001, "Wrong alignment on IndianaUserWidget_IsShuttingDown");
static_assert(sizeof(IndianaUserWidget_IsShuttingDown) == 0x000002, "Wrong size on IndianaUserWidget_IsShuttingDown");
static_assert(offsetof(IndianaUserWidget_IsShuttingDown, bIncludeTransitioning) == 0x000000, "Member 'IndianaUserWidget_IsShuttingDown::bIncludeTransitioning' has a wrong offset!");
static_assert(offsetof(IndianaUserWidget_IsShuttingDown, ReturnValue) == 0x000001, "Member 'IndianaUserWidget_IsShuttingDown::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaUserWidget.ObjectRefHasReferencers
// 0x0001 (0x0001 - 0x0000)
struct IndianaUserWidget_ObjectRefHasReferencers final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaUserWidget_ObjectRefHasReferencers) == 0x000001, "Wrong alignment on IndianaUserWidget_ObjectRefHasReferencers");
static_assert(sizeof(IndianaUserWidget_ObjectRefHasReferencers) == 0x000001, "Wrong size on IndianaUserWidget_ObjectRefHasReferencers");
static_assert(offsetof(IndianaUserWidget_ObjectRefHasReferencers, ReturnValue) == 0x000000, "Member 'IndianaUserWidget_ObjectRefHasReferencers::ReturnValue' has a wrong offset!");

// Function Indiana.AbilityOverviewChildWidget.ModifyPulseScale
// 0x0004 (0x0004 - 0x0000)
struct AbilityOverviewChildWidget_ModifyPulseScale final
{
public:
	float                                         PulseScale;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityOverviewChildWidget_ModifyPulseScale) == 0x000004, "Wrong alignment on AbilityOverviewChildWidget_ModifyPulseScale");
static_assert(sizeof(AbilityOverviewChildWidget_ModifyPulseScale) == 0x000004, "Wrong size on AbilityOverviewChildWidget_ModifyPulseScale");
static_assert(offsetof(AbilityOverviewChildWidget_ModifyPulseScale, PulseScale) == 0x000000, "Member 'AbilityOverviewChildWidget_ModifyPulseScale::PulseScale' has a wrong offset!");

// Function Indiana.FPVSkeletalMeshComponent.SetFixedFOVforFPVEnabled
// 0x0001 (0x0001 - 0x0000)
struct FPVSkeletalMeshComponent_SetFixedFOVforFPVEnabled final
{
public:
	bool                                          InbFixedFOVEnabled;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPVSkeletalMeshComponent_SetFixedFOVforFPVEnabled) == 0x000001, "Wrong alignment on FPVSkeletalMeshComponent_SetFixedFOVforFPVEnabled");
static_assert(sizeof(FPVSkeletalMeshComponent_SetFixedFOVforFPVEnabled) == 0x000001, "Wrong size on FPVSkeletalMeshComponent_SetFixedFOVforFPVEnabled");
static_assert(offsetof(FPVSkeletalMeshComponent_SetFixedFOVforFPVEnabled, InbFixedFOVEnabled) == 0x000000, "Member 'FPVSkeletalMeshComponent_SetFixedFOVforFPVEnabled::InbFixedFOVEnabled' has a wrong offset!");

// Function Indiana.FPVSkeletalMeshComponent.IsFixedFOVEnabled
// 0x0001 (0x0001 - 0x0000)
struct FPVSkeletalMeshComponent_IsFixedFOVEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPVSkeletalMeshComponent_IsFixedFOVEnabled) == 0x000001, "Wrong alignment on FPVSkeletalMeshComponent_IsFixedFOVEnabled");
static_assert(sizeof(FPVSkeletalMeshComponent_IsFixedFOVEnabled) == 0x000001, "Wrong size on FPVSkeletalMeshComponent_IsFixedFOVEnabled");
static_assert(offsetof(FPVSkeletalMeshComponent_IsFixedFOVEnabled, ReturnValue) == 0x000000, "Member 'FPVSkeletalMeshComponent_IsFixedFOVEnabled::ReturnValue' has a wrong offset!");

// Function Indiana.AbilityOverviewDetailWidget.OnAbilityUnlockChange
// 0x0001 (0x0001 - 0x0000)
struct AbilityOverviewDetailWidget_OnAbilityUnlockChange final
{
public:
	EUnlockAbility                                Ability;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityOverviewDetailWidget_OnAbilityUnlockChange) == 0x000001, "Wrong alignment on AbilityOverviewDetailWidget_OnAbilityUnlockChange");
static_assert(sizeof(AbilityOverviewDetailWidget_OnAbilityUnlockChange) == 0x000001, "Wrong size on AbilityOverviewDetailWidget_OnAbilityUnlockChange");
static_assert(offsetof(AbilityOverviewDetailWidget_OnAbilityUnlockChange, Ability) == 0x000000, "Member 'AbilityOverviewDetailWidget_OnAbilityUnlockChange::Ability' has a wrong offset!");

// Function Indiana.CompanionPositionComponent.RequestForceTeleportCompanions
// 0x0018 (0x0018 - 0x0000)
struct CompanionPositionComponent_RequestForceTeleportCompanions final
{
public:
	struct FVector                                Position1;                                         // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position2;                                         // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompanionPositionComponent_RequestForceTeleportCompanions) == 0x000004, "Wrong alignment on CompanionPositionComponent_RequestForceTeleportCompanions");
static_assert(sizeof(CompanionPositionComponent_RequestForceTeleportCompanions) == 0x000018, "Wrong size on CompanionPositionComponent_RequestForceTeleportCompanions");
static_assert(offsetof(CompanionPositionComponent_RequestForceTeleportCompanions, Position1) == 0x000000, "Member 'CompanionPositionComponent_RequestForceTeleportCompanions::Position1' has a wrong offset!");
static_assert(offsetof(CompanionPositionComponent_RequestForceTeleportCompanions, Position2) == 0x00000C, "Member 'CompanionPositionComponent_RequestForceTeleportCompanions::Position2' has a wrong offset!");

// Function Indiana.CompanionPositionComponent.OnOccupiedElevatorChange
// 0x0010 (0x0010 - 0x0000)
struct CompanionPositionComponent_OnOccupiedElevatorChange final
{
public:
	class AElevator*                              Elevator;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOccupied;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CompanionPositionComponent_OnOccupiedElevatorChange) == 0x000008, "Wrong alignment on CompanionPositionComponent_OnOccupiedElevatorChange");
static_assert(sizeof(CompanionPositionComponent_OnOccupiedElevatorChange) == 0x000010, "Wrong size on CompanionPositionComponent_OnOccupiedElevatorChange");
static_assert(offsetof(CompanionPositionComponent_OnOccupiedElevatorChange, Elevator) == 0x000000, "Member 'CompanionPositionComponent_OnOccupiedElevatorChange::Elevator' has a wrong offset!");
static_assert(offsetof(CompanionPositionComponent_OnOccupiedElevatorChange, bOccupied) == 0x000008, "Member 'CompanionPositionComponent_OnOccupiedElevatorChange::bOccupied' has a wrong offset!");

// Function Indiana.CompanionPositionComponent.OnOccupiedElevatorMove
// 0x0008 (0x0008 - 0x0000)
struct CompanionPositionComponent_OnOccupiedElevatorMove final
{
public:
	class AElevator*                              Elevator;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompanionPositionComponent_OnOccupiedElevatorMove) == 0x000008, "Wrong alignment on CompanionPositionComponent_OnOccupiedElevatorMove");
static_assert(sizeof(CompanionPositionComponent_OnOccupiedElevatorMove) == 0x000008, "Wrong size on CompanionPositionComponent_OnOccupiedElevatorMove");
static_assert(offsetof(CompanionPositionComponent_OnOccupiedElevatorMove, Elevator) == 0x000000, "Member 'CompanionPositionComponent_OnOccupiedElevatorMove::Elevator' has a wrong offset!");

// Function Indiana.CompanionPositionComponent.OnPlayerConversationChange
// 0x0010 (0x0010 - 0x0000)
struct CompanionPositionComponent_OnPlayerConversationChange final
{
public:
	const class UConversationInstance*            Instance;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEntered;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CompanionPositionComponent_OnPlayerConversationChange) == 0x000008, "Wrong alignment on CompanionPositionComponent_OnPlayerConversationChange");
static_assert(sizeof(CompanionPositionComponent_OnPlayerConversationChange) == 0x000010, "Wrong size on CompanionPositionComponent_OnPlayerConversationChange");
static_assert(offsetof(CompanionPositionComponent_OnPlayerConversationChange, Instance) == 0x000000, "Member 'CompanionPositionComponent_OnPlayerConversationChange::Instance' has a wrong offset!");
static_assert(offsetof(CompanionPositionComponent_OnPlayerConversationChange, bEntered) == 0x000008, "Member 'CompanionPositionComponent_OnPlayerConversationChange::bEntered' has a wrong offset!");

// Function Indiana.CompanionPositionComponent.OnStealthChange
// 0x0001 (0x0001 - 0x0000)
struct CompanionPositionComponent_OnStealthChange final
{
public:
	bool                                          bStealthed;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompanionPositionComponent_OnStealthChange) == 0x000001, "Wrong alignment on CompanionPositionComponent_OnStealthChange");
static_assert(sizeof(CompanionPositionComponent_OnStealthChange) == 0x000001, "Wrong size on CompanionPositionComponent_OnStealthChange");
static_assert(offsetof(CompanionPositionComponent_OnStealthChange, bStealthed) == 0x000000, "Member 'CompanionPositionComponent_OnStealthChange::bStealthed' has a wrong offset!");

// Function Indiana.StatusEffect.ReceiveApplyEffect
// 0x0010 (0x0010 - 0x0000)
struct StatusEffect_ReceiveApplyEffect final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Ratio;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestoredFromSave;                                 // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StatusEffect_ReceiveApplyEffect) == 0x000008, "Wrong alignment on StatusEffect_ReceiveApplyEffect");
static_assert(sizeof(StatusEffect_ReceiveApplyEffect) == 0x000010, "Wrong size on StatusEffect_ReceiveApplyEffect");
static_assert(offsetof(StatusEffect_ReceiveApplyEffect, Target) == 0x000000, "Member 'StatusEffect_ReceiveApplyEffect::Target' has a wrong offset!");
static_assert(offsetof(StatusEffect_ReceiveApplyEffect, Ratio) == 0x000008, "Member 'StatusEffect_ReceiveApplyEffect::Ratio' has a wrong offset!");
static_assert(offsetof(StatusEffect_ReceiveApplyEffect, bRestoredFromSave) == 0x00000C, "Member 'StatusEffect_ReceiveApplyEffect::bRestoredFromSave' has a wrong offset!");

// Function Indiana.StatusEffect.ReceiveClearEffect
// 0x0008 (0x0008 - 0x0000)
struct StatusEffect_ReceiveClearEffect final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffect_ReceiveClearEffect) == 0x000008, "Wrong alignment on StatusEffect_ReceiveClearEffect");
static_assert(sizeof(StatusEffect_ReceiveClearEffect) == 0x000008, "Wrong size on StatusEffect_ReceiveClearEffect");
static_assert(offsetof(StatusEffect_ReceiveClearEffect, Target) == 0x000000, "Member 'StatusEffect_ReceiveClearEffect::Target' has a wrong offset!");

// Function Indiana.StatusEffect.GetStatusEffectOriginActor
// 0x0008 (0x0008 - 0x0000)
struct StatusEffect_GetStatusEffectOriginActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffect_GetStatusEffectOriginActor) == 0x000008, "Wrong alignment on StatusEffect_GetStatusEffectOriginActor");
static_assert(sizeof(StatusEffect_GetStatusEffectOriginActor) == 0x000008, "Wrong size on StatusEffect_GetStatusEffectOriginActor");
static_assert(offsetof(StatusEffect_GetStatusEffectOriginActor, ReturnValue) == 0x000000, "Member 'StatusEffect_GetStatusEffectOriginActor::ReturnValue' has a wrong offset!");

// Function Indiana.AbilityOverviewWidget.OnAbilityCooldownEnded
// 0x0001 (0x0001 - 0x0000)
struct AbilityOverviewWidget_OnAbilityCooldownEnded final
{
public:
	EAbilityPosition                              AbilityPosition;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityOverviewWidget_OnAbilityCooldownEnded) == 0x000001, "Wrong alignment on AbilityOverviewWidget_OnAbilityCooldownEnded");
static_assert(sizeof(AbilityOverviewWidget_OnAbilityCooldownEnded) == 0x000001, "Wrong size on AbilityOverviewWidget_OnAbilityCooldownEnded");
static_assert(offsetof(AbilityOverviewWidget_OnAbilityCooldownEnded, AbilityPosition) == 0x000000, "Member 'AbilityOverviewWidget_OnAbilityCooldownEnded::AbilityPosition' has a wrong offset!");

// Function Indiana.AbilityOverviewWidget.OnAbilityCooldownFinished
// 0x0001 (0x0001 - 0x0000)
struct AbilityOverviewWidget_OnAbilityCooldownFinished final
{
public:
	EAbilityPosition                              AbillityPosition;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityOverviewWidget_OnAbilityCooldownFinished) == 0x000001, "Wrong alignment on AbilityOverviewWidget_OnAbilityCooldownFinished");
static_assert(sizeof(AbilityOverviewWidget_OnAbilityCooldownFinished) == 0x000001, "Wrong size on AbilityOverviewWidget_OnAbilityCooldownFinished");
static_assert(offsetof(AbilityOverviewWidget_OnAbilityCooldownFinished, AbillityPosition) == 0x000000, "Member 'AbilityOverviewWidget_OnAbilityCooldownFinished::AbillityPosition' has a wrong offset!");

// Function Indiana.AbilityOverviewWidget.OnAbilityCooldownStarted
// 0x0001 (0x0001 - 0x0000)
struct AbilityOverviewWidget_OnAbilityCooldownStarted final
{
public:
	EAbilityPosition                              AbilityPosition;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityOverviewWidget_OnAbilityCooldownStarted) == 0x000001, "Wrong alignment on AbilityOverviewWidget_OnAbilityCooldownStarted");
static_assert(sizeof(AbilityOverviewWidget_OnAbilityCooldownStarted) == 0x000001, "Wrong size on AbilityOverviewWidget_OnAbilityCooldownStarted");
static_assert(offsetof(AbilityOverviewWidget_OnAbilityCooldownStarted, AbilityPosition) == 0x000000, "Member 'AbilityOverviewWidget_OnAbilityCooldownStarted::AbilityPosition' has a wrong offset!");

// Function Indiana.AbilityOverviewWidget.OnAbilityCooldownTriggered
// 0x0001 (0x0001 - 0x0000)
struct AbilityOverviewWidget_OnAbilityCooldownTriggered final
{
public:
	EAbilityPosition                              AbilityPosition;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityOverviewWidget_OnAbilityCooldownTriggered) == 0x000001, "Wrong alignment on AbilityOverviewWidget_OnAbilityCooldownTriggered");
static_assert(sizeof(AbilityOverviewWidget_OnAbilityCooldownTriggered) == 0x000001, "Wrong size on AbilityOverviewWidget_OnAbilityCooldownTriggered");
static_assert(offsetof(AbilityOverviewWidget_OnAbilityCooldownTriggered, AbilityPosition) == 0x000000, "Member 'AbilityOverviewWidget_OnAbilityCooldownTriggered::AbilityPosition' has a wrong offset!");

// Function Indiana.AbilityOverviewWidget.OnAbilityUsed
// 0x0010 (0x0010 - 0x0000)
struct AbilityOverviewWidget_OnAbilityUsed final
{
public:
	class UAbilityOverviewDetailWidget*           Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAbilityPosition                              AbilityPosition;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilityOverviewWidget_OnAbilityUsed) == 0x000008, "Wrong alignment on AbilityOverviewWidget_OnAbilityUsed");
static_assert(sizeof(AbilityOverviewWidget_OnAbilityUsed) == 0x000010, "Wrong size on AbilityOverviewWidget_OnAbilityUsed");
static_assert(offsetof(AbilityOverviewWidget_OnAbilityUsed, Widget) == 0x000000, "Member 'AbilityOverviewWidget_OnAbilityUsed::Widget' has a wrong offset!");
static_assert(offsetof(AbilityOverviewWidget_OnAbilityUsed, AbilityPosition) == 0x000008, "Member 'AbilityOverviewWidget_OnAbilityUsed::AbilityPosition' has a wrong offset!");

// Function Indiana.AbilityOverviewWidget.OnCommandButtonPressed
// 0x0001 (0x0001 - 0x0000)
struct AbilityOverviewWidget_OnCommandButtonPressed final
{
public:
	EAbilityPosition                              AbillityPosition;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityOverviewWidget_OnCommandButtonPressed) == 0x000001, "Wrong alignment on AbilityOverviewWidget_OnCommandButtonPressed");
static_assert(sizeof(AbilityOverviewWidget_OnCommandButtonPressed) == 0x000001, "Wrong size on AbilityOverviewWidget_OnCommandButtonPressed");
static_assert(offsetof(AbilityOverviewWidget_OnCommandButtonPressed, AbillityPosition) == 0x000000, "Member 'AbilityOverviewWidget_OnCommandButtonPressed::AbillityPosition' has a wrong offset!");

// Function Indiana.AbilityOverviewWidget.OnCompanionAbilityBindingModeChanged
// 0x0004 (0x0004 - 0x0000)
struct AbilityOverviewWidget_OnCompanionAbilityBindingModeChanged final
{
public:
	int32                                         ModeIn;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityOverviewWidget_OnCompanionAbilityBindingModeChanged) == 0x000004, "Wrong alignment on AbilityOverviewWidget_OnCompanionAbilityBindingModeChanged");
static_assert(sizeof(AbilityOverviewWidget_OnCompanionAbilityBindingModeChanged) == 0x000004, "Wrong size on AbilityOverviewWidget_OnCompanionAbilityBindingModeChanged");
static_assert(offsetof(AbilityOverviewWidget_OnCompanionAbilityBindingModeChanged, ModeIn) == 0x000000, "Member 'AbilityOverviewWidget_OnCompanionAbilityBindingModeChanged::ModeIn' has a wrong offset!");

// Function Indiana.AbilityOverviewWidget.OnCompanionAbilityModeChanged
// 0x0004 (0x0004 - 0x0000)
struct AbilityOverviewWidget_OnCompanionAbilityModeChanged final
{
public:
	int32                                         ModeIn;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityOverviewWidget_OnCompanionAbilityModeChanged) == 0x000004, "Wrong alignment on AbilityOverviewWidget_OnCompanionAbilityModeChanged");
static_assert(sizeof(AbilityOverviewWidget_OnCompanionAbilityModeChanged) == 0x000004, "Wrong size on AbilityOverviewWidget_OnCompanionAbilityModeChanged");
static_assert(offsetof(AbilityOverviewWidget_OnCompanionAbilityModeChanged, ModeIn) == 0x000000, "Member 'AbilityOverviewWidget_OnCompanionAbilityModeChanged::ModeIn' has a wrong offset!");

// Function Indiana.AbilityOverviewWidget.OnHUDModeChanged
// 0x0004 (0x0004 - 0x0000)
struct AbilityOverviewWidget_OnHUDModeChanged final
{
public:
	int32                                         ModeIn;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityOverviewWidget_OnHUDModeChanged) == 0x000004, "Wrong alignment on AbilityOverviewWidget_OnHUDModeChanged");
static_assert(sizeof(AbilityOverviewWidget_OnHUDModeChanged) == 0x000004, "Wrong size on AbilityOverviewWidget_OnHUDModeChanged");
static_assert(offsetof(AbilityOverviewWidget_OnHUDModeChanged, ModeIn) == 0x000000, "Member 'AbilityOverviewWidget_OnHUDModeChanged::ModeIn' has a wrong offset!");

// Function Indiana.AbilityOverviewWidget.OnHUDVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct AbilityOverviewWidget_OnHUDVisibilityChanged final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityOverviewWidget_OnHUDVisibilityChanged) == 0x000001, "Wrong alignment on AbilityOverviewWidget_OnHUDVisibilityChanged");
static_assert(sizeof(AbilityOverviewWidget_OnHUDVisibilityChanged) == 0x000001, "Wrong size on AbilityOverviewWidget_OnHUDVisibilityChanged");
static_assert(offsetof(AbilityOverviewWidget_OnHUDVisibilityChanged, bVisible) == 0x000000, "Member 'AbilityOverviewWidget_OnHUDVisibilityChanged::bVisible' has a wrong offset!");

// Function Indiana.AbilityOverviewWidget.OnPlayerCombatStateChange
// 0x0002 (0x0002 - 0x0000)
struct AbilityOverviewWidget_OnPlayerCombatStateChange final
{
public:
	bool                                          IsPlayerInCombat;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestoring;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityOverviewWidget_OnPlayerCombatStateChange) == 0x000001, "Wrong alignment on AbilityOverviewWidget_OnPlayerCombatStateChange");
static_assert(sizeof(AbilityOverviewWidget_OnPlayerCombatStateChange) == 0x000002, "Wrong size on AbilityOverviewWidget_OnPlayerCombatStateChange");
static_assert(offsetof(AbilityOverviewWidget_OnPlayerCombatStateChange, IsPlayerInCombat) == 0x000000, "Member 'AbilityOverviewWidget_OnPlayerCombatStateChange::IsPlayerInCombat' has a wrong offset!");
static_assert(offsetof(AbilityOverviewWidget_OnPlayerCombatStateChange, bRestoring) == 0x000001, "Member 'AbilityOverviewWidget_OnPlayerCombatStateChange::bRestoring' has a wrong offset!");

// Function Indiana.AchievementsManager.CompleteAchievementBP
// 0x0008 (0x0008 - 0x0000)
struct AchievementsManager_CompleteAchievementBP final
{
public:
	const class UAchievementDataAsset*            Achievement;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AchievementsManager_CompleteAchievementBP) == 0x000008, "Wrong alignment on AchievementsManager_CompleteAchievementBP");
static_assert(sizeof(AchievementsManager_CompleteAchievementBP) == 0x000008, "Wrong size on AchievementsManager_CompleteAchievementBP");
static_assert(offsetof(AchievementsManager_CompleteAchievementBP, Achievement) == 0x000000, "Member 'AchievementsManager_CompleteAchievementBP::Achievement' has a wrong offset!");

// Function Indiana.AchievementsManager.CompleteAchievement
// 0x0008 (0x0008 - 0x0000)
struct AchievementsManager_CompleteAchievement final
{
public:
	class FName                                   AchievementBPName;                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AchievementsManager_CompleteAchievement) == 0x000004, "Wrong alignment on AchievementsManager_CompleteAchievement");
static_assert(sizeof(AchievementsManager_CompleteAchievement) == 0x000008, "Wrong size on AchievementsManager_CompleteAchievement");
static_assert(offsetof(AchievementsManager_CompleteAchievement, AchievementBPName) == 0x000000, "Member 'AchievementsManager_CompleteAchievement::AchievementBPName' has a wrong offset!");

// Function Indiana.AchievementsManager.IncrementAchievement
// 0x000C (0x000C - 0x0000)
struct AchievementsManager_IncrementAchievement final
{
public:
	class FName                                   AchievementBPName;                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AchievementsManager_IncrementAchievement) == 0x000004, "Wrong alignment on AchievementsManager_IncrementAchievement");
static_assert(sizeof(AchievementsManager_IncrementAchievement) == 0x00000C, "Wrong size on AchievementsManager_IncrementAchievement");
static_assert(offsetof(AchievementsManager_IncrementAchievement, AchievementBPName) == 0x000000, "Member 'AchievementsManager_IncrementAchievement::AchievementBPName' has a wrong offset!");
static_assert(offsetof(AchievementsManager_IncrementAchievement, Count) == 0x000008, "Member 'AchievementsManager_IncrementAchievement::Count' has a wrong offset!");

// Function Indiana.AchievementsManager.OnActiveUserChanged
// 0x0001 (0x0001 - 0x0000)
struct AchievementsManager_OnActiveUserChanged final
{
public:
	EActiveUserChangeType                         ChangeType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AchievementsManager_OnActiveUserChanged) == 0x000001, "Wrong alignment on AchievementsManager_OnActiveUserChanged");
static_assert(sizeof(AchievementsManager_OnActiveUserChanged) == 0x000001, "Wrong size on AchievementsManager_OnActiveUserChanged");
static_assert(offsetof(AchievementsManager_OnActiveUserChanged, ChangeType) == 0x000000, "Member 'AchievementsManager_OnActiveUserChanged::ChangeType' has a wrong offset!");

// Function Indiana.AchievementsManager.OnItemEquipped
// 0x0008 (0x0008 - 0x0000)
struct AchievementsManager_OnItemEquipped final
{
public:
	class UItem*                                  Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AchievementsManager_OnItemEquipped) == 0x000008, "Wrong alignment on AchievementsManager_OnItemEquipped");
static_assert(sizeof(AchievementsManager_OnItemEquipped) == 0x000008, "Wrong size on AchievementsManager_OnItemEquipped");
static_assert(offsetof(AchievementsManager_OnItemEquipped, Item) == 0x000000, "Member 'AchievementsManager_OnItemEquipped::Item' has a wrong offset!");

// Function Indiana.AchievementsManager.OnKillPreDeath
// 0x0008 (0x0008 - 0x0000)
struct AchievementsManager_OnKillPreDeath final
{
public:
	class AActor*                                 Victim;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AchievementsManager_OnKillPreDeath) == 0x000008, "Wrong alignment on AchievementsManager_OnKillPreDeath");
static_assert(sizeof(AchievementsManager_OnKillPreDeath) == 0x000008, "Wrong size on AchievementsManager_OnKillPreDeath");
static_assert(offsetof(AchievementsManager_OnKillPreDeath, Victim) == 0x000000, "Member 'AchievementsManager_OnKillPreDeath::Victim' has a wrong offset!");

// Function Indiana.AchievementsManager.OnWeaponSlotted
// 0x0008 (0x0008 - 0x0000)
struct AchievementsManager_OnWeaponSlotted final
{
public:
	class UItem*                                  Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AchievementsManager_OnWeaponSlotted) == 0x000008, "Wrong alignment on AchievementsManager_OnWeaponSlotted");
static_assert(sizeof(AchievementsManager_OnWeaponSlotted) == 0x000008, "Wrong size on AchievementsManager_OnWeaponSlotted");
static_assert(offsetof(AchievementsManager_OnWeaponSlotted, Item) == 0x000000, "Member 'AchievementsManager_OnWeaponSlotted::Item' has a wrong offset!");

// Function Indiana.IndianaAnimInstance.Montage_SkipToEnd
// 0x0010 (0x0010 - 0x0000)
struct IndianaAnimInstance_Montage_SkipToEnd final
{
public:
	class UAnimMontage*                           MontageToPlay;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaAnimInstance_Montage_SkipToEnd) == 0x000008, "Wrong alignment on IndianaAnimInstance_Montage_SkipToEnd");
static_assert(sizeof(IndianaAnimInstance_Montage_SkipToEnd) == 0x000010, "Wrong size on IndianaAnimInstance_Montage_SkipToEnd");
static_assert(offsetof(IndianaAnimInstance_Montage_SkipToEnd, MontageToPlay) == 0x000000, "Member 'IndianaAnimInstance_Montage_SkipToEnd::MontageToPlay' has a wrong offset!");
static_assert(offsetof(IndianaAnimInstance_Montage_SkipToEnd, ReturnValue) == 0x000008, "Member 'IndianaAnimInstance_Montage_SkipToEnd::ReturnValue' has a wrong offset!");

// Function Indiana.CharacterAnimInstance.OnMovementLanded
// 0x0004 (0x0004 - 0x0000)
struct CharacterAnimInstance_OnMovementLanded final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAnimInstance_OnMovementLanded) == 0x000004, "Wrong alignment on CharacterAnimInstance_OnMovementLanded");
static_assert(sizeof(CharacterAnimInstance_OnMovementLanded) == 0x000004, "Wrong size on CharacterAnimInstance_OnMovementLanded");
static_assert(offsetof(CharacterAnimInstance_OnMovementLanded, Distance) == 0x000000, "Member 'CharacterAnimInstance_OnMovementLanded::Distance' has a wrong offset!");

// Function Indiana.CharacterAnimInstance.OnNewLocomotionAnimationSet
// 0x0008 (0x0008 - 0x0000)
struct CharacterAnimInstance_OnNewLocomotionAnimationSet final
{
public:
	class ULocomotionAnimationSet*                NewLocomtionAnimationSet;                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAnimInstance_OnNewLocomotionAnimationSet) == 0x000008, "Wrong alignment on CharacterAnimInstance_OnNewLocomotionAnimationSet");
static_assert(sizeof(CharacterAnimInstance_OnNewLocomotionAnimationSet) == 0x000008, "Wrong size on CharacterAnimInstance_OnNewLocomotionAnimationSet");
static_assert(offsetof(CharacterAnimInstance_OnNewLocomotionAnimationSet, NewLocomtionAnimationSet) == 0x000000, "Member 'CharacterAnimInstance_OnNewLocomotionAnimationSet::NewLocomtionAnimationSet' has a wrong offset!");

// Function Indiana.CharacterAnimInstance.OnNewWeaponAnimations
// 0x0008 (0x0008 - 0x0000)
struct CharacterAnimInstance_OnNewWeaponAnimations final
{
public:
	class UWeaponAnimations*                      NewWeaponAnimations;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAnimInstance_OnNewWeaponAnimations) == 0x000008, "Wrong alignment on CharacterAnimInstance_OnNewWeaponAnimations");
static_assert(sizeof(CharacterAnimInstance_OnNewWeaponAnimations) == 0x000008, "Wrong size on CharacterAnimInstance_OnNewWeaponAnimations");
static_assert(offsetof(CharacterAnimInstance_OnNewWeaponAnimations, NewWeaponAnimations) == 0x000000, "Member 'CharacterAnimInstance_OnNewWeaponAnimations::NewWeaponAnimations' has a wrong offset!");

// Function Indiana.CharacterAnimInstance.SetDisabledAnimation
// 0x0010 (0x0010 - 0x0000)
struct CharacterAnimInstance_SetDisabledAnimation final
{
public:
	struct FAnimEventGameplayTagContainer         Container;                                         // 0x0000(0x0010)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAnimInstance_SetDisabledAnimation) == 0x000008, "Wrong alignment on CharacterAnimInstance_SetDisabledAnimation");
static_assert(sizeof(CharacterAnimInstance_SetDisabledAnimation) == 0x000010, "Wrong size on CharacterAnimInstance_SetDisabledAnimation");
static_assert(offsetof(CharacterAnimInstance_SetDisabledAnimation, Container) == 0x000000, "Member 'CharacterAnimInstance_SetDisabledAnimation::Container' has a wrong offset!");

// Function Indiana.CharacterAnimInstance.IsMontagePlayingOnSlot
// 0x000C (0x000C - 0x0000)
struct CharacterAnimInstance_IsMontagePlayingOnSlot final
{
public:
	class FName                                   SlotNodeName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterAnimInstance_IsMontagePlayingOnSlot) == 0x000004, "Wrong alignment on CharacterAnimInstance_IsMontagePlayingOnSlot");
static_assert(sizeof(CharacterAnimInstance_IsMontagePlayingOnSlot) == 0x00000C, "Wrong size on CharacterAnimInstance_IsMontagePlayingOnSlot");
static_assert(offsetof(CharacterAnimInstance_IsMontagePlayingOnSlot, SlotNodeName) == 0x000000, "Member 'CharacterAnimInstance_IsMontagePlayingOnSlot::SlotNodeName' has a wrong offset!");
static_assert(offsetof(CharacterAnimInstance_IsMontagePlayingOnSlot, ReturnValue) == 0x000008, "Member 'CharacterAnimInstance_IsMontagePlayingOnSlot::ReturnValue' has a wrong offset!");

// Function Indiana.FPVAnimInstance.OnHeadbobbingChanged
// 0x0001 (0x0001 - 0x0000)
struct FPVAnimInstance_OnHeadbobbingChanged final
{
public:
	bool                                          bShouldHeadbob;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPVAnimInstance_OnHeadbobbingChanged) == 0x000001, "Wrong alignment on FPVAnimInstance_OnHeadbobbingChanged");
static_assert(sizeof(FPVAnimInstance_OnHeadbobbingChanged) == 0x000001, "Wrong size on FPVAnimInstance_OnHeadbobbingChanged");
static_assert(offsetof(FPVAnimInstance_OnHeadbobbingChanged, bShouldHeadbob) == 0x000000, "Member 'FPVAnimInstance_OnHeadbobbingChanged::bShouldHeadbob' has a wrong offset!");

// Function Indiana.FPVAnimInstance.GetHeadbobWeight
// 0x0004 (0x0004 - 0x0000)
struct FPVAnimInstance_GetHeadbobWeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPVAnimInstance_GetHeadbobWeight) == 0x000004, "Wrong alignment on FPVAnimInstance_GetHeadbobWeight");
static_assert(sizeof(FPVAnimInstance_GetHeadbobWeight) == 0x000004, "Wrong size on FPVAnimInstance_GetHeadbobWeight");
static_assert(offsetof(FPVAnimInstance_GetHeadbobWeight, ReturnValue) == 0x000000, "Member 'FPVAnimInstance_GetHeadbobWeight::ReturnValue' has a wrong offset!");

// Function Indiana.FPVAnimInstance.IsAimTransitioning
// 0x0001 (0x0001 - 0x0000)
struct FPVAnimInstance_IsAimTransitioning final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPVAnimInstance_IsAimTransitioning) == 0x000001, "Wrong alignment on FPVAnimInstance_IsAimTransitioning");
static_assert(sizeof(FPVAnimInstance_IsAimTransitioning) == 0x000001, "Wrong size on FPVAnimInstance_IsAimTransitioning");
static_assert(offsetof(FPVAnimInstance_IsAimTransitioning, ReturnValue) == 0x000000, "Member 'FPVAnimInstance_IsAimTransitioning::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaInterfaceUserWidget.SetCursorVisible
// 0x0001 (0x0001 - 0x0000)
struct IndianaInterfaceUserWidget_SetCursorVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaInterfaceUserWidget_SetCursorVisible) == 0x000001, "Wrong alignment on IndianaInterfaceUserWidget_SetCursorVisible");
static_assert(sizeof(IndianaInterfaceUserWidget_SetCursorVisible) == 0x000001, "Wrong size on IndianaInterfaceUserWidget_SetCursorVisible");
static_assert(offsetof(IndianaInterfaceUserWidget_SetCursorVisible, bVisible) == 0x000000, "Member 'IndianaInterfaceUserWidget_SetCursorVisible::bVisible' has a wrong offset!");

// Function Indiana.Item.SetNonPlayerOwnership
// 0x0038 (0x0038 - 0x0000)
struct Item_SetNonPlayerOwnership final
{
public:
	TSubclassOf<class UFactionData>               Faction;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class AActor>                  Actor;                                             // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemovePlayerOwnership;                            // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Item_SetNonPlayerOwnership) == 0x000008, "Wrong alignment on Item_SetNonPlayerOwnership");
static_assert(sizeof(Item_SetNonPlayerOwnership) == 0x000038, "Wrong size on Item_SetNonPlayerOwnership");
static_assert(offsetof(Item_SetNonPlayerOwnership, Faction) == 0x000000, "Member 'Item_SetNonPlayerOwnership::Faction' has a wrong offset!");
static_assert(offsetof(Item_SetNonPlayerOwnership, Actor) == 0x000008, "Member 'Item_SetNonPlayerOwnership::Actor' has a wrong offset!");
static_assert(offsetof(Item_SetNonPlayerOwnership, bRemovePlayerOwnership) == 0x000030, "Member 'Item_SetNonPlayerOwnership::bRemovePlayerOwnership' has a wrong offset!");

// Function Indiana.Item.SetOwnership
// 0x0038 (0x0038 - 0x0000)
struct Item_SetOwnership final
{
public:
	TSubclassOf<class UFactionData>               Faction;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class AActor>                  Actor;                                             // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInPlayerOwned;                                    // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Item_SetOwnership) == 0x000008, "Wrong alignment on Item_SetOwnership");
static_assert(sizeof(Item_SetOwnership) == 0x000038, "Wrong size on Item_SetOwnership");
static_assert(offsetof(Item_SetOwnership, Faction) == 0x000000, "Member 'Item_SetOwnership::Faction' has a wrong offset!");
static_assert(offsetof(Item_SetOwnership, Actor) == 0x000008, "Member 'Item_SetOwnership::Actor' has a wrong offset!");
static_assert(offsetof(Item_SetOwnership, bInPlayerOwned) == 0x000030, "Member 'Item_SetOwnership::bInPlayerOwned' has a wrong offset!");

// Function Indiana.Item.SetPlayerOwnership
// 0x0001 (0x0001 - 0x0000)
struct Item_SetPlayerOwnership final
{
public:
	bool                                          bRemoveNonPlayerOwnership;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_SetPlayerOwnership) == 0x000001, "Wrong alignment on Item_SetPlayerOwnership");
static_assert(sizeof(Item_SetPlayerOwnership) == 0x000001, "Wrong size on Item_SetPlayerOwnership");
static_assert(offsetof(Item_SetPlayerOwnership, bRemoveNonPlayerOwnership) == 0x000000, "Member 'Item_SetPlayerOwnership::bRemoveNonPlayerOwnership' has a wrong offset!");

// Function Indiana.Item.CanPlayerSafelyTake
// 0x0001 (0x0001 - 0x0000)
struct Item_CanPlayerSafelyTake final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_CanPlayerSafelyTake) == 0x000001, "Wrong alignment on Item_CanPlayerSafelyTake");
static_assert(sizeof(Item_CanPlayerSafelyTake) == 0x000001, "Wrong size on Item_CanPlayerSafelyTake");
static_assert(offsetof(Item_CanPlayerSafelyTake, ReturnValue) == 0x000000, "Member 'Item_CanPlayerSafelyTake::ReturnValue' has a wrong offset!");

// Function Indiana.Item.GetOwningActor
// 0x0028 (0x0028 - 0x0000)
struct Item_GetOwningActor final
{
public:
	TSoftObjectPtr<class AActor>                  ReturnValue;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_GetOwningActor) == 0x000008, "Wrong alignment on Item_GetOwningActor");
static_assert(sizeof(Item_GetOwningActor) == 0x000028, "Wrong size on Item_GetOwningActor");
static_assert(offsetof(Item_GetOwningActor, ReturnValue) == 0x000000, "Member 'Item_GetOwningActor::ReturnValue' has a wrong offset!");

// Function Indiana.Item.GetOwningFaction
// 0x0008 (0x0008 - 0x0000)
struct Item_GetOwningFaction final
{
public:
	TSubclassOf<class UFactionData>               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_GetOwningFaction) == 0x000008, "Wrong alignment on Item_GetOwningFaction");
static_assert(sizeof(Item_GetOwningFaction) == 0x000008, "Wrong size on Item_GetOwningFaction");
static_assert(offsetof(Item_GetOwningFaction, ReturnValue) == 0x000000, "Member 'Item_GetOwningFaction::ReturnValue' has a wrong offset!");

// Function Indiana.Item.IsPlayerOwned
// 0x0001 (0x0001 - 0x0000)
struct Item_IsPlayerOwned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_IsPlayerOwned) == 0x000001, "Wrong alignment on Item_IsPlayerOwned");
static_assert(sizeof(Item_IsPlayerOwned) == 0x000001, "Wrong size on Item_IsPlayerOwned");
static_assert(offsetof(Item_IsPlayerOwned, ReturnValue) == 0x000000, "Member 'Item_IsPlayerOwned::ReturnValue' has a wrong offset!");

// Function Indiana.DisguiseMeterWidget.HideDisguiseMeterTip
// 0x0004 (0x0004 - 0x0000)
struct DisguiseMeterWidget_HideDisguiseMeterTip final
{
public:
	float                                         StartTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DisguiseMeterWidget_HideDisguiseMeterTip) == 0x000004, "Wrong alignment on DisguiseMeterWidget_HideDisguiseMeterTip");
static_assert(sizeof(DisguiseMeterWidget_HideDisguiseMeterTip) == 0x000004, "Wrong size on DisguiseMeterWidget_HideDisguiseMeterTip");
static_assert(offsetof(DisguiseMeterWidget_HideDisguiseMeterTip, StartTime) == 0x000000, "Member 'DisguiseMeterWidget_HideDisguiseMeterTip::StartTime' has a wrong offset!");

// Function Indiana.DisguiseMeterWidget.OnDisguiseEquipped
// 0x0008 (0x0008 - 0x0000)
struct DisguiseMeterWidget_OnDisguiseEquipped final
{
public:
	const class UDisguiseData*                    Disguise;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DisguiseMeterWidget_OnDisguiseEquipped) == 0x000008, "Wrong alignment on DisguiseMeterWidget_OnDisguiseEquipped");
static_assert(sizeof(DisguiseMeterWidget_OnDisguiseEquipped) == 0x000008, "Wrong size on DisguiseMeterWidget_OnDisguiseEquipped");
static_assert(offsetof(DisguiseMeterWidget_OnDisguiseEquipped, Disguise) == 0x000000, "Member 'DisguiseMeterWidget_OnDisguiseEquipped::Disguise' has a wrong offset!");

// Function Indiana.DisguiseMeterWidget.OnDisguiseMeterChanged
// 0x0004 (0x0004 - 0x0000)
struct DisguiseMeterWidget_OnDisguiseMeterChanged final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DisguiseMeterWidget_OnDisguiseMeterChanged) == 0x000004, "Wrong alignment on DisguiseMeterWidget_OnDisguiseMeterChanged");
static_assert(sizeof(DisguiseMeterWidget_OnDisguiseMeterChanged) == 0x000004, "Wrong size on DisguiseMeterWidget_OnDisguiseMeterChanged");
static_assert(offsetof(DisguiseMeterWidget_OnDisguiseMeterChanged, NewValue) == 0x000000, "Member 'DisguiseMeterWidget_OnDisguiseMeterChanged::NewValue' has a wrong offset!");

// Function Indiana.DisguiseMeterWidget.OnDisguiseMeterVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct DisguiseMeterWidget_OnDisguiseMeterVisibilityChanged final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DisguiseMeterWidget_OnDisguiseMeterVisibilityChanged) == 0x000001, "Wrong alignment on DisguiseMeterWidget_OnDisguiseMeterVisibilityChanged");
static_assert(sizeof(DisguiseMeterWidget_OnDisguiseMeterVisibilityChanged) == 0x000001, "Wrong size on DisguiseMeterWidget_OnDisguiseMeterVisibilityChanged");
static_assert(offsetof(DisguiseMeterWidget_OnDisguiseMeterVisibilityChanged, bVisible) == 0x000000, "Member 'DisguiseMeterWidget_OnDisguiseMeterVisibilityChanged::bVisible' has a wrong offset!");

// Function Indiana.DisguiseMeterWidget.OnEnterRestrictedAreaWithoutDisguise
// 0x0010 (0x0010 - 0x0000)
struct DisguiseMeterWidget_OnEnterRestrictedAreaWithoutDisguise final
{
public:
	const class UDisguiseData*                    Disguise;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMissingShroud;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DisguiseMeterWidget_OnEnterRestrictedAreaWithoutDisguise) == 0x000008, "Wrong alignment on DisguiseMeterWidget_OnEnterRestrictedAreaWithoutDisguise");
static_assert(sizeof(DisguiseMeterWidget_OnEnterRestrictedAreaWithoutDisguise) == 0x000010, "Wrong size on DisguiseMeterWidget_OnEnterRestrictedAreaWithoutDisguise");
static_assert(offsetof(DisguiseMeterWidget_OnEnterRestrictedAreaWithoutDisguise, Disguise) == 0x000000, "Member 'DisguiseMeterWidget_OnEnterRestrictedAreaWithoutDisguise::Disguise' has a wrong offset!");
static_assert(offsetof(DisguiseMeterWidget_OnEnterRestrictedAreaWithoutDisguise, bMissingShroud) == 0x000008, "Member 'DisguiseMeterWidget_OnEnterRestrictedAreaWithoutDisguise::bMissingShroud' has a wrong offset!");

// Function Indiana.DisguiseMeterWidget.OnHUDVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct DisguiseMeterWidget_OnHUDVisibilityChanged final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DisguiseMeterWidget_OnHUDVisibilityChanged) == 0x000001, "Wrong alignment on DisguiseMeterWidget_OnHUDVisibilityChanged");
static_assert(sizeof(DisguiseMeterWidget_OnHUDVisibilityChanged) == 0x000001, "Wrong size on DisguiseMeterWidget_OnHUDVisibilityChanged");
static_assert(offsetof(DisguiseMeterWidget_OnHUDVisibilityChanged, bVisible) == 0x000000, "Member 'DisguiseMeterWidget_OnHUDVisibilityChanged::bVisible' has a wrong offset!");

// Function Indiana.DisguiseMeterWidget.OnRestrictedAreaExited
// 0x0008 (0x0008 - 0x0000)
struct DisguiseMeterWidget_OnRestrictedAreaExited final
{
public:
	const class ARestrictedArea*                  RestrictedArea;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DisguiseMeterWidget_OnRestrictedAreaExited) == 0x000008, "Wrong alignment on DisguiseMeterWidget_OnRestrictedAreaExited");
static_assert(sizeof(DisguiseMeterWidget_OnRestrictedAreaExited) == 0x000008, "Wrong size on DisguiseMeterWidget_OnRestrictedAreaExited");
static_assert(offsetof(DisguiseMeterWidget_OnRestrictedAreaExited, RestrictedArea) == 0x000000, "Member 'DisguiseMeterWidget_OnRestrictedAreaExited::RestrictedArea' has a wrong offset!");

// Function Indiana.DisguiseMeterWidget.ShowDisguiseMeterTip
// 0x0004 (0x0004 - 0x0000)
struct DisguiseMeterWidget_ShowDisguiseMeterTip final
{
public:
	float                                         StartTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DisguiseMeterWidget_ShowDisguiseMeterTip) == 0x000004, "Wrong alignment on DisguiseMeterWidget_ShowDisguiseMeterTip");
static_assert(sizeof(DisguiseMeterWidget_ShowDisguiseMeterTip) == 0x000004, "Wrong size on DisguiseMeterWidget_ShowDisguiseMeterTip");
static_assert(offsetof(DisguiseMeterWidget_ShowDisguiseMeterTip, StartTime) == 0x000000, "Member 'DisguiseMeterWidget_ShowDisguiseMeterTip::StartTime' has a wrong offset!");

// Function Indiana.DisguiseMeterWidget.UpdateDisguiseMeterFill
// 0x0004 (0x0004 - 0x0000)
struct DisguiseMeterWidget_UpdateDisguiseMeterFill final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DisguiseMeterWidget_UpdateDisguiseMeterFill) == 0x000004, "Wrong alignment on DisguiseMeterWidget_UpdateDisguiseMeterFill");
static_assert(sizeof(DisguiseMeterWidget_UpdateDisguiseMeterFill) == 0x000004, "Wrong size on DisguiseMeterWidget_UpdateDisguiseMeterFill");
static_assert(offsetof(DisguiseMeterWidget_UpdateDisguiseMeterFill, NewValue) == 0x000000, "Member 'DisguiseMeterWidget_UpdateDisguiseMeterFill::NewValue' has a wrong offset!");

// Function Indiana.DisguiseMeterWidget.UpdateDisguiseMeterInnerAnim
// 0x0004 (0x0004 - 0x0000)
struct DisguiseMeterWidget_UpdateDisguiseMeterInnerAnim final
{
public:
	int32                                         CurrentFrame;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DisguiseMeterWidget_UpdateDisguiseMeterInnerAnim) == 0x000004, "Wrong alignment on DisguiseMeterWidget_UpdateDisguiseMeterInnerAnim");
static_assert(sizeof(DisguiseMeterWidget_UpdateDisguiseMeterInnerAnim) == 0x000004, "Wrong size on DisguiseMeterWidget_UpdateDisguiseMeterInnerAnim");
static_assert(offsetof(DisguiseMeterWidget_UpdateDisguiseMeterInnerAnim, CurrentFrame) == 0x000000, "Member 'DisguiseMeterWidget_UpdateDisguiseMeterInnerAnim::CurrentFrame' has a wrong offset!");

// Function Indiana.OnInterrogateEndEvent.OnEndInterrogation
// 0x0018 (0x0018 - 0x0000)
struct OnInterrogateEndEvent_OnEndInterrogation final
{
public:
	EInterrogationResult                          InterrogationResult;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AIndianaAiCharacter*                    Interrogator;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECrimeType                                    InCrime;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInDisguised;                                      // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InDisguiseInterrogationsPassed;                    // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnInterrogateEndEvent_OnEndInterrogation) == 0x000008, "Wrong alignment on OnInterrogateEndEvent_OnEndInterrogation");
static_assert(sizeof(OnInterrogateEndEvent_OnEndInterrogation) == 0x000018, "Wrong size on OnInterrogateEndEvent_OnEndInterrogation");
static_assert(offsetof(OnInterrogateEndEvent_OnEndInterrogation, InterrogationResult) == 0x000000, "Member 'OnInterrogateEndEvent_OnEndInterrogation::InterrogationResult' has a wrong offset!");
static_assert(offsetof(OnInterrogateEndEvent_OnEndInterrogation, Interrogator) == 0x000008, "Member 'OnInterrogateEndEvent_OnEndInterrogation::Interrogator' has a wrong offset!");
static_assert(offsetof(OnInterrogateEndEvent_OnEndInterrogation, InCrime) == 0x000010, "Member 'OnInterrogateEndEvent_OnEndInterrogation::InCrime' has a wrong offset!");
static_assert(offsetof(OnInterrogateEndEvent_OnEndInterrogation, bInDisguised) == 0x000011, "Member 'OnInterrogateEndEvent_OnEndInterrogation::bInDisguised' has a wrong offset!");
static_assert(offsetof(OnInterrogateEndEvent_OnEndInterrogation, InDisguiseInterrogationsPassed) == 0x000014, "Member 'OnInterrogateEndEvent_OnEndInterrogation::InDisguiseInterrogationsPassed' has a wrong offset!");

// Function Indiana.ActorRenderWidget.OnBorderMouseDown
// 0x0160 (0x0160 - 0x0000)
struct ActorRenderWidget_OnBorderMouseDown final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorRenderWidget_OnBorderMouseDown) == 0x000008, "Wrong alignment on ActorRenderWidget_OnBorderMouseDown");
static_assert(sizeof(ActorRenderWidget_OnBorderMouseDown) == 0x000160, "Wrong size on ActorRenderWidget_OnBorderMouseDown");
static_assert(offsetof(ActorRenderWidget_OnBorderMouseDown, MyGeometry) == 0x000000, "Member 'ActorRenderWidget_OnBorderMouseDown::MyGeometry' has a wrong offset!");
static_assert(offsetof(ActorRenderWidget_OnBorderMouseDown, MouseEvent) == 0x000038, "Member 'ActorRenderWidget_OnBorderMouseDown::MouseEvent' has a wrong offset!");
static_assert(offsetof(ActorRenderWidget_OnBorderMouseDown, ReturnValue) == 0x0000A8, "Member 'ActorRenderWidget_OnBorderMouseDown::ReturnValue' has a wrong offset!");

// Function Indiana.ActorRenderWidget.CanZoom
// 0x0001 (0x0001 - 0x0000)
struct ActorRenderWidget_CanZoom final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorRenderWidget_CanZoom) == 0x000001, "Wrong alignment on ActorRenderWidget_CanZoom");
static_assert(sizeof(ActorRenderWidget_CanZoom) == 0x000001, "Wrong size on ActorRenderWidget_CanZoom");
static_assert(offsetof(ActorRenderWidget_CanZoom, ReturnValue) == 0x000000, "Member 'ActorRenderWidget_CanZoom::ReturnValue' has a wrong offset!");

// Function Indiana.CompanionScreenWrapperWidget.AddItemToItemViewer
// 0x0010 (0x0010 - 0x0000)
struct CompanionScreenWrapperWidget_AddItemToItemViewer final
{
public:
	struct FItemStack                             ItemStack;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompanionScreenWrapperWidget_AddItemToItemViewer) == 0x000008, "Wrong alignment on CompanionScreenWrapperWidget_AddItemToItemViewer");
static_assert(sizeof(CompanionScreenWrapperWidget_AddItemToItemViewer) == 0x000010, "Wrong size on CompanionScreenWrapperWidget_AddItemToItemViewer");
static_assert(offsetof(CompanionScreenWrapperWidget_AddItemToItemViewer, ItemStack) == 0x000000, "Member 'CompanionScreenWrapperWidget_AddItemToItemViewer::ItemStack' has a wrong offset!");

// Function Indiana.OnQuestCompleteListener.OnQuestComplete
// 0x0010 (0x0010 - 0x0000)
struct OnQuestCompleteListener_OnQuestComplete final
{
public:
	struct FGuid                                  QuestID;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnQuestCompleteListener_OnQuestComplete) == 0x000004, "Wrong alignment on OnQuestCompleteListener_OnQuestComplete");
static_assert(sizeof(OnQuestCompleteListener_OnQuestComplete) == 0x000010, "Wrong size on OnQuestCompleteListener_OnQuestComplete");
static_assert(offsetof(OnQuestCompleteListener_OnQuestComplete, QuestID) == 0x000000, "Member 'OnQuestCompleteListener_OnQuestComplete::QuestID' has a wrong offset!");

// Function Indiana.DecisionTree.RunDecisionTree
// 0x0030 (0x0030 - 0x0000)
struct DecisionTree_RunDecisionTree final
{
public:
	class AIndianaAiCharacter*                    Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EventType;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAIEventInfo*                           EventInfo;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDecisionTreeRequestPriority                  OutPriority;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UDecisionTreeRequestData*>       ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DecisionTree_RunDecisionTree) == 0x000008, "Wrong alignment on DecisionTree_RunDecisionTree");
static_assert(sizeof(DecisionTree_RunDecisionTree) == 0x000030, "Wrong size on DecisionTree_RunDecisionTree");
static_assert(offsetof(DecisionTree_RunDecisionTree, Owner) == 0x000000, "Member 'DecisionTree_RunDecisionTree::Owner' has a wrong offset!");
static_assert(offsetof(DecisionTree_RunDecisionTree, EventType) == 0x000008, "Member 'DecisionTree_RunDecisionTree::EventType' has a wrong offset!");
static_assert(offsetof(DecisionTree_RunDecisionTree, EventInfo) == 0x000010, "Member 'DecisionTree_RunDecisionTree::EventInfo' has a wrong offset!");
static_assert(offsetof(DecisionTree_RunDecisionTree, OutPriority) == 0x000018, "Member 'DecisionTree_RunDecisionTree::OutPriority' has a wrong offset!");
static_assert(offsetof(DecisionTree_RunDecisionTree, ReturnValue) == 0x000020, "Member 'DecisionTree_RunDecisionTree::ReturnValue' has a wrong offset!");

// Function Indiana.DecisionTree.RunMetaDecisionTree
// 0x0038 (0x0038 - 0x0000)
struct DecisionTree_RunMetaDecisionTree final
{
public:
	TSubclassOf<class UDecisionTree>              DecisionTree;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AIndianaAiCharacter*                    Owner;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EventType;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAIEventInfo*                           EventInfo;                                         // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDecisionTreeRequestPriority                  OutPriority;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UDecisionTreeRequestData*>       ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DecisionTree_RunMetaDecisionTree) == 0x000008, "Wrong alignment on DecisionTree_RunMetaDecisionTree");
static_assert(sizeof(DecisionTree_RunMetaDecisionTree) == 0x000038, "Wrong size on DecisionTree_RunMetaDecisionTree");
static_assert(offsetof(DecisionTree_RunMetaDecisionTree, DecisionTree) == 0x000000, "Member 'DecisionTree_RunMetaDecisionTree::DecisionTree' has a wrong offset!");
static_assert(offsetof(DecisionTree_RunMetaDecisionTree, Owner) == 0x000008, "Member 'DecisionTree_RunMetaDecisionTree::Owner' has a wrong offset!");
static_assert(offsetof(DecisionTree_RunMetaDecisionTree, EventType) == 0x000010, "Member 'DecisionTree_RunMetaDecisionTree::EventType' has a wrong offset!");
static_assert(offsetof(DecisionTree_RunMetaDecisionTree, EventInfo) == 0x000018, "Member 'DecisionTree_RunMetaDecisionTree::EventInfo' has a wrong offset!");
static_assert(offsetof(DecisionTree_RunMetaDecisionTree, OutPriority) == 0x000020, "Member 'DecisionTree_RunMetaDecisionTree::OutPriority' has a wrong offset!");
static_assert(offsetof(DecisionTree_RunMetaDecisionTree, ReturnValue) == 0x000028, "Member 'DecisionTree_RunMetaDecisionTree::ReturnValue' has a wrong offset!");

// Function Indiana.DecisionTree.RunSuperDecisionTree
// 0x0030 (0x0030 - 0x0000)
struct DecisionTree_RunSuperDecisionTree final
{
public:
	class AIndianaAiCharacter*                    Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EventType;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAIEventInfo*                           EventInfo;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDecisionTreeRequestPriority                  OutPriority;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UDecisionTreeRequestData*>       ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DecisionTree_RunSuperDecisionTree) == 0x000008, "Wrong alignment on DecisionTree_RunSuperDecisionTree");
static_assert(sizeof(DecisionTree_RunSuperDecisionTree) == 0x000030, "Wrong size on DecisionTree_RunSuperDecisionTree");
static_assert(offsetof(DecisionTree_RunSuperDecisionTree, Owner) == 0x000000, "Member 'DecisionTree_RunSuperDecisionTree::Owner' has a wrong offset!");
static_assert(offsetof(DecisionTree_RunSuperDecisionTree, EventType) == 0x000008, "Member 'DecisionTree_RunSuperDecisionTree::EventType' has a wrong offset!");
static_assert(offsetof(DecisionTree_RunSuperDecisionTree, EventInfo) == 0x000010, "Member 'DecisionTree_RunSuperDecisionTree::EventInfo' has a wrong offset!");
static_assert(offsetof(DecisionTree_RunSuperDecisionTree, OutPriority) == 0x000018, "Member 'DecisionTree_RunSuperDecisionTree::OutPriority' has a wrong offset!");
static_assert(offsetof(DecisionTree_RunSuperDecisionTree, ReturnValue) == 0x000020, "Member 'DecisionTree_RunSuperDecisionTree::ReturnValue' has a wrong offset!");

// Function Indiana.Destructible.OnHealthChanged
// 0x0010 (0x0010 - 0x0000)
struct Destructible_OnHealthChanged final
{
public:
	float                                         HealthChange;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 InInstigator;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Destructible_OnHealthChanged) == 0x000008, "Wrong alignment on Destructible_OnHealthChanged");
static_assert(sizeof(Destructible_OnHealthChanged) == 0x000010, "Wrong size on Destructible_OnHealthChanged");
static_assert(offsetof(Destructible_OnHealthChanged, HealthChange) == 0x000000, "Member 'Destructible_OnHealthChanged::HealthChange' has a wrong offset!");
static_assert(offsetof(Destructible_OnHealthChanged, InInstigator) == 0x000008, "Member 'Destructible_OnHealthChanged::InInstigator' has a wrong offset!");

// Function Indiana.Destructible.SetDestructibleState
// 0x0001 (0x0001 - 0x0000)
struct Destructible_SetDestructibleState final
{
public:
	EDestructibleState                            NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Destructible_SetDestructibleState) == 0x000001, "Wrong alignment on Destructible_SetDestructibleState");
static_assert(sizeof(Destructible_SetDestructibleState) == 0x000001, "Wrong size on Destructible_SetDestructibleState");
static_assert(offsetof(Destructible_SetDestructibleState, NewState) == 0x000000, "Member 'Destructible_SetDestructibleState::NewState' has a wrong offset!");

// Function Indiana.OnPerfectDodge.OnPerfectDodge
// 0x0008 (0x0008 - 0x0000)
struct OnPerfectDodge_OnPerfectDodge final
{
public:
	class AActor*                                 Attacker;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnPerfectDodge_OnPerfectDodge) == 0x000008, "Wrong alignment on OnPerfectDodge_OnPerfectDodge");
static_assert(sizeof(OnPerfectDodge_OnPerfectDodge) == 0x000008, "Wrong size on OnPerfectDodge_OnPerfectDodge");
static_assert(offsetof(OnPerfectDodge_OnPerfectDodge, Attacker) == 0x000000, "Member 'OnPerfectDodge_OnPerfectDodge::Attacker' has a wrong offset!");

// Function Indiana.Door.OnOCLStateChange
// 0x0002 (0x0002 - 0x0000)
struct Door_OnOCLStateChange final
{
public:
	EOCLState                                     PreviousState;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOCLState                                     CurrentState;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_OnOCLStateChange) == 0x000001, "Wrong alignment on Door_OnOCLStateChange");
static_assert(sizeof(Door_OnOCLStateChange) == 0x000002, "Wrong size on Door_OnOCLStateChange");
static_assert(offsetof(Door_OnOCLStateChange, PreviousState) == 0x000000, "Member 'Door_OnOCLStateChange::PreviousState' has a wrong offset!");
static_assert(offsetof(Door_OnOCLStateChange, CurrentState) == 0x000001, "Member 'Door_OnOCLStateChange::CurrentState' has a wrong offset!");

// Function Indiana.Door.TriggersTravel
// 0x0001 (0x0001 - 0x0000)
struct Door_TriggersTravel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_TriggersTravel) == 0x000001, "Wrong alignment on Door_TriggersTravel");
static_assert(sizeof(Door_TriggersTravel) == 0x000001, "Wrong size on Door_TriggersTravel");
static_assert(offsetof(Door_TriggersTravel, ReturnValue) == 0x000000, "Member 'Door_TriggersTravel::ReturnValue' has a wrong offset!");

// Function Indiana.AIDefensiveActionsComponent.OnTakeDamage
// 0x0110 (0x0110 - 0x0000)
struct AIDefensiveActionsComponent_OnTakeDamage final
{
public:
	struct FCauseDamageInfo                       CauseDamageInfo;                                   // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIDefensiveActionsComponent_OnTakeDamage) == 0x000008, "Wrong alignment on AIDefensiveActionsComponent_OnTakeDamage");
static_assert(sizeof(AIDefensiveActionsComponent_OnTakeDamage) == 0x000110, "Wrong size on AIDefensiveActionsComponent_OnTakeDamage");
static_assert(offsetof(AIDefensiveActionsComponent_OnTakeDamage, CauseDamageInfo) == 0x000000, "Member 'AIDefensiveActionsComponent_OnTakeDamage::CauseDamageInfo' has a wrong offset!");

// Function Indiana.AIDetectionComponent.OnDetectedNonHostileCombatStateChange
// 0x0002 (0x0002 - 0x0000)
struct AIDetectionComponent_OnDetectedNonHostileCombatStateChange final
{
public:
	bool                                          bIsInCombat;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestoring;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIDetectionComponent_OnDetectedNonHostileCombatStateChange) == 0x000001, "Wrong alignment on AIDetectionComponent_OnDetectedNonHostileCombatStateChange");
static_assert(sizeof(AIDetectionComponent_OnDetectedNonHostileCombatStateChange) == 0x000002, "Wrong size on AIDetectionComponent_OnDetectedNonHostileCombatStateChange");
static_assert(offsetof(AIDetectionComponent_OnDetectedNonHostileCombatStateChange, bIsInCombat) == 0x000000, "Member 'AIDetectionComponent_OnDetectedNonHostileCombatStateChange::bIsInCombat' has a wrong offset!");
static_assert(offsetof(AIDetectionComponent_OnDetectedNonHostileCombatStateChange, bRestoring) == 0x000001, "Member 'AIDetectionComponent_OnDetectedNonHostileCombatStateChange::bRestoring' has a wrong offset!");

// Function Indiana.AIDetectionComponent.OnPerceptionUpdate
// 0x0048 (0x0048 - 0x0000)
struct AIDetectionComponent_OnPerceptionUpdate final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAIStimulus                            Stimulus;                                          // 0x0008(0x003C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIDetectionComponent_OnPerceptionUpdate) == 0x000008, "Wrong alignment on AIDetectionComponent_OnPerceptionUpdate");
static_assert(sizeof(AIDetectionComponent_OnPerceptionUpdate) == 0x000048, "Wrong size on AIDetectionComponent_OnPerceptionUpdate");
static_assert(offsetof(AIDetectionComponent_OnPerceptionUpdate, Actor) == 0x000000, "Member 'AIDetectionComponent_OnPerceptionUpdate::Actor' has a wrong offset!");
static_assert(offsetof(AIDetectionComponent_OnPerceptionUpdate, Stimulus) == 0x000008, "Member 'AIDetectionComponent_OnPerceptionUpdate::Stimulus' has a wrong offset!");

// Function Indiana.AIDetectionComponent.OnPlayerKill
// 0x0118 (0x0118 - 0x0000)
struct AIDetectionComponent_OnPlayerKill final
{
public:
	class AActor*                                 Victim;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCauseDamageInfo                       CauseDamageInfo;                                   // 0x0008(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIDetectionComponent_OnPlayerKill) == 0x000008, "Wrong alignment on AIDetectionComponent_OnPlayerKill");
static_assert(sizeof(AIDetectionComponent_OnPlayerKill) == 0x000118, "Wrong size on AIDetectionComponent_OnPlayerKill");
static_assert(offsetof(AIDetectionComponent_OnPlayerKill, Victim) == 0x000000, "Member 'AIDetectionComponent_OnPlayerKill::Victim' has a wrong offset!");
static_assert(offsetof(AIDetectionComponent_OnPlayerKill, CauseDamageInfo) == 0x000008, "Member 'AIDetectionComponent_OnPlayerKill::CauseDamageInfo' has a wrong offset!");

// Function Indiana.IndianaAudioComponent.OnCharacterMovementUpdated
// 0x001C (0x001C - 0x0000)
struct IndianaAudioComponent_OnCharacterMovementUpdated final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OldLocation;                                       // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OldVelocity;                                       // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaAudioComponent_OnCharacterMovementUpdated) == 0x000004, "Wrong alignment on IndianaAudioComponent_OnCharacterMovementUpdated");
static_assert(sizeof(IndianaAudioComponent_OnCharacterMovementUpdated) == 0x00001C, "Wrong size on IndianaAudioComponent_OnCharacterMovementUpdated");
static_assert(offsetof(IndianaAudioComponent_OnCharacterMovementUpdated, DeltaSeconds) == 0x000000, "Member 'IndianaAudioComponent_OnCharacterMovementUpdated::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(IndianaAudioComponent_OnCharacterMovementUpdated, OldLocation) == 0x000004, "Member 'IndianaAudioComponent_OnCharacterMovementUpdated::OldLocation' has a wrong offset!");
static_assert(offsetof(IndianaAudioComponent_OnCharacterMovementUpdated, OldVelocity) == 0x000010, "Member 'IndianaAudioComponent_OnCharacterMovementUpdated::OldVelocity' has a wrong offset!");

// Function Indiana.IndianaAudioComponent.OnDodge
// 0x0020 (0x0020 - 0x0000)
struct IndianaAudioComponent_OnDodge final
{
public:
	EDodgeDirection                               Direction;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Position;                                          // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Normal;                                            // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              PhysMaterial;                                      // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaAudioComponent_OnDodge) == 0x000004, "Wrong alignment on IndianaAudioComponent_OnDodge");
static_assert(sizeof(IndianaAudioComponent_OnDodge) == 0x000020, "Wrong size on IndianaAudioComponent_OnDodge");
static_assert(offsetof(IndianaAudioComponent_OnDodge, Direction) == 0x000000, "Member 'IndianaAudioComponent_OnDodge::Direction' has a wrong offset!");
static_assert(offsetof(IndianaAudioComponent_OnDodge, Position) == 0x000004, "Member 'IndianaAudioComponent_OnDodge::Position' has a wrong offset!");
static_assert(offsetof(IndianaAudioComponent_OnDodge, Normal) == 0x000010, "Member 'IndianaAudioComponent_OnDodge::Normal' has a wrong offset!");
static_assert(offsetof(IndianaAudioComponent_OnDodge, PhysMaterial) == 0x00001C, "Member 'IndianaAudioComponent_OnDodge::PhysMaterial' has a wrong offset!");

// Function Indiana.IndianaAudioComponent.OnFootstep
// 0x0020 (0x0020 - 0x0000)
struct IndianaAudioComponent_OnFootstep final
{
public:
	EFootID                                       FootID;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFootstepType                                 FootstepType;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Position;                                          // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Normal;                                            // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              PhysMaterial;                                      // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaAudioComponent_OnFootstep) == 0x000004, "Wrong alignment on IndianaAudioComponent_OnFootstep");
static_assert(sizeof(IndianaAudioComponent_OnFootstep) == 0x000020, "Wrong size on IndianaAudioComponent_OnFootstep");
static_assert(offsetof(IndianaAudioComponent_OnFootstep, FootID) == 0x000000, "Member 'IndianaAudioComponent_OnFootstep::FootID' has a wrong offset!");
static_assert(offsetof(IndianaAudioComponent_OnFootstep, FootstepType) == 0x000001, "Member 'IndianaAudioComponent_OnFootstep::FootstepType' has a wrong offset!");
static_assert(offsetof(IndianaAudioComponent_OnFootstep, Position) == 0x000004, "Member 'IndianaAudioComponent_OnFootstep::Position' has a wrong offset!");
static_assert(offsetof(IndianaAudioComponent_OnFootstep, Normal) == 0x000010, "Member 'IndianaAudioComponent_OnFootstep::Normal' has a wrong offset!");
static_assert(offsetof(IndianaAudioComponent_OnFootstep, PhysMaterial) == 0x00001C, "Member 'IndianaAudioComponent_OnFootstep::PhysMaterial' has a wrong offset!");

// Function Indiana.IndianaAudioComponent.OnLanded
// 0x0020 (0x0020 - 0x0000)
struct IndianaAudioComponent_OnLanded final
{
public:
	float                                         FallDistance;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Normal;                                            // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              PhysMaterial;                                      // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaAudioComponent_OnLanded) == 0x000004, "Wrong alignment on IndianaAudioComponent_OnLanded");
static_assert(sizeof(IndianaAudioComponent_OnLanded) == 0x000020, "Wrong size on IndianaAudioComponent_OnLanded");
static_assert(offsetof(IndianaAudioComponent_OnLanded, FallDistance) == 0x000000, "Member 'IndianaAudioComponent_OnLanded::FallDistance' has a wrong offset!");
static_assert(offsetof(IndianaAudioComponent_OnLanded, Position) == 0x000004, "Member 'IndianaAudioComponent_OnLanded::Position' has a wrong offset!");
static_assert(offsetof(IndianaAudioComponent_OnLanded, Normal) == 0x000010, "Member 'IndianaAudioComponent_OnLanded::Normal' has a wrong offset!");
static_assert(offsetof(IndianaAudioComponent_OnLanded, PhysMaterial) == 0x00001C, "Member 'IndianaAudioComponent_OnLanded::PhysMaterial' has a wrong offset!");

// Function Indiana.IndianaAudioComponent.OnNewFootstepData
// 0x0008 (0x0008 - 0x0000)
struct IndianaAudioComponent_OnNewFootstepData final
{
public:
	const class UFootstepData*                    NewData;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaAudioComponent_OnNewFootstepData) == 0x000008, "Wrong alignment on IndianaAudioComponent_OnNewFootstepData");
static_assert(sizeof(IndianaAudioComponent_OnNewFootstepData) == 0x000008, "Wrong size on IndianaAudioComponent_OnNewFootstepData");
static_assert(offsetof(IndianaAudioComponent_OnNewFootstepData, NewData) == 0x000000, "Member 'IndianaAudioComponent_OnNewFootstepData::NewData' has a wrong offset!");

// Function Indiana.IndianaAudioComponent.OnNewStateOfBeing
// 0x0002 (0x0002 - 0x0000)
struct IndianaAudioComponent_OnNewStateOfBeing final
{
public:
	EStateOfBeing                                 NewStateOfBeing;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStateOfBeing                                 OldStateOfBeing;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaAudioComponent_OnNewStateOfBeing) == 0x000001, "Wrong alignment on IndianaAudioComponent_OnNewStateOfBeing");
static_assert(sizeof(IndianaAudioComponent_OnNewStateOfBeing) == 0x000002, "Wrong size on IndianaAudioComponent_OnNewStateOfBeing");
static_assert(offsetof(IndianaAudioComponent_OnNewStateOfBeing, NewStateOfBeing) == 0x000000, "Member 'IndianaAudioComponent_OnNewStateOfBeing::NewStateOfBeing' has a wrong offset!");
static_assert(offsetof(IndianaAudioComponent_OnNewStateOfBeing, OldStateOfBeing) == 0x000001, "Member 'IndianaAudioComponent_OnNewStateOfBeing::OldStateOfBeing' has a wrong offset!");

// Function Indiana.IndianaAudioComponent.OnSpecialMovementEvent
// 0x0020 (0x0020 - 0x0000)
struct IndianaAudioComponent_OnSpecialMovementEvent final
{
public:
	ESpecialMovementEvent                         SpecialEvent;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Position;                                          // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Normal;                                            // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              PhysMaterial;                                      // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaAudioComponent_OnSpecialMovementEvent) == 0x000004, "Wrong alignment on IndianaAudioComponent_OnSpecialMovementEvent");
static_assert(sizeof(IndianaAudioComponent_OnSpecialMovementEvent) == 0x000020, "Wrong size on IndianaAudioComponent_OnSpecialMovementEvent");
static_assert(offsetof(IndianaAudioComponent_OnSpecialMovementEvent, SpecialEvent) == 0x000000, "Member 'IndianaAudioComponent_OnSpecialMovementEvent::SpecialEvent' has a wrong offset!");
static_assert(offsetof(IndianaAudioComponent_OnSpecialMovementEvent, Position) == 0x000004, "Member 'IndianaAudioComponent_OnSpecialMovementEvent::Position' has a wrong offset!");
static_assert(offsetof(IndianaAudioComponent_OnSpecialMovementEvent, Normal) == 0x000010, "Member 'IndianaAudioComponent_OnSpecialMovementEvent::Normal' has a wrong offset!");
static_assert(offsetof(IndianaAudioComponent_OnSpecialMovementEvent, PhysMaterial) == 0x00001C, "Member 'IndianaAudioComponent_OnSpecialMovementEvent::PhysMaterial' has a wrong offset!");

// Function Indiana.OnMedKitUsed.OnMedKitUsed
// 0x0004 (0x0004 - 0x0000)
struct OnMedKitUsed_OnMedKitUsed final
{
public:
	int32                                         ConsumablesUsed;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnMedKitUsed_OnMedKitUsed) == 0x000004, "Wrong alignment on OnMedKitUsed_OnMedKitUsed");
static_assert(sizeof(OnMedKitUsed_OnMedKitUsed) == 0x000004, "Wrong size on OnMedKitUsed_OnMedKitUsed");
static_assert(offsetof(OnMedKitUsed_OnMedKitUsed, ConsumablesUsed) == 0x000000, "Member 'OnMedKitUsed_OnMedKitUsed::ConsumablesUsed' has a wrong offset!");

// Function Indiana.EquipmentComponent.EquipArmorByClassDebug
// 0x0010 (0x0010 - 0x0000)
struct EquipmentComponent_EquipArmorByClassDebug final
{
public:
	EArmorSlot                                    ArmorSlot;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UArmorItem>                 ArmorItem;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentComponent_EquipArmorByClassDebug) == 0x000008, "Wrong alignment on EquipmentComponent_EquipArmorByClassDebug");
static_assert(sizeof(EquipmentComponent_EquipArmorByClassDebug) == 0x000010, "Wrong size on EquipmentComponent_EquipArmorByClassDebug");
static_assert(offsetof(EquipmentComponent_EquipArmorByClassDebug, ArmorSlot) == 0x000000, "Member 'EquipmentComponent_EquipArmorByClassDebug::ArmorSlot' has a wrong offset!");
static_assert(offsetof(EquipmentComponent_EquipArmorByClassDebug, ArmorItem) == 0x000008, "Member 'EquipmentComponent_EquipArmorByClassDebug::ArmorItem' has a wrong offset!");

// Function Indiana.EquipmentComponent.EquipArmorDebug
// 0x0008 (0x0008 - 0x0000)
struct EquipmentComponent_EquipArmorDebug final
{
public:
	class FName                                   ArmorName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentComponent_EquipArmorDebug) == 0x000004, "Wrong alignment on EquipmentComponent_EquipArmorDebug");
static_assert(sizeof(EquipmentComponent_EquipArmorDebug) == 0x000008, "Wrong size on EquipmentComponent_EquipArmorDebug");
static_assert(offsetof(EquipmentComponent_EquipArmorDebug, ArmorName) == 0x000000, "Member 'EquipmentComponent_EquipArmorDebug::ArmorName' has a wrong offset!");

// Function Indiana.EquipmentComponent.EquipArmorModByClassDebug
// 0x0010 (0x0010 - 0x0000)
struct EquipmentComponent_EquipArmorModByClassDebug final
{
public:
	EArmorModSlot                                 ArmorModSlot;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UArmorModItem>              ArmorModItem;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentComponent_EquipArmorModByClassDebug) == 0x000008, "Wrong alignment on EquipmentComponent_EquipArmorModByClassDebug");
static_assert(sizeof(EquipmentComponent_EquipArmorModByClassDebug) == 0x000010, "Wrong size on EquipmentComponent_EquipArmorModByClassDebug");
static_assert(offsetof(EquipmentComponent_EquipArmorModByClassDebug, ArmorModSlot) == 0x000000, "Member 'EquipmentComponent_EquipArmorModByClassDebug::ArmorModSlot' has a wrong offset!");
static_assert(offsetof(EquipmentComponent_EquipArmorModByClassDebug, ArmorModItem) == 0x000008, "Member 'EquipmentComponent_EquipArmorModByClassDebug::ArmorModItem' has a wrong offset!");

// Function Indiana.EquipmentComponent.EquipArmorSetMicroModDebug
// 0x0008 (0x0008 - 0x0000)
struct EquipmentComponent_EquipArmorSetMicroModDebug final
{
public:
	class FName                                   MicroModName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentComponent_EquipArmorSetMicroModDebug) == 0x000004, "Wrong alignment on EquipmentComponent_EquipArmorSetMicroModDebug");
static_assert(sizeof(EquipmentComponent_EquipArmorSetMicroModDebug) == 0x000008, "Wrong size on EquipmentComponent_EquipArmorSetMicroModDebug");
static_assert(offsetof(EquipmentComponent_EquipArmorSetMicroModDebug, MicroModName) == 0x000000, "Member 'EquipmentComponent_EquipArmorSetMicroModDebug::MicroModName' has a wrong offset!");

// Function Indiana.EquipmentComponent.EquipModDebug
// 0x0008 (0x0008 - 0x0000)
struct EquipmentComponent_EquipModDebug final
{
public:
	class FName                                   ModName;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentComponent_EquipModDebug) == 0x000004, "Wrong alignment on EquipmentComponent_EquipModDebug");
static_assert(sizeof(EquipmentComponent_EquipModDebug) == 0x000008, "Wrong size on EquipmentComponent_EquipModDebug");
static_assert(offsetof(EquipmentComponent_EquipModDebug, ModName) == 0x000000, "Member 'EquipmentComponent_EquipModDebug::ModName' has a wrong offset!");

// Function Indiana.EquipmentComponent.EquipWeapon
// 0x0010 (0x0010 - 0x0000)
struct EquipmentComponent_EquipWeapon final
{
public:
	class UWeapon*                                WeaponToEquip;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInstantEquip;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EquipmentComponent_EquipWeapon) == 0x000008, "Wrong alignment on EquipmentComponent_EquipWeapon");
static_assert(sizeof(EquipmentComponent_EquipWeapon) == 0x000010, "Wrong size on EquipmentComponent_EquipWeapon");
static_assert(offsetof(EquipmentComponent_EquipWeapon, WeaponToEquip) == 0x000000, "Member 'EquipmentComponent_EquipWeapon::WeaponToEquip' has a wrong offset!");
static_assert(offsetof(EquipmentComponent_EquipWeapon, bInstantEquip) == 0x000008, "Member 'EquipmentComponent_EquipWeapon::bInstantEquip' has a wrong offset!");

// Function Indiana.EquipmentComponent.EquipWeaponDebug
// 0x0008 (0x0008 - 0x0000)
struct EquipmentComponent_EquipWeaponDebug final
{
public:
	class FName                                   WeaponName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentComponent_EquipWeaponDebug) == 0x000004, "Wrong alignment on EquipmentComponent_EquipWeaponDebug");
static_assert(sizeof(EquipmentComponent_EquipWeaponDebug) == 0x000008, "Wrong size on EquipmentComponent_EquipWeaponDebug");
static_assert(offsetof(EquipmentComponent_EquipWeaponDebug, WeaponName) == 0x000000, "Member 'EquipmentComponent_EquipWeaponDebug::WeaponName' has a wrong offset!");

// Function Indiana.EquipmentComponent.EquipWeaponFromSlot
// 0x0008 (0x0008 - 0x0000)
struct EquipmentComponent_EquipWeaponFromSlot final
{
public:
	uint32                                        SlotIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInstantEquip;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EquipmentComponent_EquipWeaponFromSlot) == 0x000004, "Wrong alignment on EquipmentComponent_EquipWeaponFromSlot");
static_assert(sizeof(EquipmentComponent_EquipWeaponFromSlot) == 0x000008, "Wrong size on EquipmentComponent_EquipWeaponFromSlot");
static_assert(offsetof(EquipmentComponent_EquipWeaponFromSlot, SlotIndex) == 0x000000, "Member 'EquipmentComponent_EquipWeaponFromSlot::SlotIndex' has a wrong offset!");
static_assert(offsetof(EquipmentComponent_EquipWeaponFromSlot, bInstantEquip) == 0x000004, "Member 'EquipmentComponent_EquipWeaponFromSlot::bInstantEquip' has a wrong offset!");

// Function Indiana.EquipmentComponent.EquipWeaponMicroModDebug
// 0x0008 (0x0008 - 0x0000)
struct EquipmentComponent_EquipWeaponMicroModDebug final
{
public:
	class FName                                   MicroModName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentComponent_EquipWeaponMicroModDebug) == 0x000004, "Wrong alignment on EquipmentComponent_EquipWeaponMicroModDebug");
static_assert(sizeof(EquipmentComponent_EquipWeaponMicroModDebug) == 0x000008, "Wrong size on EquipmentComponent_EquipWeaponMicroModDebug");
static_assert(offsetof(EquipmentComponent_EquipWeaponMicroModDebug, MicroModName) == 0x000000, "Member 'EquipmentComponent_EquipWeaponMicroModDebug::MicroModName' has a wrong offset!");

// Function Indiana.EquipmentComponent.HolsterWeapon
// 0x0002 (0x0002 - 0x0000)
struct EquipmentComponent_HolsterWeapon final
{
public:
	EHolsterRequestSource                         InSource;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInstantHolster;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentComponent_HolsterWeapon) == 0x000001, "Wrong alignment on EquipmentComponent_HolsterWeapon");
static_assert(sizeof(EquipmentComponent_HolsterWeapon) == 0x000002, "Wrong size on EquipmentComponent_HolsterWeapon");
static_assert(offsetof(EquipmentComponent_HolsterWeapon, InSource) == 0x000000, "Member 'EquipmentComponent_HolsterWeapon::InSource' has a wrong offset!");
static_assert(offsetof(EquipmentComponent_HolsterWeapon, bInstantHolster) == 0x000001, "Member 'EquipmentComponent_HolsterWeapon::bInstantHolster' has a wrong offset!");

// Function Indiana.EquipmentComponent.LoadAmmoDebug
// 0x0008 (0x0008 - 0x0000)
struct EquipmentComponent_LoadAmmoDebug final
{
public:
	class FName                                   AmmoName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentComponent_LoadAmmoDebug) == 0x000004, "Wrong alignment on EquipmentComponent_LoadAmmoDebug");
static_assert(sizeof(EquipmentComponent_LoadAmmoDebug) == 0x000008, "Wrong size on EquipmentComponent_LoadAmmoDebug");
static_assert(offsetof(EquipmentComponent_LoadAmmoDebug, AmmoName) == 0x000000, "Member 'EquipmentComponent_LoadAmmoDebug::AmmoName' has a wrong offset!");

// Function Indiana.EquipmentComponent.OnEndEquipWeapon
// 0x0008 (0x0008 - 0x0000)
struct EquipmentComponent_OnEndEquipWeapon final
{
public:
	class UWeapon*                                Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentComponent_OnEndEquipWeapon) == 0x000008, "Wrong alignment on EquipmentComponent_OnEndEquipWeapon");
static_assert(sizeof(EquipmentComponent_OnEndEquipWeapon) == 0x000008, "Wrong size on EquipmentComponent_OnEndEquipWeapon");
static_assert(offsetof(EquipmentComponent_OnEndEquipWeapon, Weapon) == 0x000000, "Member 'EquipmentComponent_OnEndEquipWeapon::Weapon' has a wrong offset!");

// Function Indiana.EquipmentComponent.OnEndHolsterWeapon
// 0x0008 (0x0008 - 0x0000)
struct EquipmentComponent_OnEndHolsterWeapon final
{
public:
	class UWeapon*                                Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentComponent_OnEndHolsterWeapon) == 0x000008, "Wrong alignment on EquipmentComponent_OnEndHolsterWeapon");
static_assert(sizeof(EquipmentComponent_OnEndHolsterWeapon) == 0x000008, "Wrong size on EquipmentComponent_OnEndHolsterWeapon");
static_assert(offsetof(EquipmentComponent_OnEndHolsterWeapon, Weapon) == 0x000000, "Member 'EquipmentComponent_OnEndHolsterWeapon::Weapon' has a wrong offset!");

// Function Indiana.EquipmentComponent.OnEndReloadWeapon
// 0x0008 (0x0008 - 0x0000)
struct EquipmentComponent_OnEndReloadWeapon final
{
public:
	class UWeapon*                                Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentComponent_OnEndReloadWeapon) == 0x000008, "Wrong alignment on EquipmentComponent_OnEndReloadWeapon");
static_assert(sizeof(EquipmentComponent_OnEndReloadWeapon) == 0x000008, "Wrong size on EquipmentComponent_OnEndReloadWeapon");
static_assert(offsetof(EquipmentComponent_OnEndReloadWeapon, Weapon) == 0x000000, "Member 'EquipmentComponent_OnEndReloadWeapon::Weapon' has a wrong offset!");

// Function Indiana.EquipmentComponent.OnEndUnequipWeapon
// 0x0008 (0x0008 - 0x0000)
struct EquipmentComponent_OnEndUnequipWeapon final
{
public:
	class UWeapon*                                Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentComponent_OnEndUnequipWeapon) == 0x000008, "Wrong alignment on EquipmentComponent_OnEndUnequipWeapon");
static_assert(sizeof(EquipmentComponent_OnEndUnequipWeapon) == 0x000008, "Wrong size on EquipmentComponent_OnEndUnequipWeapon");
static_assert(offsetof(EquipmentComponent_OnEndUnequipWeapon, Weapon) == 0x000000, "Member 'EquipmentComponent_OnEndUnequipWeapon::Weapon' has a wrong offset!");

// Function Indiana.EquipmentComponent.OnEndUnholsterWeapon
// 0x0008 (0x0008 - 0x0000)
struct EquipmentComponent_OnEndUnholsterWeapon final
{
public:
	class UWeapon*                                Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentComponent_OnEndUnholsterWeapon) == 0x000008, "Wrong alignment on EquipmentComponent_OnEndUnholsterWeapon");
static_assert(sizeof(EquipmentComponent_OnEndUnholsterWeapon) == 0x000008, "Wrong size on EquipmentComponent_OnEndUnholsterWeapon");
static_assert(offsetof(EquipmentComponent_OnEndUnholsterWeapon, Weapon) == 0x000000, "Member 'EquipmentComponent_OnEndUnholsterWeapon::Weapon' has a wrong offset!");

// Function Indiana.EquipmentComponent.OnEquipDisguise
// 0x0008 (0x0008 - 0x0000)
struct EquipmentComponent_OnEquipDisguise final
{
public:
	const class UDisguiseData*                    Disguise;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentComponent_OnEquipDisguise) == 0x000008, "Wrong alignment on EquipmentComponent_OnEquipDisguise");
static_assert(sizeof(EquipmentComponent_OnEquipDisguise) == 0x000008, "Wrong size on EquipmentComponent_OnEquipDisguise");
static_assert(offsetof(EquipmentComponent_OnEquipDisguise, Disguise) == 0x000000, "Member 'EquipmentComponent_OnEquipDisguise::Disguise' has a wrong offset!");

// Function Indiana.EquipmentComponent.OnInterruptReloadWeapon
// 0x0008 (0x0008 - 0x0000)
struct EquipmentComponent_OnInterruptReloadWeapon final
{
public:
	class UWeapon*                                Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentComponent_OnInterruptReloadWeapon) == 0x000008, "Wrong alignment on EquipmentComponent_OnInterruptReloadWeapon");
static_assert(sizeof(EquipmentComponent_OnInterruptReloadWeapon) == 0x000008, "Wrong size on EquipmentComponent_OnInterruptReloadWeapon");
static_assert(offsetof(EquipmentComponent_OnInterruptReloadWeapon, Weapon) == 0x000000, "Member 'EquipmentComponent_OnInterruptReloadWeapon::Weapon' has a wrong offset!");

// Function Indiana.EquipmentComponent.OnItemAddedToInventory
// 0x0010 (0x0010 - 0x0000)
struct EquipmentComponent_OnItemAddedToInventory final
{
public:
	struct FItemStack                             ItemStack;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentComponent_OnItemAddedToInventory) == 0x000008, "Wrong alignment on EquipmentComponent_OnItemAddedToInventory");
static_assert(sizeof(EquipmentComponent_OnItemAddedToInventory) == 0x000010, "Wrong size on EquipmentComponent_OnItemAddedToInventory");
static_assert(offsetof(EquipmentComponent_OnItemAddedToInventory, ItemStack) == 0x000000, "Member 'EquipmentComponent_OnItemAddedToInventory::ItemStack' has a wrong offset!");

// Function Indiana.EquipmentComponent.OnItemRemovedFromInventory
// 0x0010 (0x0010 - 0x0000)
struct EquipmentComponent_OnItemRemovedFromInventory final
{
public:
	struct FItemStack                             ItemStack;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentComponent_OnItemRemovedFromInventory) == 0x000008, "Wrong alignment on EquipmentComponent_OnItemRemovedFromInventory");
static_assert(sizeof(EquipmentComponent_OnItemRemovedFromInventory) == 0x000010, "Wrong size on EquipmentComponent_OnItemRemovedFromInventory");
static_assert(offsetof(EquipmentComponent_OnItemRemovedFromInventory, ItemStack) == 0x000000, "Member 'EquipmentComponent_OnItemRemovedFromInventory::ItemStack' has a wrong offset!");

// Function Indiana.EquipmentComponent.OnMedKitUsed
// 0x0004 (0x0004 - 0x0000)
struct EquipmentComponent_OnMedKitUsed final
{
public:
	int32                                         ConsumeablesUsed;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentComponent_OnMedKitUsed) == 0x000004, "Wrong alignment on EquipmentComponent_OnMedKitUsed");
static_assert(sizeof(EquipmentComponent_OnMedKitUsed) == 0x000004, "Wrong size on EquipmentComponent_OnMedKitUsed");
static_assert(offsetof(EquipmentComponent_OnMedKitUsed, ConsumeablesUsed) == 0x000000, "Member 'EquipmentComponent_OnMedKitUsed::ConsumeablesUsed' has a wrong offset!");

// Function Indiana.EquipmentComponent.OnStartEquipWeapon
// 0x0008 (0x0008 - 0x0000)
struct EquipmentComponent_OnStartEquipWeapon final
{
public:
	class UWeapon*                                Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentComponent_OnStartEquipWeapon) == 0x000008, "Wrong alignment on EquipmentComponent_OnStartEquipWeapon");
static_assert(sizeof(EquipmentComponent_OnStartEquipWeapon) == 0x000008, "Wrong size on EquipmentComponent_OnStartEquipWeapon");
static_assert(offsetof(EquipmentComponent_OnStartEquipWeapon, Weapon) == 0x000000, "Member 'EquipmentComponent_OnStartEquipWeapon::Weapon' has a wrong offset!");

// Function Indiana.EquipmentComponent.OnStartHolsterWeapon
// 0x0008 (0x0008 - 0x0000)
struct EquipmentComponent_OnStartHolsterWeapon final
{
public:
	class UWeapon*                                Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentComponent_OnStartHolsterWeapon) == 0x000008, "Wrong alignment on EquipmentComponent_OnStartHolsterWeapon");
static_assert(sizeof(EquipmentComponent_OnStartHolsterWeapon) == 0x000008, "Wrong size on EquipmentComponent_OnStartHolsterWeapon");
static_assert(offsetof(EquipmentComponent_OnStartHolsterWeapon, Weapon) == 0x000000, "Member 'EquipmentComponent_OnStartHolsterWeapon::Weapon' has a wrong offset!");

// Function Indiana.EquipmentComponent.OnStartReloadWeapon
// 0x0008 (0x0008 - 0x0000)
struct EquipmentComponent_OnStartReloadWeapon final
{
public:
	class UWeapon*                                Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentComponent_OnStartReloadWeapon) == 0x000008, "Wrong alignment on EquipmentComponent_OnStartReloadWeapon");
static_assert(sizeof(EquipmentComponent_OnStartReloadWeapon) == 0x000008, "Wrong size on EquipmentComponent_OnStartReloadWeapon");
static_assert(offsetof(EquipmentComponent_OnStartReloadWeapon, Weapon) == 0x000000, "Member 'EquipmentComponent_OnStartReloadWeapon::Weapon' has a wrong offset!");

// Function Indiana.EquipmentComponent.OnStartUnequipWeapon
// 0x0008 (0x0008 - 0x0000)
struct EquipmentComponent_OnStartUnequipWeapon final
{
public:
	class UWeapon*                                Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentComponent_OnStartUnequipWeapon) == 0x000008, "Wrong alignment on EquipmentComponent_OnStartUnequipWeapon");
static_assert(sizeof(EquipmentComponent_OnStartUnequipWeapon) == 0x000008, "Wrong size on EquipmentComponent_OnStartUnequipWeapon");
static_assert(offsetof(EquipmentComponent_OnStartUnequipWeapon, Weapon) == 0x000000, "Member 'EquipmentComponent_OnStartUnequipWeapon::Weapon' has a wrong offset!");

// Function Indiana.EquipmentComponent.OnStartUnholsterWeapon
// 0x0008 (0x0008 - 0x0000)
struct EquipmentComponent_OnStartUnholsterWeapon final
{
public:
	class UWeapon*                                Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentComponent_OnStartUnholsterWeapon) == 0x000008, "Wrong alignment on EquipmentComponent_OnStartUnholsterWeapon");
static_assert(sizeof(EquipmentComponent_OnStartUnholsterWeapon) == 0x000008, "Wrong size on EquipmentComponent_OnStartUnholsterWeapon");
static_assert(offsetof(EquipmentComponent_OnStartUnholsterWeapon, Weapon) == 0x000000, "Member 'EquipmentComponent_OnStartUnholsterWeapon::Weapon' has a wrong offset!");

// Function Indiana.EquipmentComponent.OnStatUpdated
// 0x0008 (0x0008 - 0x0000)
struct EquipmentComponent_OnStatUpdated final
{
public:
	const class URpgStat*                         Stat;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentComponent_OnStatUpdated) == 0x000008, "Wrong alignment on EquipmentComponent_OnStatUpdated");
static_assert(sizeof(EquipmentComponent_OnStatUpdated) == 0x000008, "Wrong size on EquipmentComponent_OnStatUpdated");
static_assert(offsetof(EquipmentComponent_OnStatUpdated, Stat) == 0x000000, "Member 'EquipmentComponent_OnStatUpdated::Stat' has a wrong offset!");

// Function Indiana.EquipmentComponent.OnUnlockAbilityChanged
// 0x0001 (0x0001 - 0x0000)
struct EquipmentComponent_OnUnlockAbilityChanged final
{
public:
	EUnlockAbility                                Ability;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentComponent_OnUnlockAbilityChanged) == 0x000001, "Wrong alignment on EquipmentComponent_OnUnlockAbilityChanged");
static_assert(sizeof(EquipmentComponent_OnUnlockAbilityChanged) == 0x000001, "Wrong size on EquipmentComponent_OnUnlockAbilityChanged");
static_assert(offsetof(EquipmentComponent_OnUnlockAbilityChanged, Ability) == 0x000000, "Member 'EquipmentComponent_OnUnlockAbilityChanged::Ability' has a wrong offset!");

// Function Indiana.EquipmentComponent.SetArmorLevel
// 0x0008 (0x0008 - 0x0000)
struct EquipmentComponent_SetArmorLevel final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideArmorLevels;                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EquipmentComponent_SetArmorLevel) == 0x000004, "Wrong alignment on EquipmentComponent_SetArmorLevel");
static_assert(sizeof(EquipmentComponent_SetArmorLevel) == 0x000008, "Wrong size on EquipmentComponent_SetArmorLevel");
static_assert(offsetof(EquipmentComponent_SetArmorLevel, Level) == 0x000000, "Member 'EquipmentComponent_SetArmorLevel::Level' has a wrong offset!");
static_assert(offsetof(EquipmentComponent_SetArmorLevel, bOverrideArmorLevels) == 0x000004, "Member 'EquipmentComponent_SetArmorLevel::bOverrideArmorLevels' has a wrong offset!");

// Function Indiana.EquipmentComponent.SetCalledShotWeaponLevel
// 0x0004 (0x0004 - 0x0000)
struct EquipmentComponent_SetCalledShotWeaponLevel final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentComponent_SetCalledShotWeaponLevel) == 0x000004, "Wrong alignment on EquipmentComponent_SetCalledShotWeaponLevel");
static_assert(sizeof(EquipmentComponent_SetCalledShotWeaponLevel) == 0x000004, "Wrong size on EquipmentComponent_SetCalledShotWeaponLevel");
static_assert(offsetof(EquipmentComponent_SetCalledShotWeaponLevel, Level) == 0x000000, "Member 'EquipmentComponent_SetCalledShotWeaponLevel::Level' has a wrong offset!");

// Function Indiana.EquipmentComponent.SetWeaponLevel
// 0x0008 (0x0008 - 0x0000)
struct EquipmentComponent_SetWeaponLevel final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideWeaponLevels;                             // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EquipmentComponent_SetWeaponLevel) == 0x000004, "Wrong alignment on EquipmentComponent_SetWeaponLevel");
static_assert(sizeof(EquipmentComponent_SetWeaponLevel) == 0x000008, "Wrong size on EquipmentComponent_SetWeaponLevel");
static_assert(offsetof(EquipmentComponent_SetWeaponLevel, Level) == 0x000000, "Member 'EquipmentComponent_SetWeaponLevel::Level' has a wrong offset!");
static_assert(offsetof(EquipmentComponent_SetWeaponLevel, bOverrideWeaponLevels) == 0x000004, "Member 'EquipmentComponent_SetWeaponLevel::bOverrideWeaponLevels' has a wrong offset!");

// Function Indiana.EquipmentComponent.UnholsterWeapon
// 0x0001 (0x0001 - 0x0000)
struct EquipmentComponent_UnholsterWeapon final
{
public:
	EHolsterRequestSource                         InSource;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentComponent_UnholsterWeapon) == 0x000001, "Wrong alignment on EquipmentComponent_UnholsterWeapon");
static_assert(sizeof(EquipmentComponent_UnholsterWeapon) == 0x000001, "Wrong size on EquipmentComponent_UnholsterWeapon");
static_assert(offsetof(EquipmentComponent_UnholsterWeapon, InSource) == 0x000000, "Member 'EquipmentComponent_UnholsterWeapon::InSource' has a wrong offset!");

// Function Indiana.EquipmentComponent.WeaponAdvanceLevelDebug
// 0x0008 (0x0008 - 0x0000)
struct EquipmentComponent_WeaponAdvanceLevelDebug final
{
public:
	int32                                         NumLevels;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreCost;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EquipmentComponent_WeaponAdvanceLevelDebug) == 0x000004, "Wrong alignment on EquipmentComponent_WeaponAdvanceLevelDebug");
static_assert(sizeof(EquipmentComponent_WeaponAdvanceLevelDebug) == 0x000008, "Wrong size on EquipmentComponent_WeaponAdvanceLevelDebug");
static_assert(offsetof(EquipmentComponent_WeaponAdvanceLevelDebug, NumLevels) == 0x000000, "Member 'EquipmentComponent_WeaponAdvanceLevelDebug::NumLevels' has a wrong offset!");
static_assert(offsetof(EquipmentComponent_WeaponAdvanceLevelDebug, bIgnoreCost) == 0x000004, "Member 'EquipmentComponent_WeaponAdvanceLevelDebug::bIgnoreCost' has a wrong offset!");

// Function Indiana.EquipmentComponent.GetEquippedWeapon
// 0x0008 (0x0008 - 0x0000)
struct EquipmentComponent_GetEquippedWeapon final
{
public:
	class UWeapon*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentComponent_GetEquippedWeapon) == 0x000008, "Wrong alignment on EquipmentComponent_GetEquippedWeapon");
static_assert(sizeof(EquipmentComponent_GetEquippedWeapon) == 0x000008, "Wrong size on EquipmentComponent_GetEquippedWeapon");
static_assert(offsetof(EquipmentComponent_GetEquippedWeapon, ReturnValue) == 0x000000, "Member 'EquipmentComponent_GetEquippedWeapon::ReturnValue' has a wrong offset!");

// Function Indiana.OnResurrect.OnNewStateOfBeing
// 0x0002 (0x0002 - 0x0000)
struct OnResurrect_OnNewStateOfBeing final
{
public:
	EStateOfBeing                                 NewStateOfBeing;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStateOfBeing                                 OldStateOfBeing;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnResurrect_OnNewStateOfBeing) == 0x000001, "Wrong alignment on OnResurrect_OnNewStateOfBeing");
static_assert(sizeof(OnResurrect_OnNewStateOfBeing) == 0x000002, "Wrong size on OnResurrect_OnNewStateOfBeing");
static_assert(offsetof(OnResurrect_OnNewStateOfBeing, NewStateOfBeing) == 0x000000, "Member 'OnResurrect_OnNewStateOfBeing::NewStateOfBeing' has a wrong offset!");
static_assert(offsetof(OnResurrect_OnNewStateOfBeing, OldStateOfBeing) == 0x000001, "Member 'OnResurrect_OnNewStateOfBeing::OldStateOfBeing' has a wrong offset!");

// Function Indiana.Elevator.OnEndMoveExternalDoors
// 0x0004 (0x0004 - 0x0000)
struct Elevator_OnEndMoveExternalDoors final
{
public:
	int32                                         DestinationFloor;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Elevator_OnEndMoveExternalDoors) == 0x000004, "Wrong alignment on Elevator_OnEndMoveExternalDoors");
static_assert(sizeof(Elevator_OnEndMoveExternalDoors) == 0x000004, "Wrong size on Elevator_OnEndMoveExternalDoors");
static_assert(offsetof(Elevator_OnEndMoveExternalDoors, DestinationFloor) == 0x000000, "Member 'Elevator_OnEndMoveExternalDoors::DestinationFloor' has a wrong offset!");

// Function Indiana.Elevator.OnStartMoveExternalDoors
// 0x0008 (0x0008 - 0x0000)
struct Elevator_OnStartMoveExternalDoors final
{
public:
	int32                                         DestinationFloor;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromStationary;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Elevator_OnStartMoveExternalDoors) == 0x000004, "Wrong alignment on Elevator_OnStartMoveExternalDoors");
static_assert(sizeof(Elevator_OnStartMoveExternalDoors) == 0x000008, "Wrong size on Elevator_OnStartMoveExternalDoors");
static_assert(offsetof(Elevator_OnStartMoveExternalDoors, DestinationFloor) == 0x000000, "Member 'Elevator_OnStartMoveExternalDoors::DestinationFloor' has a wrong offset!");
static_assert(offsetof(Elevator_OnStartMoveExternalDoors, bFromStationary) == 0x000004, "Member 'Elevator_OnStartMoveExternalDoors::bFromStationary' has a wrong offset!");

// Function Indiana.Elevator.SetCurrentFloor
// 0x0004 (0x0004 - 0x0000)
struct Elevator_SetCurrentFloor final
{
public:
	int32                                         FloorIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Elevator_SetCurrentFloor) == 0x000004, "Wrong alignment on Elevator_SetCurrentFloor");
static_assert(sizeof(Elevator_SetCurrentFloor) == 0x000004, "Wrong size on Elevator_SetCurrentFloor");
static_assert(offsetof(Elevator_SetCurrentFloor, FloorIndex) == 0x000000, "Member 'Elevator_SetCurrentFloor::FloorIndex' has a wrong offset!");

// Function Indiana.Elevator.GetCurrentFloor
// 0x0004 (0x0004 - 0x0000)
struct Elevator_GetCurrentFloor final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Elevator_GetCurrentFloor) == 0x000004, "Wrong alignment on Elevator_GetCurrentFloor");
static_assert(sizeof(Elevator_GetCurrentFloor) == 0x000004, "Wrong size on Elevator_GetCurrentFloor");
static_assert(offsetof(Elevator_GetCurrentFloor, ReturnValue) == 0x000000, "Member 'Elevator_GetCurrentFloor::ReturnValue' has a wrong offset!");

// Function Indiana.Elevator.GetTargetFloor
// 0x0004 (0x0004 - 0x0000)
struct Elevator_GetTargetFloor final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Elevator_GetTargetFloor) == 0x000004, "Wrong alignment on Elevator_GetTargetFloor");
static_assert(sizeof(Elevator_GetTargetFloor) == 0x000004, "Wrong size on Elevator_GetTargetFloor");
static_assert(offsetof(Elevator_GetTargetFloor, ReturnValue) == 0x000000, "Member 'Elevator_GetTargetFloor::ReturnValue' has a wrong offset!");

// Function Indiana.Elevator.IsMoving
// 0x0001 (0x0001 - 0x0000)
struct Elevator_IsMoving final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Elevator_IsMoving) == 0x000001, "Wrong alignment on Elevator_IsMoving");
static_assert(sizeof(Elevator_IsMoving) == 0x000001, "Wrong size on Elevator_IsMoving");
static_assert(offsetof(Elevator_IsMoving, ReturnValue) == 0x000000, "Member 'Elevator_IsMoving::ReturnValue' has a wrong offset!");

// Function Indiana.Elevator.IsStationary
// 0x0001 (0x0001 - 0x0000)
struct Elevator_IsStationary final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Elevator_IsStationary) == 0x000001, "Wrong alignment on Elevator_IsStationary");
static_assert(sizeof(Elevator_IsStationary) == 0x000001, "Wrong size on Elevator_IsStationary");
static_assert(offsetof(Elevator_IsStationary, ReturnValue) == 0x000000, "Member 'Elevator_IsStationary::ReturnValue' has a wrong offset!");

// Function Indiana.AimAssistComponent.AimAssistVisualAdhesion
// 0x0001 (0x0001 - 0x0000)
struct AimAssistComponent_AimAssistVisualAdhesion final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AimAssistComponent_AimAssistVisualAdhesion) == 0x000001, "Wrong alignment on AimAssistComponent_AimAssistVisualAdhesion");
static_assert(sizeof(AimAssistComponent_AimAssistVisualAdhesion) == 0x000001, "Wrong size on AimAssistComponent_AimAssistVisualAdhesion");
static_assert(offsetof(AimAssistComponent_AimAssistVisualAdhesion, bEnable) == 0x000000, "Member 'AimAssistComponent_AimAssistVisualAdhesion::bEnable' has a wrong offset!");

// Function Indiana.AimAssistComponent.AimAssistVisualBulletMagnetism
// 0x0001 (0x0001 - 0x0000)
struct AimAssistComponent_AimAssistVisualBulletMagnetism final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AimAssistComponent_AimAssistVisualBulletMagnetism) == 0x000001, "Wrong alignment on AimAssistComponent_AimAssistVisualBulletMagnetism");
static_assert(sizeof(AimAssistComponent_AimAssistVisualBulletMagnetism) == 0x000001, "Wrong size on AimAssistComponent_AimAssistVisualBulletMagnetism");
static_assert(offsetof(AimAssistComponent_AimAssistVisualBulletMagnetism, bEnable) == 0x000000, "Member 'AimAssistComponent_AimAssistVisualBulletMagnetism::bEnable' has a wrong offset!");

// Function Indiana.AimAssistComponent.AimAssistVisualFriction
// 0x0001 (0x0001 - 0x0000)
struct AimAssistComponent_AimAssistVisualFriction final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AimAssistComponent_AimAssistVisualFriction) == 0x000001, "Wrong alignment on AimAssistComponent_AimAssistVisualFriction");
static_assert(sizeof(AimAssistComponent_AimAssistVisualFriction) == 0x000001, "Wrong size on AimAssistComponent_AimAssistVisualFriction");
static_assert(offsetof(AimAssistComponent_AimAssistVisualFriction, bEnable) == 0x000000, "Member 'AimAssistComponent_AimAssistVisualFriction::bEnable' has a wrong offset!");

// Function Indiana.AimAssistComponent.AimAssistVisualSpread
// 0x0001 (0x0001 - 0x0000)
struct AimAssistComponent_AimAssistVisualSpread final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AimAssistComponent_AimAssistVisualSpread) == 0x000001, "Wrong alignment on AimAssistComponent_AimAssistVisualSpread");
static_assert(sizeof(AimAssistComponent_AimAssistVisualSpread) == 0x000001, "Wrong size on AimAssistComponent_AimAssistVisualSpread");
static_assert(offsetof(AimAssistComponent_AimAssistVisualSpread, bEnable) == 0x000000, "Member 'AimAssistComponent_AimAssistVisualSpread::bEnable' has a wrong offset!");

// Function Indiana.AimAssistComponent.EnableAimAssist
// 0x0001 (0x0001 - 0x0000)
struct AimAssistComponent_EnableAimAssist final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AimAssistComponent_EnableAimAssist) == 0x000001, "Wrong alignment on AimAssistComponent_EnableAimAssist");
static_assert(sizeof(AimAssistComponent_EnableAimAssist) == 0x000001, "Wrong size on AimAssistComponent_EnableAimAssist");
static_assert(offsetof(AimAssistComponent_EnableAimAssist, Enabled) == 0x000000, "Member 'AimAssistComponent_EnableAimAssist::Enabled' has a wrong offset!");

// Function Indiana.AimAssistComponent.OnDifficultyChanged
// 0x0001 (0x0001 - 0x0000)
struct AimAssistComponent_OnDifficultyChanged final
{
public:
	EGameDifficulty                               NewDifficulty;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AimAssistComponent_OnDifficultyChanged) == 0x000001, "Wrong alignment on AimAssistComponent_OnDifficultyChanged");
static_assert(sizeof(AimAssistComponent_OnDifficultyChanged) == 0x000001, "Wrong size on AimAssistComponent_OnDifficultyChanged");
static_assert(offsetof(AimAssistComponent_OnDifficultyChanged, NewDifficulty) == 0x000000, "Member 'AimAssistComponent_OnDifficultyChanged::NewDifficulty' has a wrong offset!");

// Function Indiana.IndianaCharMovementComponent.OnBumped
// 0x00A8 (0x00A8 - 0x0000)
struct IndianaCharMovementComponent_OnBumped final
{
public:
	class AActor*                                 SelfActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x001C(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaCharMovementComponent_OnBumped) == 0x000008, "Wrong alignment on IndianaCharMovementComponent_OnBumped");
static_assert(sizeof(IndianaCharMovementComponent_OnBumped) == 0x0000A8, "Wrong size on IndianaCharMovementComponent_OnBumped");
static_assert(offsetof(IndianaCharMovementComponent_OnBumped, SelfActor) == 0x000000, "Member 'IndianaCharMovementComponent_OnBumped::SelfActor' has a wrong offset!");
static_assert(offsetof(IndianaCharMovementComponent_OnBumped, OtherActor) == 0x000008, "Member 'IndianaCharMovementComponent_OnBumped::OtherActor' has a wrong offset!");
static_assert(offsetof(IndianaCharMovementComponent_OnBumped, NormalImpulse) == 0x000010, "Member 'IndianaCharMovementComponent_OnBumped::NormalImpulse' has a wrong offset!");
static_assert(offsetof(IndianaCharMovementComponent_OnBumped, Hit) == 0x00001C, "Member 'IndianaCharMovementComponent_OnBumped::Hit' has a wrong offset!");

// Function Indiana.AIMovementComponent.OnExtremaBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct AIMovementComponent_OnExtremaBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMovementComponent_OnExtremaBeginOverlap) == 0x000008, "Wrong alignment on AIMovementComponent_OnExtremaBeginOverlap");
static_assert(sizeof(AIMovementComponent_OnExtremaBeginOverlap) == 0x0000A8, "Wrong size on AIMovementComponent_OnExtremaBeginOverlap");
static_assert(offsetof(AIMovementComponent_OnExtremaBeginOverlap, OverlappedComponent) == 0x000000, "Member 'AIMovementComponent_OnExtremaBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_OnExtremaBeginOverlap, OtherActor) == 0x000008, "Member 'AIMovementComponent_OnExtremaBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_OnExtremaBeginOverlap, OtherComp) == 0x000010, "Member 'AIMovementComponent_OnExtremaBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_OnExtremaBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'AIMovementComponent_OnExtremaBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_OnExtremaBeginOverlap, bFromSweep) == 0x00001C, "Member 'AIMovementComponent_OnExtremaBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_OnExtremaBeginOverlap, SweepResult) == 0x000020, "Member 'AIMovementComponent_OnExtremaBeginOverlap::SweepResult' has a wrong offset!");

// Function Indiana.AIMovementComponent.OnExtremaEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct AIMovementComponent_OnExtremaEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIMovementComponent_OnExtremaEndOverlap) == 0x000008, "Wrong alignment on AIMovementComponent_OnExtremaEndOverlap");
static_assert(sizeof(AIMovementComponent_OnExtremaEndOverlap) == 0x000020, "Wrong size on AIMovementComponent_OnExtremaEndOverlap");
static_assert(offsetof(AIMovementComponent_OnExtremaEndOverlap, OverlappedComponent) == 0x000000, "Member 'AIMovementComponent_OnExtremaEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_OnExtremaEndOverlap, OtherActor) == 0x000008, "Member 'AIMovementComponent_OnExtremaEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_OnExtremaEndOverlap, OtherComp) == 0x000010, "Member 'AIMovementComponent_OnExtremaEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_OnExtremaEndOverlap, OtherBodyIndex) == 0x000018, "Member 'AIMovementComponent_OnExtremaEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function Indiana.AIMovementComponent.OnNewStateOfBeing
// 0x0002 (0x0002 - 0x0000)
struct AIMovementComponent_OnNewStateOfBeing final
{
public:
	EStateOfBeing                                 NewStateOfBeing;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStateOfBeing                                 OldStateOfBeing;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMovementComponent_OnNewStateOfBeing) == 0x000001, "Wrong alignment on AIMovementComponent_OnNewStateOfBeing");
static_assert(sizeof(AIMovementComponent_OnNewStateOfBeing) == 0x000002, "Wrong size on AIMovementComponent_OnNewStateOfBeing");
static_assert(offsetof(AIMovementComponent_OnNewStateOfBeing, NewStateOfBeing) == 0x000000, "Member 'AIMovementComponent_OnNewStateOfBeing::NewStateOfBeing' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_OnNewStateOfBeing, OldStateOfBeing) == 0x000001, "Member 'AIMovementComponent_OnNewStateOfBeing::OldStateOfBeing' has a wrong offset!");

// Function Indiana.AIMovementComponent.OnRestoredStateOfBeing
// 0x0001 (0x0001 - 0x0000)
struct AIMovementComponent_OnRestoredStateOfBeing final
{
public:
	EStateOfBeing                                 RestoredStateOfBeing;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMovementComponent_OnRestoredStateOfBeing) == 0x000001, "Wrong alignment on AIMovementComponent_OnRestoredStateOfBeing");
static_assert(sizeof(AIMovementComponent_OnRestoredStateOfBeing) == 0x000001, "Wrong size on AIMovementComponent_OnRestoredStateOfBeing");
static_assert(offsetof(AIMovementComponent_OnRestoredStateOfBeing, RestoredStateOfBeing) == 0x000000, "Member 'AIMovementComponent_OnRestoredStateOfBeing::RestoredStateOfBeing' has a wrong offset!");

// Function Indiana.CompanionOverviewWidget.OnCombatStateChanged
// 0x0002 (0x0002 - 0x0000)
struct CompanionOverviewWidget_OnCombatStateChanged final
{
public:
	bool                                          bCombatIn;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestoring;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompanionOverviewWidget_OnCombatStateChanged) == 0x000001, "Wrong alignment on CompanionOverviewWidget_OnCombatStateChanged");
static_assert(sizeof(CompanionOverviewWidget_OnCombatStateChanged) == 0x000002, "Wrong size on CompanionOverviewWidget_OnCombatStateChanged");
static_assert(offsetof(CompanionOverviewWidget_OnCombatStateChanged, bCombatIn) == 0x000000, "Member 'CompanionOverviewWidget_OnCombatStateChanged::bCombatIn' has a wrong offset!");
static_assert(offsetof(CompanionOverviewWidget_OnCombatStateChanged, bRestoring) == 0x000001, "Member 'CompanionOverviewWidget_OnCombatStateChanged::bRestoring' has a wrong offset!");

// Function Indiana.CompanionOverviewWidget.OnCompanionStatusModeChanged
// 0x0004 (0x0004 - 0x0000)
struct CompanionOverviewWidget_OnCompanionStatusModeChanged final
{
public:
	int32                                         ModeIn;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompanionOverviewWidget_OnCompanionStatusModeChanged) == 0x000004, "Wrong alignment on CompanionOverviewWidget_OnCompanionStatusModeChanged");
static_assert(sizeof(CompanionOverviewWidget_OnCompanionStatusModeChanged) == 0x000004, "Wrong size on CompanionOverviewWidget_OnCompanionStatusModeChanged");
static_assert(offsetof(CompanionOverviewWidget_OnCompanionStatusModeChanged, ModeIn) == 0x000000, "Member 'CompanionOverviewWidget_OnCompanionStatusModeChanged::ModeIn' has a wrong offset!");

// Function Indiana.CompanionOverviewWidget.OnHUDVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct CompanionOverviewWidget_OnHUDVisibilityChanged final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompanionOverviewWidget_OnHUDVisibilityChanged) == 0x000001, "Wrong alignment on CompanionOverviewWidget_OnHUDVisibilityChanged");
static_assert(sizeof(CompanionOverviewWidget_OnHUDVisibilityChanged) == 0x000001, "Wrong size on CompanionOverviewWidget_OnHUDVisibilityChanged");
static_assert(offsetof(CompanionOverviewWidget_OnHUDVisibilityChanged, bVisible) == 0x000000, "Member 'CompanionOverviewWidget_OnHUDVisibilityChanged::bVisible' has a wrong offset!");

// Function Indiana.GenericCollapsableList.ExpandableAreaExpansionChanged
// 0x0010 (0x0010 - 0x0000)
struct GenericCollapsableList_ExpandableAreaExpansionChanged final
{
public:
	class UExpandableAreaBase*                    Area;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsExpanded;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GenericCollapsableList_ExpandableAreaExpansionChanged) == 0x000008, "Wrong alignment on GenericCollapsableList_ExpandableAreaExpansionChanged");
static_assert(sizeof(GenericCollapsableList_ExpandableAreaExpansionChanged) == 0x000010, "Wrong size on GenericCollapsableList_ExpandableAreaExpansionChanged");
static_assert(offsetof(GenericCollapsableList_ExpandableAreaExpansionChanged, Area) == 0x000000, "Member 'GenericCollapsableList_ExpandableAreaExpansionChanged::Area' has a wrong offset!");
static_assert(offsetof(GenericCollapsableList_ExpandableAreaExpansionChanged, bIsExpanded) == 0x000008, "Member 'GenericCollapsableList_ExpandableAreaExpansionChanged::bIsExpanded' has a wrong offset!");

// Function Indiana.AudioLogList.AddNewAudioLog
// 0x0008 (0x0008 - 0x0000)
struct AudioLogList_AddNewAudioLog final
{
public:
	class UAudioLogDataAsset*                     AudioLogDataAsset;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioLogList_AddNewAudioLog) == 0x000008, "Wrong alignment on AudioLogList_AddNewAudioLog");
static_assert(sizeof(AudioLogList_AddNewAudioLog) == 0x000008, "Wrong size on AudioLogList_AddNewAudioLog");
static_assert(offsetof(AudioLogList_AddNewAudioLog, AudioLogDataAsset) == 0x000000, "Member 'AudioLogList_AddNewAudioLog::AudioLogDataAsset' has a wrong offset!");

// Function Indiana.AudioLogList.AddOldAudioLog
// 0x0008 (0x0008 - 0x0000)
struct AudioLogList_AddOldAudioLog final
{
public:
	class UAudioLogDataAsset*                     AudioLogDataAsset;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioLogList_AddOldAudioLog) == 0x000008, "Wrong alignment on AudioLogList_AddOldAudioLog");
static_assert(sizeof(AudioLogList_AddOldAudioLog) == 0x000008, "Wrong size on AudioLogList_AddOldAudioLog");
static_assert(offsetof(AudioLogList_AddOldAudioLog, AudioLogDataAsset) == 0x000000, "Member 'AudioLogList_AddOldAudioLog::AudioLogDataAsset' has a wrong offset!");

// Function Indiana.AudioLogList.OnAudioLogLibraryLoaded
// 0x0008 (0x0008 - 0x0000)
struct AudioLogList_OnAudioLogLibraryLoaded final
{
public:
	class UAudioLogLibraryDataAsset*              LoadedAudioLogLibrary;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioLogList_OnAudioLogLibraryLoaded) == 0x000008, "Wrong alignment on AudioLogList_OnAudioLogLibraryLoaded");
static_assert(sizeof(AudioLogList_OnAudioLogLibraryLoaded) == 0x000008, "Wrong size on AudioLogList_OnAudioLogLibraryLoaded");
static_assert(offsetof(AudioLogList_OnAudioLogLibraryLoaded, LoadedAudioLogLibrary) == 0x000000, "Member 'AudioLogList_OnAudioLogLibraryLoaded::LoadedAudioLogLibrary' has a wrong offset!");

// Function Indiana.AudioLogList.OnAudioLogSelectedCB
// 0x0008 (0x0008 - 0x0000)
struct AudioLogList_OnAudioLogSelectedCB final
{
public:
	class UGenericCollapsableListEntry*           ListEntry;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioLogList_OnAudioLogSelectedCB) == 0x000008, "Wrong alignment on AudioLogList_OnAudioLogSelectedCB");
static_assert(sizeof(AudioLogList_OnAudioLogSelectedCB) == 0x000008, "Wrong size on AudioLogList_OnAudioLogSelectedCB");
static_assert(offsetof(AudioLogList_OnAudioLogSelectedCB, ListEntry) == 0x000000, "Member 'AudioLogList_OnAudioLogSelectedCB::ListEntry' has a wrong offset!");

// Function Indiana.AudioLogList.OnAudioLogViewedCB
// 0x0008 (0x0008 - 0x0000)
struct AudioLogList_OnAudioLogViewedCB final
{
public:
	class UGenericCollapsableListEntry*           ListEntry;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioLogList_OnAudioLogViewedCB) == 0x000008, "Wrong alignment on AudioLogList_OnAudioLogViewedCB");
static_assert(sizeof(AudioLogList_OnAudioLogViewedCB) == 0x000008, "Wrong size on AudioLogList_OnAudioLogViewedCB");
static_assert(offsetof(AudioLogList_OnAudioLogViewedCB, ListEntry) == 0x000000, "Member 'AudioLogList_OnAudioLogViewedCB::ListEntry' has a wrong offset!");

// Function Indiana.LedgerMapWidget.OnBorderMouseDown
// 0x0160 (0x0160 - 0x0000)
struct LedgerMapWidget_OnBorderMouseDown final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LedgerMapWidget_OnBorderMouseDown) == 0x000008, "Wrong alignment on LedgerMapWidget_OnBorderMouseDown");
static_assert(sizeof(LedgerMapWidget_OnBorderMouseDown) == 0x000160, "Wrong size on LedgerMapWidget_OnBorderMouseDown");
static_assert(offsetof(LedgerMapWidget_OnBorderMouseDown, MyGeometry) == 0x000000, "Member 'LedgerMapWidget_OnBorderMouseDown::MyGeometry' has a wrong offset!");
static_assert(offsetof(LedgerMapWidget_OnBorderMouseDown, MouseEvent) == 0x000038, "Member 'LedgerMapWidget_OnBorderMouseDown::MouseEvent' has a wrong offset!");
static_assert(offsetof(LedgerMapWidget_OnBorderMouseDown, ReturnValue) == 0x0000A8, "Member 'LedgerMapWidget_OnBorderMouseDown::ReturnValue' has a wrong offset!");

// Function Indiana.CompanionManagerComponent.ScriptAddCompanionToParty
// 0x0008 (0x0008 - 0x0000)
struct CompanionManagerComponent_ScriptAddCompanionToParty final
{
public:
	class AIndianaAiCharacter*                    Companion;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompanionManagerComponent_ScriptAddCompanionToParty) == 0x000008, "Wrong alignment on CompanionManagerComponent_ScriptAddCompanionToParty");
static_assert(sizeof(CompanionManagerComponent_ScriptAddCompanionToParty) == 0x000008, "Wrong size on CompanionManagerComponent_ScriptAddCompanionToParty");
static_assert(offsetof(CompanionManagerComponent_ScriptAddCompanionToParty, Companion) == 0x000000, "Member 'CompanionManagerComponent_ScriptAddCompanionToParty::Companion' has a wrong offset!");

// Function Indiana.CompanionManagerComponent.ScriptRemoveCompanionFromParty
// 0x0008 (0x0008 - 0x0000)
struct CompanionManagerComponent_ScriptRemoveCompanionFromParty final
{
public:
	class AIndianaAiCharacter*                    Companion;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompanionManagerComponent_ScriptRemoveCompanionFromParty) == 0x000008, "Wrong alignment on CompanionManagerComponent_ScriptRemoveCompanionFromParty");
static_assert(sizeof(CompanionManagerComponent_ScriptRemoveCompanionFromParty) == 0x000008, "Wrong size on CompanionManagerComponent_ScriptRemoveCompanionFromParty");
static_assert(offsetof(CompanionManagerComponent_ScriptRemoveCompanionFromParty, Companion) == 0x000000, "Member 'CompanionManagerComponent_ScriptRemoveCompanionFromParty::Companion' has a wrong offset!");

// Function Indiana.CompanionManagerComponent.AddPerkPointsToCompanions
// 0x0004 (0x0004 - 0x0000)
struct CompanionManagerComponent_AddPerkPointsToCompanions final
{
public:
	int32                                         Points;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompanionManagerComponent_AddPerkPointsToCompanions) == 0x000004, "Wrong alignment on CompanionManagerComponent_AddPerkPointsToCompanions");
static_assert(sizeof(CompanionManagerComponent_AddPerkPointsToCompanions) == 0x000004, "Wrong size on CompanionManagerComponent_AddPerkPointsToCompanions");
static_assert(offsetof(CompanionManagerComponent_AddPerkPointsToCompanions, Points) == 0x000000, "Member 'CompanionManagerComponent_AddPerkPointsToCompanions::Points' has a wrong offset!");

// Function Indiana.CompanionManagerComponent.OnCauseDamage
// 0x0110 (0x0110 - 0x0000)
struct CompanionManagerComponent_OnCauseDamage final
{
public:
	struct FCauseDamageInfo                       CauseDamageInfo;                                   // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompanionManagerComponent_OnCauseDamage) == 0x000008, "Wrong alignment on CompanionManagerComponent_OnCauseDamage");
static_assert(sizeof(CompanionManagerComponent_OnCauseDamage) == 0x000110, "Wrong size on CompanionManagerComponent_OnCauseDamage");
static_assert(offsetof(CompanionManagerComponent_OnCauseDamage, CauseDamageInfo) == 0x000000, "Member 'CompanionManagerComponent_OnCauseDamage::CauseDamageInfo' has a wrong offset!");

// Function Indiana.CompanionManagerComponent.OnDeath
// 0x0110 (0x0110 - 0x0000)
struct CompanionManagerComponent_OnDeath final
{
public:
	struct FCauseDamageInfo                       DamageInfo;                                        // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompanionManagerComponent_OnDeath) == 0x000008, "Wrong alignment on CompanionManagerComponent_OnDeath");
static_assert(sizeof(CompanionManagerComponent_OnDeath) == 0x000110, "Wrong size on CompanionManagerComponent_OnDeath");
static_assert(offsetof(CompanionManagerComponent_OnDeath, DamageInfo) == 0x000000, "Member 'CompanionManagerComponent_OnDeath::DamageInfo' has a wrong offset!");

// Function Indiana.CompanionManagerComponent.OnDifficultyChanged
// 0x0001 (0x0001 - 0x0000)
struct CompanionManagerComponent_OnDifficultyChanged final
{
public:
	EGameDifficulty                               NewDifficulty;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompanionManagerComponent_OnDifficultyChanged) == 0x000001, "Wrong alignment on CompanionManagerComponent_OnDifficultyChanged");
static_assert(sizeof(CompanionManagerComponent_OnDifficultyChanged) == 0x000001, "Wrong size on CompanionManagerComponent_OnDifficultyChanged");
static_assert(offsetof(CompanionManagerComponent_OnDifficultyChanged, NewDifficulty) == 0x000000, "Member 'CompanionManagerComponent_OnDifficultyChanged::NewDifficulty' has a wrong offset!");

// Function Indiana.CompanionManagerComponent.OnKill
// 0x0118 (0x0118 - 0x0000)
struct CompanionManagerComponent_OnKill final
{
public:
	class AActor*                                 Victim;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCauseDamageInfo                       CauseDamageInfo;                                   // 0x0008(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompanionManagerComponent_OnKill) == 0x000008, "Wrong alignment on CompanionManagerComponent_OnKill");
static_assert(sizeof(CompanionManagerComponent_OnKill) == 0x000118, "Wrong size on CompanionManagerComponent_OnKill");
static_assert(offsetof(CompanionManagerComponent_OnKill, Victim) == 0x000000, "Member 'CompanionManagerComponent_OnKill::Victim' has a wrong offset!");
static_assert(offsetof(CompanionManagerComponent_OnKill, CauseDamageInfo) == 0x000008, "Member 'CompanionManagerComponent_OnKill::CauseDamageInfo' has a wrong offset!");

// Function Indiana.CompanionManagerComponent.OnNewStateOfBeing
// 0x0002 (0x0002 - 0x0000)
struct CompanionManagerComponent_OnNewStateOfBeing final
{
public:
	EStateOfBeing                                 NewStateOfBeing;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStateOfBeing                                 OldStateOfBeing;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompanionManagerComponent_OnNewStateOfBeing) == 0x000001, "Wrong alignment on CompanionManagerComponent_OnNewStateOfBeing");
static_assert(sizeof(CompanionManagerComponent_OnNewStateOfBeing) == 0x000002, "Wrong size on CompanionManagerComponent_OnNewStateOfBeing");
static_assert(offsetof(CompanionManagerComponent_OnNewStateOfBeing, NewStateOfBeing) == 0x000000, "Member 'CompanionManagerComponent_OnNewStateOfBeing::NewStateOfBeing' has a wrong offset!");
static_assert(offsetof(CompanionManagerComponent_OnNewStateOfBeing, OldStateOfBeing) == 0x000001, "Member 'CompanionManagerComponent_OnNewStateOfBeing::OldStateOfBeing' has a wrong offset!");

// Function Indiana.CompanionManagerComponent.OnPlayerCinematicModeChanged
// 0x0001 (0x0001 - 0x0000)
struct CompanionManagerComponent_OnPlayerCinematicModeChanged final
{
public:
	bool                                          bCinematicModeEnabled;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompanionManagerComponent_OnPlayerCinematicModeChanged) == 0x000001, "Wrong alignment on CompanionManagerComponent_OnPlayerCinematicModeChanged");
static_assert(sizeof(CompanionManagerComponent_OnPlayerCinematicModeChanged) == 0x000001, "Wrong size on CompanionManagerComponent_OnPlayerCinematicModeChanged");
static_assert(offsetof(CompanionManagerComponent_OnPlayerCinematicModeChanged, bCinematicModeEnabled) == 0x000000, "Member 'CompanionManagerComponent_OnPlayerCinematicModeChanged::bCinematicModeEnabled' has a wrong offset!");

// Function Indiana.CompanionManagerComponent.OnPlayerIndividualDetected
// 0x0008 (0x0008 - 0x0000)
struct CompanionManagerComponent_OnPlayerIndividualDetected final
{
public:
	class AIndianaAiCharacter*                    Detector;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompanionManagerComponent_OnPlayerIndividualDetected) == 0x000008, "Wrong alignment on CompanionManagerComponent_OnPlayerIndividualDetected");
static_assert(sizeof(CompanionManagerComponent_OnPlayerIndividualDetected) == 0x000008, "Wrong size on CompanionManagerComponent_OnPlayerIndividualDetected");
static_assert(offsetof(CompanionManagerComponent_OnPlayerIndividualDetected, Detector) == 0x000000, "Member 'CompanionManagerComponent_OnPlayerIndividualDetected::Detector' has a wrong offset!");

// Function Indiana.CompanionManagerComponent.OnPlayerLevelChanged
// 0x0004 (0x0004 - 0x0000)
struct CompanionManagerComponent_OnPlayerLevelChanged final
{
public:
	int32                                         PlayerLevel;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompanionManagerComponent_OnPlayerLevelChanged) == 0x000004, "Wrong alignment on CompanionManagerComponent_OnPlayerLevelChanged");
static_assert(sizeof(CompanionManagerComponent_OnPlayerLevelChanged) == 0x000004, "Wrong size on CompanionManagerComponent_OnPlayerLevelChanged");
static_assert(offsetof(CompanionManagerComponent_OnPlayerLevelChanged, PlayerLevel) == 0x000000, "Member 'CompanionManagerComponent_OnPlayerLevelChanged::PlayerLevel' has a wrong offset!");

// Function Indiana.CompanionManagerComponent.OnRestartController
// 0x0008 (0x0008 - 0x0000)
struct CompanionManagerComponent_OnRestartController final
{
public:
	class AIndianaAiCharacter*                    Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompanionManagerComponent_OnRestartController) == 0x000008, "Wrong alignment on CompanionManagerComponent_OnRestartController");
static_assert(sizeof(CompanionManagerComponent_OnRestartController) == 0x000008, "Wrong size on CompanionManagerComponent_OnRestartController");
static_assert(offsetof(CompanionManagerComponent_OnRestartController, Character) == 0x000000, "Member 'CompanionManagerComponent_OnRestartController::Character' has a wrong offset!");

// Function Indiana.CompanionManagerComponent.SendCharacterToShip
// 0x0008 (0x0008 - 0x0000)
struct CompanionManagerComponent_SendCharacterToShip final
{
public:
	class AIndianaAiCharacter*                    Companion;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompanionManagerComponent_SendCharacterToShip) == 0x000008, "Wrong alignment on CompanionManagerComponent_SendCharacterToShip");
static_assert(sizeof(CompanionManagerComponent_SendCharacterToShip) == 0x000008, "Wrong size on CompanionManagerComponent_SendCharacterToShip");
static_assert(offsetof(CompanionManagerComponent_SendCharacterToShip, Companion) == 0x000000, "Member 'CompanionManagerComponent_SendCharacterToShip::Companion' has a wrong offset!");

// Function Indiana.CompanionManagerComponent.SetCompanionOutlineMode
// 0x0001 (0x0001 - 0x0000)
struct CompanionManagerComponent_SetCompanionOutlineMode final
{
public:
	ECompanionOutlineMode                         OutlineMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompanionManagerComponent_SetCompanionOutlineMode) == 0x000001, "Wrong alignment on CompanionManagerComponent_SetCompanionOutlineMode");
static_assert(sizeof(CompanionManagerComponent_SetCompanionOutlineMode) == 0x000001, "Wrong size on CompanionManagerComponent_SetCompanionOutlineMode");
static_assert(offsetof(CompanionManagerComponent_SetCompanionOutlineMode, OutlineMode) == 0x000000, "Member 'CompanionManagerComponent_SetCompanionOutlineMode::OutlineMode' has a wrong offset!");

// Function Indiana.CompanionManagerComponent.GetActiveCompanionWithSpecialID
// 0x0010 (0x0010 - 0x0000)
struct CompanionManagerComponent_GetActiveCompanionWithSpecialID final
{
public:
	ESpecialObsidianID                            SpecialID;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AIndianaAiCharacter*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompanionManagerComponent_GetActiveCompanionWithSpecialID) == 0x000008, "Wrong alignment on CompanionManagerComponent_GetActiveCompanionWithSpecialID");
static_assert(sizeof(CompanionManagerComponent_GetActiveCompanionWithSpecialID) == 0x000010, "Wrong size on CompanionManagerComponent_GetActiveCompanionWithSpecialID");
static_assert(offsetof(CompanionManagerComponent_GetActiveCompanionWithSpecialID, SpecialID) == 0x000000, "Member 'CompanionManagerComponent_GetActiveCompanionWithSpecialID::SpecialID' has a wrong offset!");
static_assert(offsetof(CompanionManagerComponent_GetActiveCompanionWithSpecialID, ReturnValue) == 0x000008, "Member 'CompanionManagerComponent_GetActiveCompanionWithSpecialID::ReturnValue' has a wrong offset!");

// Function Indiana.CompanionManagerComponent.GetCompanionFromSlot
// 0x0010 (0x0010 - 0x0000)
struct CompanionManagerComponent_GetCompanionFromSlot final
{
public:
	ECompanionSlot                                Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AIndianaAiCharacter*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompanionManagerComponent_GetCompanionFromSlot) == 0x000008, "Wrong alignment on CompanionManagerComponent_GetCompanionFromSlot");
static_assert(sizeof(CompanionManagerComponent_GetCompanionFromSlot) == 0x000010, "Wrong size on CompanionManagerComponent_GetCompanionFromSlot");
static_assert(offsetof(CompanionManagerComponent_GetCompanionFromSlot, Slot) == 0x000000, "Member 'CompanionManagerComponent_GetCompanionFromSlot::Slot' has a wrong offset!");
static_assert(offsetof(CompanionManagerComponent_GetCompanionFromSlot, ReturnValue) == 0x000008, "Member 'CompanionManagerComponent_GetCompanionFromSlot::ReturnValue' has a wrong offset!");

// Function Indiana.CompanionManagerComponent.IsPartyFull
// 0x0001 (0x0001 - 0x0000)
struct CompanionManagerComponent_IsPartyFull final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompanionManagerComponent_IsPartyFull) == 0x000001, "Wrong alignment on CompanionManagerComponent_IsPartyFull");
static_assert(sizeof(CompanionManagerComponent_IsPartyFull) == 0x000001, "Wrong size on CompanionManagerComponent_IsPartyFull");
static_assert(offsetof(CompanionManagerComponent_IsPartyFull, ReturnValue) == 0x000000, "Member 'CompanionManagerComponent_IsPartyFull::ReturnValue' has a wrong offset!");

// Function Indiana.InteractableAudioComponent.PlayCustomEventEffect
// 0x0008 (0x0008 - 0x0000)
struct InteractableAudioComponent_PlayCustomEventEffect final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractableAudioComponent_PlayCustomEventEffect) == 0x000004, "Wrong alignment on InteractableAudioComponent_PlayCustomEventEffect");
static_assert(sizeof(InteractableAudioComponent_PlayCustomEventEffect) == 0x000008, "Wrong size on InteractableAudioComponent_PlayCustomEventEffect");
static_assert(offsetof(InteractableAudioComponent_PlayCustomEventEffect, Name_0) == 0x000000, "Member 'InteractableAudioComponent_PlayCustomEventEffect::Name_0' has a wrong offset!");

// Function Indiana.InteractableAudioComponent.StopCustomEventEffect
// 0x0008 (0x0008 - 0x0000)
struct InteractableAudioComponent_StopCustomEventEffect final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractableAudioComponent_StopCustomEventEffect) == 0x000004, "Wrong alignment on InteractableAudioComponent_StopCustomEventEffect");
static_assert(sizeof(InteractableAudioComponent_StopCustomEventEffect) == 0x000008, "Wrong size on InteractableAudioComponent_StopCustomEventEffect");
static_assert(offsetof(InteractableAudioComponent_StopCustomEventEffect, Name_0) == 0x000000, "Member 'InteractableAudioComponent_StopCustomEventEffect::Name_0' has a wrong offset!");

// Function Indiana.HazardAudioComponent.Play
// 0x0001 (0x0001 - 0x0000)
struct HazardAudioComponent_Play final
{
public:
	EHazardEventType                              Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HazardAudioComponent_Play) == 0x000001, "Wrong alignment on HazardAudioComponent_Play");
static_assert(sizeof(HazardAudioComponent_Play) == 0x000001, "Wrong size on HazardAudioComponent_Play");
static_assert(offsetof(HazardAudioComponent_Play, Type) == 0x000000, "Member 'HazardAudioComponent_Play::Type' has a wrong offset!");

// Function Indiana.HazardAudioComponent.Stop
// 0x0001 (0x0001 - 0x0000)
struct HazardAudioComponent_Stop final
{
public:
	EHazardEventType                              Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HazardAudioComponent_Stop) == 0x000001, "Wrong alignment on HazardAudioComponent_Stop");
static_assert(sizeof(HazardAudioComponent_Stop) == 0x000001, "Wrong size on HazardAudioComponent_Stop");
static_assert(offsetof(HazardAudioComponent_Stop, Type) == 0x000000, "Member 'HazardAudioComponent_Stop::Type' has a wrong offset!");

// Function Indiana.BaseInventoryItemManagement.OnDragDrop_BreakDownItem
// 0x0008 (0x0008 - 0x0000)
struct BaseInventoryItemManagement_OnDragDrop_BreakDownItem final
{
public:
	class UIndianaDragDropOperation*              Operation;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseInventoryItemManagement_OnDragDrop_BreakDownItem) == 0x000008, "Wrong alignment on BaseInventoryItemManagement_OnDragDrop_BreakDownItem");
static_assert(sizeof(BaseInventoryItemManagement_OnDragDrop_BreakDownItem) == 0x000008, "Wrong size on BaseInventoryItemManagement_OnDragDrop_BreakDownItem");
static_assert(offsetof(BaseInventoryItemManagement_OnDragDrop_BreakDownItem, Operation) == 0x000000, "Member 'BaseInventoryItemManagement_OnDragDrop_BreakDownItem::Operation' has a wrong offset!");

// Function Indiana.BaseInventoryItemManagement.OnDragDrop_ClearWeaponSlot
// 0x0008 (0x0008 - 0x0000)
struct BaseInventoryItemManagement_OnDragDrop_ClearWeaponSlot final
{
public:
	class UIndianaDragDropOperation*              Operation;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseInventoryItemManagement_OnDragDrop_ClearWeaponSlot) == 0x000008, "Wrong alignment on BaseInventoryItemManagement_OnDragDrop_ClearWeaponSlot");
static_assert(sizeof(BaseInventoryItemManagement_OnDragDrop_ClearWeaponSlot) == 0x000008, "Wrong size on BaseInventoryItemManagement_OnDragDrop_ClearWeaponSlot");
static_assert(offsetof(BaseInventoryItemManagement_OnDragDrop_ClearWeaponSlot, Operation) == 0x000000, "Member 'BaseInventoryItemManagement_OnDragDrop_ClearWeaponSlot::Operation' has a wrong offset!");

// Function Indiana.BaseInventoryItemManagement.OnDragDrop_JunkItem
// 0x0008 (0x0008 - 0x0000)
struct BaseInventoryItemManagement_OnDragDrop_JunkItem final
{
public:
	class UIndianaDragDropOperation*              Operation;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseInventoryItemManagement_OnDragDrop_JunkItem) == 0x000008, "Wrong alignment on BaseInventoryItemManagement_OnDragDrop_JunkItem");
static_assert(sizeof(BaseInventoryItemManagement_OnDragDrop_JunkItem) == 0x000008, "Wrong size on BaseInventoryItemManagement_OnDragDrop_JunkItem");
static_assert(offsetof(BaseInventoryItemManagement_OnDragDrop_JunkItem, Operation) == 0x000000, "Member 'BaseInventoryItemManagement_OnDragDrop_JunkItem::Operation' has a wrong offset!");

// Function Indiana.BaseInventoryItemManagement.OnDragDrop_SetArmorSlot
// 0x0008 (0x0008 - 0x0000)
struct BaseInventoryItemManagement_OnDragDrop_SetArmorSlot final
{
public:
	class UIndianaDragDropOperation*              Operation;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseInventoryItemManagement_OnDragDrop_SetArmorSlot) == 0x000008, "Wrong alignment on BaseInventoryItemManagement_OnDragDrop_SetArmorSlot");
static_assert(sizeof(BaseInventoryItemManagement_OnDragDrop_SetArmorSlot) == 0x000008, "Wrong size on BaseInventoryItemManagement_OnDragDrop_SetArmorSlot");
static_assert(offsetof(BaseInventoryItemManagement_OnDragDrop_SetArmorSlot, Operation) == 0x000000, "Member 'BaseInventoryItemManagement_OnDragDrop_SetArmorSlot::Operation' has a wrong offset!");

// Function Indiana.CompanionEquipmentWidget.OnDragDrop_EquipItem
// 0x0008 (0x0008 - 0x0000)
struct CompanionEquipmentWidget_OnDragDrop_EquipItem final
{
public:
	class UIndianaDragDropOperation*              Operation;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompanionEquipmentWidget_OnDragDrop_EquipItem) == 0x000008, "Wrong alignment on CompanionEquipmentWidget_OnDragDrop_EquipItem");
static_assert(sizeof(CompanionEquipmentWidget_OnDragDrop_EquipItem) == 0x000008, "Wrong size on CompanionEquipmentWidget_OnDragDrop_EquipItem");
static_assert(offsetof(CompanionEquipmentWidget_OnDragDrop_EquipItem, Operation) == 0x000000, "Member 'CompanionEquipmentWidget_OnDragDrop_EquipItem::Operation' has a wrong offset!");

// Function Indiana.CompanionEquipmentWidget.OnItemAddedToPlayerInventory
// 0x0010 (0x0010 - 0x0000)
struct CompanionEquipmentWidget_OnItemAddedToPlayerInventory final
{
public:
	struct FItemStack                             ItemStack;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompanionEquipmentWidget_OnItemAddedToPlayerInventory) == 0x000008, "Wrong alignment on CompanionEquipmentWidget_OnItemAddedToPlayerInventory");
static_assert(sizeof(CompanionEquipmentWidget_OnItemAddedToPlayerInventory) == 0x000010, "Wrong size on CompanionEquipmentWidget_OnItemAddedToPlayerInventory");
static_assert(offsetof(CompanionEquipmentWidget_OnItemAddedToPlayerInventory, ItemStack) == 0x000000, "Member 'CompanionEquipmentWidget_OnItemAddedToPlayerInventory::ItemStack' has a wrong offset!");

// Function Indiana.CompanionEquipmentWidget.OnItemRemovedFromPlayerInventory
// 0x0010 (0x0010 - 0x0000)
struct CompanionEquipmentWidget_OnItemRemovedFromPlayerInventory final
{
public:
	struct FItemStack                             ItemStack;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompanionEquipmentWidget_OnItemRemovedFromPlayerInventory) == 0x000008, "Wrong alignment on CompanionEquipmentWidget_OnItemRemovedFromPlayerInventory");
static_assert(sizeof(CompanionEquipmentWidget_OnItemRemovedFromPlayerInventory) == 0x000010, "Wrong size on CompanionEquipmentWidget_OnItemRemovedFromPlayerInventory");
static_assert(offsetof(CompanionEquipmentWidget_OnItemRemovedFromPlayerInventory, ItemStack) == 0x000000, "Member 'CompanionEquipmentWidget_OnItemRemovedFromPlayerInventory::ItemStack' has a wrong offset!");

// Function Indiana.HealthKitTooltipWidget.FontSizeChanged
// 0x0004 (0x0004 - 0x0000)
struct HealthKitTooltipWidget_FontSizeChanged final
{
public:
	int32                                         NewModifier;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthKitTooltipWidget_FontSizeChanged) == 0x000004, "Wrong alignment on HealthKitTooltipWidget_FontSizeChanged");
static_assert(sizeof(HealthKitTooltipWidget_FontSizeChanged) == 0x000004, "Wrong size on HealthKitTooltipWidget_FontSizeChanged");
static_assert(offsetof(HealthKitTooltipWidget_FontSizeChanged, NewModifier) == 0x000000, "Member 'HealthKitTooltipWidget_FontSizeChanged::NewModifier' has a wrong offset!");

// Function Indiana.OnWeaponHolstered.OnWeaponHolstered
// 0x0008 (0x0008 - 0x0000)
struct OnWeaponHolstered_OnWeaponHolstered final
{
public:
	class UWeapon*                                Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnWeaponHolstered_OnWeaponHolstered) == 0x000008, "Wrong alignment on OnWeaponHolstered_OnWeaponHolstered");
static_assert(sizeof(OnWeaponHolstered_OnWeaponHolstered) == 0x000008, "Wrong size on OnWeaponHolstered_OnWeaponHolstered");
static_assert(offsetof(OnWeaponHolstered_OnWeaponHolstered, Weapon) == 0x000000, "Member 'OnWeaponHolstered_OnWeaponHolstered::Weapon' has a wrong offset!");

// Function Indiana.ComputerTerminalContainerWidget.OnConversationStateChange
// 0x0001 (0x0001 - 0x0000)
struct ComputerTerminalContainerWidget_OnConversationStateChange final
{
public:
	bool                                          bHasStarted;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ComputerTerminalContainerWidget_OnConversationStateChange) == 0x000001, "Wrong alignment on ComputerTerminalContainerWidget_OnConversationStateChange");
static_assert(sizeof(ComputerTerminalContainerWidget_OnConversationStateChange) == 0x000001, "Wrong size on ComputerTerminalContainerWidget_OnConversationStateChange");
static_assert(offsetof(ComputerTerminalContainerWidget_OnConversationStateChange, bHasStarted) == 0x000000, "Member 'ComputerTerminalContainerWidget_OnConversationStateChange::bHasStarted' has a wrong offset!");

// Function Indiana.AudioHelpers.LoadAkAudioEventReference
// 0x0018 (0x0018 - 0x0000)
struct AudioHelpers_LoadAkAudioEventReference final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioHelpers_LoadAkAudioEventReference) == 0x000008, "Wrong alignment on AudioHelpers_LoadAkAudioEventReference");
static_assert(sizeof(AudioHelpers_LoadAkAudioEventReference) == 0x000018, "Wrong size on AudioHelpers_LoadAkAudioEventReference");
static_assert(offsetof(AudioHelpers_LoadAkAudioEventReference, Path) == 0x000000, "Member 'AudioHelpers_LoadAkAudioEventReference::Path' has a wrong offset!");
static_assert(offsetof(AudioHelpers_LoadAkAudioEventReference, ReturnValue) == 0x000010, "Member 'AudioHelpers_LoadAkAudioEventReference::ReturnValue' has a wrong offset!");

// Function Indiana.CompassWidget.OnCompassSettingChanged
// 0x0004 (0x0004 - 0x0000)
struct CompassWidget_OnCompassSettingChanged final
{
public:
	int32                                         CompassVisibilityModeIn;                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompassWidget_OnCompassSettingChanged) == 0x000004, "Wrong alignment on CompassWidget_OnCompassSettingChanged");
static_assert(sizeof(CompassWidget_OnCompassSettingChanged) == 0x000004, "Wrong size on CompassWidget_OnCompassSettingChanged");
static_assert(offsetof(CompassWidget_OnCompassSettingChanged, CompassVisibilityModeIn) == 0x000000, "Member 'CompassWidget_OnCompassSettingChanged::CompassVisibilityModeIn' has a wrong offset!");

// Function Indiana.CompassWidget.OnEnemyAdded
// 0x0008 (0x0008 - 0x0000)
struct CompassWidget_OnEnemyAdded final
{
public:
	class AIndianaAiCharacter*                    Detector;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompassWidget_OnEnemyAdded) == 0x000008, "Wrong alignment on CompassWidget_OnEnemyAdded");
static_assert(sizeof(CompassWidget_OnEnemyAdded) == 0x000008, "Wrong size on CompassWidget_OnEnemyAdded");
static_assert(offsetof(CompassWidget_OnEnemyAdded, Detector) == 0x000000, "Member 'CompassWidget_OnEnemyAdded::Detector' has a wrong offset!");

// Function Indiana.CompassWidget.OnEnemyRemoved
// 0x0008 (0x0008 - 0x0000)
struct CompassWidget_OnEnemyRemoved final
{
public:
	class AIndianaAiCharacter*                    Detector;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompassWidget_OnEnemyRemoved) == 0x000008, "Wrong alignment on CompassWidget_OnEnemyRemoved");
static_assert(sizeof(CompassWidget_OnEnemyRemoved) == 0x000008, "Wrong size on CompassWidget_OnEnemyRemoved");
static_assert(offsetof(CompassWidget_OnEnemyRemoved, Detector) == 0x000000, "Member 'CompassWidget_OnEnemyRemoved::Detector' has a wrong offset!");

// Function Indiana.CompassWidget.OnHUDVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct CompassWidget_OnHUDVisibilityChanged final
{
public:
	bool                                          bHUDVisible;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompassWidget_OnHUDVisibilityChanged) == 0x000001, "Wrong alignment on CompassWidget_OnHUDVisibilityChanged");
static_assert(sizeof(CompassWidget_OnHUDVisibilityChanged) == 0x000001, "Wrong size on CompassWidget_OnHUDVisibilityChanged");
static_assert(offsetof(CompassWidget_OnHUDVisibilityChanged, bHUDVisible) == 0x000000, "Member 'CompassWidget_OnHUDVisibilityChanged::bHUDVisible' has a wrong offset!");

// Function Indiana.OnFastTravelInitiated.OnFastTravelInitiated
// 0x0010 (0x0010 - 0x0000)
struct OnFastTravelInitiated_OnFastTravelInitiated final
{
public:
	const class UTravelDestinationData*           TravelData;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimePassed;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTravelFromMapLedger;                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnFastTravelInitiated_OnFastTravelInitiated) == 0x000008, "Wrong alignment on OnFastTravelInitiated_OnFastTravelInitiated");
static_assert(sizeof(OnFastTravelInitiated_OnFastTravelInitiated) == 0x000010, "Wrong size on OnFastTravelInitiated_OnFastTravelInitiated");
static_assert(offsetof(OnFastTravelInitiated_OnFastTravelInitiated, TravelData) == 0x000000, "Member 'OnFastTravelInitiated_OnFastTravelInitiated::TravelData' has a wrong offset!");
static_assert(offsetof(OnFastTravelInitiated_OnFastTravelInitiated, TimePassed) == 0x000008, "Member 'OnFastTravelInitiated_OnFastTravelInitiated::TimePassed' has a wrong offset!");
static_assert(offsetof(OnFastTravelInitiated_OnFastTravelInitiated, bTravelFromMapLedger) == 0x00000C, "Member 'OnFastTravelInitiated_OnFastTravelInitiated::bTravelFromMapLedger' has a wrong offset!");

// Function Indiana.OnAcrophobiaEnabled.OnAcrophobiaChanged
// 0x0001 (0x0001 - 0x0000)
struct OnAcrophobiaEnabled_OnAcrophobiaChanged final
{
public:
	bool                                          bNowEnabled;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnAcrophobiaEnabled_OnAcrophobiaChanged) == 0x000001, "Wrong alignment on OnAcrophobiaEnabled_OnAcrophobiaChanged");
static_assert(sizeof(OnAcrophobiaEnabled_OnAcrophobiaChanged) == 0x000001, "Wrong size on OnAcrophobiaEnabled_OnAcrophobiaChanged");
static_assert(offsetof(OnAcrophobiaEnabled_OnAcrophobiaChanged, bNowEnabled) == 0x000000, "Member 'OnAcrophobiaEnabled_OnAcrophobiaChanged::bNowEnabled' has a wrong offset!");

// Function Indiana.Encounter.IterateThroughSpawnedActors
// 0x0010 (0x0010 - 0x0000)
struct Encounter_IterateThroughSpawnedActors final
{
public:
	TDelegate<void(class AActor* Actor)>          GenericFunctionCall;                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Encounter_IterateThroughSpawnedActors) == 0x000004, "Wrong alignment on Encounter_IterateThroughSpawnedActors");
static_assert(sizeof(Encounter_IterateThroughSpawnedActors) == 0x000010, "Wrong size on Encounter_IterateThroughSpawnedActors");
static_assert(offsetof(Encounter_IterateThroughSpawnedActors, GenericFunctionCall) == 0x000000, "Member 'Encounter_IterateThroughSpawnedActors::GenericFunctionCall' has a wrong offset!");

// Function Indiana.Encounter.OnActivationBeginOverlap
// 0x0010 (0x0010 - 0x0000)
struct Encounter_OnActivationBeginOverlap final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Encounter_OnActivationBeginOverlap) == 0x000008, "Wrong alignment on Encounter_OnActivationBeginOverlap");
static_assert(sizeof(Encounter_OnActivationBeginOverlap) == 0x000010, "Wrong size on Encounter_OnActivationBeginOverlap");
static_assert(offsetof(Encounter_OnActivationBeginOverlap, OverlappedActor) == 0x000000, "Member 'Encounter_OnActivationBeginOverlap::OverlappedActor' has a wrong offset!");
static_assert(offsetof(Encounter_OnActivationBeginOverlap, OtherActor) == 0x000008, "Member 'Encounter_OnActivationBeginOverlap::OtherActor' has a wrong offset!");

// Function Indiana.Encounter.OnActivationEndOverlap
// 0x0010 (0x0010 - 0x0000)
struct Encounter_OnActivationEndOverlap final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Encounter_OnActivationEndOverlap) == 0x000008, "Wrong alignment on Encounter_OnActivationEndOverlap");
static_assert(sizeof(Encounter_OnActivationEndOverlap) == 0x000010, "Wrong size on Encounter_OnActivationEndOverlap");
static_assert(offsetof(Encounter_OnActivationEndOverlap, OverlappedActor) == 0x000000, "Member 'Encounter_OnActivationEndOverlap::OverlappedActor' has a wrong offset!");
static_assert(offsetof(Encounter_OnActivationEndOverlap, OtherActor) == 0x000008, "Member 'Encounter_OnActivationEndOverlap::OtherActor' has a wrong offset!");

// Function Indiana.Encounter.OnNodeActorAlertState
// 0x0018 (0x0018 - 0x0000)
struct Encounter_OnNodeActorAlertState final
{
public:
	class ASpawnNodeBase*                         Node;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAlertState                                   State;                                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestoring;                                        // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Encounter_OnNodeActorAlertState) == 0x000008, "Wrong alignment on Encounter_OnNodeActorAlertState");
static_assert(sizeof(Encounter_OnNodeActorAlertState) == 0x000018, "Wrong size on Encounter_OnNodeActorAlertState");
static_assert(offsetof(Encounter_OnNodeActorAlertState, Node) == 0x000000, "Member 'Encounter_OnNodeActorAlertState::Node' has a wrong offset!");
static_assert(offsetof(Encounter_OnNodeActorAlertState, TargetActor) == 0x000008, "Member 'Encounter_OnNodeActorAlertState::TargetActor' has a wrong offset!");
static_assert(offsetof(Encounter_OnNodeActorAlertState, State) == 0x000010, "Member 'Encounter_OnNodeActorAlertState::State' has a wrong offset!");
static_assert(offsetof(Encounter_OnNodeActorAlertState, bRestoring) == 0x000011, "Member 'Encounter_OnNodeActorAlertState::bRestoring' has a wrong offset!");

// Function Indiana.Encounter.OnNodeActorAwareOfPlayer
// 0x0010 (0x0010 - 0x0000)
struct Encounter_OnNodeActorAwareOfPlayer final
{
public:
	class ASpawnNodeBase*                         Node;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestoring;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Encounter_OnNodeActorAwareOfPlayer) == 0x000008, "Wrong alignment on Encounter_OnNodeActorAwareOfPlayer");
static_assert(sizeof(Encounter_OnNodeActorAwareOfPlayer) == 0x000010, "Wrong size on Encounter_OnNodeActorAwareOfPlayer");
static_assert(offsetof(Encounter_OnNodeActorAwareOfPlayer, Node) == 0x000000, "Member 'Encounter_OnNodeActorAwareOfPlayer::Node' has a wrong offset!");
static_assert(offsetof(Encounter_OnNodeActorAwareOfPlayer, bRestoring) == 0x000008, "Member 'Encounter_OnNodeActorAwareOfPlayer::bRestoring' has a wrong offset!");

// Function Indiana.Encounter.OnNodeActorCombatState
// 0x0010 (0x0010 - 0x0000)
struct Encounter_OnNodeActorCombatState final
{
public:
	class ASpawnNodeBase*                         Node;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInCombat;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestoring;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Encounter_OnNodeActorCombatState) == 0x000008, "Wrong alignment on Encounter_OnNodeActorCombatState");
static_assert(sizeof(Encounter_OnNodeActorCombatState) == 0x000010, "Wrong size on Encounter_OnNodeActorCombatState");
static_assert(offsetof(Encounter_OnNodeActorCombatState, Node) == 0x000000, "Member 'Encounter_OnNodeActorCombatState::Node' has a wrong offset!");
static_assert(offsetof(Encounter_OnNodeActorCombatState, bInCombat) == 0x000008, "Member 'Encounter_OnNodeActorCombatState::bInCombat' has a wrong offset!");
static_assert(offsetof(Encounter_OnNodeActorCombatState, bRestoring) == 0x000009, "Member 'Encounter_OnNodeActorCombatState::bRestoring' has a wrong offset!");

// Function Indiana.Encounter.OnNodeActorDamaged
// 0x0118 (0x0118 - 0x0000)
struct Encounter_OnNodeActorDamaged final
{
public:
	class ASpawnNodeBase*                         Node;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCauseDamageInfo                       CauseDamageInfo;                                   // 0x0008(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Encounter_OnNodeActorDamaged) == 0x000008, "Wrong alignment on Encounter_OnNodeActorDamaged");
static_assert(sizeof(Encounter_OnNodeActorDamaged) == 0x000118, "Wrong size on Encounter_OnNodeActorDamaged");
static_assert(offsetof(Encounter_OnNodeActorDamaged, Node) == 0x000000, "Member 'Encounter_OnNodeActorDamaged::Node' has a wrong offset!");
static_assert(offsetof(Encounter_OnNodeActorDamaged, CauseDamageInfo) == 0x000008, "Member 'Encounter_OnNodeActorDamaged::CauseDamageInfo' has a wrong offset!");

// Function Indiana.Encounter.OnNodeActorDespawned
// 0x0008 (0x0008 - 0x0000)
struct Encounter_OnNodeActorDespawned final
{
public:
	class ASpawnNodeBase*                         Node;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Encounter_OnNodeActorDespawned) == 0x000008, "Wrong alignment on Encounter_OnNodeActorDespawned");
static_assert(sizeof(Encounter_OnNodeActorDespawned) == 0x000008, "Wrong size on Encounter_OnNodeActorDespawned");
static_assert(offsetof(Encounter_OnNodeActorDespawned, Node) == 0x000000, "Member 'Encounter_OnNodeActorDespawned::Node' has a wrong offset!");

// Function Indiana.Encounter.OnNodeActorKilled
// 0x0010 (0x0010 - 0x0000)
struct Encounter_OnNodeActorKilled final
{
public:
	class ASpawnNodeBase*                         Node;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFirstKill;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Encounter_OnNodeActorKilled) == 0x000008, "Wrong alignment on Encounter_OnNodeActorKilled");
static_assert(sizeof(Encounter_OnNodeActorKilled) == 0x000010, "Wrong size on Encounter_OnNodeActorKilled");
static_assert(offsetof(Encounter_OnNodeActorKilled, Node) == 0x000000, "Member 'Encounter_OnNodeActorKilled::Node' has a wrong offset!");
static_assert(offsetof(Encounter_OnNodeActorKilled, bFirstKill) == 0x000008, "Member 'Encounter_OnNodeActorKilled::bFirstKill' has a wrong offset!");

// Function Indiana.Encounter.OnNodeActorSpawned
// 0x0010 (0x0010 - 0x0000)
struct Encounter_OnNodeActorSpawned final
{
public:
	class ASpawnNodeBase*                         Node;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDamageable;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFirstSpawn;                                       // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Encounter_OnNodeActorSpawned) == 0x000008, "Wrong alignment on Encounter_OnNodeActorSpawned");
static_assert(sizeof(Encounter_OnNodeActorSpawned) == 0x000010, "Wrong size on Encounter_OnNodeActorSpawned");
static_assert(offsetof(Encounter_OnNodeActorSpawned, Node) == 0x000000, "Member 'Encounter_OnNodeActorSpawned::Node' has a wrong offset!");
static_assert(offsetof(Encounter_OnNodeActorSpawned, bDamageable) == 0x000008, "Member 'Encounter_OnNodeActorSpawned::bDamageable' has a wrong offset!");
static_assert(offsetof(Encounter_OnNodeActorSpawned, bFirstSpawn) == 0x000009, "Member 'Encounter_OnNodeActorSpawned::bFirstSpawn' has a wrong offset!");

// Function Indiana.Encounter.OnNodeBeginSpawning
// 0x0008 (0x0008 - 0x0000)
struct Encounter_OnNodeBeginSpawning final
{
public:
	class ASpawnNodeBase*                         Node;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Encounter_OnNodeBeginSpawning) == 0x000008, "Wrong alignment on Encounter_OnNodeBeginSpawning");
static_assert(sizeof(Encounter_OnNodeBeginSpawning) == 0x000008, "Wrong size on Encounter_OnNodeBeginSpawning");
static_assert(offsetof(Encounter_OnNodeBeginSpawning, Node) == 0x000000, "Member 'Encounter_OnNodeBeginSpawning::Node' has a wrong offset!");

// Function Indiana.Encounter.SetEncounterEnabled
// 0x0001 (0x0001 - 0x0000)
struct Encounter_SetEncounterEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Encounter_SetEncounterEnabled) == 0x000001, "Wrong alignment on Encounter_SetEncounterEnabled");
static_assert(sizeof(Encounter_SetEncounterEnabled) == 0x000001, "Wrong size on Encounter_SetEncounterEnabled");
static_assert(offsetof(Encounter_SetEncounterEnabled, bEnabled) == 0x000000, "Member 'Encounter_SetEncounterEnabled::bEnabled' has a wrong offset!");

// Function Indiana.Encounter.HasEncounterCompleted
// 0x0001 (0x0001 - 0x0000)
struct Encounter_HasEncounterCompleted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Encounter_HasEncounterCompleted) == 0x000001, "Wrong alignment on Encounter_HasEncounterCompleted");
static_assert(sizeof(Encounter_HasEncounterCompleted) == 0x000001, "Wrong size on Encounter_HasEncounterCompleted");
static_assert(offsetof(Encounter_HasEncounterCompleted, ReturnValue) == 0x000000, "Member 'Encounter_HasEncounterCompleted::ReturnValue' has a wrong offset!");

// Function Indiana.Encounter.IsEncounterActive
// 0x0001 (0x0001 - 0x0000)
struct Encounter_IsEncounterActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Encounter_IsEncounterActive) == 0x000001, "Wrong alignment on Encounter_IsEncounterActive");
static_assert(sizeof(Encounter_IsEncounterActive) == 0x000001, "Wrong size on Encounter_IsEncounterActive");
static_assert(offsetof(Encounter_IsEncounterActive, ReturnValue) == 0x000000, "Member 'Encounter_IsEncounterActive::ReturnValue' has a wrong offset!");

// Function Indiana.OnSkillUpdated.OnSkillUpdated
// 0x0008 (0x0008 - 0x0000)
struct OnSkillUpdated_OnSkillUpdated final
{
public:
	ESkill                                        Skill;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NewValue;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnSkillUpdated_OnSkillUpdated) == 0x000004, "Wrong alignment on OnSkillUpdated_OnSkillUpdated");
static_assert(sizeof(OnSkillUpdated_OnSkillUpdated) == 0x000008, "Wrong size on OnSkillUpdated_OnSkillUpdated");
static_assert(offsetof(OnSkillUpdated_OnSkillUpdated, Skill) == 0x000000, "Member 'OnSkillUpdated_OnSkillUpdated::Skill' has a wrong offset!");
static_assert(offsetof(OnSkillUpdated_OnSkillUpdated, NewValue) == 0x000004, "Member 'OnSkillUpdated_OnSkillUpdated::NewValue' has a wrong offset!");

// Function Indiana.OnOccupiedElevatorMove.OnOccupiedElevatorMove
// 0x0008 (0x0008 - 0x0000)
struct OnOccupiedElevatorMove_OnOccupiedElevatorMove final
{
public:
	class AElevator*                              Elevator;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnOccupiedElevatorMove_OnOccupiedElevatorMove) == 0x000008, "Wrong alignment on OnOccupiedElevatorMove_OnOccupiedElevatorMove");
static_assert(sizeof(OnOccupiedElevatorMove_OnOccupiedElevatorMove) == 0x000008, "Wrong size on OnOccupiedElevatorMove_OnOccupiedElevatorMove");
static_assert(offsetof(OnOccupiedElevatorMove_OnOccupiedElevatorMove, Elevator) == 0x000000, "Member 'OnOccupiedElevatorMove_OnOccupiedElevatorMove::Elevator' has a wrong offset!");

// Function Indiana.FlipbookWidget.BeginPlay
// 0x0008 (0x0008 - 0x0000)
struct FlipbookWidget_BeginPlay final
{
public:
	bool                                          bInShouldLoop;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayFromFrame;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlipbookWidget_BeginPlay) == 0x000004, "Wrong alignment on FlipbookWidget_BeginPlay");
static_assert(sizeof(FlipbookWidget_BeginPlay) == 0x000008, "Wrong size on FlipbookWidget_BeginPlay");
static_assert(offsetof(FlipbookWidget_BeginPlay, bInShouldLoop) == 0x000000, "Member 'FlipbookWidget_BeginPlay::bInShouldLoop' has a wrong offset!");
static_assert(offsetof(FlipbookWidget_BeginPlay, PlayFromFrame) == 0x000004, "Member 'FlipbookWidget_BeginPlay::PlayFromFrame' has a wrong offset!");

// Function Indiana.FlipbookWidget.IsPlaying
// 0x0001 (0x0001 - 0x0000)
struct FlipbookWidget_IsPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlipbookWidget_IsPlaying) == 0x000001, "Wrong alignment on FlipbookWidget_IsPlaying");
static_assert(sizeof(FlipbookWidget_IsPlaying) == 0x000001, "Wrong size on FlipbookWidget_IsPlaying");
static_assert(offsetof(FlipbookWidget_IsPlaying, ReturnValue) == 0x000000, "Member 'FlipbookWidget_IsPlaying::ReturnValue' has a wrong offset!");

// Function Indiana.ComboBoxStringBase.AddOption
// 0x0010 (0x0010 - 0x0000)
struct ComboBoxStringBase_AddOption final
{
public:
	class FString                                 Option;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ComboBoxStringBase_AddOption) == 0x000008, "Wrong alignment on ComboBoxStringBase_AddOption");
static_assert(sizeof(ComboBoxStringBase_AddOption) == 0x000010, "Wrong size on ComboBoxStringBase_AddOption");
static_assert(offsetof(ComboBoxStringBase_AddOption, Option) == 0x000000, "Member 'ComboBoxStringBase_AddOption::Option' has a wrong offset!");

// DelegateFunction Indiana.ComboBoxStringBase.OnSelectionChangedEvent__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct ComboBoxStringBase_OnSelectionChangedEvent__DelegateSignature final
{
public:
	class FString                                 SelectedItem;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESelectInfo                                   SelectionType;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ComboBoxStringBase_OnSelectionChangedEvent__DelegateSignature) == 0x000008, "Wrong alignment on ComboBoxStringBase_OnSelectionChangedEvent__DelegateSignature");
static_assert(sizeof(ComboBoxStringBase_OnSelectionChangedEvent__DelegateSignature) == 0x000018, "Wrong size on ComboBoxStringBase_OnSelectionChangedEvent__DelegateSignature");
static_assert(offsetof(ComboBoxStringBase_OnSelectionChangedEvent__DelegateSignature, SelectedItem) == 0x000000, "Member 'ComboBoxStringBase_OnSelectionChangedEvent__DelegateSignature::SelectedItem' has a wrong offset!");
static_assert(offsetof(ComboBoxStringBase_OnSelectionChangedEvent__DelegateSignature, SelectionType) == 0x000010, "Member 'ComboBoxStringBase_OnSelectionChangedEvent__DelegateSignature::SelectionType' has a wrong offset!");

// Function Indiana.ComboBoxStringBase.RemoveOption
// 0x0018 (0x0018 - 0x0000)
struct ComboBoxStringBase_RemoveOption final
{
public:
	class FString                                 Option;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ComboBoxStringBase_RemoveOption) == 0x000008, "Wrong alignment on ComboBoxStringBase_RemoveOption");
static_assert(sizeof(ComboBoxStringBase_RemoveOption) == 0x000018, "Wrong size on ComboBoxStringBase_RemoveOption");
static_assert(offsetof(ComboBoxStringBase_RemoveOption, Option) == 0x000000, "Member 'ComboBoxStringBase_RemoveOption::Option' has a wrong offset!");
static_assert(offsetof(ComboBoxStringBase_RemoveOption, ReturnValue) == 0x000010, "Member 'ComboBoxStringBase_RemoveOption::ReturnValue' has a wrong offset!");

// Function Indiana.ComboBoxStringBase.SetSelectedOption
// 0x0010 (0x0010 - 0x0000)
struct ComboBoxStringBase_SetSelectedOption final
{
public:
	class FString                                 Option;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ComboBoxStringBase_SetSelectedOption) == 0x000008, "Wrong alignment on ComboBoxStringBase_SetSelectedOption");
static_assert(sizeof(ComboBoxStringBase_SetSelectedOption) == 0x000010, "Wrong size on ComboBoxStringBase_SetSelectedOption");
static_assert(offsetof(ComboBoxStringBase_SetSelectedOption, Option) == 0x000000, "Member 'ComboBoxStringBase_SetSelectedOption::Option' has a wrong offset!");

// Function Indiana.ComboBoxStringBase.FindOptionIndex
// 0x0018 (0x0018 - 0x0000)
struct ComboBoxStringBase_FindOptionIndex final
{
public:
	class FString                                 Option;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ComboBoxStringBase_FindOptionIndex) == 0x000008, "Wrong alignment on ComboBoxStringBase_FindOptionIndex");
static_assert(sizeof(ComboBoxStringBase_FindOptionIndex) == 0x000018, "Wrong size on ComboBoxStringBase_FindOptionIndex");
static_assert(offsetof(ComboBoxStringBase_FindOptionIndex, Option) == 0x000000, "Member 'ComboBoxStringBase_FindOptionIndex::Option' has a wrong offset!");
static_assert(offsetof(ComboBoxStringBase_FindOptionIndex, ReturnValue) == 0x000010, "Member 'ComboBoxStringBase_FindOptionIndex::ReturnValue' has a wrong offset!");

// Function Indiana.ComboBoxStringBase.GetOptionAtIndex
// 0x0018 (0x0018 - 0x0000)
struct ComboBoxStringBase_GetOptionAtIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ComboBoxStringBase_GetOptionAtIndex) == 0x000008, "Wrong alignment on ComboBoxStringBase_GetOptionAtIndex");
static_assert(sizeof(ComboBoxStringBase_GetOptionAtIndex) == 0x000018, "Wrong size on ComboBoxStringBase_GetOptionAtIndex");
static_assert(offsetof(ComboBoxStringBase_GetOptionAtIndex, Index_0) == 0x000000, "Member 'ComboBoxStringBase_GetOptionAtIndex::Index_0' has a wrong offset!");
static_assert(offsetof(ComboBoxStringBase_GetOptionAtIndex, ReturnValue) == 0x000008, "Member 'ComboBoxStringBase_GetOptionAtIndex::ReturnValue' has a wrong offset!");

// Function Indiana.ComboBoxStringBase.GetOptionCount
// 0x0004 (0x0004 - 0x0000)
struct ComboBoxStringBase_GetOptionCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ComboBoxStringBase_GetOptionCount) == 0x000004, "Wrong alignment on ComboBoxStringBase_GetOptionCount");
static_assert(sizeof(ComboBoxStringBase_GetOptionCount) == 0x000004, "Wrong size on ComboBoxStringBase_GetOptionCount");
static_assert(offsetof(ComboBoxStringBase_GetOptionCount, ReturnValue) == 0x000000, "Member 'ComboBoxStringBase_GetOptionCount::ReturnValue' has a wrong offset!");

// Function Indiana.ComboBoxStringBase.GetSelectedOption
// 0x0010 (0x0010 - 0x0000)
struct ComboBoxStringBase_GetSelectedOption final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ComboBoxStringBase_GetSelectedOption) == 0x000008, "Wrong alignment on ComboBoxStringBase_GetSelectedOption");
static_assert(sizeof(ComboBoxStringBase_GetSelectedOption) == 0x000010, "Wrong size on ComboBoxStringBase_GetSelectedOption");
static_assert(offsetof(ComboBoxStringBase_GetSelectedOption, ReturnValue) == 0x000000, "Member 'ComboBoxStringBase_GetSelectedOption::ReturnValue' has a wrong offset!");

// Function Indiana.ComboBoxStringBase.GetSelectedOptionIndex
// 0x0004 (0x0004 - 0x0000)
struct ComboBoxStringBase_GetSelectedOptionIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ComboBoxStringBase_GetSelectedOptionIndex) == 0x000004, "Wrong alignment on ComboBoxStringBase_GetSelectedOptionIndex");
static_assert(sizeof(ComboBoxStringBase_GetSelectedOptionIndex) == 0x000004, "Wrong size on ComboBoxStringBase_GetSelectedOptionIndex");
static_assert(offsetof(ComboBoxStringBase_GetSelectedOptionIndex, ReturnValue) == 0x000000, "Member 'ComboBoxStringBase_GetSelectedOptionIndex::ReturnValue' has a wrong offset!");

// Function Indiana.ButtonGroup.OnButtonFocused
// 0x0008 (0x0008 - 0x0000)
struct ButtonGroup_OnButtonFocused final
{
public:
	class UButtonBase*                            Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ButtonGroup_OnButtonFocused) == 0x000008, "Wrong alignment on ButtonGroup_OnButtonFocused");
static_assert(sizeof(ButtonGroup_OnButtonFocused) == 0x000008, "Wrong size on ButtonGroup_OnButtonFocused");
static_assert(offsetof(ButtonGroup_OnButtonFocused, Button) == 0x000000, "Member 'ButtonGroup_OnButtonFocused::Button' has a wrong offset!");

// Function Indiana.ButtonGroup.OnButtonUnFocused
// 0x0008 (0x0008 - 0x0000)
struct ButtonGroup_OnButtonUnFocused final
{
public:
	class UButtonBase*                            Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ButtonGroup_OnButtonUnFocused) == 0x000008, "Wrong alignment on ButtonGroup_OnButtonUnFocused");
static_assert(sizeof(ButtonGroup_OnButtonUnFocused) == 0x000008, "Wrong size on ButtonGroup_OnButtonUnFocused");
static_assert(offsetof(ButtonGroup_OnButtonUnFocused, Button) == 0x000000, "Member 'ButtonGroup_OnButtonUnFocused::Button' has a wrong offset!");

// Function Indiana.ConversationRegisterComponent.StartConversationByComponent
// 0x0018 (0x0018 - 0x0000)
struct ConversationRegisterComponent_StartConversationByComponent final
{
public:
	ECheckBranches                                Branches;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ComponentOwner;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ConversationRegisterComponent_StartConversationByComponent) == 0x000008, "Wrong alignment on ConversationRegisterComponent_StartConversationByComponent");
static_assert(sizeof(ConversationRegisterComponent_StartConversationByComponent) == 0x000018, "Wrong size on ConversationRegisterComponent_StartConversationByComponent");
static_assert(offsetof(ConversationRegisterComponent_StartConversationByComponent, Branches) == 0x000000, "Member 'ConversationRegisterComponent_StartConversationByComponent::Branches' has a wrong offset!");
static_assert(offsetof(ConversationRegisterComponent_StartConversationByComponent, ComponentOwner) == 0x000008, "Member 'ConversationRegisterComponent_StartConversationByComponent::ComponentOwner' has a wrong offset!");
static_assert(offsetof(ConversationRegisterComponent_StartConversationByComponent, ReturnValue) == 0x000010, "Member 'ConversationRegisterComponent_StartConversationByComponent::ReturnValue' has a wrong offset!");

// Function Indiana.ConversationRegisterComponent.OnChatterComplete
// 0x0008 (0x0008 - 0x0000)
struct ConversationRegisterComponent_OnChatterComplete final
{
public:
	const class UChatterPlayer*                   ChatterPlayer;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConversationRegisterComponent_OnChatterComplete) == 0x000008, "Wrong alignment on ConversationRegisterComponent_OnChatterComplete");
static_assert(sizeof(ConversationRegisterComponent_OnChatterComplete) == 0x000008, "Wrong size on ConversationRegisterComponent_OnChatterComplete");
static_assert(offsetof(ConversationRegisterComponent_OnChatterComplete, ChatterPlayer) == 0x000000, "Member 'ConversationRegisterComponent_OnChatterComplete::ChatterPlayer' has a wrong offset!");

// Function Indiana.ConversationRegisterComponent.OnCombatStateChange
// 0x0002 (0x0002 - 0x0000)
struct ConversationRegisterComponent_OnCombatStateChange final
{
public:
	bool                                          bInCombat;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestoring;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConversationRegisterComponent_OnCombatStateChange) == 0x000001, "Wrong alignment on ConversationRegisterComponent_OnCombatStateChange");
static_assert(sizeof(ConversationRegisterComponent_OnCombatStateChange) == 0x000002, "Wrong size on ConversationRegisterComponent_OnCombatStateChange");
static_assert(offsetof(ConversationRegisterComponent_OnCombatStateChange, bInCombat) == 0x000000, "Member 'ConversationRegisterComponent_OnCombatStateChange::bInCombat' has a wrong offset!");
static_assert(offsetof(ConversationRegisterComponent_OnCombatStateChange, bRestoring) == 0x000001, "Member 'ConversationRegisterComponent_OnCombatStateChange::bRestoring' has a wrong offset!");

// Function Indiana.ConversationRegisterComponent.OnNewStateOfBeing
// 0x0002 (0x0002 - 0x0000)
struct ConversationRegisterComponent_OnNewStateOfBeing final
{
public:
	EStateOfBeing                                 NewStateOfBeing;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStateOfBeing                                 OldStateOfBeing;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConversationRegisterComponent_OnNewStateOfBeing) == 0x000001, "Wrong alignment on ConversationRegisterComponent_OnNewStateOfBeing");
static_assert(sizeof(ConversationRegisterComponent_OnNewStateOfBeing) == 0x000002, "Wrong size on ConversationRegisterComponent_OnNewStateOfBeing");
static_assert(offsetof(ConversationRegisterComponent_OnNewStateOfBeing, NewStateOfBeing) == 0x000000, "Member 'ConversationRegisterComponent_OnNewStateOfBeing::NewStateOfBeing' has a wrong offset!");
static_assert(offsetof(ConversationRegisterComponent_OnNewStateOfBeing, OldStateOfBeing) == 0x000001, "Member 'ConversationRegisterComponent_OnNewStateOfBeing::OldStateOfBeing' has a wrong offset!");

// Function Indiana.AmmoPoolBase.OnTacticalTimeDilationEnd
// 0x0004 (0x0004 - 0x0000)
struct AmmoPoolBase_OnTacticalTimeDilationEnd final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmmoPoolBase_OnTacticalTimeDilationEnd) == 0x000004, "Wrong alignment on AmmoPoolBase_OnTacticalTimeDilationEnd");
static_assert(sizeof(AmmoPoolBase_OnTacticalTimeDilationEnd) == 0x000004, "Wrong size on AmmoPoolBase_OnTacticalTimeDilationEnd");
static_assert(offsetof(AmmoPoolBase_OnTacticalTimeDilationEnd, Duration) == 0x000000, "Member 'AmmoPoolBase_OnTacticalTimeDilationEnd::Duration' has a wrong offset!");

// Function Indiana.AmmoPoolBase.GetBaseReloadTime
// 0x0004 (0x0004 - 0x0000)
struct AmmoPoolBase_GetBaseReloadTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmmoPoolBase_GetBaseReloadTime) == 0x000004, "Wrong alignment on AmmoPoolBase_GetBaseReloadTime");
static_assert(sizeof(AmmoPoolBase_GetBaseReloadTime) == 0x000004, "Wrong size on AmmoPoolBase_GetBaseReloadTime");
static_assert(offsetof(AmmoPoolBase_GetBaseReloadTime, ReturnValue) == 0x000000, "Member 'AmmoPoolBase_GetBaseReloadTime::ReturnValue' has a wrong offset!");

// Function Indiana.AmmoPoolBase.GetCurrentAmmoClass
// 0x0008 (0x0008 - 0x0000)
struct AmmoPoolBase_GetCurrentAmmoClass final
{
public:
	TSubclassOf<class UAmmo>                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmmoPoolBase_GetCurrentAmmoClass) == 0x000008, "Wrong alignment on AmmoPoolBase_GetCurrentAmmoClass");
static_assert(sizeof(AmmoPoolBase_GetCurrentAmmoClass) == 0x000008, "Wrong size on AmmoPoolBase_GetCurrentAmmoClass");
static_assert(offsetof(AmmoPoolBase_GetCurrentAmmoClass, ReturnValue) == 0x000000, "Member 'AmmoPoolBase_GetCurrentAmmoClass::ReturnValue' has a wrong offset!");

// Function Indiana.AmmoPoolBase.GetCurrentConsumableClass
// 0x0008 (0x0008 - 0x0000)
struct AmmoPoolBase_GetCurrentConsumableClass final
{
public:
	TSubclassOf<class UConsumableItem>            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmmoPoolBase_GetCurrentConsumableClass) == 0x000008, "Wrong alignment on AmmoPoolBase_GetCurrentConsumableClass");
static_assert(sizeof(AmmoPoolBase_GetCurrentConsumableClass) == 0x000008, "Wrong size on AmmoPoolBase_GetCurrentConsumableClass");
static_assert(offsetof(AmmoPoolBase_GetCurrentConsumableClass, ReturnValue) == 0x000000, "Member 'AmmoPoolBase_GetCurrentConsumableClass::ReturnValue' has a wrong offset!");

// Function Indiana.AmmoPoolBase.GetCurrentPoolSize
// 0x0004 (0x0004 - 0x0000)
struct AmmoPoolBase_GetCurrentPoolSize final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmmoPoolBase_GetCurrentPoolSize) == 0x000004, "Wrong alignment on AmmoPoolBase_GetCurrentPoolSize");
static_assert(sizeof(AmmoPoolBase_GetCurrentPoolSize) == 0x000004, "Wrong size on AmmoPoolBase_GetCurrentPoolSize");
static_assert(offsetof(AmmoPoolBase_GetCurrentPoolSize, ReturnValue) == 0x000000, "Member 'AmmoPoolBase_GetCurrentPoolSize::ReturnValue' has a wrong offset!");

// Function Indiana.AmmoPoolBase.IsReloading
// 0x0001 (0x0001 - 0x0000)
struct AmmoPoolBase_IsReloading final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmmoPoolBase_IsReloading) == 0x000001, "Wrong alignment on AmmoPoolBase_IsReloading");
static_assert(sizeof(AmmoPoolBase_IsReloading) == 0x000001, "Wrong size on AmmoPoolBase_IsReloading");
static_assert(offsetof(AmmoPoolBase_IsReloading, ReturnValue) == 0x000000, "Member 'AmmoPoolBase_IsReloading::ReturnValue' has a wrong offset!");

// Function Indiana.AmmoPoolBase.UsesAmmo
// 0x0001 (0x0001 - 0x0000)
struct AmmoPoolBase_UsesAmmo final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmmoPoolBase_UsesAmmo) == 0x000001, "Wrong alignment on AmmoPoolBase_UsesAmmo");
static_assert(sizeof(AmmoPoolBase_UsesAmmo) == 0x000001, "Wrong size on AmmoPoolBase_UsesAmmo");
static_assert(offsetof(AmmoPoolBase_UsesAmmo, ReturnValue) == 0x000000, "Member 'AmmoPoolBase_UsesAmmo::ReturnValue' has a wrong offset!");

// Function Indiana.AmmoPoolBase.UsesConsumables
// 0x0001 (0x0001 - 0x0000)
struct AmmoPoolBase_UsesConsumables final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmmoPoolBase_UsesConsumables) == 0x000001, "Wrong alignment on AmmoPoolBase_UsesConsumables");
static_assert(sizeof(AmmoPoolBase_UsesConsumables) == 0x000001, "Wrong size on AmmoPoolBase_UsesConsumables");
static_assert(offsetof(AmmoPoolBase_UsesConsumables, ReturnValue) == 0x000000, "Member 'AmmoPoolBase_UsesConsumables::ReturnValue' has a wrong offset!");

// Function Indiana.ConversationMessageWidget.ContentLerpTick
// 0x0004 (0x0004 - 0x0000)
struct ConversationMessageWidget_ContentLerpTick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConversationMessageWidget_ContentLerpTick) == 0x000004, "Wrong alignment on ConversationMessageWidget_ContentLerpTick");
static_assert(sizeof(ConversationMessageWidget_ContentLerpTick) == 0x000004, "Wrong size on ConversationMessageWidget_ContentLerpTick");
static_assert(offsetof(ConversationMessageWidget_ContentLerpTick, DeltaTime) == 0x000000, "Member 'ConversationMessageWidget_ContentLerpTick::DeltaTime' has a wrong offset!");

// Function Indiana.ArmorComponent.TinkerAdvanceArmor
// 0x0001 (0x0001 - 0x0000)
struct ArmorComponent_TinkerAdvanceArmor final
{
public:
	bool                                          bIgnoreCost;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArmorComponent_TinkerAdvanceArmor) == 0x000001, "Wrong alignment on ArmorComponent_TinkerAdvanceArmor");
static_assert(sizeof(ArmorComponent_TinkerAdvanceArmor) == 0x000001, "Wrong size on ArmorComponent_TinkerAdvanceArmor");
static_assert(offsetof(ArmorComponent_TinkerAdvanceArmor, bIgnoreCost) == 0x000000, "Member 'ArmorComponent_TinkerAdvanceArmor::bIgnoreCost' has a wrong offset!");

// Function Indiana.ObjectiveWaypointGameDataReference.GetDisplayOverride
// 0x0010 (0x0010 - 0x0000)
struct ObjectiveWaypointGameDataReference_GetDisplayOverride final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectiveWaypointGameDataReference_GetDisplayOverride) == 0x000008, "Wrong alignment on ObjectiveWaypointGameDataReference_GetDisplayOverride");
static_assert(sizeof(ObjectiveWaypointGameDataReference_GetDisplayOverride) == 0x000010, "Wrong size on ObjectiveWaypointGameDataReference_GetDisplayOverride");
static_assert(offsetof(ObjectiveWaypointGameDataReference_GetDisplayOverride, ReturnValue) == 0x000000, "Member 'ObjectiveWaypointGameDataReference_GetDisplayOverride::ReturnValue' has a wrong offset!");

// Function Indiana.ObjectiveWaypointGameDataReference.GetDisplayOverrideID
// 0x0004 (0x0004 - 0x0000)
struct ObjectiveWaypointGameDataReference_GetDisplayOverrideID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectiveWaypointGameDataReference_GetDisplayOverrideID) == 0x000004, "Wrong alignment on ObjectiveWaypointGameDataReference_GetDisplayOverrideID");
static_assert(sizeof(ObjectiveWaypointGameDataReference_GetDisplayOverrideID) == 0x000004, "Wrong size on ObjectiveWaypointGameDataReference_GetDisplayOverrideID");
static_assert(offsetof(ObjectiveWaypointGameDataReference_GetDisplayOverrideID, ReturnValue) == 0x000000, "Member 'ObjectiveWaypointGameDataReference_GetDisplayOverrideID::ReturnValue' has a wrong offset!");

// Function Indiana.ObjectiveWaypointGameDataReference.GetDisplayOverrideWithGender
// 0x0018 (0x0018 - 0x0000)
struct ObjectiveWaypointGameDataReference_GetDisplayOverrideWithGender final
{
public:
	EGender                                       CharacterGender;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectiveWaypointGameDataReference_GetDisplayOverrideWithGender) == 0x000008, "Wrong alignment on ObjectiveWaypointGameDataReference_GetDisplayOverrideWithGender");
static_assert(sizeof(ObjectiveWaypointGameDataReference_GetDisplayOverrideWithGender) == 0x000018, "Wrong size on ObjectiveWaypointGameDataReference_GetDisplayOverrideWithGender");
static_assert(offsetof(ObjectiveWaypointGameDataReference_GetDisplayOverrideWithGender, CharacterGender) == 0x000000, "Member 'ObjectiveWaypointGameDataReference_GetDisplayOverrideWithGender::CharacterGender' has a wrong offset!");
static_assert(offsetof(ObjectiveWaypointGameDataReference_GetDisplayOverrideWithGender, ReturnValue) == 0x000008, "Member 'ObjectiveWaypointGameDataReference_GetDisplayOverrideWithGender::ReturnValue' has a wrong offset!");

// Function Indiana.ObjectiveWaypointGameDataReference.GetGameObject
// 0x0010 (0x0010 - 0x0000)
struct ObjectiveWaypointGameDataReference_GetGameObject final
{
public:
	struct FGuid                                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectiveWaypointGameDataReference_GetGameObject) == 0x000004, "Wrong alignment on ObjectiveWaypointGameDataReference_GetGameObject");
static_assert(sizeof(ObjectiveWaypointGameDataReference_GetGameObject) == 0x000010, "Wrong size on ObjectiveWaypointGameDataReference_GetGameObject");
static_assert(offsetof(ObjectiveWaypointGameDataReference_GetGameObject, ReturnValue) == 0x000000, "Member 'ObjectiveWaypointGameDataReference_GetGameObject::ReturnValue' has a wrong offset!");

// Function Indiana.ObjectiveWaypointGameDataReference.GetOverridesPreviousWaypoint
// 0x0001 (0x0001 - 0x0000)
struct ObjectiveWaypointGameDataReference_GetOverridesPreviousWaypoint final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectiveWaypointGameDataReference_GetOverridesPreviousWaypoint) == 0x000001, "Wrong alignment on ObjectiveWaypointGameDataReference_GetOverridesPreviousWaypoint");
static_assert(sizeof(ObjectiveWaypointGameDataReference_GetOverridesPreviousWaypoint) == 0x000001, "Wrong size on ObjectiveWaypointGameDataReference_GetOverridesPreviousWaypoint");
static_assert(offsetof(ObjectiveWaypointGameDataReference_GetOverridesPreviousWaypoint, ReturnValue) == 0x000000, "Member 'ObjectiveWaypointGameDataReference_GetOverridesPreviousWaypoint::ReturnValue' has a wrong offset!");

// Function Indiana.TPVAnimInstance.GetAnimationSetUpdate
// 0x0004 (0x0004 - 0x0000)
struct TPVAnimInstance_GetAnimationSetUpdate final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TPVAnimInstance_GetAnimationSetUpdate) == 0x000004, "Wrong alignment on TPVAnimInstance_GetAnimationSetUpdate");
static_assert(sizeof(TPVAnimInstance_GetAnimationSetUpdate) == 0x000004, "Wrong size on TPVAnimInstance_GetAnimationSetUpdate");
static_assert(offsetof(TPVAnimInstance_GetAnimationSetUpdate, ReturnValue) == 0x000000, "Member 'TPVAnimInstance_GetAnimationSetUpdate::ReturnValue' has a wrong offset!");

// Function Indiana.TPVAnimInstance.GetUpFromRagdoll
// 0x0004 (0x0004 - 0x0000)
struct TPVAnimInstance_GetUpFromRagdoll final
{
public:
	float                                         GetUpSpeed;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TPVAnimInstance_GetUpFromRagdoll) == 0x000004, "Wrong alignment on TPVAnimInstance_GetUpFromRagdoll");
static_assert(sizeof(TPVAnimInstance_GetUpFromRagdoll) == 0x000004, "Wrong size on TPVAnimInstance_GetUpFromRagdoll");
static_assert(offsetof(TPVAnimInstance_GetUpFromRagdoll, GetUpSpeed) == 0x000000, "Member 'TPVAnimInstance_GetUpFromRagdoll::GetUpSpeed' has a wrong offset!");

// Function Indiana.TPVAnimInstance.OnMontageEnd
// 0x0010 (0x0010 - 0x0000)
struct TPVAnimInstance_OnMontageEnd final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TPVAnimInstance_OnMontageEnd) == 0x000008, "Wrong alignment on TPVAnimInstance_OnMontageEnd");
static_assert(sizeof(TPVAnimInstance_OnMontageEnd) == 0x000010, "Wrong size on TPVAnimInstance_OnMontageEnd");
static_assert(offsetof(TPVAnimInstance_OnMontageEnd, Montage) == 0x000000, "Member 'TPVAnimInstance_OnMontageEnd::Montage' has a wrong offset!");
static_assert(offsetof(TPVAnimInstance_OnMontageEnd, bInterrupted) == 0x000008, "Member 'TPVAnimInstance_OnMontageEnd::bInterrupted' has a wrong offset!");

// Function Indiana.TPVAnimInstance.OnMontageStart
// 0x0008 (0x0008 - 0x0000)
struct TPVAnimInstance_OnMontageStart final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TPVAnimInstance_OnMontageStart) == 0x000008, "Wrong alignment on TPVAnimInstance_OnMontageStart");
static_assert(sizeof(TPVAnimInstance_OnMontageStart) == 0x000008, "Wrong size on TPVAnimInstance_OnMontageStart");
static_assert(offsetof(TPVAnimInstance_OnMontageStart, Montage) == 0x000000, "Member 'TPVAnimInstance_OnMontageStart::Montage' has a wrong offset!");

// Function Indiana.TPVAnimInstance.SetNextEmotion
// 0x000C (0x000C - 0x0000)
struct TPVAnimInstance_SetNextEmotion final
{
public:
	EEmotion                                      Emotion;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Persist;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceNextEmotion;                                  // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TPVAnimInstance_SetNextEmotion) == 0x000004, "Wrong alignment on TPVAnimInstance_SetNextEmotion");
static_assert(sizeof(TPVAnimInstance_SetNextEmotion) == 0x00000C, "Wrong size on TPVAnimInstance_SetNextEmotion");
static_assert(offsetof(TPVAnimInstance_SetNextEmotion, Emotion) == 0x000000, "Member 'TPVAnimInstance_SetNextEmotion::Emotion' has a wrong offset!");
static_assert(offsetof(TPVAnimInstance_SetNextEmotion, Duration) == 0x000004, "Member 'TPVAnimInstance_SetNextEmotion::Duration' has a wrong offset!");
static_assert(offsetof(TPVAnimInstance_SetNextEmotion, Persist) == 0x000008, "Member 'TPVAnimInstance_SetNextEmotion::Persist' has a wrong offset!");
static_assert(offsetof(TPVAnimInstance_SetNextEmotion, ForceNextEmotion) == 0x000009, "Member 'TPVAnimInstance_SetNextEmotion::ForceNextEmotion' has a wrong offset!");
static_assert(offsetof(TPVAnimInstance_SetNextEmotion, ReturnValue) == 0x00000A, "Member 'TPVAnimInstance_SetNextEmotion::ReturnValue' has a wrong offset!");

// Function Indiana.TPVAnimInstance.SetPersonality
// 0x0008 (0x0008 - 0x0000)
struct TPVAnimInstance_SetPersonality final
{
public:
	class UTPVPersonalitySet*                     Personality;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TPVAnimInstance_SetPersonality) == 0x000008, "Wrong alignment on TPVAnimInstance_SetPersonality");
static_assert(sizeof(TPVAnimInstance_SetPersonality) == 0x000008, "Wrong size on TPVAnimInstance_SetPersonality");
static_assert(offsetof(TPVAnimInstance_SetPersonality, Personality) == 0x000000, "Member 'TPVAnimInstance_SetPersonality::Personality' has a wrong offset!");

// Function Indiana.TPVAnimInstance.SetStateTransitioned
// 0x0002 (0x0002 - 0x0000)
struct TPVAnimInstance_SetStateTransitioned final
{
public:
	EAnimTreeState                                State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Transitioned;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TPVAnimInstance_SetStateTransitioned) == 0x000001, "Wrong alignment on TPVAnimInstance_SetStateTransitioned");
static_assert(sizeof(TPVAnimInstance_SetStateTransitioned) == 0x000002, "Wrong size on TPVAnimInstance_SetStateTransitioned");
static_assert(offsetof(TPVAnimInstance_SetStateTransitioned, State) == 0x000000, "Member 'TPVAnimInstance_SetStateTransitioned::State' has a wrong offset!");
static_assert(offsetof(TPVAnimInstance_SetStateTransitioned, Transitioned) == 0x000001, "Member 'TPVAnimInstance_SetStateTransitioned::Transitioned' has a wrong offset!");

// Function Indiana.Conditionals.AlwaysFalse
// 0x0001 (0x0001 - 0x0000)
struct Conditionals_AlwaysFalse final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Conditionals_AlwaysFalse) == 0x000001, "Wrong alignment on Conditionals_AlwaysFalse");
static_assert(sizeof(Conditionals_AlwaysFalse) == 0x000001, "Wrong size on Conditionals_AlwaysFalse");
static_assert(offsetof(Conditionals_AlwaysFalse, ReturnValue) == 0x000000, "Member 'Conditionals_AlwaysFalse::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.CallGlobalConditional
// 0x0014 (0x0014 - 0x0000)
struct Conditionals_CallGlobalConditional final
{
public:
	struct FGuid                                  GlobalScriptID;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_CallGlobalConditional) == 0x000004, "Wrong alignment on Conditionals_CallGlobalConditional");
static_assert(sizeof(Conditionals_CallGlobalConditional) == 0x000014, "Wrong size on Conditionals_CallGlobalConditional");
static_assert(offsetof(Conditionals_CallGlobalConditional, GlobalScriptID) == 0x000000, "Member 'Conditionals_CallGlobalConditional::GlobalScriptID' has a wrong offset!");
static_assert(offsetof(Conditionals_CallGlobalConditional, ReturnValue) == 0x000010, "Member 'Conditionals_CallGlobalConditional::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.CanBribe
// 0x0020 (0x0020 - 0x0000)
struct Conditionals_CanBribe final
{
public:
	class FString                                 VariableName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBribeDifficulty                              BribeDifficulty;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LevelOverride;                                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_CanBribe) == 0x000008, "Wrong alignment on Conditionals_CanBribe");
static_assert(sizeof(Conditionals_CanBribe) == 0x000020, "Wrong size on Conditionals_CanBribe");
static_assert(offsetof(Conditionals_CanBribe, VariableName) == 0x000000, "Member 'Conditionals_CanBribe::VariableName' has a wrong offset!");
static_assert(offsetof(Conditionals_CanBribe, BribeDifficulty) == 0x000010, "Member 'Conditionals_CanBribe::BribeDifficulty' has a wrong offset!");
static_assert(offsetof(Conditionals_CanBribe, LevelOverride) == 0x000014, "Member 'Conditionals_CanBribe::LevelOverride' has a wrong offset!");
static_assert(offsetof(Conditionals_CanBribe, ReturnValue) == 0x000018, "Member 'Conditionals_CanBribe::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.CanPlayerAccessTravelDestination
// 0x0018 (0x0018 - 0x0000)
struct Conditionals_CanPlayerAccessTravelDestination final
{
public:
	class FString                                 TravelDestination;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_CanPlayerAccessTravelDestination) == 0x000008, "Wrong alignment on Conditionals_CanPlayerAccessTravelDestination");
static_assert(sizeof(Conditionals_CanPlayerAccessTravelDestination) == 0x000018, "Wrong size on Conditionals_CanPlayerAccessTravelDestination");
static_assert(offsetof(Conditionals_CanPlayerAccessTravelDestination, TravelDestination) == 0x000000, "Member 'Conditionals_CanPlayerAccessTravelDestination::TravelDestination' has a wrong offset!");
static_assert(offsetof(Conditionals_CanPlayerAccessTravelDestination, ReturnValue) == 0x000010, "Member 'Conditionals_CanPlayerAccessTravelDestination::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.CanPlayerDiscoverPointOfInterest
// 0x0018 (0x0018 - 0x0000)
struct Conditionals_CanPlayerDiscoverPointOfInterest final
{
public:
	class FString                                 PointOfInterestData;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_CanPlayerDiscoverPointOfInterest) == 0x000008, "Wrong alignment on Conditionals_CanPlayerDiscoverPointOfInterest");
static_assert(sizeof(Conditionals_CanPlayerDiscoverPointOfInterest) == 0x000018, "Wrong size on Conditionals_CanPlayerDiscoverPointOfInterest");
static_assert(offsetof(Conditionals_CanPlayerDiscoverPointOfInterest, PointOfInterestData) == 0x000000, "Member 'Conditionals_CanPlayerDiscoverPointOfInterest::PointOfInterestData' has a wrong offset!");
static_assert(offsetof(Conditionals_CanPlayerDiscoverPointOfInterest, ReturnValue) == 0x000010, "Member 'Conditionals_CanPlayerDiscoverPointOfInterest::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.CanPlayerReadRedactions
// 0x0001 (0x0001 - 0x0000)
struct Conditionals_CanPlayerReadRedactions final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Conditionals_CanPlayerReadRedactions) == 0x000001, "Wrong alignment on Conditionals_CanPlayerReadRedactions");
static_assert(sizeof(Conditionals_CanPlayerReadRedactions) == 0x000001, "Wrong size on Conditionals_CanPlayerReadRedactions");
static_assert(offsetof(Conditionals_CanPlayerReadRedactions, ReturnValue) == 0x000000, "Member 'Conditionals_CanPlayerReadRedactions::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.CanPlayerSafelyTakeItemTypeInContainer
// 0x0028 (0x0028 - 0x0000)
struct Conditionals_CanPlayerSafelyTakeItemTypeInContainer final
{
public:
	struct FGuid                                  ContainerID;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Item;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_CanPlayerSafelyTakeItemTypeInContainer) == 0x000008, "Wrong alignment on Conditionals_CanPlayerSafelyTakeItemTypeInContainer");
static_assert(sizeof(Conditionals_CanPlayerSafelyTakeItemTypeInContainer) == 0x000028, "Wrong size on Conditionals_CanPlayerSafelyTakeItemTypeInContainer");
static_assert(offsetof(Conditionals_CanPlayerSafelyTakeItemTypeInContainer, ContainerID) == 0x000000, "Member 'Conditionals_CanPlayerSafelyTakeItemTypeInContainer::ContainerID' has a wrong offset!");
static_assert(offsetof(Conditionals_CanPlayerSafelyTakeItemTypeInContainer, Item) == 0x000010, "Member 'Conditionals_CanPlayerSafelyTakeItemTypeInContainer::Item' has a wrong offset!");
static_assert(offsetof(Conditionals_CanPlayerSafelyTakeItemTypeInContainer, ReturnValue) == 0x000020, "Member 'Conditionals_CanPlayerSafelyTakeItemTypeInContainer::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.CanPlayerSafelyTakePickup
// 0x0014 (0x0014 - 0x0000)
struct Conditionals_CanPlayerSafelyTakePickup final
{
public:
	struct FGuid                                  PickupID;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_CanPlayerSafelyTakePickup) == 0x000004, "Wrong alignment on Conditionals_CanPlayerSafelyTakePickup");
static_assert(sizeof(Conditionals_CanPlayerSafelyTakePickup) == 0x000014, "Wrong size on Conditionals_CanPlayerSafelyTakePickup");
static_assert(offsetof(Conditionals_CanPlayerSafelyTakePickup, PickupID) == 0x000000, "Member 'Conditionals_CanPlayerSafelyTakePickup::PickupID' has a wrong offset!");
static_assert(offsetof(Conditionals_CanPlayerSafelyTakePickup, ReturnValue) == 0x000010, "Member 'Conditionals_CanPlayerSafelyTakePickup::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.CompanionHasPerk
// 0x0028 (0x0028 - 0x0000)
struct Conditionals_CompanionHasPerk final
{
public:
	struct FGuid                                  CompanionID;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Perk;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_CompanionHasPerk) == 0x000008, "Wrong alignment on Conditionals_CompanionHasPerk");
static_assert(sizeof(Conditionals_CompanionHasPerk) == 0x000028, "Wrong size on Conditionals_CompanionHasPerk");
static_assert(offsetof(Conditionals_CompanionHasPerk, CompanionID) == 0x000000, "Member 'Conditionals_CompanionHasPerk::CompanionID' has a wrong offset!");
static_assert(offsetof(Conditionals_CompanionHasPerk, Perk) == 0x000010, "Member 'Conditionals_CompanionHasPerk::Perk' has a wrong offset!");
static_assert(offsetof(Conditionals_CompanionHasPerk, ReturnValue) == 0x000020, "Member 'Conditionals_CompanionHasPerk::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.CompanionWantsToTalk
// 0x0002 (0x0002 - 0x0000)
struct Conditionals_CompanionWantsToTalk final
{
public:
	ESpecialObsidianID                            CompanionID;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Conditionals_CompanionWantsToTalk) == 0x000001, "Wrong alignment on Conditionals_CompanionWantsToTalk");
static_assert(sizeof(Conditionals_CompanionWantsToTalk) == 0x000002, "Wrong size on Conditionals_CompanionWantsToTalk");
static_assert(offsetof(Conditionals_CompanionWantsToTalk, CompanionID) == 0x000000, "Member 'Conditionals_CompanionWantsToTalk::CompanionID' has a wrong offset!");
static_assert(offsetof(Conditionals_CompanionWantsToTalk, ReturnValue) == 0x000001, "Member 'Conditionals_CompanionWantsToTalk::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.CompareGlobals
// 0x0030 (0x0030 - 0x0000)
struct Conditionals_CompareGlobals final
{
public:
	class FString                                 VariableName1;                                     // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComparisonOperator                           Operator;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 VariableName2;                                     // 0x0018(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_CompareGlobals) == 0x000008, "Wrong alignment on Conditionals_CompareGlobals");
static_assert(sizeof(Conditionals_CompareGlobals) == 0x000030, "Wrong size on Conditionals_CompareGlobals");
static_assert(offsetof(Conditionals_CompareGlobals, VariableName1) == 0x000000, "Member 'Conditionals_CompareGlobals::VariableName1' has a wrong offset!");
static_assert(offsetof(Conditionals_CompareGlobals, Operator) == 0x000010, "Member 'Conditionals_CompareGlobals::Operator' has a wrong offset!");
static_assert(offsetof(Conditionals_CompareGlobals, VariableName2) == 0x000018, "Member 'Conditionals_CompareGlobals::VariableName2' has a wrong offset!");
static_assert(offsetof(Conditionals_CompareGlobals, ReturnValue) == 0x000028, "Member 'Conditionals_CompareGlobals::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.DoesConversationNodePass
// 0x0018 (0x0018 - 0x0000)
struct Conditionals_DoesConversationNodePass final
{
public:
	struct FGuid                                  ConversationID;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NodeID;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_DoesConversationNodePass) == 0x000004, "Wrong alignment on Conditionals_DoesConversationNodePass");
static_assert(sizeof(Conditionals_DoesConversationNodePass) == 0x000018, "Wrong size on Conditionals_DoesConversationNodePass");
static_assert(offsetof(Conditionals_DoesConversationNodePass, ConversationID) == 0x000000, "Member 'Conditionals_DoesConversationNodePass::ConversationID' has a wrong offset!");
static_assert(offsetof(Conditionals_DoesConversationNodePass, NodeID) == 0x000010, "Member 'Conditionals_DoesConversationNodePass::NodeID' has a wrong offset!");
static_assert(offsetof(Conditionals_DoesConversationNodePass, ReturnValue) == 0x000014, "Member 'Conditionals_DoesConversationNodePass::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.GetGlobalValue
// 0x0018 (0x0018 - 0x0000)
struct Conditionals_GetGlobalValue final
{
public:
	class FString                                 VariableName;                                      // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_GetGlobalValue) == 0x000008, "Wrong alignment on Conditionals_GetGlobalValue");
static_assert(sizeof(Conditionals_GetGlobalValue) == 0x000018, "Wrong size on Conditionals_GetGlobalValue");
static_assert(offsetof(Conditionals_GetGlobalValue, VariableName) == 0x000000, "Member 'Conditionals_GetGlobalValue::VariableName' has a wrong offset!");
static_assert(offsetof(Conditionals_GetGlobalValue, ReturnValue) == 0x000010, "Member 'Conditionals_GetGlobalValue::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.GetOCLState
// 0x0014 (0x0014 - 0x0000)
struct Conditionals_GetOCLState final
{
public:
	struct FGuid                                  OCLObjectID;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOCLState                                     State;                                             // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoolResult                                   Result;                                            // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_GetOCLState) == 0x000004, "Wrong alignment on Conditionals_GetOCLState");
static_assert(sizeof(Conditionals_GetOCLState) == 0x000014, "Wrong size on Conditionals_GetOCLState");
static_assert(offsetof(Conditionals_GetOCLState, OCLObjectID) == 0x000000, "Member 'Conditionals_GetOCLState::OCLObjectID' has a wrong offset!");
static_assert(offsetof(Conditionals_GetOCLState, State) == 0x000010, "Member 'Conditionals_GetOCLState::State' has a wrong offset!");
static_assert(offsetof(Conditionals_GetOCLState, Result) == 0x000011, "Member 'Conditionals_GetOCLState::Result' has a wrong offset!");

// Function Indiana.Conditionals.HasConversationNodeBeenVisited
// 0x0018 (0x0018 - 0x0000)
struct Conditionals_HasConversationNodeBeenVisited final
{
public:
	struct FGuid                                  ConversationID;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NodeID;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_HasConversationNodeBeenVisited) == 0x000004, "Wrong alignment on Conditionals_HasConversationNodeBeenVisited");
static_assert(sizeof(Conditionals_HasConversationNodeBeenVisited) == 0x000018, "Wrong size on Conditionals_HasConversationNodeBeenVisited");
static_assert(offsetof(Conditionals_HasConversationNodeBeenVisited, ConversationID) == 0x000000, "Member 'Conditionals_HasConversationNodeBeenVisited::ConversationID' has a wrong offset!");
static_assert(offsetof(Conditionals_HasConversationNodeBeenVisited, NodeID) == 0x000010, "Member 'Conditionals_HasConversationNodeBeenVisited::NodeID' has a wrong offset!");
static_assert(offsetof(Conditionals_HasConversationNodeBeenVisited, ReturnValue) == 0x000014, "Member 'Conditionals_HasConversationNodeBeenVisited::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.HasDLC
// 0x0002 (0x0002 - 0x0000)
struct Conditionals_HasDLC final
{
public:
	EDownLoadableContent                          DLC;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Conditionals_HasDLC) == 0x000001, "Wrong alignment on Conditionals_HasDLC");
static_assert(sizeof(Conditionals_HasDLC) == 0x000002, "Wrong size on Conditionals_HasDLC");
static_assert(offsetof(Conditionals_HasDLC, DLC) == 0x000000, "Member 'Conditionals_HasDLC::DLC' has a wrong offset!");
static_assert(offsetof(Conditionals_HasDLC, ReturnValue) == 0x000001, "Member 'Conditionals_HasDLC::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.HasItem
// 0x0018 (0x0018 - 0x0000)
struct Conditionals_HasItem final
{
public:
	class FString                                 Item;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_HasItem) == 0x000008, "Wrong alignment on Conditionals_HasItem");
static_assert(sizeof(Conditionals_HasItem) == 0x000018, "Wrong size on Conditionals_HasItem");
static_assert(offsetof(Conditionals_HasItem, Item) == 0x000000, "Member 'Conditionals_HasItem::Item' has a wrong offset!");
static_assert(offsetof(Conditionals_HasItem, ReturnValue) == 0x000010, "Member 'Conditionals_HasItem::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.HasItemsByTag
// 0x0020 (0x0020 - 0x0000)
struct Conditionals_HasItemsByTag final
{
public:
	class FString                                 GameplayTag;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComparisonOperator                           Operator;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Quantity;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_HasItemsByTag) == 0x000008, "Wrong alignment on Conditionals_HasItemsByTag");
static_assert(sizeof(Conditionals_HasItemsByTag) == 0x000020, "Wrong size on Conditionals_HasItemsByTag");
static_assert(offsetof(Conditionals_HasItemsByTag, GameplayTag) == 0x000000, "Member 'Conditionals_HasItemsByTag::GameplayTag' has a wrong offset!");
static_assert(offsetof(Conditionals_HasItemsByTag, Operator) == 0x000010, "Member 'Conditionals_HasItemsByTag::Operator' has a wrong offset!");
static_assert(offsetof(Conditionals_HasItemsByTag, Quantity) == 0x000014, "Member 'Conditionals_HasItemsByTag::Quantity' has a wrong offset!");
static_assert(offsetof(Conditionals_HasItemsByTag, ReturnValue) == 0x000018, "Member 'Conditionals_HasItemsByTag::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.HasItemValue
// 0x0028 (0x0028 - 0x0000)
struct Conditionals_HasItemValue final
{
public:
	class FString                                 VariableName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Item;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_HasItemValue) == 0x000008, "Wrong alignment on Conditionals_HasItemValue");
static_assert(sizeof(Conditionals_HasItemValue) == 0x000028, "Wrong size on Conditionals_HasItemValue");
static_assert(offsetof(Conditionals_HasItemValue, VariableName) == 0x000000, "Member 'Conditionals_HasItemValue::VariableName' has a wrong offset!");
static_assert(offsetof(Conditionals_HasItemValue, Item) == 0x000010, "Member 'Conditionals_HasItemValue::Item' has a wrong offset!");
static_assert(offsetof(Conditionals_HasItemValue, ReturnValue) == 0x000020, "Member 'Conditionals_HasItemValue::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.HasPlayerDiscoveredPointOfInterest
// 0x0018 (0x0018 - 0x0000)
struct Conditionals_HasPlayerDiscoveredPointOfInterest final
{
public:
	class FString                                 PointOfInterestData;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_HasPlayerDiscoveredPointOfInterest) == 0x000008, "Wrong alignment on Conditionals_HasPlayerDiscoveredPointOfInterest");
static_assert(sizeof(Conditionals_HasPlayerDiscoveredPointOfInterest) == 0x000018, "Wrong size on Conditionals_HasPlayerDiscoveredPointOfInterest");
static_assert(offsetof(Conditionals_HasPlayerDiscoveredPointOfInterest, PointOfInterestData) == 0x000000, "Member 'Conditionals_HasPlayerDiscoveredPointOfInterest::PointOfInterestData' has a wrong offset!");
static_assert(offsetof(Conditionals_HasPlayerDiscoveredPointOfInterest, ReturnValue) == 0x000010, "Member 'Conditionals_HasPlayerDiscoveredPointOfInterest::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.HasPlayerOnlyHeardAboutPointOfInterest
// 0x0018 (0x0018 - 0x0000)
struct Conditionals_HasPlayerOnlyHeardAboutPointOfInterest final
{
public:
	class FString                                 PointOfInterestData;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_HasPlayerOnlyHeardAboutPointOfInterest) == 0x000008, "Wrong alignment on Conditionals_HasPlayerOnlyHeardAboutPointOfInterest");
static_assert(sizeof(Conditionals_HasPlayerOnlyHeardAboutPointOfInterest) == 0x000018, "Wrong size on Conditionals_HasPlayerOnlyHeardAboutPointOfInterest");
static_assert(offsetof(Conditionals_HasPlayerOnlyHeardAboutPointOfInterest, PointOfInterestData) == 0x000000, "Member 'Conditionals_HasPlayerOnlyHeardAboutPointOfInterest::PointOfInterestData' has a wrong offset!");
static_assert(offsetof(Conditionals_HasPlayerOnlyHeardAboutPointOfInterest, ReturnValue) == 0x000010, "Member 'Conditionals_HasPlayerOnlyHeardAboutPointOfInterest::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.HasPlayerVisitedRegion
// 0x0018 (0x0018 - 0x0000)
struct Conditionals_HasPlayerVisitedRegion final
{
public:
	class FString                                 TravelRegion;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_HasPlayerVisitedRegion) == 0x000008, "Wrong alignment on Conditionals_HasPlayerVisitedRegion");
static_assert(sizeof(Conditionals_HasPlayerVisitedRegion) == 0x000018, "Wrong size on Conditionals_HasPlayerVisitedRegion");
static_assert(offsetof(Conditionals_HasPlayerVisitedRegion, TravelRegion) == 0x000000, "Member 'Conditionals_HasPlayerVisitedRegion::TravelRegion' has a wrong offset!");
static_assert(offsetof(Conditionals_HasPlayerVisitedRegion, ReturnValue) == 0x000010, "Member 'Conditionals_HasPlayerVisitedRegion::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.HasPlayerVisitedTravelDestination
// 0x0018 (0x0018 - 0x0000)
struct Conditionals_HasPlayerVisitedTravelDestination final
{
public:
	class FString                                 TravelDestination;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_HasPlayerVisitedTravelDestination) == 0x000008, "Wrong alignment on Conditionals_HasPlayerVisitedTravelDestination");
static_assert(sizeof(Conditionals_HasPlayerVisitedTravelDestination) == 0x000018, "Wrong size on Conditionals_HasPlayerVisitedTravelDestination");
static_assert(offsetof(Conditionals_HasPlayerVisitedTravelDestination, TravelDestination) == 0x000000, "Member 'Conditionals_HasPlayerVisitedTravelDestination::TravelDestination' has a wrong offset!");
static_assert(offsetof(Conditionals_HasPlayerVisitedTravelDestination, ReturnValue) == 0x000010, "Member 'Conditionals_HasPlayerVisitedTravelDestination::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.HasQuestFailed
// 0x0014 (0x0014 - 0x0000)
struct Conditionals_HasQuestFailed final
{
public:
	struct FGuid                                  QuestID;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_HasQuestFailed) == 0x000004, "Wrong alignment on Conditionals_HasQuestFailed");
static_assert(sizeof(Conditionals_HasQuestFailed) == 0x000014, "Wrong size on Conditionals_HasQuestFailed");
static_assert(offsetof(Conditionals_HasQuestFailed, QuestID) == 0x000000, "Member 'Conditionals_HasQuestFailed::QuestID' has a wrong offset!");
static_assert(offsetof(Conditionals_HasQuestFailed, ReturnValue) == 0x000010, "Member 'Conditionals_HasQuestFailed::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.HasQuestStateFailed
// 0x0018 (0x0018 - 0x0000)
struct Conditionals_HasQuestStateFailed final
{
public:
	struct FGuid                                  QuestID;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NodeID;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_HasQuestStateFailed) == 0x000004, "Wrong alignment on Conditionals_HasQuestStateFailed");
static_assert(sizeof(Conditionals_HasQuestStateFailed) == 0x000018, "Wrong size on Conditionals_HasQuestStateFailed");
static_assert(offsetof(Conditionals_HasQuestStateFailed, QuestID) == 0x000000, "Member 'Conditionals_HasQuestStateFailed::QuestID' has a wrong offset!");
static_assert(offsetof(Conditionals_HasQuestStateFailed, NodeID) == 0x000010, "Member 'Conditionals_HasQuestStateFailed::NodeID' has a wrong offset!");
static_assert(offsetof(Conditionals_HasQuestStateFailed, ReturnValue) == 0x000014, "Member 'Conditionals_HasQuestStateFailed::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.HaveDaysElapsedSinceNamedTimestamp
// 0x0018 (0x0018 - 0x0000)
struct Conditionals_HaveDaysElapsedSinceNamedTimestamp final
{
public:
	class FString                                 TimestampName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Days;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_HaveDaysElapsedSinceNamedTimestamp) == 0x000008, "Wrong alignment on Conditionals_HaveDaysElapsedSinceNamedTimestamp");
static_assert(sizeof(Conditionals_HaveDaysElapsedSinceNamedTimestamp) == 0x000018, "Wrong size on Conditionals_HaveDaysElapsedSinceNamedTimestamp");
static_assert(offsetof(Conditionals_HaveDaysElapsedSinceNamedTimestamp, TimestampName) == 0x000000, "Member 'Conditionals_HaveDaysElapsedSinceNamedTimestamp::TimestampName' has a wrong offset!");
static_assert(offsetof(Conditionals_HaveDaysElapsedSinceNamedTimestamp, Days) == 0x000010, "Member 'Conditionals_HaveDaysElapsedSinceNamedTimestamp::Days' has a wrong offset!");
static_assert(offsetof(Conditionals_HaveDaysElapsedSinceNamedTimestamp, ReturnValue) == 0x000014, "Member 'Conditionals_HaveDaysElapsedSinceNamedTimestamp::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.HaveHoursElapsedSinceNamedTimestamp
// 0x0018 (0x0018 - 0x0000)
struct Conditionals_HaveHoursElapsedSinceNamedTimestamp final
{
public:
	class FString                                 TimestampName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Hours;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_HaveHoursElapsedSinceNamedTimestamp) == 0x000008, "Wrong alignment on Conditionals_HaveHoursElapsedSinceNamedTimestamp");
static_assert(sizeof(Conditionals_HaveHoursElapsedSinceNamedTimestamp) == 0x000018, "Wrong size on Conditionals_HaveHoursElapsedSinceNamedTimestamp");
static_assert(offsetof(Conditionals_HaveHoursElapsedSinceNamedTimestamp, TimestampName) == 0x000000, "Member 'Conditionals_HaveHoursElapsedSinceNamedTimestamp::TimestampName' has a wrong offset!");
static_assert(offsetof(Conditionals_HaveHoursElapsedSinceNamedTimestamp, Hours) == 0x000010, "Member 'Conditionals_HaveHoursElapsedSinceNamedTimestamp::Hours' has a wrong offset!");
static_assert(offsetof(Conditionals_HaveHoursElapsedSinceNamedTimestamp, ReturnValue) == 0x000014, "Member 'Conditionals_HaveHoursElapsedSinceNamedTimestamp::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.HaveMinutesElapsedSinceNamedTimestamp
// 0x0018 (0x0018 - 0x0000)
struct Conditionals_HaveMinutesElapsedSinceNamedTimestamp final
{
public:
	class FString                                 TimestampName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minutes;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_HaveMinutesElapsedSinceNamedTimestamp) == 0x000008, "Wrong alignment on Conditionals_HaveMinutesElapsedSinceNamedTimestamp");
static_assert(sizeof(Conditionals_HaveMinutesElapsedSinceNamedTimestamp) == 0x000018, "Wrong size on Conditionals_HaveMinutesElapsedSinceNamedTimestamp");
static_assert(offsetof(Conditionals_HaveMinutesElapsedSinceNamedTimestamp, TimestampName) == 0x000000, "Member 'Conditionals_HaveMinutesElapsedSinceNamedTimestamp::TimestampName' has a wrong offset!");
static_assert(offsetof(Conditionals_HaveMinutesElapsedSinceNamedTimestamp, Minutes) == 0x000010, "Member 'Conditionals_HaveMinutesElapsedSinceNamedTimestamp::Minutes' has a wrong offset!");
static_assert(offsetof(Conditionals_HaveMinutesElapsedSinceNamedTimestamp, ReturnValue) == 0x000014, "Member 'Conditionals_HaveMinutesElapsedSinceNamedTimestamp::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.IsAnyArmorEquipped
// 0x0001 (0x0001 - 0x0000)
struct Conditionals_IsAnyArmorEquipped final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Conditionals_IsAnyArmorEquipped) == 0x000001, "Wrong alignment on Conditionals_IsAnyArmorEquipped");
static_assert(sizeof(Conditionals_IsAnyArmorEquipped) == 0x000001, "Wrong size on Conditionals_IsAnyArmorEquipped");
static_assert(offsetof(Conditionals_IsAnyArmorEquipped, ReturnValue) == 0x000000, "Member 'Conditionals_IsAnyArmorEquipped::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.IsArmorEquipped
// 0x0018 (0x0018 - 0x0000)
struct Conditionals_IsArmorEquipped final
{
public:
	class FString                                 ArmorItem;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeDerivedClasses;                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_IsArmorEquipped) == 0x000008, "Wrong alignment on Conditionals_IsArmorEquipped");
static_assert(sizeof(Conditionals_IsArmorEquipped) == 0x000018, "Wrong size on Conditionals_IsArmorEquipped");
static_assert(offsetof(Conditionals_IsArmorEquipped, ArmorItem) == 0x000000, "Member 'Conditionals_IsArmorEquipped::ArmorItem' has a wrong offset!");
static_assert(offsetof(Conditionals_IsArmorEquipped, bIncludeDerivedClasses) == 0x000010, "Member 'Conditionals_IsArmorEquipped::bIncludeDerivedClasses' has a wrong offset!");
static_assert(offsetof(Conditionals_IsArmorEquipped, ReturnValue) == 0x000011, "Member 'Conditionals_IsArmorEquipped::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.IsCharacterGrouping
// 0x0002 (0x0002 - 0x0000)
struct Conditionals_IsCharacterGrouping final
{
public:
	ECharacterGrouping                            CharacterGrouping;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Conditionals_IsCharacterGrouping) == 0x000001, "Wrong alignment on Conditionals_IsCharacterGrouping");
static_assert(sizeof(Conditionals_IsCharacterGrouping) == 0x000002, "Wrong size on Conditionals_IsCharacterGrouping");
static_assert(offsetof(Conditionals_IsCharacterGrouping, CharacterGrouping) == 0x000000, "Member 'Conditionals_IsCharacterGrouping::CharacterGrouping' has a wrong offset!");
static_assert(offsetof(Conditionals_IsCharacterGrouping, ReturnValue) == 0x000001, "Member 'Conditionals_IsCharacterGrouping::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.IsCompanionActiveInParty
// 0x0014 (0x0014 - 0x0000)
struct Conditionals_IsCompanionActiveInParty final
{
public:
	struct FGuid                                  CompanionID;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_IsCompanionActiveInParty) == 0x000004, "Wrong alignment on Conditionals_IsCompanionActiveInParty");
static_assert(sizeof(Conditionals_IsCompanionActiveInParty) == 0x000014, "Wrong size on Conditionals_IsCompanionActiveInParty");
static_assert(offsetof(Conditionals_IsCompanionActiveInParty, CompanionID) == 0x000000, "Member 'Conditionals_IsCompanionActiveInParty::CompanionID' has a wrong offset!");
static_assert(offsetof(Conditionals_IsCompanionActiveInParty, ReturnValue) == 0x000010, "Member 'Conditionals_IsCompanionActiveInParty::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.IsCompanionDismissed
// 0x0002 (0x0002 - 0x0000)
struct Conditionals_IsCompanionDismissed final
{
public:
	ESpecialObsidianID                            CompanionID;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Conditionals_IsCompanionDismissed) == 0x000001, "Wrong alignment on Conditionals_IsCompanionDismissed");
static_assert(sizeof(Conditionals_IsCompanionDismissed) == 0x000002, "Wrong size on Conditionals_IsCompanionDismissed");
static_assert(offsetof(Conditionals_IsCompanionDismissed, CompanionID) == 0x000000, "Member 'Conditionals_IsCompanionDismissed::CompanionID' has a wrong offset!");
static_assert(offsetof(Conditionals_IsCompanionDismissed, ReturnValue) == 0x000001, "Member 'Conditionals_IsCompanionDismissed::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.IsCompanionMoral
// 0x000C (0x000C - 0x0000)
struct Conditionals_IsCompanionMoral final
{
public:
	ESpecialObsidianID                            CompanionID;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComparisonOperator                           Operator;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoralAmount;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_IsCompanionMoral) == 0x000004, "Wrong alignment on Conditionals_IsCompanionMoral");
static_assert(sizeof(Conditionals_IsCompanionMoral) == 0x00000C, "Wrong size on Conditionals_IsCompanionMoral");
static_assert(offsetof(Conditionals_IsCompanionMoral, CompanionID) == 0x000000, "Member 'Conditionals_IsCompanionMoral::CompanionID' has a wrong offset!");
static_assert(offsetof(Conditionals_IsCompanionMoral, Operator) == 0x000001, "Member 'Conditionals_IsCompanionMoral::Operator' has a wrong offset!");
static_assert(offsetof(Conditionals_IsCompanionMoral, MoralAmount) == 0x000004, "Member 'Conditionals_IsCompanionMoral::MoralAmount' has a wrong offset!");
static_assert(offsetof(Conditionals_IsCompanionMoral, ReturnValue) == 0x000008, "Member 'Conditionals_IsCompanionMoral::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.IsCompanionUnlocked
// 0x0002 (0x0002 - 0x0000)
struct Conditionals_IsCompanionUnlocked final
{
public:
	ESpecialObsidianID                            CompanionID;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Conditionals_IsCompanionUnlocked) == 0x000001, "Wrong alignment on Conditionals_IsCompanionUnlocked");
static_assert(sizeof(Conditionals_IsCompanionUnlocked) == 0x000002, "Wrong size on Conditionals_IsCompanionUnlocked");
static_assert(offsetof(Conditionals_IsCompanionUnlocked, CompanionID) == 0x000000, "Member 'Conditionals_IsCompanionUnlocked::CompanionID' has a wrong offset!");
static_assert(offsetof(Conditionals_IsCompanionUnlocked, ReturnValue) == 0x000001, "Member 'Conditionals_IsCompanionUnlocked::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.IsCurrentActiveCompanionAmount
// 0x000C (0x000C - 0x0000)
struct Conditionals_IsCurrentActiveCompanionAmount final
{
public:
	EComparisonOperator                           Operator;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Quantity;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_IsCurrentActiveCompanionAmount) == 0x000004, "Wrong alignment on Conditionals_IsCurrentActiveCompanionAmount");
static_assert(sizeof(Conditionals_IsCurrentActiveCompanionAmount) == 0x00000C, "Wrong size on Conditionals_IsCurrentActiveCompanionAmount");
static_assert(offsetof(Conditionals_IsCurrentActiveCompanionAmount, Operator) == 0x000000, "Member 'Conditionals_IsCurrentActiveCompanionAmount::Operator' has a wrong offset!");
static_assert(offsetof(Conditionals_IsCurrentActiveCompanionAmount, Quantity) == 0x000004, "Member 'Conditionals_IsCurrentActiveCompanionAmount::Quantity' has a wrong offset!");
static_assert(offsetof(Conditionals_IsCurrentActiveCompanionAmount, ReturnValue) == 0x000008, "Member 'Conditionals_IsCurrentActiveCompanionAmount::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.IsFactionRelationship
// 0x0018 (0x0018 - 0x0000)
struct Conditionals_IsFactionRelationship final
{
public:
	class FString                                 Faction;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETeamAttitude                                 AttitudeType;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_IsFactionRelationship) == 0x000008, "Wrong alignment on Conditionals_IsFactionRelationship");
static_assert(sizeof(Conditionals_IsFactionRelationship) == 0x000018, "Wrong size on Conditionals_IsFactionRelationship");
static_assert(offsetof(Conditionals_IsFactionRelationship, Faction) == 0x000000, "Member 'Conditionals_IsFactionRelationship::Faction' has a wrong offset!");
static_assert(offsetof(Conditionals_IsFactionRelationship, AttitudeType) == 0x000010, "Member 'Conditionals_IsFactionRelationship::AttitudeType' has a wrong offset!");
static_assert(offsetof(Conditionals_IsFactionRelationship, ReturnValue) == 0x000011, "Member 'Conditionals_IsFactionRelationship::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.IsFactionReputationRank
// 0x0020 (0x0020 - 0x0000)
struct Conditionals_IsFactionReputationRank final
{
public:
	class FString                                 Faction;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EReputationRankType                           ReputationRankType;                                // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Rank;                                              // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComparisonOperator                           Operator;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_IsFactionReputationRank) == 0x000008, "Wrong alignment on Conditionals_IsFactionReputationRank");
static_assert(sizeof(Conditionals_IsFactionReputationRank) == 0x000020, "Wrong size on Conditionals_IsFactionReputationRank");
static_assert(offsetof(Conditionals_IsFactionReputationRank, Faction) == 0x000000, "Member 'Conditionals_IsFactionReputationRank::Faction' has a wrong offset!");
static_assert(offsetof(Conditionals_IsFactionReputationRank, ReputationRankType) == 0x000010, "Member 'Conditionals_IsFactionReputationRank::ReputationRankType' has a wrong offset!");
static_assert(offsetof(Conditionals_IsFactionReputationRank, Rank) == 0x000014, "Member 'Conditionals_IsFactionReputationRank::Rank' has a wrong offset!");
static_assert(offsetof(Conditionals_IsFactionReputationRank, Operator) == 0x000018, "Member 'Conditionals_IsFactionReputationRank::Operator' has a wrong offset!");
static_assert(offsetof(Conditionals_IsFactionReputationRank, ReturnValue) == 0x000019, "Member 'Conditionals_IsFactionReputationRank::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.IsFactionReputationRankType
// 0x0018 (0x0018 - 0x0000)
struct Conditionals_IsFactionReputationRankType final
{
public:
	class FString                                 Faction;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EReputationRankType                           ReputationRankType;                                // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComparisonOperator                           Operator;                                          // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0012(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_IsFactionReputationRankType) == 0x000008, "Wrong alignment on Conditionals_IsFactionReputationRankType");
static_assert(sizeof(Conditionals_IsFactionReputationRankType) == 0x000018, "Wrong size on Conditionals_IsFactionReputationRankType");
static_assert(offsetof(Conditionals_IsFactionReputationRankType, Faction) == 0x000000, "Member 'Conditionals_IsFactionReputationRankType::Faction' has a wrong offset!");
static_assert(offsetof(Conditionals_IsFactionReputationRankType, ReputationRankType) == 0x000010, "Member 'Conditionals_IsFactionReputationRankType::ReputationRankType' has a wrong offset!");
static_assert(offsetof(Conditionals_IsFactionReputationRankType, Operator) == 0x000011, "Member 'Conditionals_IsFactionReputationRankType::Operator' has a wrong offset!");
static_assert(offsetof(Conditionals_IsFactionReputationRankType, ReturnValue) == 0x000012, "Member 'Conditionals_IsFactionReputationRankType::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.IsGlobalValue
// 0x0020 (0x0020 - 0x0000)
struct Conditionals_IsGlobalValue final
{
public:
	class FString                                 VariableName;                                      // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComparisonOperator                           Operator;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_IsGlobalValue) == 0x000008, "Wrong alignment on Conditionals_IsGlobalValue");
static_assert(sizeof(Conditionals_IsGlobalValue) == 0x000020, "Wrong size on Conditionals_IsGlobalValue");
static_assert(offsetof(Conditionals_IsGlobalValue, VariableName) == 0x000000, "Member 'Conditionals_IsGlobalValue::VariableName' has a wrong offset!");
static_assert(offsetof(Conditionals_IsGlobalValue, Operator) == 0x000010, "Member 'Conditionals_IsGlobalValue::Operator' has a wrong offset!");
static_assert(offsetof(Conditionals_IsGlobalValue, Value) == 0x000014, "Member 'Conditionals_IsGlobalValue::Value' has a wrong offset!");
static_assert(offsetof(Conditionals_IsGlobalValue, ReturnValue) == 0x000018, "Member 'Conditionals_IsGlobalValue::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.IsInMap
// 0x0018 (0x0018 - 0x0000)
struct Conditionals_IsInMap final
{
public:
	class FString                                 MapID;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_IsInMap) == 0x000008, "Wrong alignment on Conditionals_IsInMap");
static_assert(sizeof(Conditionals_IsInMap) == 0x000018, "Wrong size on Conditionals_IsInMap");
static_assert(offsetof(Conditionals_IsInMap, MapID) == 0x000000, "Member 'Conditionals_IsInMap::MapID' has a wrong offset!");
static_assert(offsetof(Conditionals_IsInMap, ReturnValue) == 0x000010, "Member 'Conditionals_IsInMap::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.IsInterrogationCrime
// 0x0002 (0x0002 - 0x0000)
struct Conditionals_IsInterrogationCrime final
{
public:
	ECrimeType                                    Crime;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Conditionals_IsInterrogationCrime) == 0x000001, "Wrong alignment on Conditionals_IsInterrogationCrime");
static_assert(sizeof(Conditionals_IsInterrogationCrime) == 0x000002, "Wrong size on Conditionals_IsInterrogationCrime");
static_assert(offsetof(Conditionals_IsInterrogationCrime, Crime) == 0x000000, "Member 'Conditionals_IsInterrogationCrime::Crime' has a wrong offset!");
static_assert(offsetof(Conditionals_IsInterrogationCrime, ReturnValue) == 0x000001, "Member 'Conditionals_IsInterrogationCrime::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.IsInterrogationDisguised
// 0x0001 (0x0001 - 0x0000)
struct Conditionals_IsInterrogationDisguised final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Conditionals_IsInterrogationDisguised) == 0x000001, "Wrong alignment on Conditionals_IsInterrogationDisguised");
static_assert(sizeof(Conditionals_IsInterrogationDisguised) == 0x000001, "Wrong size on Conditionals_IsInterrogationDisguised");
static_assert(offsetof(Conditionals_IsInterrogationDisguised, ReturnValue) == 0x000000, "Member 'Conditionals_IsInterrogationDisguised::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.IsInterrogationInRestrictedArea
// 0x0001 (0x0001 - 0x0000)
struct Conditionals_IsInterrogationInRestrictedArea final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Conditionals_IsInterrogationInRestrictedArea) == 0x000001, "Wrong alignment on Conditionals_IsInterrogationInRestrictedArea");
static_assert(sizeof(Conditionals_IsInterrogationInRestrictedArea) == 0x000001, "Wrong size on Conditionals_IsInterrogationInRestrictedArea");
static_assert(offsetof(Conditionals_IsInterrogationInRestrictedArea, ReturnValue) == 0x000000, "Member 'Conditionals_IsInterrogationInRestrictedArea::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.IsInterrogationsPassedCount
// 0x000C (0x000C - 0x0000)
struct Conditionals_IsInterrogationsPassedCount final
{
public:
	EComparisonOperator                           Operator;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Count;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_IsInterrogationsPassedCount) == 0x000004, "Wrong alignment on Conditionals_IsInterrogationsPassedCount");
static_assert(sizeof(Conditionals_IsInterrogationsPassedCount) == 0x00000C, "Wrong size on Conditionals_IsInterrogationsPassedCount");
static_assert(offsetof(Conditionals_IsInterrogationsPassedCount, Operator) == 0x000000, "Member 'Conditionals_IsInterrogationsPassedCount::Operator' has a wrong offset!");
static_assert(offsetof(Conditionals_IsInterrogationsPassedCount, Count) == 0x000004, "Member 'Conditionals_IsInterrogationsPassedCount::Count' has a wrong offset!");
static_assert(offsetof(Conditionals_IsInterrogationsPassedCount, ReturnValue) == 0x000008, "Member 'Conditionals_IsInterrogationsPassedCount::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.IsItemQuantity
// 0x0020 (0x0020 - 0x0000)
struct Conditionals_IsItemQuantity final
{
public:
	class FString                                 Item;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComparisonOperator                           Operator;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Quantity;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_IsItemQuantity) == 0x000008, "Wrong alignment on Conditionals_IsItemQuantity");
static_assert(sizeof(Conditionals_IsItemQuantity) == 0x000020, "Wrong size on Conditionals_IsItemQuantity");
static_assert(offsetof(Conditionals_IsItemQuantity, Item) == 0x000000, "Member 'Conditionals_IsItemQuantity::Item' has a wrong offset!");
static_assert(offsetof(Conditionals_IsItemQuantity, Operator) == 0x000010, "Member 'Conditionals_IsItemQuantity::Operator' has a wrong offset!");
static_assert(offsetof(Conditionals_IsItemQuantity, Quantity) == 0x000014, "Member 'Conditionals_IsItemQuantity::Quantity' has a wrong offset!");
static_assert(offsetof(Conditionals_IsItemQuantity, ReturnValue) == 0x000018, "Member 'Conditionals_IsItemQuantity::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.IsOCLStateEqual
// 0x0014 (0x0014 - 0x0000)
struct Conditionals_IsOCLStateEqual final
{
public:
	struct FGuid                                  OCLObjectID;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOCLState                                     State;                                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_IsOCLStateEqual) == 0x000004, "Wrong alignment on Conditionals_IsOCLStateEqual");
static_assert(sizeof(Conditionals_IsOCLStateEqual) == 0x000014, "Wrong size on Conditionals_IsOCLStateEqual");
static_assert(offsetof(Conditionals_IsOCLStateEqual, OCLObjectID) == 0x000000, "Member 'Conditionals_IsOCLStateEqual::OCLObjectID' has a wrong offset!");
static_assert(offsetof(Conditionals_IsOCLStateEqual, State) == 0x000010, "Member 'Conditionals_IsOCLStateEqual::State' has a wrong offset!");
static_assert(offsetof(Conditionals_IsOCLStateEqual, ReturnValue) == 0x000011, "Member 'Conditionals_IsOCLStateEqual::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.IsPartyFull
// 0x0001 (0x0001 - 0x0000)
struct Conditionals_IsPartyFull final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Conditionals_IsPartyFull) == 0x000001, "Wrong alignment on Conditionals_IsPartyFull");
static_assert(sizeof(Conditionals_IsPartyFull) == 0x000001, "Wrong size on Conditionals_IsPartyFull");
static_assert(offsetof(Conditionals_IsPartyFull, ReturnValue) == 0x000000, "Member 'Conditionals_IsPartyFull::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.IsPhaseOfDay
// 0x0002 (0x0002 - 0x0000)
struct Conditionals_IsPhaseOfDay final
{
public:
	EPhaseOfDay                                   Phase;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Conditionals_IsPhaseOfDay) == 0x000001, "Wrong alignment on Conditionals_IsPhaseOfDay");
static_assert(sizeof(Conditionals_IsPhaseOfDay) == 0x000002, "Wrong size on Conditionals_IsPhaseOfDay");
static_assert(offsetof(Conditionals_IsPhaseOfDay, Phase) == 0x000000, "Member 'Conditionals_IsPhaseOfDay::Phase' has a wrong offset!");
static_assert(offsetof(Conditionals_IsPhaseOfDay, ReturnValue) == 0x000001, "Member 'Conditionals_IsPhaseOfDay::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.IsPlayerAttribute
// 0x0004 (0x0004 - 0x0000)
struct Conditionals_IsPlayerAttribute final
{
public:
	EAttribute                                    Attribute;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComparisonOperator                           Operator;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterAttributeRange                      AttributeRange;                                    // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Conditionals_IsPlayerAttribute) == 0x000001, "Wrong alignment on Conditionals_IsPlayerAttribute");
static_assert(sizeof(Conditionals_IsPlayerAttribute) == 0x000004, "Wrong size on Conditionals_IsPlayerAttribute");
static_assert(offsetof(Conditionals_IsPlayerAttribute, Attribute) == 0x000000, "Member 'Conditionals_IsPlayerAttribute::Attribute' has a wrong offset!");
static_assert(offsetof(Conditionals_IsPlayerAttribute, Operator) == 0x000001, "Member 'Conditionals_IsPlayerAttribute::Operator' has a wrong offset!");
static_assert(offsetof(Conditionals_IsPlayerAttribute, AttributeRange) == 0x000002, "Member 'Conditionals_IsPlayerAttribute::AttributeRange' has a wrong offset!");
static_assert(offsetof(Conditionals_IsPlayerAttribute, ReturnValue) == 0x000003, "Member 'Conditionals_IsPlayerAttribute::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.IsPlayerAwareOfPointOfInterest
// 0x0018 (0x0018 - 0x0000)
struct Conditionals_IsPlayerAwareOfPointOfInterest final
{
public:
	class FString                                 PointOfInterestData;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_IsPlayerAwareOfPointOfInterest) == 0x000008, "Wrong alignment on Conditionals_IsPlayerAwareOfPointOfInterest");
static_assert(sizeof(Conditionals_IsPlayerAwareOfPointOfInterest) == 0x000018, "Wrong size on Conditionals_IsPlayerAwareOfPointOfInterest");
static_assert(offsetof(Conditionals_IsPlayerAwareOfPointOfInterest, PointOfInterestData) == 0x000000, "Member 'Conditionals_IsPlayerAwareOfPointOfInterest::PointOfInterestData' has a wrong offset!");
static_assert(offsetof(Conditionals_IsPlayerAwareOfPointOfInterest, ReturnValue) == 0x000010, "Member 'Conditionals_IsPlayerAwareOfPointOfInterest::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.IsPlayerAwareOfRegion
// 0x0018 (0x0018 - 0x0000)
struct Conditionals_IsPlayerAwareOfRegion final
{
public:
	class FString                                 TravelRegion;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_IsPlayerAwareOfRegion) == 0x000008, "Wrong alignment on Conditionals_IsPlayerAwareOfRegion");
static_assert(sizeof(Conditionals_IsPlayerAwareOfRegion) == 0x000018, "Wrong size on Conditionals_IsPlayerAwareOfRegion");
static_assert(offsetof(Conditionals_IsPlayerAwareOfRegion, TravelRegion) == 0x000000, "Member 'Conditionals_IsPlayerAwareOfRegion::TravelRegion' has a wrong offset!");
static_assert(offsetof(Conditionals_IsPlayerAwareOfRegion, ReturnValue) == 0x000010, "Member 'Conditionals_IsPlayerAwareOfRegion::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.IsPlayerAwareOfTravelDestination
// 0x0018 (0x0018 - 0x0000)
struct Conditionals_IsPlayerAwareOfTravelDestination final
{
public:
	class FString                                 TravelDestination;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_IsPlayerAwareOfTravelDestination) == 0x000008, "Wrong alignment on Conditionals_IsPlayerAwareOfTravelDestination");
static_assert(sizeof(Conditionals_IsPlayerAwareOfTravelDestination) == 0x000018, "Wrong size on Conditionals_IsPlayerAwareOfTravelDestination");
static_assert(offsetof(Conditionals_IsPlayerAwareOfTravelDestination, TravelDestination) == 0x000000, "Member 'Conditionals_IsPlayerAwareOfTravelDestination::TravelDestination' has a wrong offset!");
static_assert(offsetof(Conditionals_IsPlayerAwareOfTravelDestination, ReturnValue) == 0x000010, "Member 'Conditionals_IsPlayerAwareOfTravelDestination::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.IsPlayerDisguisedAs
// 0x0018 (0x0018 - 0x0000)
struct Conditionals_IsPlayerDisguisedAs final
{
public:
	class FString                                 Faction;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_IsPlayerDisguisedAs) == 0x000008, "Wrong alignment on Conditionals_IsPlayerDisguisedAs");
static_assert(sizeof(Conditionals_IsPlayerDisguisedAs) == 0x000018, "Wrong size on Conditionals_IsPlayerDisguisedAs");
static_assert(offsetof(Conditionals_IsPlayerDisguisedAs, Faction) == 0x000000, "Member 'Conditionals_IsPlayerDisguisedAs::Faction' has a wrong offset!");
static_assert(offsetof(Conditionals_IsPlayerDisguisedAs, ReturnValue) == 0x000010, "Member 'Conditionals_IsPlayerDisguisedAs::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.IsPlayerInCombat
// 0x0001 (0x0001 - 0x0000)
struct Conditionals_IsPlayerInCombat final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Conditionals_IsPlayerInCombat) == 0x000001, "Wrong alignment on Conditionals_IsPlayerInCombat");
static_assert(sizeof(Conditionals_IsPlayerInCombat) == 0x000001, "Wrong size on Conditionals_IsPlayerInCombat");
static_assert(offsetof(Conditionals_IsPlayerInCombat, ReturnValue) == 0x000000, "Member 'Conditionals_IsPlayerInCombat::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.IsPlayerInStealth
// 0x0001 (0x0001 - 0x0000)
struct Conditionals_IsPlayerInStealth final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Conditionals_IsPlayerInStealth) == 0x000001, "Wrong alignment on Conditionals_IsPlayerInStealth");
static_assert(sizeof(Conditionals_IsPlayerInStealth) == 0x000001, "Wrong size on Conditionals_IsPlayerInStealth");
static_assert(offsetof(Conditionals_IsPlayerInStealth, ReturnValue) == 0x000000, "Member 'Conditionals_IsPlayerInStealth::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.IsPlayerShipCurrentAt
// 0x0018 (0x0018 - 0x0000)
struct Conditionals_IsPlayerShipCurrentAt final
{
public:
	class FString                                 ShipDestination;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_IsPlayerShipCurrentAt) == 0x000008, "Wrong alignment on Conditionals_IsPlayerShipCurrentAt");
static_assert(sizeof(Conditionals_IsPlayerShipCurrentAt) == 0x000018, "Wrong size on Conditionals_IsPlayerShipCurrentAt");
static_assert(offsetof(Conditionals_IsPlayerShipCurrentAt, ShipDestination) == 0x000000, "Member 'Conditionals_IsPlayerShipCurrentAt::ShipDestination' has a wrong offset!");
static_assert(offsetof(Conditionals_IsPlayerShipCurrentAt, ReturnValue) == 0x000010, "Member 'Conditionals_IsPlayerShipCurrentAt::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.IsPlayerSkill
// 0x0005 (0x0005 - 0x0000)
struct Conditionals_IsPlayerSkill final
{
public:
	ESkill                                        Skill;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComparisonOperator                           Operator;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterSkillRange                          SkillRange;                                        // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCompanionInterjection;                         // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Conditionals_IsPlayerSkill) == 0x000001, "Wrong alignment on Conditionals_IsPlayerSkill");
static_assert(sizeof(Conditionals_IsPlayerSkill) == 0x000005, "Wrong size on Conditionals_IsPlayerSkill");
static_assert(offsetof(Conditionals_IsPlayerSkill, Skill) == 0x000000, "Member 'Conditionals_IsPlayerSkill::Skill' has a wrong offset!");
static_assert(offsetof(Conditionals_IsPlayerSkill, Operator) == 0x000001, "Member 'Conditionals_IsPlayerSkill::Operator' has a wrong offset!");
static_assert(offsetof(Conditionals_IsPlayerSkill, SkillRange) == 0x000002, "Member 'Conditionals_IsPlayerSkill::SkillRange' has a wrong offset!");
static_assert(offsetof(Conditionals_IsPlayerSkill, bUseCompanionInterjection) == 0x000003, "Member 'Conditionals_IsPlayerSkill::bUseCompanionInterjection' has a wrong offset!");
static_assert(offsetof(Conditionals_IsPlayerSkill, ReturnValue) == 0x000004, "Member 'Conditionals_IsPlayerSkill::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.IsPlayerSkillLevelScaled
// 0x000C (0x000C - 0x0000)
struct Conditionals_IsPlayerSkillLevelScaled final
{
public:
	ESkill                                        Skill;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComparisonOperator                           Operator;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterSkillRange                          SkillRange;                                        // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LevelOverride;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCompanionInterjection;                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_IsPlayerSkillLevelScaled) == 0x000004, "Wrong alignment on Conditionals_IsPlayerSkillLevelScaled");
static_assert(sizeof(Conditionals_IsPlayerSkillLevelScaled) == 0x00000C, "Wrong size on Conditionals_IsPlayerSkillLevelScaled");
static_assert(offsetof(Conditionals_IsPlayerSkillLevelScaled, Skill) == 0x000000, "Member 'Conditionals_IsPlayerSkillLevelScaled::Skill' has a wrong offset!");
static_assert(offsetof(Conditionals_IsPlayerSkillLevelScaled, Operator) == 0x000001, "Member 'Conditionals_IsPlayerSkillLevelScaled::Operator' has a wrong offset!");
static_assert(offsetof(Conditionals_IsPlayerSkillLevelScaled, SkillRange) == 0x000002, "Member 'Conditionals_IsPlayerSkillLevelScaled::SkillRange' has a wrong offset!");
static_assert(offsetof(Conditionals_IsPlayerSkillLevelScaled, LevelOverride) == 0x000004, "Member 'Conditionals_IsPlayerSkillLevelScaled::LevelOverride' has a wrong offset!");
static_assert(offsetof(Conditionals_IsPlayerSkillLevelScaled, bUseCompanionInterjection) == 0x000008, "Member 'Conditionals_IsPlayerSkillLevelScaled::bUseCompanionInterjection' has a wrong offset!");
static_assert(offsetof(Conditionals_IsPlayerSkillLevelScaled, ReturnValue) == 0x000009, "Member 'Conditionals_IsPlayerSkillLevelScaled::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.IsPlayerSkillValue
// 0x000C (0x000C - 0x0000)
struct Conditionals_IsPlayerSkillValue final
{
public:
	ESkill                                        Skill;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComparisonOperator                           Operator;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SkillValue;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCompanionInterjection;                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPermanentOnly;                                    // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_IsPlayerSkillValue) == 0x000004, "Wrong alignment on Conditionals_IsPlayerSkillValue");
static_assert(sizeof(Conditionals_IsPlayerSkillValue) == 0x00000C, "Wrong size on Conditionals_IsPlayerSkillValue");
static_assert(offsetof(Conditionals_IsPlayerSkillValue, Skill) == 0x000000, "Member 'Conditionals_IsPlayerSkillValue::Skill' has a wrong offset!");
static_assert(offsetof(Conditionals_IsPlayerSkillValue, Operator) == 0x000001, "Member 'Conditionals_IsPlayerSkillValue::Operator' has a wrong offset!");
static_assert(offsetof(Conditionals_IsPlayerSkillValue, SkillValue) == 0x000004, "Member 'Conditionals_IsPlayerSkillValue::SkillValue' has a wrong offset!");
static_assert(offsetof(Conditionals_IsPlayerSkillValue, bUseCompanionInterjection) == 0x000008, "Member 'Conditionals_IsPlayerSkillValue::bUseCompanionInterjection' has a wrong offset!");
static_assert(offsetof(Conditionals_IsPlayerSkillValue, bPermanentOnly) == 0x000009, "Member 'Conditionals_IsPlayerSkillValue::bPermanentOnly' has a wrong offset!");
static_assert(offsetof(Conditionals_IsPlayerSkillValue, ReturnValue) == 0x00000A, "Member 'Conditionals_IsPlayerSkillValue::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.IsPlayerTravelDestinationHidden
// 0x0018 (0x0018 - 0x0000)
struct Conditionals_IsPlayerTravelDestinationHidden final
{
public:
	class FString                                 TravelDestination;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_IsPlayerTravelDestinationHidden) == 0x000008, "Wrong alignment on Conditionals_IsPlayerTravelDestinationHidden");
static_assert(sizeof(Conditionals_IsPlayerTravelDestinationHidden) == 0x000018, "Wrong size on Conditionals_IsPlayerTravelDestinationHidden");
static_assert(offsetof(Conditionals_IsPlayerTravelDestinationHidden, TravelDestination) == 0x000000, "Member 'Conditionals_IsPlayerTravelDestinationHidden::TravelDestination' has a wrong offset!");
static_assert(offsetof(Conditionals_IsPlayerTravelDestinationHidden, ReturnValue) == 0x000010, "Member 'Conditionals_IsPlayerTravelDestinationHidden::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.IsPlayerTravelDestinationLocked
// 0x0018 (0x0018 - 0x0000)
struct Conditionals_IsPlayerTravelDestinationLocked final
{
public:
	class FString                                 TravelDestination;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_IsPlayerTravelDestinationLocked) == 0x000008, "Wrong alignment on Conditionals_IsPlayerTravelDestinationLocked");
static_assert(sizeof(Conditionals_IsPlayerTravelDestinationLocked) == 0x000018, "Wrong size on Conditionals_IsPlayerTravelDestinationLocked");
static_assert(offsetof(Conditionals_IsPlayerTravelDestinationLocked, TravelDestination) == 0x000000, "Member 'Conditionals_IsPlayerTravelDestinationLocked::TravelDestination' has a wrong offset!");
static_assert(offsetof(Conditionals_IsPlayerTravelDestinationLocked, ReturnValue) == 0x000010, "Member 'Conditionals_IsPlayerTravelDestinationLocked::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.IsQuestActive
// 0x0014 (0x0014 - 0x0000)
struct Conditionals_IsQuestActive final
{
public:
	struct FGuid                                  QuestID;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_IsQuestActive) == 0x000004, "Wrong alignment on Conditionals_IsQuestActive");
static_assert(sizeof(Conditionals_IsQuestActive) == 0x000014, "Wrong size on Conditionals_IsQuestActive");
static_assert(offsetof(Conditionals_IsQuestActive, QuestID) == 0x000000, "Member 'Conditionals_IsQuestActive::QuestID' has a wrong offset!");
static_assert(offsetof(Conditionals_IsQuestActive, ReturnValue) == 0x000010, "Member 'Conditionals_IsQuestActive::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.IsQuestAddendumTriggered
// 0x0018 (0x0018 - 0x0000)
struct Conditionals_IsQuestAddendumTriggered final
{
public:
	struct FGuid                                  QuestID;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddendumID;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_IsQuestAddendumTriggered) == 0x000004, "Wrong alignment on Conditionals_IsQuestAddendumTriggered");
static_assert(sizeof(Conditionals_IsQuestAddendumTriggered) == 0x000018, "Wrong size on Conditionals_IsQuestAddendumTriggered");
static_assert(offsetof(Conditionals_IsQuestAddendumTriggered, QuestID) == 0x000000, "Member 'Conditionals_IsQuestAddendumTriggered::QuestID' has a wrong offset!");
static_assert(offsetof(Conditionals_IsQuestAddendumTriggered, AddendumID) == 0x000010, "Member 'Conditionals_IsQuestAddendumTriggered::AddendumID' has a wrong offset!");
static_assert(offsetof(Conditionals_IsQuestAddendumTriggered, ReturnValue) == 0x000014, "Member 'Conditionals_IsQuestAddendumTriggered::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.IsQuestComplete
// 0x0014 (0x0014 - 0x0000)
struct Conditionals_IsQuestComplete final
{
public:
	struct FGuid                                  QuestID;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_IsQuestComplete) == 0x000004, "Wrong alignment on Conditionals_IsQuestComplete");
static_assert(sizeof(Conditionals_IsQuestComplete) == 0x000014, "Wrong size on Conditionals_IsQuestComplete");
static_assert(offsetof(Conditionals_IsQuestComplete, QuestID) == 0x000000, "Member 'Conditionals_IsQuestComplete::QuestID' has a wrong offset!");
static_assert(offsetof(Conditionals_IsQuestComplete, ReturnValue) == 0x000010, "Member 'Conditionals_IsQuestComplete::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.IsQuestEndStateTriggered
// 0x0018 (0x0018 - 0x0000)
struct Conditionals_IsQuestEndStateTriggered final
{
public:
	struct FGuid                                  QuestID;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndStateID;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_IsQuestEndStateTriggered) == 0x000004, "Wrong alignment on Conditionals_IsQuestEndStateTriggered");
static_assert(sizeof(Conditionals_IsQuestEndStateTriggered) == 0x000018, "Wrong size on Conditionals_IsQuestEndStateTriggered");
static_assert(offsetof(Conditionals_IsQuestEndStateTriggered, QuestID) == 0x000000, "Member 'Conditionals_IsQuestEndStateTriggered::QuestID' has a wrong offset!");
static_assert(offsetof(Conditionals_IsQuestEndStateTriggered, EndStateID) == 0x000010, "Member 'Conditionals_IsQuestEndStateTriggered::EndStateID' has a wrong offset!");
static_assert(offsetof(Conditionals_IsQuestEndStateTriggered, ReturnValue) == 0x000014, "Member 'Conditionals_IsQuestEndStateTriggered::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.IsQuestEventTriggered
// 0x0018 (0x0018 - 0x0000)
struct Conditionals_IsQuestEventTriggered final
{
public:
	struct FGuid                                  QuestID;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QuestEventID;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_IsQuestEventTriggered) == 0x000004, "Wrong alignment on Conditionals_IsQuestEventTriggered");
static_assert(sizeof(Conditionals_IsQuestEventTriggered) == 0x000018, "Wrong size on Conditionals_IsQuestEventTriggered");
static_assert(offsetof(Conditionals_IsQuestEventTriggered, QuestID) == 0x000000, "Member 'Conditionals_IsQuestEventTriggered::QuestID' has a wrong offset!");
static_assert(offsetof(Conditionals_IsQuestEventTriggered, QuestEventID) == 0x000010, "Member 'Conditionals_IsQuestEventTriggered::QuestEventID' has a wrong offset!");
static_assert(offsetof(Conditionals_IsQuestEventTriggered, ReturnValue) == 0x000014, "Member 'Conditionals_IsQuestEventTriggered::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.IsQuestionNodeOnResponseBranch
// 0x000C (0x000C - 0x0000)
struct Conditionals_IsQuestionNodeOnResponseBranch final
{
public:
	int32                                         QuestionNodeID;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerResponseNodeID;                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_IsQuestionNodeOnResponseBranch) == 0x000004, "Wrong alignment on Conditionals_IsQuestionNodeOnResponseBranch");
static_assert(sizeof(Conditionals_IsQuestionNodeOnResponseBranch) == 0x00000C, "Wrong size on Conditionals_IsQuestionNodeOnResponseBranch");
static_assert(offsetof(Conditionals_IsQuestionNodeOnResponseBranch, QuestionNodeID) == 0x000000, "Member 'Conditionals_IsQuestionNodeOnResponseBranch::QuestionNodeID' has a wrong offset!");
static_assert(offsetof(Conditionals_IsQuestionNodeOnResponseBranch, PlayerResponseNodeID) == 0x000004, "Member 'Conditionals_IsQuestionNodeOnResponseBranch::PlayerResponseNodeID' has a wrong offset!");
static_assert(offsetof(Conditionals_IsQuestionNodeOnResponseBranch, ReturnValue) == 0x000008, "Member 'Conditionals_IsQuestionNodeOnResponseBranch::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.IsQuestMentioned
// 0x0014 (0x0014 - 0x0000)
struct Conditionals_IsQuestMentioned final
{
public:
	struct FGuid                                  QuestID;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_IsQuestMentioned) == 0x000004, "Wrong alignment on Conditionals_IsQuestMentioned");
static_assert(sizeof(Conditionals_IsQuestMentioned) == 0x000014, "Wrong size on Conditionals_IsQuestMentioned");
static_assert(offsetof(Conditionals_IsQuestMentioned, QuestID) == 0x000000, "Member 'Conditionals_IsQuestMentioned::QuestID' has a wrong offset!");
static_assert(offsetof(Conditionals_IsQuestMentioned, ReturnValue) == 0x000010, "Member 'Conditionals_IsQuestMentioned::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.IsQuestStarted
// 0x0014 (0x0014 - 0x0000)
struct Conditionals_IsQuestStarted final
{
public:
	struct FGuid                                  QuestID;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_IsQuestStarted) == 0x000004, "Wrong alignment on Conditionals_IsQuestStarted");
static_assert(sizeof(Conditionals_IsQuestStarted) == 0x000014, "Wrong size on Conditionals_IsQuestStarted");
static_assert(offsetof(Conditionals_IsQuestStarted, QuestID) == 0x000000, "Member 'Conditionals_IsQuestStarted::QuestID' has a wrong offset!");
static_assert(offsetof(Conditionals_IsQuestStarted, ReturnValue) == 0x000010, "Member 'Conditionals_IsQuestStarted::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.IsQuestStateActive
// 0x0018 (0x0018 - 0x0000)
struct Conditionals_IsQuestStateActive final
{
public:
	struct FGuid                                  QuestID;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NodeID;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_IsQuestStateActive) == 0x000004, "Wrong alignment on Conditionals_IsQuestStateActive");
static_assert(sizeof(Conditionals_IsQuestStateActive) == 0x000018, "Wrong size on Conditionals_IsQuestStateActive");
static_assert(offsetof(Conditionals_IsQuestStateActive, QuestID) == 0x000000, "Member 'Conditionals_IsQuestStateActive::QuestID' has a wrong offset!");
static_assert(offsetof(Conditionals_IsQuestStateActive, NodeID) == 0x000010, "Member 'Conditionals_IsQuestStateActive::NodeID' has a wrong offset!");
static_assert(offsetof(Conditionals_IsQuestStateActive, ReturnValue) == 0x000014, "Member 'Conditionals_IsQuestStateActive::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.IsQuestStateVisited
// 0x0018 (0x0018 - 0x0000)
struct Conditionals_IsQuestStateVisited final
{
public:
	struct FGuid                                  QuestID;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NodeID;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_IsQuestStateVisited) == 0x000004, "Wrong alignment on Conditionals_IsQuestStateVisited");
static_assert(sizeof(Conditionals_IsQuestStateVisited) == 0x000018, "Wrong size on Conditionals_IsQuestStateVisited");
static_assert(offsetof(Conditionals_IsQuestStateVisited, QuestID) == 0x000000, "Member 'Conditionals_IsQuestStateVisited::QuestID' has a wrong offset!");
static_assert(offsetof(Conditionals_IsQuestStateVisited, NodeID) == 0x000010, "Member 'Conditionals_IsQuestStateVisited::NodeID' has a wrong offset!");
static_assert(offsetof(Conditionals_IsQuestStateVisited, ReturnValue) == 0x000014, "Member 'Conditionals_IsQuestStateVisited::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.IsQuestTracked
// 0x0014 (0x0014 - 0x0000)
struct Conditionals_IsQuestTracked final
{
public:
	struct FGuid                                  QuestID;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_IsQuestTracked) == 0x000004, "Wrong alignment on Conditionals_IsQuestTracked");
static_assert(sizeof(Conditionals_IsQuestTracked) == 0x000014, "Wrong size on Conditionals_IsQuestTracked");
static_assert(offsetof(Conditionals_IsQuestTracked, QuestID) == 0x000000, "Member 'Conditionals_IsQuestTracked::QuestID' has a wrong offset!");
static_assert(offsetof(Conditionals_IsQuestTracked, ReturnValue) == 0x000010, "Member 'Conditionals_IsQuestTracked::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.IsRestrictedAreaEnabled
// 0x0014 (0x0014 - 0x0000)
struct Conditionals_IsRestrictedAreaEnabled final
{
public:
	struct FGuid                                  RestrictedAreaID;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_IsRestrictedAreaEnabled) == 0x000004, "Wrong alignment on Conditionals_IsRestrictedAreaEnabled");
static_assert(sizeof(Conditionals_IsRestrictedAreaEnabled) == 0x000014, "Wrong size on Conditionals_IsRestrictedAreaEnabled");
static_assert(offsetof(Conditionals_IsRestrictedAreaEnabled, RestrictedAreaID) == 0x000000, "Member 'Conditionals_IsRestrictedAreaEnabled::RestrictedAreaID' has a wrong offset!");
static_assert(offsetof(Conditionals_IsRestrictedAreaEnabled, ReturnValue) == 0x000010, "Member 'Conditionals_IsRestrictedAreaEnabled::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.IsSpeaker
// 0x0014 (0x0014 - 0x0000)
struct Conditionals_IsSpeaker final
{
public:
	struct FGuid                                  SpeakerID;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_IsSpeaker) == 0x000004, "Wrong alignment on Conditionals_IsSpeaker");
static_assert(sizeof(Conditionals_IsSpeaker) == 0x000014, "Wrong size on Conditionals_IsSpeaker");
static_assert(offsetof(Conditionals_IsSpeaker, SpeakerID) == 0x000000, "Member 'Conditionals_IsSpeaker::SpeakerID' has a wrong offset!");
static_assert(offsetof(Conditionals_IsSpeaker, ReturnValue) == 0x000010, "Member 'Conditionals_IsSpeaker::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.IsSpeakerGender
// 0x0002 (0x0002 - 0x0000)
struct Conditionals_IsSpeakerGender final
{
public:
	EGender                                       Gender;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Conditionals_IsSpeakerGender) == 0x000001, "Wrong alignment on Conditionals_IsSpeakerGender");
static_assert(sizeof(Conditionals_IsSpeakerGender) == 0x000002, "Wrong size on Conditionals_IsSpeakerGender");
static_assert(offsetof(Conditionals_IsSpeakerGender, Gender) == 0x000000, "Member 'Conditionals_IsSpeakerGender::Gender' has a wrong offset!");
static_assert(offsetof(Conditionals_IsSpeakerGender, ReturnValue) == 0x000001, "Member 'Conditionals_IsSpeakerGender::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.IsTimeSlice
// 0x000C (0x000C - 0x0000)
struct Conditionals_IsTimeSlice final
{
public:
	int32                                         StartHour;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndHour;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_IsTimeSlice) == 0x000004, "Wrong alignment on Conditionals_IsTimeSlice");
static_assert(sizeof(Conditionals_IsTimeSlice) == 0x00000C, "Wrong size on Conditionals_IsTimeSlice");
static_assert(offsetof(Conditionals_IsTimeSlice, StartHour) == 0x000000, "Member 'Conditionals_IsTimeSlice::StartHour' has a wrong offset!");
static_assert(offsetof(Conditionals_IsTimeSlice, EndHour) == 0x000004, "Member 'Conditionals_IsTimeSlice::EndHour' has a wrong offset!");
static_assert(offsetof(Conditionals_IsTimeSlice, ReturnValue) == 0x000008, "Member 'Conditionals_IsTimeSlice::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.IsTrapStateEqual
// 0x0014 (0x0014 - 0x0000)
struct Conditionals_IsTrapStateEqual final
{
public:
	struct FGuid                                  TrapObjectID;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETrapTriggerState                             State;                                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_IsTrapStateEqual) == 0x000004, "Wrong alignment on Conditionals_IsTrapStateEqual");
static_assert(sizeof(Conditionals_IsTrapStateEqual) == 0x000014, "Wrong size on Conditionals_IsTrapStateEqual");
static_assert(offsetof(Conditionals_IsTrapStateEqual, TrapObjectID) == 0x000000, "Member 'Conditionals_IsTrapStateEqual::TrapObjectID' has a wrong offset!");
static_assert(offsetof(Conditionals_IsTrapStateEqual, State) == 0x000010, "Member 'Conditionals_IsTrapStateEqual::State' has a wrong offset!");
static_assert(offsetof(Conditionals_IsTrapStateEqual, ReturnValue) == 0x000011, "Member 'Conditionals_IsTrapStateEqual::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.IsWeaponEquipped
// 0x0018 (0x0018 - 0x0000)
struct Conditionals_IsWeaponEquipped final
{
public:
	class FString                                 Weapon;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeDerivedClasses;                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_IsWeaponEquipped) == 0x000008, "Wrong alignment on Conditionals_IsWeaponEquipped");
static_assert(sizeof(Conditionals_IsWeaponEquipped) == 0x000018, "Wrong size on Conditionals_IsWeaponEquipped");
static_assert(offsetof(Conditionals_IsWeaponEquipped, Weapon) == 0x000000, "Member 'Conditionals_IsWeaponEquipped::Weapon' has a wrong offset!");
static_assert(offsetof(Conditionals_IsWeaponEquipped, bIncludeDerivedClasses) == 0x000010, "Member 'Conditionals_IsWeaponEquipped::bIncludeDerivedClasses' has a wrong offset!");
static_assert(offsetof(Conditionals_IsWeaponEquipped, ReturnValue) == 0x000011, "Member 'Conditionals_IsWeaponEquipped::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.PlayerHasFlaw
// 0x0018 (0x0018 - 0x0000)
struct Conditionals_PlayerHasFlaw final
{
public:
	class FString                                 Flaw;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_PlayerHasFlaw) == 0x000008, "Wrong alignment on Conditionals_PlayerHasFlaw");
static_assert(sizeof(Conditionals_PlayerHasFlaw) == 0x000018, "Wrong size on Conditionals_PlayerHasFlaw");
static_assert(offsetof(Conditionals_PlayerHasFlaw, Flaw) == 0x000000, "Member 'Conditionals_PlayerHasFlaw::Flaw' has a wrong offset!");
static_assert(offsetof(Conditionals_PlayerHasFlaw, ReturnValue) == 0x000010, "Member 'Conditionals_PlayerHasFlaw::ReturnValue' has a wrong offset!");

// Function Indiana.Conditionals.PlayerHasPerk
// 0x0018 (0x0018 - 0x0000)
struct Conditionals_PlayerHasPerk final
{
public:
	class FString                                 Perk;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Conditionals_PlayerHasPerk) == 0x000008, "Wrong alignment on Conditionals_PlayerHasPerk");
static_assert(sizeof(Conditionals_PlayerHasPerk) == 0x000018, "Wrong size on Conditionals_PlayerHasPerk");
static_assert(offsetof(Conditionals_PlayerHasPerk, Perk) == 0x000000, "Member 'Conditionals_PlayerHasPerk::Perk' has a wrong offset!");
static_assert(offsetof(Conditionals_PlayerHasPerk, ReturnValue) == 0x000010, "Member 'Conditionals_PlayerHasPerk::ReturnValue' has a wrong offset!");

// Function Indiana.CustomModVisual.ApplyToNewMeshTrigger
// 0x0008 (0x0008 - 0x0000)
struct CustomModVisual_ApplyToNewMeshTrigger final
{
public:
	class UMeshComponent*                         NewMesh;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomModVisual_ApplyToNewMeshTrigger) == 0x000008, "Wrong alignment on CustomModVisual_ApplyToNewMeshTrigger");
static_assert(sizeof(CustomModVisual_ApplyToNewMeshTrigger) == 0x000008, "Wrong size on CustomModVisual_ApplyToNewMeshTrigger");
static_assert(offsetof(CustomModVisual_ApplyToNewMeshTrigger, NewMesh) == 0x000000, "Member 'CustomModVisual_ApplyToNewMeshTrigger::NewMesh' has a wrong offset!");

// Function Indiana.CustomModVisual.ApplyVisualsTrigger
// 0x0010 (0x0010 - 0x0000)
struct CustomModVisual_ApplyVisualsTrigger final
{
public:
	class UObject*                                NewTargetObject;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 NewParentComponent;                                // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomModVisual_ApplyVisualsTrigger) == 0x000008, "Wrong alignment on CustomModVisual_ApplyVisualsTrigger");
static_assert(sizeof(CustomModVisual_ApplyVisualsTrigger) == 0x000010, "Wrong size on CustomModVisual_ApplyVisualsTrigger");
static_assert(offsetof(CustomModVisual_ApplyVisualsTrigger, NewTargetObject) == 0x000000, "Member 'CustomModVisual_ApplyVisualsTrigger::NewTargetObject' has a wrong offset!");
static_assert(offsetof(CustomModVisual_ApplyVisualsTrigger, NewParentComponent) == 0x000008, "Member 'CustomModVisual_ApplyVisualsTrigger::NewParentComponent' has a wrong offset!");

// Function Indiana.CustomModVisual.ApplyToNewMeshPermanentlyTrigger
// 0x0008 (0x0008 - 0x0000)
struct CustomModVisual_ApplyToNewMeshPermanentlyTrigger final
{
public:
	class UMeshComponent*                         NewMesh;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomModVisual_ApplyToNewMeshPermanentlyTrigger) == 0x000008, "Wrong alignment on CustomModVisual_ApplyToNewMeshPermanentlyTrigger");
static_assert(sizeof(CustomModVisual_ApplyToNewMeshPermanentlyTrigger) == 0x000008, "Wrong size on CustomModVisual_ApplyToNewMeshPermanentlyTrigger");
static_assert(offsetof(CustomModVisual_ApplyToNewMeshPermanentlyTrigger, NewMesh) == 0x000000, "Member 'CustomModVisual_ApplyToNewMeshPermanentlyTrigger::NewMesh' has a wrong offset!");

// Function Indiana.CustomModVisual.NewMeshAddedBP
// 0x0010 (0x0010 - 0x0000)
struct CustomModVisual_NewMeshAddedBP final
{
public:
	class USkeletalMeshComponent*                 TargetParentComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMeshComponent*                         MeshComponent;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomModVisual_NewMeshAddedBP) == 0x000008, "Wrong alignment on CustomModVisual_NewMeshAddedBP");
static_assert(sizeof(CustomModVisual_NewMeshAddedBP) == 0x000010, "Wrong size on CustomModVisual_NewMeshAddedBP");
static_assert(offsetof(CustomModVisual_NewMeshAddedBP, TargetParentComponent) == 0x000000, "Member 'CustomModVisual_NewMeshAddedBP::TargetParentComponent' has a wrong offset!");
static_assert(offsetof(CustomModVisual_NewMeshAddedBP, MeshComponent) == 0x000008, "Member 'CustomModVisual_NewMeshAddedBP::MeshComponent' has a wrong offset!");

// Function Indiana.CustomModVisual.PermanentlyApplyVisualsTrigger
// 0x0018 (0x0018 - 0x0000)
struct CustomModVisual_PermanentlyApplyVisualsTrigger final
{
public:
	class UObject*                                NewTargetObject;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 NewParentComponent;                                // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldWeld;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomModVisual_PermanentlyApplyVisualsTrigger) == 0x000008, "Wrong alignment on CustomModVisual_PermanentlyApplyVisualsTrigger");
static_assert(sizeof(CustomModVisual_PermanentlyApplyVisualsTrigger) == 0x000018, "Wrong size on CustomModVisual_PermanentlyApplyVisualsTrigger");
static_assert(offsetof(CustomModVisual_PermanentlyApplyVisualsTrigger, NewTargetObject) == 0x000000, "Member 'CustomModVisual_PermanentlyApplyVisualsTrigger::NewTargetObject' has a wrong offset!");
static_assert(offsetof(CustomModVisual_PermanentlyApplyVisualsTrigger, NewParentComponent) == 0x000008, "Member 'CustomModVisual_PermanentlyApplyVisualsTrigger::NewParentComponent' has a wrong offset!");
static_assert(offsetof(CustomModVisual_PermanentlyApplyVisualsTrigger, bShouldWeld) == 0x000010, "Member 'CustomModVisual_PermanentlyApplyVisualsTrigger::bShouldWeld' has a wrong offset!");

// Function Indiana.CinematicPlayerWidget.PlayCinematic
// 0x0008 (0x0008 - 0x0000)
struct CinematicPlayerWidget_PlayCinematic final
{
public:
	class UMovieSceneSequencePlayer*              Cinematic;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CinematicPlayerWidget_PlayCinematic) == 0x000008, "Wrong alignment on CinematicPlayerWidget_PlayCinematic");
static_assert(sizeof(CinematicPlayerWidget_PlayCinematic) == 0x000008, "Wrong size on CinematicPlayerWidget_PlayCinematic");
static_assert(offsetof(CinematicPlayerWidget_PlayCinematic, Cinematic) == 0x000000, "Member 'CinematicPlayerWidget_PlayCinematic::Cinematic' has a wrong offset!");

// Function Indiana.OnPickupAudioLog.OnPickupAudioLog
// 0x0008 (0x0008 - 0x0000)
struct OnPickupAudioLog_OnPickupAudioLog final
{
public:
	class UAudioLogDataAsset*                     AudioLogDataAsset;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnPickupAudioLog_OnPickupAudioLog) == 0x000008, "Wrong alignment on OnPickupAudioLog_OnPickupAudioLog");
static_assert(sizeof(OnPickupAudioLog_OnPickupAudioLog) == 0x000008, "Wrong size on OnPickupAudioLog_OnPickupAudioLog");
static_assert(offsetof(OnPickupAudioLog_OnPickupAudioLog, AudioLogDataAsset) == 0x000000, "Member 'OnPickupAudioLog_OnPickupAudioLog::AudioLogDataAsset' has a wrong offset!");

// Function Indiana.CustomHitReceiver.CustomOnHit
// 0x0088 (0x0088 - 0x0000)
struct CustomHitReceiver_CustomOnHit final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomHitReceiver_CustomOnHit) == 0x000004, "Wrong alignment on CustomHitReceiver_CustomOnHit");
static_assert(sizeof(CustomHitReceiver_CustomOnHit) == 0x000088, "Wrong size on CustomHitReceiver_CustomOnHit");
static_assert(offsetof(CustomHitReceiver_CustomOnHit, Hit) == 0x000000, "Member 'CustomHitReceiver_CustomOnHit::Hit' has a wrong offset!");

// Function Indiana.ConversationActorInterface.GetConversationDescription
// 0x01F8 (0x01F8 - 0x0000)
struct ConversationActorInterface_GetConversationDescription final
{
public:
	struct FConversationDescription               ReturnValue;                                       // 0x0000(0x01F8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConversationActorInterface_GetConversationDescription) == 0x000008, "Wrong alignment on ConversationActorInterface_GetConversationDescription");
static_assert(sizeof(ConversationActorInterface_GetConversationDescription) == 0x0001F8, "Wrong size on ConversationActorInterface_GetConversationDescription");
static_assert(offsetof(ConversationActorInterface_GetConversationDescription, ReturnValue) == 0x000000, "Member 'ConversationActorInterface_GetConversationDescription::ReturnValue' has a wrong offset!");

// Function Indiana.ConversationActorInterface.GetSpeakerGameDataID
// 0x0010 (0x0010 - 0x0000)
struct ConversationActorInterface_GetSpeakerGameDataID final
{
public:
	struct FGuid                                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConversationActorInterface_GetSpeakerGameDataID) == 0x000004, "Wrong alignment on ConversationActorInterface_GetSpeakerGameDataID");
static_assert(sizeof(ConversationActorInterface_GetSpeakerGameDataID) == 0x000010, "Wrong size on ConversationActorInterface_GetSpeakerGameDataID");
static_assert(offsetof(ConversationActorInterface_GetSpeakerGameDataID, ReturnValue) == 0x000000, "Member 'ConversationActorInterface_GetSpeakerGameDataID::ReturnValue' has a wrong offset!");

// Function Indiana.SpawnNodeBase.OnActorAlertStateChanged
// 0x0010 (0x0010 - 0x0000)
struct SpawnNodeBase_OnActorAlertStateChanged final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAlertState                                   PreviousAlertState;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAlertState                                   TargetAlertState;                                  // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestoring;                                        // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpawnNodeBase_OnActorAlertStateChanged) == 0x000008, "Wrong alignment on SpawnNodeBase_OnActorAlertStateChanged");
static_assert(sizeof(SpawnNodeBase_OnActorAlertStateChanged) == 0x000010, "Wrong size on SpawnNodeBase_OnActorAlertStateChanged");
static_assert(offsetof(SpawnNodeBase_OnActorAlertStateChanged, TargetActor) == 0x000000, "Member 'SpawnNodeBase_OnActorAlertStateChanged::TargetActor' has a wrong offset!");
static_assert(offsetof(SpawnNodeBase_OnActorAlertStateChanged, PreviousAlertState) == 0x000008, "Member 'SpawnNodeBase_OnActorAlertStateChanged::PreviousAlertState' has a wrong offset!");
static_assert(offsetof(SpawnNodeBase_OnActorAlertStateChanged, TargetAlertState) == 0x000009, "Member 'SpawnNodeBase_OnActorAlertStateChanged::TargetAlertState' has a wrong offset!");
static_assert(offsetof(SpawnNodeBase_OnActorAlertStateChanged, bRestoring) == 0x00000A, "Member 'SpawnNodeBase_OnActorAlertStateChanged::bRestoring' has a wrong offset!");

// Function Indiana.SpawnNodeBase.OnActorAwareOfPlayer
// 0x0001 (0x0001 - 0x0000)
struct SpawnNodeBase_OnActorAwareOfPlayer final
{
public:
	bool                                          bRestoring;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpawnNodeBase_OnActorAwareOfPlayer) == 0x000001, "Wrong alignment on SpawnNodeBase_OnActorAwareOfPlayer");
static_assert(sizeof(SpawnNodeBase_OnActorAwareOfPlayer) == 0x000001, "Wrong size on SpawnNodeBase_OnActorAwareOfPlayer");
static_assert(offsetof(SpawnNodeBase_OnActorAwareOfPlayer, bRestoring) == 0x000000, "Member 'SpawnNodeBase_OnActorAwareOfPlayer::bRestoring' has a wrong offset!");

// Function Indiana.SpawnNodeBase.OnActorCombatStateChanged
// 0x0002 (0x0002 - 0x0000)
struct SpawnNodeBase_OnActorCombatStateChanged final
{
public:
	bool                                          bInCombat;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestoring;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpawnNodeBase_OnActorCombatStateChanged) == 0x000001, "Wrong alignment on SpawnNodeBase_OnActorCombatStateChanged");
static_assert(sizeof(SpawnNodeBase_OnActorCombatStateChanged) == 0x000002, "Wrong size on SpawnNodeBase_OnActorCombatStateChanged");
static_assert(offsetof(SpawnNodeBase_OnActorCombatStateChanged, bInCombat) == 0x000000, "Member 'SpawnNodeBase_OnActorCombatStateChanged::bInCombat' has a wrong offset!");
static_assert(offsetof(SpawnNodeBase_OnActorCombatStateChanged, bRestoring) == 0x000001, "Member 'SpawnNodeBase_OnActorCombatStateChanged::bRestoring' has a wrong offset!");

// Function Indiana.SpawnNodeBase.OnActorNewStateOfBeing
// 0x0002 (0x0002 - 0x0000)
struct SpawnNodeBase_OnActorNewStateOfBeing final
{
public:
	EStateOfBeing                                 NewStateOfBeing;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStateOfBeing                                 OldStateOfBeing;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpawnNodeBase_OnActorNewStateOfBeing) == 0x000001, "Wrong alignment on SpawnNodeBase_OnActorNewStateOfBeing");
static_assert(sizeof(SpawnNodeBase_OnActorNewStateOfBeing) == 0x000002, "Wrong size on SpawnNodeBase_OnActorNewStateOfBeing");
static_assert(offsetof(SpawnNodeBase_OnActorNewStateOfBeing, NewStateOfBeing) == 0x000000, "Member 'SpawnNodeBase_OnActorNewStateOfBeing::NewStateOfBeing' has a wrong offset!");
static_assert(offsetof(SpawnNodeBase_OnActorNewStateOfBeing, OldStateOfBeing) == 0x000001, "Member 'SpawnNodeBase_OnActorNewStateOfBeing::OldStateOfBeing' has a wrong offset!");

// Function Indiana.SpawnNodeBase.OnActorTookDamage
// 0x0110 (0x0110 - 0x0000)
struct SpawnNodeBase_OnActorTookDamage final
{
public:
	struct FCauseDamageInfo                       CauseDamageInfo;                                   // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpawnNodeBase_OnActorTookDamage) == 0x000008, "Wrong alignment on SpawnNodeBase_OnActorTookDamage");
static_assert(sizeof(SpawnNodeBase_OnActorTookDamage) == 0x000110, "Wrong size on SpawnNodeBase_OnActorTookDamage");
static_assert(offsetof(SpawnNodeBase_OnActorTookDamage, CauseDamageInfo) == 0x000000, "Member 'SpawnNodeBase_OnActorTookDamage::CauseDamageInfo' has a wrong offset!");

// Function Indiana.Container.GetItemsInContainer
// 0x0010 (0x0010 - 0x0000)
struct Container_GetItemsInContainer final
{
public:
	TArray<class UItem*>                          OutItems;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Container_GetItemsInContainer) == 0x000008, "Wrong alignment on Container_GetItemsInContainer");
static_assert(sizeof(Container_GetItemsInContainer) == 0x000010, "Wrong size on Container_GetItemsInContainer");
static_assert(offsetof(Container_GetItemsInContainer, OutItems) == 0x000000, "Member 'Container_GetItemsInContainer::OutItems' has a wrong offset!");

// Function Indiana.Container.HandleItemAdded
// 0x0010 (0x0010 - 0x0000)
struct Container_HandleItemAdded final
{
public:
	struct FItemStack                             ItemStack;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Container_HandleItemAdded) == 0x000008, "Wrong alignment on Container_HandleItemAdded");
static_assert(sizeof(Container_HandleItemAdded) == 0x000010, "Wrong size on Container_HandleItemAdded");
static_assert(offsetof(Container_HandleItemAdded, ItemStack) == 0x000000, "Member 'Container_HandleItemAdded::ItemStack' has a wrong offset!");

// Function Indiana.Container.HandleItemCountChanged
// 0x0010 (0x0010 - 0x0000)
struct Container_HandleItemCountChanged final
{
public:
	struct FItemStack                             ItemStack;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Container_HandleItemCountChanged) == 0x000008, "Wrong alignment on Container_HandleItemCountChanged");
static_assert(sizeof(Container_HandleItemCountChanged) == 0x000010, "Wrong size on Container_HandleItemCountChanged");
static_assert(offsetof(Container_HandleItemCountChanged, ItemStack) == 0x000000, "Member 'Container_HandleItemCountChanged::ItemStack' has a wrong offset!");

// Function Indiana.Container.HandleItemRemoved
// 0x0010 (0x0010 - 0x0000)
struct Container_HandleItemRemoved final
{
public:
	struct FItemStack                             ItemStack;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Container_HandleItemRemoved) == 0x000008, "Wrong alignment on Container_HandleItemRemoved");
static_assert(sizeof(Container_HandleItemRemoved) == 0x000010, "Wrong size on Container_HandleItemRemoved");
static_assert(offsetof(Container_HandleItemRemoved, ItemStack) == 0x000000, "Member 'Container_HandleItemRemoved::ItemStack' has a wrong offset!");

// Function Indiana.Container.IsLightEnabled
// 0x0001 (0x0001 - 0x0000)
struct Container_IsLightEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Container_IsLightEnabled) == 0x000001, "Wrong alignment on Container_IsLightEnabled");
static_assert(sizeof(Container_IsLightEnabled) == 0x000001, "Wrong size on Container_IsLightEnabled");
static_assert(offsetof(Container_IsLightEnabled, ReturnValue) == 0x000000, "Member 'Container_IsLightEnabled::ReturnValue' has a wrong offset!");

// Function Indiana.CompanionComponent.OnCombatStateChange
// 0x0002 (0x0002 - 0x0000)
struct CompanionComponent_OnCombatStateChange final
{
public:
	bool                                          bIsInCombat;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestoring;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompanionComponent_OnCombatStateChange) == 0x000001, "Wrong alignment on CompanionComponent_OnCombatStateChange");
static_assert(sizeof(CompanionComponent_OnCombatStateChange) == 0x000002, "Wrong size on CompanionComponent_OnCombatStateChange");
static_assert(offsetof(CompanionComponent_OnCombatStateChange, bIsInCombat) == 0x000000, "Member 'CompanionComponent_OnCombatStateChange::bIsInCombat' has a wrong offset!");
static_assert(offsetof(CompanionComponent_OnCombatStateChange, bRestoring) == 0x000001, "Member 'CompanionComponent_OnCombatStateChange::bRestoring' has a wrong offset!");

// Function Indiana.CompanionComponent.OnPlayerEnteredAcknowledgeZone
// 0x0008 (0x0008 - 0x0000)
struct CompanionComponent_OnPlayerEnteredAcknowledgeZone final
{
public:
	class AActor*                                 ZoneOwner;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompanionComponent_OnPlayerEnteredAcknowledgeZone) == 0x000008, "Wrong alignment on CompanionComponent_OnPlayerEnteredAcknowledgeZone");
static_assert(sizeof(CompanionComponent_OnPlayerEnteredAcknowledgeZone) == 0x000008, "Wrong size on CompanionComponent_OnPlayerEnteredAcknowledgeZone");
static_assert(offsetof(CompanionComponent_OnPlayerEnteredAcknowledgeZone, ZoneOwner) == 0x000000, "Member 'CompanionComponent_OnPlayerEnteredAcknowledgeZone::ZoneOwner' has a wrong offset!");

// Function Indiana.CompanionComponent.OnPlayerExitedAcknowledgeZone
// 0x0008 (0x0008 - 0x0000)
struct CompanionComponent_OnPlayerExitedAcknowledgeZone final
{
public:
	class AActor*                                 ZoneOwner;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompanionComponent_OnPlayerExitedAcknowledgeZone) == 0x000008, "Wrong alignment on CompanionComponent_OnPlayerExitedAcknowledgeZone");
static_assert(sizeof(CompanionComponent_OnPlayerExitedAcknowledgeZone) == 0x000008, "Wrong size on CompanionComponent_OnPlayerExitedAcknowledgeZone");
static_assert(offsetof(CompanionComponent_OnPlayerExitedAcknowledgeZone, ZoneOwner) == 0x000000, "Member 'CompanionComponent_OnPlayerExitedAcknowledgeZone::ZoneOwner' has a wrong offset!");

// Function Indiana.CompanionComponent.SetOffering
// 0x0008 (0x0008 - 0x0000)
struct CompanionComponent_SetOffering final
{
public:
	TSubclassOf<class APickup>                    PickupClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompanionComponent_SetOffering) == 0x000008, "Wrong alignment on CompanionComponent_SetOffering");
static_assert(sizeof(CompanionComponent_SetOffering) == 0x000008, "Wrong size on CompanionComponent_SetOffering");
static_assert(offsetof(CompanionComponent_SetOffering, PickupClass) == 0x000000, "Member 'CompanionComponent_SetOffering::PickupClass' has a wrong offset!");

// Function Indiana.PlayAnimationAction.OnMontageBlendingOut
// 0x0010 (0x0010 - 0x0000)
struct PlayAnimationAction_OnMontageBlendingOut final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayAnimationAction_OnMontageBlendingOut) == 0x000008, "Wrong alignment on PlayAnimationAction_OnMontageBlendingOut");
static_assert(sizeof(PlayAnimationAction_OnMontageBlendingOut) == 0x000010, "Wrong size on PlayAnimationAction_OnMontageBlendingOut");
static_assert(offsetof(PlayAnimationAction_OnMontageBlendingOut, Montage) == 0x000000, "Member 'PlayAnimationAction_OnMontageBlendingOut::Montage' has a wrong offset!");
static_assert(offsetof(PlayAnimationAction_OnMontageBlendingOut, bInterrupted) == 0x000008, "Member 'PlayAnimationAction_OnMontageBlendingOut::bInterrupted' has a wrong offset!");

// Function Indiana.Pickup.GetItem
// 0x0008 (0x0008 - 0x0000)
struct Pickup_GetItem final
{
public:
	class UItem*                                  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Pickup_GetItem) == 0x000008, "Wrong alignment on Pickup_GetItem");
static_assert(sizeof(Pickup_GetItem) == 0x000008, "Wrong size on Pickup_GetItem");
static_assert(offsetof(Pickup_GetItem, ReturnValue) == 0x000000, "Member 'Pickup_GetItem::ReturnValue' has a wrong offset!");

// Function Indiana.Pickup.OnPhysicsSleep
// 0x0010 (0x0010 - 0x0000)
struct Pickup_OnPhysicsSleep final
{
public:
	class UPrimitiveComponent*                    SleepingComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Pickup_OnPhysicsSleep) == 0x000008, "Wrong alignment on Pickup_OnPhysicsSleep");
static_assert(sizeof(Pickup_OnPhysicsSleep) == 0x000010, "Wrong size on Pickup_OnPhysicsSleep");
static_assert(offsetof(Pickup_OnPhysicsSleep, SleepingComponent) == 0x000000, "Member 'Pickup_OnPhysicsSleep::SleepingComponent' has a wrong offset!");
static_assert(offsetof(Pickup_OnPhysicsSleep, BoneName) == 0x000008, "Member 'Pickup_OnPhysicsSleep::BoneName' has a wrong offset!");

// Function Indiana.Pickup.OnPhysicsWake
// 0x0010 (0x0010 - 0x0000)
struct Pickup_OnPhysicsWake final
{
public:
	class UPrimitiveComponent*                    WakingComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Pickup_OnPhysicsWake) == 0x000008, "Wrong alignment on Pickup_OnPhysicsWake");
static_assert(sizeof(Pickup_OnPhysicsWake) == 0x000010, "Wrong size on Pickup_OnPhysicsWake");
static_assert(offsetof(Pickup_OnPhysicsWake, WakingComponent) == 0x000000, "Member 'Pickup_OnPhysicsWake::WakingComponent' has a wrong offset!");
static_assert(offsetof(Pickup_OnPhysicsWake, BoneName) == 0x000008, "Member 'Pickup_OnPhysicsWake::BoneName' has a wrong offset!");

// Function Indiana.Pickup.ShutdownDropPhysics
// 0x0001 (0x0001 - 0x0000)
struct Pickup_ShutdownDropPhysics final
{
public:
	bool                                          bUpdateTransforms;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Pickup_ShutdownDropPhysics) == 0x000001, "Wrong alignment on Pickup_ShutdownDropPhysics");
static_assert(sizeof(Pickup_ShutdownDropPhysics) == 0x000001, "Wrong size on Pickup_ShutdownDropPhysics");
static_assert(offsetof(Pickup_ShutdownDropPhysics, bUpdateTransforms) == 0x000000, "Member 'Pickup_ShutdownDropPhysics::bUpdateTransforms' has a wrong offset!");

// Function Indiana.OnLanded.OnLanded
// 0x0004 (0x0004 - 0x0000)
struct OnLanded_OnLanded final
{
public:
	float                                         FallDistance;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnLanded_OnLanded) == 0x000004, "Wrong alignment on OnLanded_OnLanded");
static_assert(sizeof(OnLanded_OnLanded) == 0x000004, "Wrong size on OnLanded_OnLanded");
static_assert(offsetof(OnLanded_OnLanded, FallDistance) == 0x000000, "Member 'OnLanded_OnLanded::FallDistance' has a wrong offset!");

// Function Indiana.SavingWidget.HideSavingWidget
// 0x0002 (0x0002 - 0x0000)
struct SavingWidget_HideSavingWidget final
{
public:
	ESaveGameResult                               SaveGameResult;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESaveGameType                                 SaveGameType;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SavingWidget_HideSavingWidget) == 0x000001, "Wrong alignment on SavingWidget_HideSavingWidget");
static_assert(sizeof(SavingWidget_HideSavingWidget) == 0x000002, "Wrong size on SavingWidget_HideSavingWidget");
static_assert(offsetof(SavingWidget_HideSavingWidget, SaveGameResult) == 0x000000, "Member 'SavingWidget_HideSavingWidget::SaveGameResult' has a wrong offset!");
static_assert(offsetof(SavingWidget_HideSavingWidget, SaveGameType) == 0x000001, "Member 'SavingWidget_HideSavingWidget::SaveGameType' has a wrong offset!");

// Function Indiana.SavingWidget.OnHUDVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct SavingWidget_OnHUDVisibilityChanged final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SavingWidget_OnHUDVisibilityChanged) == 0x000001, "Wrong alignment on SavingWidget_OnHUDVisibilityChanged");
static_assert(sizeof(SavingWidget_OnHUDVisibilityChanged) == 0x000001, "Wrong size on SavingWidget_OnHUDVisibilityChanged");
static_assert(offsetof(SavingWidget_OnHUDVisibilityChanged, bVisible) == 0x000000, "Member 'SavingWidget_OnHUDVisibilityChanged::bVisible' has a wrong offset!");

// Function Indiana.WeaponVisuals.CreateLerpTimer
// 0x0018 (0x0018 - 0x0000)
struct WeaponVisuals_CreateLerpTimer final
{
public:
	struct FLerpTimer                             TimerProperties;                                   // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponVisuals_CreateLerpTimer) == 0x000004, "Wrong alignment on WeaponVisuals_CreateLerpTimer");
static_assert(sizeof(WeaponVisuals_CreateLerpTimer) == 0x000018, "Wrong size on WeaponVisuals_CreateLerpTimer");
static_assert(offsetof(WeaponVisuals_CreateLerpTimer, TimerProperties) == 0x000000, "Member 'WeaponVisuals_CreateLerpTimer::TimerProperties' has a wrong offset!");

// Function Indiana.WeaponVisuals.EnterCustomState
// 0x0008 (0x0008 - 0x0000)
struct WeaponVisuals_EnterCustomState final
{
public:
	class FName                                   StateName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponVisuals_EnterCustomState) == 0x000004, "Wrong alignment on WeaponVisuals_EnterCustomState");
static_assert(sizeof(WeaponVisuals_EnterCustomState) == 0x000008, "Wrong size on WeaponVisuals_EnterCustomState");
static_assert(offsetof(WeaponVisuals_EnterCustomState, StateName) == 0x000000, "Member 'WeaponVisuals_EnterCustomState::StateName' has a wrong offset!");

// Function Indiana.WeaponVisuals.EnterCustomStateBP
// 0x0088 (0x0088 - 0x0000)
struct WeaponVisuals_EnterCustomStateBP final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEventEffectParams                     Params_0;                                          // 0x0008(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponVisuals_EnterCustomStateBP) == 0x000008, "Wrong alignment on WeaponVisuals_EnterCustomStateBP");
static_assert(sizeof(WeaponVisuals_EnterCustomStateBP) == 0x000088, "Wrong size on WeaponVisuals_EnterCustomStateBP");
static_assert(offsetof(WeaponVisuals_EnterCustomStateBP, EventName) == 0x000000, "Member 'WeaponVisuals_EnterCustomStateBP::EventName' has a wrong offset!");
static_assert(offsetof(WeaponVisuals_EnterCustomStateBP, Params_0) == 0x000008, "Member 'WeaponVisuals_EnterCustomStateBP::Params_0' has a wrong offset!");

// Function Indiana.WeaponVisuals.EnterStateBP
// 0x0088 (0x0088 - 0x0000)
struct WeaponVisuals_EnterStateBP final
{
public:
	EWeaponState                                  WeaponState;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventEffectParams                     Params_0;                                          // 0x0008(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponVisuals_EnterStateBP) == 0x000008, "Wrong alignment on WeaponVisuals_EnterStateBP");
static_assert(sizeof(WeaponVisuals_EnterStateBP) == 0x000088, "Wrong size on WeaponVisuals_EnterStateBP");
static_assert(offsetof(WeaponVisuals_EnterStateBP, WeaponState) == 0x000000, "Member 'WeaponVisuals_EnterStateBP::WeaponState' has a wrong offset!");
static_assert(offsetof(WeaponVisuals_EnterStateBP, Params_0) == 0x000008, "Member 'WeaponVisuals_EnterStateBP::Params_0' has a wrong offset!");

// Function Indiana.WeaponVisuals.InitializeBP
// 0x0010 (0x0010 - 0x0000)
struct WeaponVisuals_InitializeBP final
{
public:
	class AActor*                                 NewTarget;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWeapon*                                NewWeapon;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponVisuals_InitializeBP) == 0x000008, "Wrong alignment on WeaponVisuals_InitializeBP");
static_assert(sizeof(WeaponVisuals_InitializeBP) == 0x000010, "Wrong size on WeaponVisuals_InitializeBP");
static_assert(offsetof(WeaponVisuals_InitializeBP, NewTarget) == 0x000000, "Member 'WeaponVisuals_InitializeBP::NewTarget' has a wrong offset!");
static_assert(offsetof(WeaponVisuals_InitializeBP, NewWeapon) == 0x000008, "Member 'WeaponVisuals_InitializeBP::NewWeapon' has a wrong offset!");

// Function Indiana.WeaponVisuals.InterruptEventBP
// 0x0001 (0x0001 - 0x0000)
struct WeaponVisuals_InterruptEventBP final
{
public:
	EWeaponEvent                                  WeaponEvent;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponVisuals_InterruptEventBP) == 0x000001, "Wrong alignment on WeaponVisuals_InterruptEventBP");
static_assert(sizeof(WeaponVisuals_InterruptEventBP) == 0x000001, "Wrong size on WeaponVisuals_InterruptEventBP");
static_assert(offsetof(WeaponVisuals_InterruptEventBP, WeaponEvent) == 0x000000, "Member 'WeaponVisuals_InterruptEventBP::WeaponEvent' has a wrong offset!");

// Function Indiana.WeaponVisuals.LeaveCustomState
// 0x0008 (0x0008 - 0x0000)
struct WeaponVisuals_LeaveCustomState final
{
public:
	class FName                                   StateName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponVisuals_LeaveCustomState) == 0x000004, "Wrong alignment on WeaponVisuals_LeaveCustomState");
static_assert(sizeof(WeaponVisuals_LeaveCustomState) == 0x000008, "Wrong size on WeaponVisuals_LeaveCustomState");
static_assert(offsetof(WeaponVisuals_LeaveCustomState, StateName) == 0x000000, "Member 'WeaponVisuals_LeaveCustomState::StateName' has a wrong offset!");

// Function Indiana.WeaponVisuals.LeaveCustomStateBP
// 0x0008 (0x0008 - 0x0000)
struct WeaponVisuals_LeaveCustomStateBP final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponVisuals_LeaveCustomStateBP) == 0x000004, "Wrong alignment on WeaponVisuals_LeaveCustomStateBP");
static_assert(sizeof(WeaponVisuals_LeaveCustomStateBP) == 0x000008, "Wrong size on WeaponVisuals_LeaveCustomStateBP");
static_assert(offsetof(WeaponVisuals_LeaveCustomStateBP, EventName) == 0x000000, "Member 'WeaponVisuals_LeaveCustomStateBP::EventName' has a wrong offset!");

// Function Indiana.WeaponVisuals.LeaveStateBP
// 0x0001 (0x0001 - 0x0000)
struct WeaponVisuals_LeaveStateBP final
{
public:
	EWeaponState                                  WeaponState;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponVisuals_LeaveStateBP) == 0x000001, "Wrong alignment on WeaponVisuals_LeaveStateBP");
static_assert(sizeof(WeaponVisuals_LeaveStateBP) == 0x000001, "Wrong size on WeaponVisuals_LeaveStateBP");
static_assert(offsetof(WeaponVisuals_LeaveStateBP, WeaponState) == 0x000000, "Member 'WeaponVisuals_LeaveStateBP::WeaponState' has a wrong offset!");

// Function Indiana.WeaponVisuals.StopCustomEvent
// 0x0008 (0x0008 - 0x0000)
struct WeaponVisuals_StopCustomEvent final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponVisuals_StopCustomEvent) == 0x000004, "Wrong alignment on WeaponVisuals_StopCustomEvent");
static_assert(sizeof(WeaponVisuals_StopCustomEvent) == 0x000008, "Wrong size on WeaponVisuals_StopCustomEvent");
static_assert(offsetof(WeaponVisuals_StopCustomEvent, EventName) == 0x000000, "Member 'WeaponVisuals_StopCustomEvent::EventName' has a wrong offset!");

// Function Indiana.WeaponVisuals.StopCustomEventBP
// 0x0008 (0x0008 - 0x0000)
struct WeaponVisuals_StopCustomEventBP final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponVisuals_StopCustomEventBP) == 0x000004, "Wrong alignment on WeaponVisuals_StopCustomEventBP");
static_assert(sizeof(WeaponVisuals_StopCustomEventBP) == 0x000008, "Wrong size on WeaponVisuals_StopCustomEventBP");
static_assert(offsetof(WeaponVisuals_StopCustomEventBP, EventName) == 0x000000, "Member 'WeaponVisuals_StopCustomEventBP::EventName' has a wrong offset!");

// Function Indiana.WeaponVisuals.TickBP
// 0x0004 (0x0004 - 0x0000)
struct WeaponVisuals_TickBP final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponVisuals_TickBP) == 0x000004, "Wrong alignment on WeaponVisuals_TickBP");
static_assert(sizeof(WeaponVisuals_TickBP) == 0x000004, "Wrong size on WeaponVisuals_TickBP");
static_assert(offsetof(WeaponVisuals_TickBP, DeltaTime) == 0x000000, "Member 'WeaponVisuals_TickBP::DeltaTime' has a wrong offset!");

// Function Indiana.WeaponVisuals.TriggerCustomEvent
// 0x0008 (0x0008 - 0x0000)
struct WeaponVisuals_TriggerCustomEvent final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponVisuals_TriggerCustomEvent) == 0x000004, "Wrong alignment on WeaponVisuals_TriggerCustomEvent");
static_assert(sizeof(WeaponVisuals_TriggerCustomEvent) == 0x000008, "Wrong size on WeaponVisuals_TriggerCustomEvent");
static_assert(offsetof(WeaponVisuals_TriggerCustomEvent, EventName) == 0x000000, "Member 'WeaponVisuals_TriggerCustomEvent::EventName' has a wrong offset!");

// Function Indiana.WeaponVisuals.TriggerCustomEventBP
// 0x0088 (0x0088 - 0x0000)
struct WeaponVisuals_TriggerCustomEventBP final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEventEffectParams                     Params_0;                                          // 0x0008(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponVisuals_TriggerCustomEventBP) == 0x000008, "Wrong alignment on WeaponVisuals_TriggerCustomEventBP");
static_assert(sizeof(WeaponVisuals_TriggerCustomEventBP) == 0x000088, "Wrong size on WeaponVisuals_TriggerCustomEventBP");
static_assert(offsetof(WeaponVisuals_TriggerCustomEventBP, EventName) == 0x000000, "Member 'WeaponVisuals_TriggerCustomEventBP::EventName' has a wrong offset!");
static_assert(offsetof(WeaponVisuals_TriggerCustomEventBP, Params_0) == 0x000008, "Member 'WeaponVisuals_TriggerCustomEventBP::Params_0' has a wrong offset!");

// Function Indiana.WeaponVisuals.TriggerEventBP
// 0x0088 (0x0088 - 0x0000)
struct WeaponVisuals_TriggerEventBP final
{
public:
	EWeaponEvent                                  WeaponEvent;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventEffectParams                     Params_0;                                          // 0x0008(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponVisuals_TriggerEventBP) == 0x000008, "Wrong alignment on WeaponVisuals_TriggerEventBP");
static_assert(sizeof(WeaponVisuals_TriggerEventBP) == 0x000088, "Wrong size on WeaponVisuals_TriggerEventBP");
static_assert(offsetof(WeaponVisuals_TriggerEventBP, WeaponEvent) == 0x000000, "Member 'WeaponVisuals_TriggerEventBP::WeaponEvent' has a wrong offset!");
static_assert(offsetof(WeaponVisuals_TriggerEventBP, Params_0) == 0x000008, "Member 'WeaponVisuals_TriggerEventBP::Params_0' has a wrong offset!");

// Function Indiana.OnCompanionKillListener.OnKill
// 0x0118 (0x0118 - 0x0000)
struct OnCompanionKillListener_OnKill final
{
public:
	class AActor*                                 Victim;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCauseDamageInfo                       CauseDamageInfo;                                   // 0x0008(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnCompanionKillListener_OnKill) == 0x000008, "Wrong alignment on OnCompanionKillListener_OnKill");
static_assert(sizeof(OnCompanionKillListener_OnKill) == 0x000118, "Wrong size on OnCompanionKillListener_OnKill");
static_assert(offsetof(OnCompanionKillListener_OnKill, Victim) == 0x000000, "Member 'OnCompanionKillListener_OnKill::Victim' has a wrong offset!");
static_assert(offsetof(OnCompanionKillListener_OnKill, CauseDamageInfo) == 0x000008, "Member 'OnCompanionKillListener_OnKill::CauseDamageInfo' has a wrong offset!");

// Function Indiana.OnAttackComplete.OnAttackComplete
// 0x0004 (0x0004 - 0x0000)
struct OnAttackComplete_OnAttackComplete final
{
public:
	int32                                         AttackID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnAttackComplete_OnAttackComplete) == 0x000004, "Wrong alignment on OnAttackComplete_OnAttackComplete");
static_assert(sizeof(OnAttackComplete_OnAttackComplete) == 0x000004, "Wrong size on OnAttackComplete_OnAttackComplete");
static_assert(offsetof(OnAttackComplete_OnAttackComplete, AttackID) == 0x000000, "Member 'OnAttackComplete_OnAttackComplete::AttackID' has a wrong offset!");

// Function Indiana.OnMeleeHit.OnMeleeHit
// 0x0020 (0x0020 - 0x0000)
struct OnMeleeHit_OnMeleeHit final
{
public:
	TArray<class AActor*>                         HitActors;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UWeapon*                                Weapon;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnMeleeHit_OnMeleeHit) == 0x000008, "Wrong alignment on OnMeleeHit_OnMeleeHit");
static_assert(sizeof(OnMeleeHit_OnMeleeHit) == 0x000020, "Wrong size on OnMeleeHit_OnMeleeHit");
static_assert(offsetof(OnMeleeHit_OnMeleeHit, HitActors) == 0x000000, "Member 'OnMeleeHit_OnMeleeHit::HitActors' has a wrong offset!");
static_assert(offsetof(OnMeleeHit_OnMeleeHit, Weapon) == 0x000010, "Member 'OnMeleeHit_OnMeleeHit::Weapon' has a wrong offset!");
static_assert(offsetof(OnMeleeHit_OnMeleeHit, Damage) == 0x000018, "Member 'OnMeleeHit_OnMeleeHit::Damage' has a wrong offset!");

// Function Indiana.GenericNotificationEntryWidget.OnStickLayoutChanged
// 0x0004 (0x0004 - 0x0000)
struct GenericNotificationEntryWidget_OnStickLayoutChanged final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GenericNotificationEntryWidget_OnStickLayoutChanged) == 0x000004, "Wrong alignment on GenericNotificationEntryWidget_OnStickLayoutChanged");
static_assert(sizeof(GenericNotificationEntryWidget_OnStickLayoutChanged) == 0x000004, "Wrong size on GenericNotificationEntryWidget_OnStickLayoutChanged");
static_assert(offsetof(GenericNotificationEntryWidget_OnStickLayoutChanged, NewValue) == 0x000000, "Member 'GenericNotificationEntryWidget_OnStickLayoutChanged::NewValue' has a wrong offset!");

// Function Indiana.OnSpellRemoved.OnSpellRemoved
// 0x0008 (0x0008 - 0x0000)
struct OnSpellRemoved_OnSpellRemoved final
{
public:
	TSubclassOf<class USpell>                     RemovedSpell;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnSpellRemoved_OnSpellRemoved) == 0x000008, "Wrong alignment on OnSpellRemoved_OnSpellRemoved");
static_assert(sizeof(OnSpellRemoved_OnSpellRemoved) == 0x000008, "Wrong size on OnSpellRemoved_OnSpellRemoved");
static_assert(offsetof(OnSpellRemoved_OnSpellRemoved, RemovedSpell) == 0x000000, "Member 'OnSpellRemoved_OnSpellRemoved::RemovedSpell' has a wrong offset!");

// Function Indiana.AISettingsComponent.OnEquipWeapon
// 0x0008 (0x0008 - 0x0000)
struct AISettingsComponent_OnEquipWeapon final
{
public:
	class UWeapon*                                Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AISettingsComponent_OnEquipWeapon) == 0x000008, "Wrong alignment on AISettingsComponent_OnEquipWeapon");
static_assert(sizeof(AISettingsComponent_OnEquipWeapon) == 0x000008, "Wrong size on AISettingsComponent_OnEquipWeapon");
static_assert(offsetof(AISettingsComponent_OnEquipWeapon, Weapon) == 0x000000, "Member 'AISettingsComponent_OnEquipWeapon::Weapon' has a wrong offset!");

// Function Indiana.AISettingsComponent.OnUnequipWeapon
// 0x0008 (0x0008 - 0x0000)
struct AISettingsComponent_OnUnequipWeapon final
{
public:
	class UWeapon*                                Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AISettingsComponent_OnUnequipWeapon) == 0x000008, "Wrong alignment on AISettingsComponent_OnUnequipWeapon");
static_assert(sizeof(AISettingsComponent_OnUnequipWeapon) == 0x000008, "Wrong size on AISettingsComponent_OnUnequipWeapon");
static_assert(offsetof(AISettingsComponent_OnUnequipWeapon, Weapon) == 0x000000, "Member 'AISettingsComponent_OnUnequipWeapon::Weapon' has a wrong offset!");

// Function Indiana.AlarmComponent.GetAlarmState
// 0x0001 (0x0001 - 0x0000)
struct AlarmComponent_GetAlarmState final
{
public:
	EAlarmState                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AlarmComponent_GetAlarmState) == 0x000001, "Wrong alignment on AlarmComponent_GetAlarmState");
static_assert(sizeof(AlarmComponent_GetAlarmState) == 0x000001, "Wrong size on AlarmComponent_GetAlarmState");
static_assert(offsetof(AlarmComponent_GetAlarmState, ReturnValue) == 0x000000, "Member 'AlarmComponent_GetAlarmState::ReturnValue' has a wrong offset!");

// Function Indiana.SettingsMenuOptionPresenterWdgt.OnValueChanged
// 0x0004 (0x0004 - 0x0000)
struct SettingsMenuOptionPresenterWdgt_OnValueChanged final
{
public:
	int32                                         SelectedItem;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsMenuOptionPresenterWdgt_OnValueChanged) == 0x000004, "Wrong alignment on SettingsMenuOptionPresenterWdgt_OnValueChanged");
static_assert(sizeof(SettingsMenuOptionPresenterWdgt_OnValueChanged) == 0x000004, "Wrong size on SettingsMenuOptionPresenterWdgt_OnValueChanged");
static_assert(offsetof(SettingsMenuOptionPresenterWdgt_OnValueChanged, SelectedItem) == 0x000000, "Member 'SettingsMenuOptionPresenterWdgt_OnValueChanged::SelectedItem' has a wrong offset!");

// Function Indiana.AmmoReadoutWidget.EvaluateLowAmmoWarning
// 0x000C (0x000C - 0x0000)
struct AmmoReadoutWidget_EvaluateLowAmmoWarning final
{
public:
	int32                                         MaxClipSize;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentClipSize;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RemainingAmmo;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmmoReadoutWidget_EvaluateLowAmmoWarning) == 0x000004, "Wrong alignment on AmmoReadoutWidget_EvaluateLowAmmoWarning");
static_assert(sizeof(AmmoReadoutWidget_EvaluateLowAmmoWarning) == 0x00000C, "Wrong size on AmmoReadoutWidget_EvaluateLowAmmoWarning");
static_assert(offsetof(AmmoReadoutWidget_EvaluateLowAmmoWarning, MaxClipSize) == 0x000000, "Member 'AmmoReadoutWidget_EvaluateLowAmmoWarning::MaxClipSize' has a wrong offset!");
static_assert(offsetof(AmmoReadoutWidget_EvaluateLowAmmoWarning, CurrentClipSize) == 0x000004, "Member 'AmmoReadoutWidget_EvaluateLowAmmoWarning::CurrentClipSize' has a wrong offset!");
static_assert(offsetof(AmmoReadoutWidget_EvaluateLowAmmoWarning, RemainingAmmo) == 0x000008, "Member 'AmmoReadoutWidget_EvaluateLowAmmoWarning::RemainingAmmo' has a wrong offset!");

// Function Indiana.AmmoReadoutWidget.OnHeldWeaponDisplayModeChanged
// 0x0004 (0x0004 - 0x0000)
struct AmmoReadoutWidget_OnHeldWeaponDisplayModeChanged final
{
public:
	int32                                         ModeIn;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmmoReadoutWidget_OnHeldWeaponDisplayModeChanged) == 0x000004, "Wrong alignment on AmmoReadoutWidget_OnHeldWeaponDisplayModeChanged");
static_assert(sizeof(AmmoReadoutWidget_OnHeldWeaponDisplayModeChanged) == 0x000004, "Wrong size on AmmoReadoutWidget_OnHeldWeaponDisplayModeChanged");
static_assert(offsetof(AmmoReadoutWidget_OnHeldWeaponDisplayModeChanged, ModeIn) == 0x000000, "Member 'AmmoReadoutWidget_OnHeldWeaponDisplayModeChanged::ModeIn' has a wrong offset!");

// Function Indiana.AmmoReadoutWidget.OnHeldWeaponTextDisplayModeChanged
// 0x0004 (0x0004 - 0x0000)
struct AmmoReadoutWidget_OnHeldWeaponTextDisplayModeChanged final
{
public:
	int32                                         ModeIn;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmmoReadoutWidget_OnHeldWeaponTextDisplayModeChanged) == 0x000004, "Wrong alignment on AmmoReadoutWidget_OnHeldWeaponTextDisplayModeChanged");
static_assert(sizeof(AmmoReadoutWidget_OnHeldWeaponTextDisplayModeChanged) == 0x000004, "Wrong size on AmmoReadoutWidget_OnHeldWeaponTextDisplayModeChanged");
static_assert(offsetof(AmmoReadoutWidget_OnHeldWeaponTextDisplayModeChanged, ModeIn) == 0x000000, "Member 'AmmoReadoutWidget_OnHeldWeaponTextDisplayModeChanged::ModeIn' has a wrong offset!");

// Function Indiana.AmmoReadoutWidget.OnHUDVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct AmmoReadoutWidget_OnHUDVisibilityChanged final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmmoReadoutWidget_OnHUDVisibilityChanged) == 0x000001, "Wrong alignment on AmmoReadoutWidget_OnHUDVisibilityChanged");
static_assert(sizeof(AmmoReadoutWidget_OnHUDVisibilityChanged) == 0x000001, "Wrong size on AmmoReadoutWidget_OnHUDVisibilityChanged");
static_assert(offsetof(AmmoReadoutWidget_OnHUDVisibilityChanged, bVisible) == 0x000000, "Member 'AmmoReadoutWidget_OnHUDVisibilityChanged::bVisible' has a wrong offset!");

// Function Indiana.AmmoReadoutWidget.OnInterruptReload
// 0x0008 (0x0008 - 0x0000)
struct AmmoReadoutWidget_OnInterruptReload final
{
public:
	class UWeapon*                                EquippedWeapon;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmmoReadoutWidget_OnInterruptReload) == 0x000008, "Wrong alignment on AmmoReadoutWidget_OnInterruptReload");
static_assert(sizeof(AmmoReadoutWidget_OnInterruptReload) == 0x000008, "Wrong size on AmmoReadoutWidget_OnInterruptReload");
static_assert(offsetof(AmmoReadoutWidget_OnInterruptReload, EquippedWeapon) == 0x000000, "Member 'AmmoReadoutWidget_OnInterruptReload::EquippedWeapon' has a wrong offset!");

// Function Indiana.AmmoReadoutWidget.OnPlayerCombatStateChange
// 0x0002 (0x0002 - 0x0000)
struct AmmoReadoutWidget_OnPlayerCombatStateChange final
{
public:
	bool                                          bCombatIn;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestoring;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmmoReadoutWidget_OnPlayerCombatStateChange) == 0x000001, "Wrong alignment on AmmoReadoutWidget_OnPlayerCombatStateChange");
static_assert(sizeof(AmmoReadoutWidget_OnPlayerCombatStateChange) == 0x000002, "Wrong size on AmmoReadoutWidget_OnPlayerCombatStateChange");
static_assert(offsetof(AmmoReadoutWidget_OnPlayerCombatStateChange, bCombatIn) == 0x000000, "Member 'AmmoReadoutWidget_OnPlayerCombatStateChange::bCombatIn' has a wrong offset!");
static_assert(offsetof(AmmoReadoutWidget_OnPlayerCombatStateChange, bRestoring) == 0x000001, "Member 'AmmoReadoutWidget_OnPlayerCombatStateChange::bRestoring' has a wrong offset!");

// Function Indiana.AmmoReadoutWidget.OnReloadComplete
// 0x0008 (0x0008 - 0x0000)
struct AmmoReadoutWidget_OnReloadComplete final
{
public:
	class UWeapon*                                EquippedWeapon;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmmoReadoutWidget_OnReloadComplete) == 0x000008, "Wrong alignment on AmmoReadoutWidget_OnReloadComplete");
static_assert(sizeof(AmmoReadoutWidget_OnReloadComplete) == 0x000008, "Wrong size on AmmoReadoutWidget_OnReloadComplete");
static_assert(offsetof(AmmoReadoutWidget_OnReloadComplete, EquippedWeapon) == 0x000000, "Member 'AmmoReadoutWidget_OnReloadComplete::EquippedWeapon' has a wrong offset!");

// Function Indiana.AmmoReadoutWidget.OnWeaponSwitch
// 0x0008 (0x0008 - 0x0000)
struct AmmoReadoutWidget_OnWeaponSwitch final
{
public:
	class UWeapon*                                EquippedWeapon;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmmoReadoutWidget_OnWeaponSwitch) == 0x000008, "Wrong alignment on AmmoReadoutWidget_OnWeaponSwitch");
static_assert(sizeof(AmmoReadoutWidget_OnWeaponSwitch) == 0x000008, "Wrong size on AmmoReadoutWidget_OnWeaponSwitch");
static_assert(offsetof(AmmoReadoutWidget_OnWeaponSwitch, EquippedWeapon) == 0x000000, "Member 'AmmoReadoutWidget_OnWeaponSwitch::EquippedWeapon' has a wrong offset!");

// Function Indiana.KillCameraComponent.OnKill
// 0x0118 (0x0118 - 0x0000)
struct KillCameraComponent_OnKill final
{
public:
	class AActor*                                 Victim;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCauseDamageInfo                       CauseDamageInfo;                                   // 0x0008(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(KillCameraComponent_OnKill) == 0x000008, "Wrong alignment on KillCameraComponent_OnKill");
static_assert(sizeof(KillCameraComponent_OnKill) == 0x000118, "Wrong size on KillCameraComponent_OnKill");
static_assert(offsetof(KillCameraComponent_OnKill, Victim) == 0x000000, "Member 'KillCameraComponent_OnKill::Victim' has a wrong offset!");
static_assert(offsetof(KillCameraComponent_OnKill, CauseDamageInfo) == 0x000008, "Member 'KillCameraComponent_OnKill::CauseDamageInfo' has a wrong offset!");

// Function Indiana.MoveToBehaviorStateInfo.OnTakeDamage
// 0x0110 (0x0110 - 0x0000)
struct MoveToBehaviorStateInfo_OnTakeDamage final
{
public:
	struct FCauseDamageInfo                       CauseDamageInfo;                                   // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoveToBehaviorStateInfo_OnTakeDamage) == 0x000008, "Wrong alignment on MoveToBehaviorStateInfo_OnTakeDamage");
static_assert(sizeof(MoveToBehaviorStateInfo_OnTakeDamage) == 0x000110, "Wrong size on MoveToBehaviorStateInfo_OnTakeDamage");
static_assert(offsetof(MoveToBehaviorStateInfo_OnTakeDamage, CauseDamageInfo) == 0x000000, "Member 'MoveToBehaviorStateInfo_OnTakeDamage::CauseDamageInfo' has a wrong offset!");

// Function Indiana.KeybindDialogBoxWidget.SetNewBackingMaterialHeight
// 0x0004 (0x0004 - 0x0000)
struct KeybindDialogBoxWidget_SetNewBackingMaterialHeight final
{
public:
	float                                         NewHeight;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeybindDialogBoxWidget_SetNewBackingMaterialHeight) == 0x000004, "Wrong alignment on KeybindDialogBoxWidget_SetNewBackingMaterialHeight");
static_assert(sizeof(KeybindDialogBoxWidget_SetNewBackingMaterialHeight) == 0x000004, "Wrong size on KeybindDialogBoxWidget_SetNewBackingMaterialHeight");
static_assert(offsetof(KeybindDialogBoxWidget_SetNewBackingMaterialHeight, NewHeight) == 0x000000, "Member 'KeybindDialogBoxWidget_SetNewBackingMaterialHeight::NewHeight' has a wrong offset!");

// Function Indiana.OnPlayerFirstAttack.OnFirstAttack
// 0x0008 (0x0008 - 0x0000)
struct OnPlayerFirstAttack_OnFirstAttack final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnPlayerFirstAttack_OnFirstAttack) == 0x000008, "Wrong alignment on OnPlayerFirstAttack_OnFirstAttack");
static_assert(sizeof(OnPlayerFirstAttack_OnFirstAttack) == 0x000008, "Wrong size on OnPlayerFirstAttack_OnFirstAttack");
static_assert(offsetof(OnPlayerFirstAttack_OnFirstAttack, Target) == 0x000000, "Member 'OnPlayerFirstAttack_OnFirstAttack::Target' has a wrong offset!");

// Function Indiana.BossComponent.OnCombatStateChanged
// 0x0002 (0x0002 - 0x0000)
struct BossComponent_OnCombatStateChanged final
{
public:
	bool                                          bIsInCombat;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestoring;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BossComponent_OnCombatStateChanged) == 0x000001, "Wrong alignment on BossComponent_OnCombatStateChanged");
static_assert(sizeof(BossComponent_OnCombatStateChanged) == 0x000002, "Wrong size on BossComponent_OnCombatStateChanged");
static_assert(offsetof(BossComponent_OnCombatStateChanged, bIsInCombat) == 0x000000, "Member 'BossComponent_OnCombatStateChanged::bIsInCombat' has a wrong offset!");
static_assert(offsetof(BossComponent_OnCombatStateChanged, bRestoring) == 0x000001, "Member 'BossComponent_OnCombatStateChanged::bRestoring' has a wrong offset!");

// Function Indiana.BossComponent.OnHealthChanged
// 0x0010 (0x0010 - 0x0000)
struct BossComponent_OnHealthChanged final
{
public:
	float                                         HealthChange;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 InInstigator;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BossComponent_OnHealthChanged) == 0x000008, "Wrong alignment on BossComponent_OnHealthChanged");
static_assert(sizeof(BossComponent_OnHealthChanged) == 0x000010, "Wrong size on BossComponent_OnHealthChanged");
static_assert(offsetof(BossComponent_OnHealthChanged, HealthChange) == 0x000000, "Member 'BossComponent_OnHealthChanged::HealthChange' has a wrong offset!");
static_assert(offsetof(BossComponent_OnHealthChanged, InInstigator) == 0x000008, "Member 'BossComponent_OnHealthChanged::InInstigator' has a wrong offset!");

// Function Indiana.OnGetUp.OnGetUp
// 0x0001 (0x0001 - 0x0000)
struct OnGetUp_OnGetUp final
{
public:
	bool                                          bInBegan;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnGetUp_OnGetUp) == 0x000001, "Wrong alignment on OnGetUp_OnGetUp");
static_assert(sizeof(OnGetUp_OnGetUp) == 0x000001, "Wrong size on OnGetUp_OnGetUp");
static_assert(offsetof(OnGetUp_OnGetUp, bInBegan) == 0x000000, "Member 'OnGetUp_OnGetUp::bInBegan' has a wrong offset!");

// Function Indiana.OnSellItemNumBits.OnVectorTransaction
// 0x0028 (0x0028 - 0x0000)
struct OnSellItemNumBits_OnVectorTransaction final
{
public:
	int32                                         BuyingBalance;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SellingBalance;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RepairingBalance;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FItemStackSplit                        ItemStackSplit;                                    // 0x0010(0x0018)(Parm, OutParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnSellItemNumBits_OnVectorTransaction) == 0x000008, "Wrong alignment on OnSellItemNumBits_OnVectorTransaction");
static_assert(sizeof(OnSellItemNumBits_OnVectorTransaction) == 0x000028, "Wrong size on OnSellItemNumBits_OnVectorTransaction");
static_assert(offsetof(OnSellItemNumBits_OnVectorTransaction, BuyingBalance) == 0x000000, "Member 'OnSellItemNumBits_OnVectorTransaction::BuyingBalance' has a wrong offset!");
static_assert(offsetof(OnSellItemNumBits_OnVectorTransaction, SellingBalance) == 0x000004, "Member 'OnSellItemNumBits_OnVectorTransaction::SellingBalance' has a wrong offset!");
static_assert(offsetof(OnSellItemNumBits_OnVectorTransaction, RepairingBalance) == 0x000008, "Member 'OnSellItemNumBits_OnVectorTransaction::RepairingBalance' has a wrong offset!");
static_assert(offsetof(OnSellItemNumBits_OnVectorTransaction, ItemStackSplit) == 0x000010, "Member 'OnSellItemNumBits_OnVectorTransaction::ItemStackSplit' has a wrong offset!");

// Function Indiana.InventoryComponent.AddItemToActor
// 0x0018 (0x0018 - 0x0000)
struct InventoryComponent_AddItemToActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UItem>                      ItemType;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLootable;                                         // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryComponent_AddItemToActor) == 0x000008, "Wrong alignment on InventoryComponent_AddItemToActor");
static_assert(sizeof(InventoryComponent_AddItemToActor) == 0x000018, "Wrong size on InventoryComponent_AddItemToActor");
static_assert(offsetof(InventoryComponent_AddItemToActor, Actor) == 0x000000, "Member 'InventoryComponent_AddItemToActor::Actor' has a wrong offset!");
static_assert(offsetof(InventoryComponent_AddItemToActor, ItemType) == 0x000008, "Member 'InventoryComponent_AddItemToActor::ItemType' has a wrong offset!");
static_assert(offsetof(InventoryComponent_AddItemToActor, Count) == 0x000010, "Member 'InventoryComponent_AddItemToActor::Count' has a wrong offset!");
static_assert(offsetof(InventoryComponent_AddItemToActor, bLootable) == 0x000014, "Member 'InventoryComponent_AddItemToActor::bLootable' has a wrong offset!");

// Function Indiana.InventoryComponent.GetItemCountOnActor
// 0x0018 (0x0018 - 0x0000)
struct InventoryComponent_GetItemCountOnActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UItem>                      ItemType;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryComponent_GetItemCountOnActor) == 0x000008, "Wrong alignment on InventoryComponent_GetItemCountOnActor");
static_assert(sizeof(InventoryComponent_GetItemCountOnActor) == 0x000018, "Wrong size on InventoryComponent_GetItemCountOnActor");
static_assert(offsetof(InventoryComponent_GetItemCountOnActor, Actor) == 0x000000, "Member 'InventoryComponent_GetItemCountOnActor::Actor' has a wrong offset!");
static_assert(offsetof(InventoryComponent_GetItemCountOnActor, ItemType) == 0x000008, "Member 'InventoryComponent_GetItemCountOnActor::ItemType' has a wrong offset!");
static_assert(offsetof(InventoryComponent_GetItemCountOnActor, ReturnValue) == 0x000010, "Member 'InventoryComponent_GetItemCountOnActor::ReturnValue' has a wrong offset!");

// Function Indiana.InventoryComponent.HasItemCountOnActor
// 0x0018 (0x0018 - 0x0000)
struct InventoryComponent_HasItemCountOnActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UItem>                      ItemType;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryComponent_HasItemCountOnActor) == 0x000008, "Wrong alignment on InventoryComponent_HasItemCountOnActor");
static_assert(sizeof(InventoryComponent_HasItemCountOnActor) == 0x000018, "Wrong size on InventoryComponent_HasItemCountOnActor");
static_assert(offsetof(InventoryComponent_HasItemCountOnActor, Actor) == 0x000000, "Member 'InventoryComponent_HasItemCountOnActor::Actor' has a wrong offset!");
static_assert(offsetof(InventoryComponent_HasItemCountOnActor, ItemType) == 0x000008, "Member 'InventoryComponent_HasItemCountOnActor::ItemType' has a wrong offset!");
static_assert(offsetof(InventoryComponent_HasItemCountOnActor, Count) == 0x000010, "Member 'InventoryComponent_HasItemCountOnActor::Count' has a wrong offset!");
static_assert(offsetof(InventoryComponent_HasItemCountOnActor, ReturnValue) == 0x000014, "Member 'InventoryComponent_HasItemCountOnActor::ReturnValue' has a wrong offset!");

// Function Indiana.InventoryComponent.HasItemCountOnActorByTag
// 0x0030 (0x0030 - 0x0000)
struct InventoryComponent_HasItemCountOnActorByTag final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  MatchTags;                                         // 0x0008(0x0020)(Parm, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x002C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryComponent_HasItemCountOnActorByTag) == 0x000008, "Wrong alignment on InventoryComponent_HasItemCountOnActorByTag");
static_assert(sizeof(InventoryComponent_HasItemCountOnActorByTag) == 0x000030, "Wrong size on InventoryComponent_HasItemCountOnActorByTag");
static_assert(offsetof(InventoryComponent_HasItemCountOnActorByTag, Actor) == 0x000000, "Member 'InventoryComponent_HasItemCountOnActorByTag::Actor' has a wrong offset!");
static_assert(offsetof(InventoryComponent_HasItemCountOnActorByTag, MatchTags) == 0x000008, "Member 'InventoryComponent_HasItemCountOnActorByTag::MatchTags' has a wrong offset!");
static_assert(offsetof(InventoryComponent_HasItemCountOnActorByTag, Count) == 0x000028, "Member 'InventoryComponent_HasItemCountOnActorByTag::Count' has a wrong offset!");
static_assert(offsetof(InventoryComponent_HasItemCountOnActorByTag, ReturnValue) == 0x00002C, "Member 'InventoryComponent_HasItemCountOnActorByTag::ReturnValue' has a wrong offset!");

// Function Indiana.InventoryComponent.RemoveItemFromActor
// 0x0018 (0x0018 - 0x0000)
struct InventoryComponent_RemoveItemFromActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UItem>                      ItemType;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryComponent_RemoveItemFromActor) == 0x000008, "Wrong alignment on InventoryComponent_RemoveItemFromActor");
static_assert(sizeof(InventoryComponent_RemoveItemFromActor) == 0x000018, "Wrong size on InventoryComponent_RemoveItemFromActor");
static_assert(offsetof(InventoryComponent_RemoveItemFromActor, Actor) == 0x000000, "Member 'InventoryComponent_RemoveItemFromActor::Actor' has a wrong offset!");
static_assert(offsetof(InventoryComponent_RemoveItemFromActor, ItemType) == 0x000008, "Member 'InventoryComponent_RemoveItemFromActor::ItemType' has a wrong offset!");
static_assert(offsetof(InventoryComponent_RemoveItemFromActor, Count) == 0x000010, "Member 'InventoryComponent_RemoveItemFromActor::Count' has a wrong offset!");
static_assert(offsetof(InventoryComponent_RemoveItemFromActor, ReturnValue) == 0x000014, "Member 'InventoryComponent_RemoveItemFromActor::ReturnValue' has a wrong offset!");

// Function Indiana.InventoryComponent.RemoveItemsFromActorByTag
// 0x0030 (0x0030 - 0x0000)
struct InventoryComponent_RemoveItemsFromActorByTag final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  MatchTags;                                         // 0x0008(0x0020)(Parm, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x002C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryComponent_RemoveItemsFromActorByTag) == 0x000008, "Wrong alignment on InventoryComponent_RemoveItemsFromActorByTag");
static_assert(sizeof(InventoryComponent_RemoveItemsFromActorByTag) == 0x000030, "Wrong size on InventoryComponent_RemoveItemsFromActorByTag");
static_assert(offsetof(InventoryComponent_RemoveItemsFromActorByTag, Actor) == 0x000000, "Member 'InventoryComponent_RemoveItemsFromActorByTag::Actor' has a wrong offset!");
static_assert(offsetof(InventoryComponent_RemoveItemsFromActorByTag, MatchTags) == 0x000008, "Member 'InventoryComponent_RemoveItemsFromActorByTag::MatchTags' has a wrong offset!");
static_assert(offsetof(InventoryComponent_RemoveItemsFromActorByTag, Count) == 0x000028, "Member 'InventoryComponent_RemoveItemsFromActorByTag::Count' has a wrong offset!");
static_assert(offsetof(InventoryComponent_RemoveItemsFromActorByTag, ReturnValue) == 0x00002C, "Member 'InventoryComponent_RemoveItemsFromActorByTag::ReturnValue' has a wrong offset!");

// Function Indiana.InventoryComponent.ShowItemGainedNotification
// 0x0010 (0x0010 - 0x0000)
struct InventoryComponent_ShowItemGainedNotification final
{
public:
	TSubclassOf<class UItem>                      ItemType;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryComponent_ShowItemGainedNotification) == 0x000008, "Wrong alignment on InventoryComponent_ShowItemGainedNotification");
static_assert(sizeof(InventoryComponent_ShowItemGainedNotification) == 0x000010, "Wrong size on InventoryComponent_ShowItemGainedNotification");
static_assert(offsetof(InventoryComponent_ShowItemGainedNotification, ItemType) == 0x000000, "Member 'InventoryComponent_ShowItemGainedNotification::ItemType' has a wrong offset!");
static_assert(offsetof(InventoryComponent_ShowItemGainedNotification, Count) == 0x000008, "Member 'InventoryComponent_ShowItemGainedNotification::Count' has a wrong offset!");

// Function Indiana.InventoryComponent.ShowItemRemovedNotification
// 0x0010 (0x0010 - 0x0000)
struct InventoryComponent_ShowItemRemovedNotification final
{
public:
	TSubclassOf<class UItem>                      ItemType;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryComponent_ShowItemRemovedNotification) == 0x000008, "Wrong alignment on InventoryComponent_ShowItemRemovedNotification");
static_assert(sizeof(InventoryComponent_ShowItemRemovedNotification) == 0x000010, "Wrong size on InventoryComponent_ShowItemRemovedNotification");
static_assert(offsetof(InventoryComponent_ShowItemRemovedNotification, ItemType) == 0x000000, "Member 'InventoryComponent_ShowItemRemovedNotification::ItemType' has a wrong offset!");
static_assert(offsetof(InventoryComponent_ShowItemRemovedNotification, Count) == 0x000008, "Member 'InventoryComponent_ShowItemRemovedNotification::Count' has a wrong offset!");

// Function Indiana.InventoryComponent.TransferItemsBetweenActorsByTag
// 0x0038 (0x0038 - 0x0000)
struct InventoryComponent_TransferItemsBetweenActorsByTag final
{
public:
	class AActor*                                 SourceActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DestinationActor;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  MatchTags;                                         // 0x0010(0x0020)(Parm, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPotentialTheft;                                   // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0035(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryComponent_TransferItemsBetweenActorsByTag) == 0x000008, "Wrong alignment on InventoryComponent_TransferItemsBetweenActorsByTag");
static_assert(sizeof(InventoryComponent_TransferItemsBetweenActorsByTag) == 0x000038, "Wrong size on InventoryComponent_TransferItemsBetweenActorsByTag");
static_assert(offsetof(InventoryComponent_TransferItemsBetweenActorsByTag, SourceActor) == 0x000000, "Member 'InventoryComponent_TransferItemsBetweenActorsByTag::SourceActor' has a wrong offset!");
static_assert(offsetof(InventoryComponent_TransferItemsBetweenActorsByTag, DestinationActor) == 0x000008, "Member 'InventoryComponent_TransferItemsBetweenActorsByTag::DestinationActor' has a wrong offset!");
static_assert(offsetof(InventoryComponent_TransferItemsBetweenActorsByTag, MatchTags) == 0x000010, "Member 'InventoryComponent_TransferItemsBetweenActorsByTag::MatchTags' has a wrong offset!");
static_assert(offsetof(InventoryComponent_TransferItemsBetweenActorsByTag, Count) == 0x000030, "Member 'InventoryComponent_TransferItemsBetweenActorsByTag::Count' has a wrong offset!");
static_assert(offsetof(InventoryComponent_TransferItemsBetweenActorsByTag, bPotentialTheft) == 0x000034, "Member 'InventoryComponent_TransferItemsBetweenActorsByTag::bPotentialTheft' has a wrong offset!");
static_assert(offsetof(InventoryComponent_TransferItemsBetweenActorsByTag, ReturnValue) == 0x000035, "Member 'InventoryComponent_TransferItemsBetweenActorsByTag::ReturnValue' has a wrong offset!");

// Function Indiana.InventoryComponent.AddCurrency
// 0x0008 (0x0008 - 0x0000)
struct InventoryComponent_AddCurrency final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLootable;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryComponent_AddCurrency) == 0x000004, "Wrong alignment on InventoryComponent_AddCurrency");
static_assert(sizeof(InventoryComponent_AddCurrency) == 0x000008, "Wrong size on InventoryComponent_AddCurrency");
static_assert(offsetof(InventoryComponent_AddCurrency, Amount) == 0x000000, "Member 'InventoryComponent_AddCurrency::Amount' has a wrong offset!");
static_assert(offsetof(InventoryComponent_AddCurrency, bLootable) == 0x000004, "Member 'InventoryComponent_AddCurrency::bLootable' has a wrong offset!");

// Function Indiana.InventoryComponent.AddItemDebug
// 0x000C (0x000C - 0x0000)
struct InventoryComponent_AddItemDebug final
{
public:
	class FName                                   ItemName;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_AddItemDebug) == 0x000004, "Wrong alignment on InventoryComponent_AddItemDebug");
static_assert(sizeof(InventoryComponent_AddItemDebug) == 0x00000C, "Wrong size on InventoryComponent_AddItemDebug");
static_assert(offsetof(InventoryComponent_AddItemDebug, ItemName) == 0x000000, "Member 'InventoryComponent_AddItemDebug::ItemName' has a wrong offset!");
static_assert(offsetof(InventoryComponent_AddItemDebug, Count) == 0x000008, "Member 'InventoryComponent_AddItemDebug::Count' has a wrong offset!");

// Function Indiana.InventoryComponent.AddLootFromTable
// 0x0008 (0x0008 - 0x0000)
struct InventoryComponent_AddLootFromTable final
{
public:
	class ULootTableData*                         LootTable;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_AddLootFromTable) == 0x000008, "Wrong alignment on InventoryComponent_AddLootFromTable");
static_assert(sizeof(InventoryComponent_AddLootFromTable) == 0x000008, "Wrong size on InventoryComponent_AddLootFromTable");
static_assert(offsetof(InventoryComponent_AddLootFromTable, LootTable) == 0x000000, "Member 'InventoryComponent_AddLootFromTable::LootTable' has a wrong offset!");

// Function Indiana.InventoryComponent.DebugCreateInventory
// 0x0008 (0x0008 - 0x0000)
struct InventoryComponent_DebugCreateInventory final
{
public:
	int32                                         NumToAddPerItem;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Skip;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_DebugCreateInventory) == 0x000004, "Wrong alignment on InventoryComponent_DebugCreateInventory");
static_assert(sizeof(InventoryComponent_DebugCreateInventory) == 0x000008, "Wrong size on InventoryComponent_DebugCreateInventory");
static_assert(offsetof(InventoryComponent_DebugCreateInventory, NumToAddPerItem) == 0x000000, "Member 'InventoryComponent_DebugCreateInventory::NumToAddPerItem' has a wrong offset!");
static_assert(offsetof(InventoryComponent_DebugCreateInventory, Skip) == 0x000004, "Member 'InventoryComponent_DebugCreateInventory::Skip' has a wrong offset!");

// Function Indiana.InventoryComponent.RemoveCurrency
// 0x0008 (0x0008 - 0x0000)
struct InventoryComponent_RemoveCurrency final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVendorInteraction;                                // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryComponent_RemoveCurrency) == 0x000004, "Wrong alignment on InventoryComponent_RemoveCurrency");
static_assert(sizeof(InventoryComponent_RemoveCurrency) == 0x000008, "Wrong size on InventoryComponent_RemoveCurrency");
static_assert(offsetof(InventoryComponent_RemoveCurrency, Amount) == 0x000000, "Member 'InventoryComponent_RemoveCurrency::Amount' has a wrong offset!");
static_assert(offsetof(InventoryComponent_RemoveCurrency, bVendorInteraction) == 0x000004, "Member 'InventoryComponent_RemoveCurrency::bVendorInteraction' has a wrong offset!");

// Function Indiana.InventoryComponent.ContainsLoot
// 0x0001 (0x0001 - 0x0000)
struct InventoryComponent_ContainsLoot final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_ContainsLoot) == 0x000001, "Wrong alignment on InventoryComponent_ContainsLoot");
static_assert(sizeof(InventoryComponent_ContainsLoot) == 0x000001, "Wrong size on InventoryComponent_ContainsLoot");
static_assert(offsetof(InventoryComponent_ContainsLoot, ReturnValue) == 0x000000, "Member 'InventoryComponent_ContainsLoot::ReturnValue' has a wrong offset!");

// Function Indiana.InventoryComponent.IsEmpty
// 0x0001 (0x0001 - 0x0000)
struct InventoryComponent_IsEmpty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_IsEmpty) == 0x000001, "Wrong alignment on InventoryComponent_IsEmpty");
static_assert(sizeof(InventoryComponent_IsEmpty) == 0x000001, "Wrong size on InventoryComponent_IsEmpty");
static_assert(offsetof(InventoryComponent_IsEmpty, ReturnValue) == 0x000000, "Member 'InventoryComponent_IsEmpty::ReturnValue' has a wrong offset!");

// Function Indiana.PlayerInventoryComponent.BreakDownItemDebug
// 0x000C (0x000C - 0x0000)
struct PlayerInventoryComponent_BreakDownItemDebug final
{
public:
	class FName                                   ItemName;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFieldBreakdown;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerInventoryComponent_BreakDownItemDebug) == 0x000004, "Wrong alignment on PlayerInventoryComponent_BreakDownItemDebug");
static_assert(sizeof(PlayerInventoryComponent_BreakDownItemDebug) == 0x00000C, "Wrong size on PlayerInventoryComponent_BreakDownItemDebug");
static_assert(offsetof(PlayerInventoryComponent_BreakDownItemDebug, ItemName) == 0x000000, "Member 'PlayerInventoryComponent_BreakDownItemDebug::ItemName' has a wrong offset!");
static_assert(offsetof(PlayerInventoryComponent_BreakDownItemDebug, bFieldBreakdown) == 0x000008, "Member 'PlayerInventoryComponent_BreakDownItemDebug::bFieldBreakdown' has a wrong offset!");

// Function Indiana.PlayerInventoryComponent.IgnoreEncumbrance
// 0x0001 (0x0001 - 0x0000)
struct PlayerInventoryComponent_IgnoreEncumbrance final
{
public:
	bool                                          bIgnored;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInventoryComponent_IgnoreEncumbrance) == 0x000001, "Wrong alignment on PlayerInventoryComponent_IgnoreEncumbrance");
static_assert(sizeof(PlayerInventoryComponent_IgnoreEncumbrance) == 0x000001, "Wrong size on PlayerInventoryComponent_IgnoreEncumbrance");
static_assert(offsetof(PlayerInventoryComponent_IgnoreEncumbrance, bIgnored) == 0x000000, "Member 'PlayerInventoryComponent_IgnoreEncumbrance::bIgnored' has a wrong offset!");

// Function Indiana.PlayerInventoryComponent.OnCompanionRegistered
// 0x0010 (0x0010 - 0x0000)
struct PlayerInventoryComponent_OnCompanionRegistered final
{
public:
	class AIndianaAiCharacter*                    Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAdded;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerInventoryComponent_OnCompanionRegistered) == 0x000008, "Wrong alignment on PlayerInventoryComponent_OnCompanionRegistered");
static_assert(sizeof(PlayerInventoryComponent_OnCompanionRegistered) == 0x000010, "Wrong size on PlayerInventoryComponent_OnCompanionRegistered");
static_assert(offsetof(PlayerInventoryComponent_OnCompanionRegistered, Character) == 0x000000, "Member 'PlayerInventoryComponent_OnCompanionRegistered::Character' has a wrong offset!");
static_assert(offsetof(PlayerInventoryComponent_OnCompanionRegistered, bAdded) == 0x000008, "Member 'PlayerInventoryComponent_OnCompanionRegistered::bAdded' has a wrong offset!");

// Function Indiana.PlayerInventoryComponent.OnStatUpdated
// 0x0008 (0x0008 - 0x0000)
struct PlayerInventoryComponent_OnStatUpdated final
{
public:
	const class URpgStat*                         Stat;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInventoryComponent_OnStatUpdated) == 0x000008, "Wrong alignment on PlayerInventoryComponent_OnStatUpdated");
static_assert(sizeof(PlayerInventoryComponent_OnStatUpdated) == 0x000008, "Wrong size on PlayerInventoryComponent_OnStatUpdated");
static_assert(offsetof(PlayerInventoryComponent_OnStatUpdated, Stat) == 0x000000, "Member 'PlayerInventoryComponent_OnStatUpdated::Stat' has a wrong offset!");

// Function Indiana.PlayerInventoryComponent.RepairItemDebug
// 0x000C (0x000C - 0x0000)
struct PlayerInventoryComponent_RepairItemDebug final
{
public:
	class FName                                   ItemName;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFieldRepair;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerInventoryComponent_RepairItemDebug) == 0x000004, "Wrong alignment on PlayerInventoryComponent_RepairItemDebug");
static_assert(sizeof(PlayerInventoryComponent_RepairItemDebug) == 0x00000C, "Wrong size on PlayerInventoryComponent_RepairItemDebug");
static_assert(offsetof(PlayerInventoryComponent_RepairItemDebug, ItemName) == 0x000000, "Member 'PlayerInventoryComponent_RepairItemDebug::ItemName' has a wrong offset!");
static_assert(offsetof(PlayerInventoryComponent_RepairItemDebug, bFieldRepair) == 0x000008, "Member 'PlayerInventoryComponent_RepairItemDebug::bFieldRepair' has a wrong offset!");

// Function Indiana.PlayerInventoryComponent.SetArmorHealthDebug
// 0x0004 (0x0004 - 0x0000)
struct PlayerInventoryComponent_SetArmorHealthDebug final
{
public:
	float                                         Percent;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInventoryComponent_SetArmorHealthDebug) == 0x000004, "Wrong alignment on PlayerInventoryComponent_SetArmorHealthDebug");
static_assert(sizeof(PlayerInventoryComponent_SetArmorHealthDebug) == 0x000004, "Wrong size on PlayerInventoryComponent_SetArmorHealthDebug");
static_assert(offsetof(PlayerInventoryComponent_SetArmorHealthDebug, Percent) == 0x000000, "Member 'PlayerInventoryComponent_SetArmorHealthDebug::Percent' has a wrong offset!");

// Function Indiana.PlayerInventoryComponent.SetHelmetHealthDebug
// 0x0004 (0x0004 - 0x0000)
struct PlayerInventoryComponent_SetHelmetHealthDebug final
{
public:
	float                                         Percent;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInventoryComponent_SetHelmetHealthDebug) == 0x000004, "Wrong alignment on PlayerInventoryComponent_SetHelmetHealthDebug");
static_assert(sizeof(PlayerInventoryComponent_SetHelmetHealthDebug) == 0x000004, "Wrong size on PlayerInventoryComponent_SetHelmetHealthDebug");
static_assert(offsetof(PlayerInventoryComponent_SetHelmetHealthDebug, Percent) == 0x000000, "Member 'PlayerInventoryComponent_SetHelmetHealthDebug::Percent' has a wrong offset!");

// Function Indiana.PlayerInventoryComponent.SetItemHealthDebug
// 0x000C (0x000C - 0x0000)
struct PlayerInventoryComponent_SetItemHealthDebug final
{
public:
	class FName                                   ItemName;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Percent;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInventoryComponent_SetItemHealthDebug) == 0x000004, "Wrong alignment on PlayerInventoryComponent_SetItemHealthDebug");
static_assert(sizeof(PlayerInventoryComponent_SetItemHealthDebug) == 0x00000C, "Wrong size on PlayerInventoryComponent_SetItemHealthDebug");
static_assert(offsetof(PlayerInventoryComponent_SetItemHealthDebug, ItemName) == 0x000000, "Member 'PlayerInventoryComponent_SetItemHealthDebug::ItemName' has a wrong offset!");
static_assert(offsetof(PlayerInventoryComponent_SetItemHealthDebug, Percent) == 0x000008, "Member 'PlayerInventoryComponent_SetItemHealthDebug::Percent' has a wrong offset!");

// Function Indiana.PlayerInventoryComponent.SetWeaponHealthDebug
// 0x0004 (0x0004 - 0x0000)
struct PlayerInventoryComponent_SetWeaponHealthDebug final
{
public:
	float                                         Percent;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInventoryComponent_SetWeaponHealthDebug) == 0x000004, "Wrong alignment on PlayerInventoryComponent_SetWeaponHealthDebug");
static_assert(sizeof(PlayerInventoryComponent_SetWeaponHealthDebug) == 0x000004, "Wrong size on PlayerInventoryComponent_SetWeaponHealthDebug");
static_assert(offsetof(PlayerInventoryComponent_SetWeaponHealthDebug, Percent) == 0x000000, "Member 'PlayerInventoryComponent_SetWeaponHealthDebug::Percent' has a wrong offset!");

// Function Indiana.PlayerInventoryComponent.VendorRepairItemDebug
// 0x0008 (0x0008 - 0x0000)
struct PlayerInventoryComponent_VendorRepairItemDebug final
{
public:
	class FName                                   ItemName;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInventoryComponent_VendorRepairItemDebug) == 0x000004, "Wrong alignment on PlayerInventoryComponent_VendorRepairItemDebug");
static_assert(sizeof(PlayerInventoryComponent_VendorRepairItemDebug) == 0x000008, "Wrong size on PlayerInventoryComponent_VendorRepairItemDebug");
static_assert(offsetof(PlayerInventoryComponent_VendorRepairItemDebug, ItemName) == 0x000000, "Member 'PlayerInventoryComponent_VendorRepairItemDebug::ItemName' has a wrong offset!");

// Function Indiana.OnEncumberedChange.OnEncumberedChange
// 0x0001 (0x0001 - 0x0000)
struct OnEncumberedChange_OnEncumberedChange final
{
public:
	bool                                          bInEncumbered;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnEncumberedChange_OnEncumberedChange) == 0x000001, "Wrong alignment on OnEncumberedChange_OnEncumberedChange");
static_assert(sizeof(OnEncumberedChange_OnEncumberedChange) == 0x000001, "Wrong size on OnEncumberedChange_OnEncumberedChange");
static_assert(offsetof(OnEncumberedChange_OnEncumberedChange, bInEncumbered) == 0x000000, "Member 'OnEncumberedChange_OnEncumberedChange::bInEncumbered' has a wrong offset!");

// Function Indiana.CharacterDeathComponent.CalcImpactVector
// 0x000C (0x000C - 0x0000)
struct CharacterDeathComponent_CalcImpactVector final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterDeathComponent_CalcImpactVector) == 0x000004, "Wrong alignment on CharacterDeathComponent_CalcImpactVector");
static_assert(sizeof(CharacterDeathComponent_CalcImpactVector) == 0x00000C, "Wrong size on CharacterDeathComponent_CalcImpactVector");
static_assert(offsetof(CharacterDeathComponent_CalcImpactVector, ReturnValue) == 0x000000, "Member 'CharacterDeathComponent_CalcImpactVector::ReturnValue' has a wrong offset!");

// Function Indiana.CharacterDeathComponent.OnMontageEnded
// 0x0010 (0x0010 - 0x0000)
struct CharacterDeathComponent_OnMontageEnded final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterDeathComponent_OnMontageEnded) == 0x000008, "Wrong alignment on CharacterDeathComponent_OnMontageEnded");
static_assert(sizeof(CharacterDeathComponent_OnMontageEnded) == 0x000010, "Wrong size on CharacterDeathComponent_OnMontageEnded");
static_assert(offsetof(CharacterDeathComponent_OnMontageEnded, Montage) == 0x000000, "Member 'CharacterDeathComponent_OnMontageEnded::Montage' has a wrong offset!");
static_assert(offsetof(CharacterDeathComponent_OnMontageEnded, bInterrupted) == 0x000008, "Member 'CharacterDeathComponent_OnMontageEnded::bInterrupted' has a wrong offset!");

// Function Indiana.CharacterDeathComponent.RagdollCharacter
// 0x0001 (0x0001 - 0x0000)
struct CharacterDeathComponent_RagdollCharacter final
{
public:
	bool                                          bIgnoreDeathMontages;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterDeathComponent_RagdollCharacter) == 0x000001, "Wrong alignment on CharacterDeathComponent_RagdollCharacter");
static_assert(sizeof(CharacterDeathComponent_RagdollCharacter) == 0x000001, "Wrong size on CharacterDeathComponent_RagdollCharacter");
static_assert(offsetof(CharacterDeathComponent_RagdollCharacter, bIgnoreDeathMontages) == 0x000000, "Member 'CharacterDeathComponent_RagdollCharacter::bIgnoreDeathMontages' has a wrong offset!");

// Function Indiana.CharacterDeathComponent.SpawnAshPile
// 0x0018 (0x0018 - 0x0000)
struct CharacterDeathComponent_SpawnAshPile final
{
public:
	class UStaticMesh*                            Mesh;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     LootablePileMaterial;                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterDeathComponent_SpawnAshPile) == 0x000008, "Wrong alignment on CharacterDeathComponent_SpawnAshPile");
static_assert(sizeof(CharacterDeathComponent_SpawnAshPile) == 0x000018, "Wrong size on CharacterDeathComponent_SpawnAshPile");
static_assert(offsetof(CharacterDeathComponent_SpawnAshPile, Mesh) == 0x000000, "Member 'CharacterDeathComponent_SpawnAshPile::Mesh' has a wrong offset!");
static_assert(offsetof(CharacterDeathComponent_SpawnAshPile, LootablePileMaterial) == 0x000008, "Member 'CharacterDeathComponent_SpawnAshPile::LootablePileMaterial' has a wrong offset!");
static_assert(offsetof(CharacterDeathComponent_SpawnAshPile, ReturnValue) == 0x000010, "Member 'CharacterDeathComponent_SpawnAshPile::ReturnValue' has a wrong offset!");

// Function Indiana.CharacterDeathComponent.StoreDeathImpact
// 0x0020 (0x0020 - 0x0000)
struct CharacterDeathComponent_StoreDeathImpact final
{
public:
	struct FVector                                Impulse;                                           // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterDeathComponent_StoreDeathImpact) == 0x000004, "Wrong alignment on CharacterDeathComponent_StoreDeathImpact");
static_assert(sizeof(CharacterDeathComponent_StoreDeathImpact) == 0x000020, "Wrong size on CharacterDeathComponent_StoreDeathImpact");
static_assert(offsetof(CharacterDeathComponent_StoreDeathImpact, Impulse) == 0x000000, "Member 'CharacterDeathComponent_StoreDeathImpact::Impulse' has a wrong offset!");
static_assert(offsetof(CharacterDeathComponent_StoreDeathImpact, Location) == 0x00000C, "Member 'CharacterDeathComponent_StoreDeathImpact::Location' has a wrong offset!");
static_assert(offsetof(CharacterDeathComponent_StoreDeathImpact, BoneName) == 0x000018, "Member 'CharacterDeathComponent_StoreDeathImpact::BoneName' has a wrong offset!");

// Function Indiana.PlayerDeathComponent.OnAnimNotifyEvent
// 0x0001 (0x0001 - 0x0000)
struct PlayerDeathComponent_OnAnimNotifyEvent final
{
public:
	EAnimNotify                                   AnimNotifyEvent;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDeathComponent_OnAnimNotifyEvent) == 0x000001, "Wrong alignment on PlayerDeathComponent_OnAnimNotifyEvent");
static_assert(sizeof(PlayerDeathComponent_OnAnimNotifyEvent) == 0x000001, "Wrong size on PlayerDeathComponent_OnAnimNotifyEvent");
static_assert(offsetof(PlayerDeathComponent_OnAnimNotifyEvent, AnimNotifyEvent) == 0x000000, "Member 'PlayerDeathComponent_OnAnimNotifyEvent::AnimNotifyEvent' has a wrong offset!");

// Function Indiana.PlayerDeathComponent.OnLanded
// 0x0004 (0x0004 - 0x0000)
struct PlayerDeathComponent_OnLanded final
{
public:
	float                                         DistanceFallen;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDeathComponent_OnLanded) == 0x000004, "Wrong alignment on PlayerDeathComponent_OnLanded");
static_assert(sizeof(PlayerDeathComponent_OnLanded) == 0x000004, "Wrong size on PlayerDeathComponent_OnLanded");
static_assert(offsetof(PlayerDeathComponent_OnLanded, DistanceFallen) == 0x000000, "Member 'PlayerDeathComponent_OnLanded::DistanceFallen' has a wrong offset!");

// Function Indiana.OnBlockedHit.OnBlockedHitEvent
// 0x0001 (0x0001 - 0x0000)
struct OnBlockedHit_OnBlockedHitEvent final
{
public:
	bool                                          bIsMeleeHit;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnBlockedHit_OnBlockedHitEvent) == 0x000001, "Wrong alignment on OnBlockedHit_OnBlockedHitEvent");
static_assert(sizeof(OnBlockedHit_OnBlockedHitEvent) == 0x000001, "Wrong size on OnBlockedHit_OnBlockedHitEvent");
static_assert(offsetof(OnBlockedHit_OnBlockedHitEvent, bIsMeleeHit) == 0x000000, "Member 'OnBlockedHit_OnBlockedHitEvent::bIsMeleeHit' has a wrong offset!");

// Function Indiana.OnNumHostileStatusEffects.OnStatusEffectAdded
// 0x0010 (0x0010 - 0x0000)
struct OnNumHostileStatusEffects_OnStatusEffectAdded final
{
public:
	class UStatusEffectManagerComponent*          Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStatusEffect*                          StatusEffectAdded;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnNumHostileStatusEffects_OnStatusEffectAdded) == 0x000008, "Wrong alignment on OnNumHostileStatusEffects_OnStatusEffectAdded");
static_assert(sizeof(OnNumHostileStatusEffects_OnStatusEffectAdded) == 0x000010, "Wrong size on OnNumHostileStatusEffects_OnStatusEffectAdded");
static_assert(offsetof(OnNumHostileStatusEffects_OnStatusEffectAdded, Sender) == 0x000000, "Member 'OnNumHostileStatusEffects_OnStatusEffectAdded::Sender' has a wrong offset!");
static_assert(offsetof(OnNumHostileStatusEffects_OnStatusEffectAdded, StatusEffectAdded) == 0x000008, "Member 'OnNumHostileStatusEffects_OnStatusEffectAdded::StatusEffectAdded' has a wrong offset!");

// Function Indiana.OnNumHostileStatusEffects.OnStatusEffectRemoved
// 0x0010 (0x0010 - 0x0000)
struct OnNumHostileStatusEffects_OnStatusEffectRemoved final
{
public:
	class UStatusEffectManagerComponent*          Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStatusEffect*                          StatusEffectRemoved;                               // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnNumHostileStatusEffects_OnStatusEffectRemoved) == 0x000008, "Wrong alignment on OnNumHostileStatusEffects_OnStatusEffectRemoved");
static_assert(sizeof(OnNumHostileStatusEffects_OnStatusEffectRemoved) == 0x000010, "Wrong size on OnNumHostileStatusEffects_OnStatusEffectRemoved");
static_assert(offsetof(OnNumHostileStatusEffects_OnStatusEffectRemoved, Sender) == 0x000000, "Member 'OnNumHostileStatusEffects_OnStatusEffectRemoved::Sender' has a wrong offset!");
static_assert(offsetof(OnNumHostileStatusEffects_OnStatusEffectRemoved, StatusEffectRemoved) == 0x000008, "Member 'OnNumHostileStatusEffects_OnStatusEffectRemoved::StatusEffectRemoved' has a wrong offset!");

// Function Indiana.OnSkillCheckSuccess.OnSkillCheckSuccess
// 0x000C (0x000C - 0x0000)
struct OnSkillCheckSuccess_OnSkillCheckSuccess final
{
public:
	EXPGainReason                                 Reason;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         XPEarned;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkill                                        SkillUsed;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnSkillCheckSuccess_OnSkillCheckSuccess) == 0x000004, "Wrong alignment on OnSkillCheckSuccess_OnSkillCheckSuccess");
static_assert(sizeof(OnSkillCheckSuccess_OnSkillCheckSuccess) == 0x00000C, "Wrong size on OnSkillCheckSuccess_OnSkillCheckSuccess");
static_assert(offsetof(OnSkillCheckSuccess_OnSkillCheckSuccess, Reason) == 0x000000, "Member 'OnSkillCheckSuccess_OnSkillCheckSuccess::Reason' has a wrong offset!");
static_assert(offsetof(OnSkillCheckSuccess_OnSkillCheckSuccess, XPEarned) == 0x000004, "Member 'OnSkillCheckSuccess_OnSkillCheckSuccess::XPEarned' has a wrong offset!");
static_assert(offsetof(OnSkillCheckSuccess_OnSkillCheckSuccess, SkillUsed) == 0x000008, "Member 'OnSkillCheckSuccess_OnSkillCheckSuccess::SkillUsed' has a wrong offset!");

// Function Indiana.AnimNotifyState_Prop.OnMontageEnded
// 0x0018 (0x0018 - 0x0000)
struct AnimNotifyState_Prop_OnMontageEnded final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 MeshComp;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimNotifyState_Prop_OnMontageEnded) == 0x000008, "Wrong alignment on AnimNotifyState_Prop_OnMontageEnded");
static_assert(sizeof(AnimNotifyState_Prop_OnMontageEnded) == 0x000018, "Wrong size on AnimNotifyState_Prop_OnMontageEnded");
static_assert(offsetof(AnimNotifyState_Prop_OnMontageEnded, Montage) == 0x000000, "Member 'AnimNotifyState_Prop_OnMontageEnded::Montage' has a wrong offset!");
static_assert(offsetof(AnimNotifyState_Prop_OnMontageEnded, bInterrupted) == 0x000008, "Member 'AnimNotifyState_Prop_OnMontageEnded::bInterrupted' has a wrong offset!");
static_assert(offsetof(AnimNotifyState_Prop_OnMontageEnded, MeshComp) == 0x000010, "Member 'AnimNotifyState_Prop_OnMontageEnded::MeshComp' has a wrong offset!");

// Function Indiana.MainOptionsWidget.OnActiveUserChanged
// 0x0001 (0x0001 - 0x0000)
struct MainOptionsWidget_OnActiveUserChanged final
{
public:
	EActiveUserChangeType                         ChangeType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainOptionsWidget_OnActiveUserChanged) == 0x000001, "Wrong alignment on MainOptionsWidget_OnActiveUserChanged");
static_assert(sizeof(MainOptionsWidget_OnActiveUserChanged) == 0x000001, "Wrong size on MainOptionsWidget_OnActiveUserChanged");
static_assert(offsetof(MainOptionsWidget_OnActiveUserChanged, ChangeType) == 0x000000, "Member 'MainOptionsWidget_OnActiveUserChanged::ChangeType' has a wrong offset!");

// Function Indiana.MainOptionsWidget.OnLoadComplete
// 0x0018 (0x0018 - 0x0000)
struct MainOptionsWidget_OnLoadComplete final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoadGameResult                               Result;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MainOptionsWidget_OnLoadComplete) == 0x000008, "Wrong alignment on MainOptionsWidget_OnLoadComplete");
static_assert(sizeof(MainOptionsWidget_OnLoadComplete) == 0x000018, "Wrong size on MainOptionsWidget_OnLoadComplete");
static_assert(offsetof(MainOptionsWidget_OnLoadComplete, Filename) == 0x000000, "Member 'MainOptionsWidget_OnLoadComplete::Filename' has a wrong offset!");
static_assert(offsetof(MainOptionsWidget_OnLoadComplete, Result) == 0x000010, "Member 'MainOptionsWidget_OnLoadComplete::Result' has a wrong offset!");

// Function Indiana.MainOptionsWidget.OnLoadSaveMenuClosed
// 0x0001 (0x0001 - 0x0000)
struct MainOptionsWidget_OnLoadSaveMenuClosed final
{
public:
	bool                                          bForced;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainOptionsWidget_OnLoadSaveMenuClosed) == 0x000001, "Wrong alignment on MainOptionsWidget_OnLoadSaveMenuClosed");
static_assert(sizeof(MainOptionsWidget_OnLoadSaveMenuClosed) == 0x000001, "Wrong size on MainOptionsWidget_OnLoadSaveMenuClosed");
static_assert(offsetof(MainOptionsWidget_OnLoadSaveMenuClosed, bForced) == 0x000000, "Member 'MainOptionsWidget_OnLoadSaveMenuClosed::bForced' has a wrong offset!");

// Function Indiana.MainOptionsWidget.OnQueryLatestSaveFinished
// 0x0018 (0x0018 - 0x0000)
struct MainOptionsWidget_OnQueryLatestSaveFinished final
{
public:
	class FString                                 LatestSaveName;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasSaves;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MainOptionsWidget_OnQueryLatestSaveFinished) == 0x000008, "Wrong alignment on MainOptionsWidget_OnQueryLatestSaveFinished");
static_assert(sizeof(MainOptionsWidget_OnQueryLatestSaveFinished) == 0x000018, "Wrong size on MainOptionsWidget_OnQueryLatestSaveFinished");
static_assert(offsetof(MainOptionsWidget_OnQueryLatestSaveFinished, LatestSaveName) == 0x000000, "Member 'MainOptionsWidget_OnQueryLatestSaveFinished::LatestSaveName' has a wrong offset!");
static_assert(offsetof(MainOptionsWidget_OnQueryLatestSaveFinished, bHasSaves) == 0x000010, "Member 'MainOptionsWidget_OnQueryLatestSaveFinished::bHasSaves' has a wrong offset!");

// Function Indiana.AppearanceComponent.ApplyAppearancePreset
// 0x0008 (0x0008 - 0x0000)
struct AppearanceComponent_ApplyAppearancePreset final
{
public:
	const class UAppearancePreset*                Preset;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppearanceComponent_ApplyAppearancePreset) == 0x000008, "Wrong alignment on AppearanceComponent_ApplyAppearancePreset");
static_assert(sizeof(AppearanceComponent_ApplyAppearancePreset) == 0x000008, "Wrong size on AppearanceComponent_ApplyAppearancePreset");
static_assert(offsetof(AppearanceComponent_ApplyAppearancePreset, Preset) == 0x000000, "Member 'AppearanceComponent_ApplyAppearancePreset::Preset' has a wrong offset!");

// Function Indiana.AppearanceComponent.RemoveBoneModification
// 0x0008 (0x0008 - 0x0000)
struct AppearanceComponent_RemoveBoneModification final
{
public:
	const class UBoneModifications*               Modifications;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppearanceComponent_RemoveBoneModification) == 0x000008, "Wrong alignment on AppearanceComponent_RemoveBoneModification");
static_assert(sizeof(AppearanceComponent_RemoveBoneModification) == 0x000008, "Wrong size on AppearanceComponent_RemoveBoneModification");
static_assert(offsetof(AppearanceComponent_RemoveBoneModification, Modifications) == 0x000000, "Member 'AppearanceComponent_RemoveBoneModification::Modifications' has a wrong offset!");

// Function Indiana.AppearanceComponent.SetAge
// 0x0004 (0x0004 - 0x0000)
struct AppearanceComponent_SetAge final
{
public:
	float                                         NewAge;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppearanceComponent_SetAge) == 0x000004, "Wrong alignment on AppearanceComponent_SetAge");
static_assert(sizeof(AppearanceComponent_SetAge) == 0x000004, "Wrong size on AppearanceComponent_SetAge");
static_assert(offsetof(AppearanceComponent_SetAge, NewAge) == 0x000000, "Member 'AppearanceComponent_SetAge::NewAge' has a wrong offset!");

// Function Indiana.AppearanceComponent.SetBeard
// 0x0008 (0x0008 - 0x0000)
struct AppearanceComponent_SetBeard final
{
public:
	const class UBeardAppearances*                NewBeard;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppearanceComponent_SetBeard) == 0x000008, "Wrong alignment on AppearanceComponent_SetBeard");
static_assert(sizeof(AppearanceComponent_SetBeard) == 0x000008, "Wrong size on AppearanceComponent_SetBeard");
static_assert(offsetof(AppearanceComponent_SetBeard, NewBeard) == 0x000000, "Member 'AppearanceComponent_SetBeard::NewBeard' has a wrong offset!");

// Function Indiana.AppearanceComponent.SetBeardColor
// 0x0008 (0x0008 - 0x0000)
struct AppearanceComponent_SetBeardColor final
{
public:
	const class UBeardColor*                      NewColor;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppearanceComponent_SetBeardColor) == 0x000008, "Wrong alignment on AppearanceComponent_SetBeardColor");
static_assert(sizeof(AppearanceComponent_SetBeardColor) == 0x000008, "Wrong size on AppearanceComponent_SetBeardColor");
static_assert(offsetof(AppearanceComponent_SetBeardColor, NewColor) == 0x000000, "Member 'AppearanceComponent_SetBeardColor::NewColor' has a wrong offset!");

// Function Indiana.AppearanceComponent.SetBoneModification
// 0x0010 (0x0010 - 0x0000)
struct AppearanceComponent_SetBoneModification final
{
public:
	const class UBoneModifications*               Modifications;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AppearanceComponent_SetBoneModification) == 0x000008, "Wrong alignment on AppearanceComponent_SetBoneModification");
static_assert(sizeof(AppearanceComponent_SetBoneModification) == 0x000010, "Wrong size on AppearanceComponent_SetBoneModification");
static_assert(offsetof(AppearanceComponent_SetBoneModification, Modifications) == 0x000000, "Member 'AppearanceComponent_SetBoneModification::Modifications' has a wrong offset!");
static_assert(offsetof(AppearanceComponent_SetBoneModification, Value) == 0x000008, "Member 'AppearanceComponent_SetBoneModification::Value' has a wrong offset!");

// Function Indiana.AppearanceComponent.SetBoneModificationPresets
// 0x0008 (0x0008 - 0x0000)
struct AppearanceComponent_SetBoneModificationPresets final
{
public:
	const class UBoneModificationsPreset*         Presets;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppearanceComponent_SetBoneModificationPresets) == 0x000008, "Wrong alignment on AppearanceComponent_SetBoneModificationPresets");
static_assert(sizeof(AppearanceComponent_SetBoneModificationPresets) == 0x000008, "Wrong size on AppearanceComponent_SetBoneModificationPresets");
static_assert(offsetof(AppearanceComponent_SetBoneModificationPresets, Presets) == 0x000000, "Member 'AppearanceComponent_SetBoneModificationPresets::Presets' has a wrong offset!");

// Function Indiana.AppearanceComponent.SetBrows
// 0x0008 (0x0008 - 0x0000)
struct AppearanceComponent_SetBrows final
{
public:
	const class UBrows*                           NewBrows;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppearanceComponent_SetBrows) == 0x000008, "Wrong alignment on AppearanceComponent_SetBrows");
static_assert(sizeof(AppearanceComponent_SetBrows) == 0x000008, "Wrong size on AppearanceComponent_SetBrows");
static_assert(offsetof(AppearanceComponent_SetBrows, NewBrows) == 0x000000, "Member 'AppearanceComponent_SetBrows::NewBrows' has a wrong offset!");

// Function Indiana.AppearanceComponent.SetDefaultBody
// 0x0008 (0x0008 - 0x0000)
struct AppearanceComponent_SetDefaultBody final
{
public:
	const class UBodyAppearances*                 Body;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppearanceComponent_SetDefaultBody) == 0x000008, "Wrong alignment on AppearanceComponent_SetDefaultBody");
static_assert(sizeof(AppearanceComponent_SetDefaultBody) == 0x000008, "Wrong size on AppearanceComponent_SetDefaultBody");
static_assert(offsetof(AppearanceComponent_SetDefaultBody, Body) == 0x000000, "Member 'AppearanceComponent_SetDefaultBody::Body' has a wrong offset!");

// Function Indiana.AppearanceComponent.SetDefaultHead
// 0x0008 (0x0008 - 0x0000)
struct AppearanceComponent_SetDefaultHead final
{
public:
	const class UHeadAppearances*                 Head;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppearanceComponent_SetDefaultHead) == 0x000008, "Wrong alignment on AppearanceComponent_SetDefaultHead");
static_assert(sizeof(AppearanceComponent_SetDefaultHead) == 0x000008, "Wrong size on AppearanceComponent_SetDefaultHead");
static_assert(offsetof(AppearanceComponent_SetDefaultHead, Head) == 0x000000, "Member 'AppearanceComponent_SetDefaultHead::Head' has a wrong offset!");

// Function Indiana.AppearanceComponent.SetDirt
// 0x0008 (0x0008 - 0x0000)
struct AppearanceComponent_SetDirt final
{
public:
	const class UDirt*                            NewDirt;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppearanceComponent_SetDirt) == 0x000008, "Wrong alignment on AppearanceComponent_SetDirt");
static_assert(sizeof(AppearanceComponent_SetDirt) == 0x000008, "Wrong size on AppearanceComponent_SetDirt");
static_assert(offsetof(AppearanceComponent_SetDirt, NewDirt) == 0x000000, "Member 'AppearanceComponent_SetDirt::NewDirt' has a wrong offset!");

// Function Indiana.AppearanceComponent.SetEyeColor
// 0x0008 (0x0008 - 0x0000)
struct AppearanceComponent_SetEyeColor final
{
public:
	const class UEyeColor*                        NewColor;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppearanceComponent_SetEyeColor) == 0x000008, "Wrong alignment on AppearanceComponent_SetEyeColor");
static_assert(sizeof(AppearanceComponent_SetEyeColor) == 0x000008, "Wrong size on AppearanceComponent_SetEyeColor");
static_assert(offsetof(AppearanceComponent_SetEyeColor, NewColor) == 0x000000, "Member 'AppearanceComponent_SetEyeColor::NewColor' has a wrong offset!");

// Function Indiana.AppearanceComponent.SetGender
// 0x0008 (0x0008 - 0x0000)
struct AppearanceComponent_SetGender final
{
public:
	struct FGameplayTag                           Gender;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppearanceComponent_SetGender) == 0x000004, "Wrong alignment on AppearanceComponent_SetGender");
static_assert(sizeof(AppearanceComponent_SetGender) == 0x000008, "Wrong size on AppearanceComponent_SetGender");
static_assert(offsetof(AppearanceComponent_SetGender, Gender) == 0x000000, "Member 'AppearanceComponent_SetGender::Gender' has a wrong offset!");

// Function Indiana.AppearanceComponent.SetHair
// 0x0008 (0x0008 - 0x0000)
struct AppearanceComponent_SetHair final
{
public:
	const class UHairAppearances*                 NewHair;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppearanceComponent_SetHair) == 0x000008, "Wrong alignment on AppearanceComponent_SetHair");
static_assert(sizeof(AppearanceComponent_SetHair) == 0x000008, "Wrong size on AppearanceComponent_SetHair");
static_assert(offsetof(AppearanceComponent_SetHair, NewHair) == 0x000000, "Member 'AppearanceComponent_SetHair::NewHair' has a wrong offset!");

// Function Indiana.AppearanceComponent.SetHairColor
// 0x0008 (0x0008 - 0x0000)
struct AppearanceComponent_SetHairColor final
{
public:
	const class UHairColor*                       NewColor;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppearanceComponent_SetHairColor) == 0x000008, "Wrong alignment on AppearanceComponent_SetHairColor");
static_assert(sizeof(AppearanceComponent_SetHairColor) == 0x000008, "Wrong size on AppearanceComponent_SetHairColor");
static_assert(offsetof(AppearanceComponent_SetHairColor, NewColor) == 0x000000, "Member 'AppearanceComponent_SetHairColor::NewColor' has a wrong offset!");

// Function Indiana.AppearanceComponent.SetMakeup
// 0x0008 (0x0008 - 0x0000)
struct AppearanceComponent_SetMakeup final
{
public:
	const class UMakeup*                          NewMakeup;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppearanceComponent_SetMakeup) == 0x000008, "Wrong alignment on AppearanceComponent_SetMakeup");
static_assert(sizeof(AppearanceComponent_SetMakeup) == 0x000008, "Wrong size on AppearanceComponent_SetMakeup");
static_assert(offsetof(AppearanceComponent_SetMakeup, NewMakeup) == 0x000000, "Member 'AppearanceComponent_SetMakeup::NewMakeup' has a wrong offset!");

// Function Indiana.AppearanceComponent.SetScalarParameter
// 0x000C (0x000C - 0x0000)
struct AppearanceComponent_SetScalarParameter final
{
public:
	class FName                                   Parameter;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scalar;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppearanceComponent_SetScalarParameter) == 0x000004, "Wrong alignment on AppearanceComponent_SetScalarParameter");
static_assert(sizeof(AppearanceComponent_SetScalarParameter) == 0x00000C, "Wrong size on AppearanceComponent_SetScalarParameter");
static_assert(offsetof(AppearanceComponent_SetScalarParameter, Parameter) == 0x000000, "Member 'AppearanceComponent_SetScalarParameter::Parameter' has a wrong offset!");
static_assert(offsetof(AppearanceComponent_SetScalarParameter, Scalar) == 0x000008, "Member 'AppearanceComponent_SetScalarParameter::Scalar' has a wrong offset!");

// Function Indiana.AppearanceComponent.SetScar
// 0x0008 (0x0008 - 0x0000)
struct AppearanceComponent_SetScar final
{
public:
	const class UScar*                            NewScar;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppearanceComponent_SetScar) == 0x000008, "Wrong alignment on AppearanceComponent_SetScar");
static_assert(sizeof(AppearanceComponent_SetScar) == 0x000008, "Wrong size on AppearanceComponent_SetScar");
static_assert(offsetof(AppearanceComponent_SetScar, NewScar) == 0x000000, "Member 'AppearanceComponent_SetScar::NewScar' has a wrong offset!");

// Function Indiana.AppearanceComponent.SetSkinTone
// 0x0008 (0x0008 - 0x0000)
struct AppearanceComponent_SetSkinTone final
{
public:
	const class USkinTone*                        NewSkinTone;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppearanceComponent_SetSkinTone) == 0x000008, "Wrong alignment on AppearanceComponent_SetSkinTone");
static_assert(sizeof(AppearanceComponent_SetSkinTone) == 0x000008, "Wrong size on AppearanceComponent_SetSkinTone");
static_assert(offsetof(AppearanceComponent_SetSkinTone, NewSkinTone) == 0x000000, "Member 'AppearanceComponent_SetSkinTone::NewSkinTone' has a wrong offset!");

// Function Indiana.AppearanceComponent.SetSlotScalarParameter
// 0x0014 (0x0014 - 0x0000)
struct AppearanceComponent_SetSlotScalarParameter final
{
public:
	class FName                                   SlotName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Parameter;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scalar;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppearanceComponent_SetSlotScalarParameter) == 0x000004, "Wrong alignment on AppearanceComponent_SetSlotScalarParameter");
static_assert(sizeof(AppearanceComponent_SetSlotScalarParameter) == 0x000014, "Wrong size on AppearanceComponent_SetSlotScalarParameter");
static_assert(offsetof(AppearanceComponent_SetSlotScalarParameter, SlotName) == 0x000000, "Member 'AppearanceComponent_SetSlotScalarParameter::SlotName' has a wrong offset!");
static_assert(offsetof(AppearanceComponent_SetSlotScalarParameter, Parameter) == 0x000008, "Member 'AppearanceComponent_SetSlotScalarParameter::Parameter' has a wrong offset!");
static_assert(offsetof(AppearanceComponent_SetSlotScalarParameter, Scalar) == 0x000010, "Member 'AppearanceComponent_SetSlotScalarParameter::Scalar' has a wrong offset!");

// Function Indiana.AppearanceComponent.SetSlotTextureParameter
// 0x0018 (0x0018 - 0x0000)
struct AppearanceComponent_SetSlotTextureParameter final
{
public:
	class FName                                   SlotName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Parameter;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               Texture;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppearanceComponent_SetSlotTextureParameter) == 0x000008, "Wrong alignment on AppearanceComponent_SetSlotTextureParameter");
static_assert(sizeof(AppearanceComponent_SetSlotTextureParameter) == 0x000018, "Wrong size on AppearanceComponent_SetSlotTextureParameter");
static_assert(offsetof(AppearanceComponent_SetSlotTextureParameter, SlotName) == 0x000000, "Member 'AppearanceComponent_SetSlotTextureParameter::SlotName' has a wrong offset!");
static_assert(offsetof(AppearanceComponent_SetSlotTextureParameter, Parameter) == 0x000008, "Member 'AppearanceComponent_SetSlotTextureParameter::Parameter' has a wrong offset!");
static_assert(offsetof(AppearanceComponent_SetSlotTextureParameter, Texture) == 0x000010, "Member 'AppearanceComponent_SetSlotTextureParameter::Texture' has a wrong offset!");

// Function Indiana.AppearanceComponent.SetSlotVectorParameter
// 0x001C (0x001C - 0x0000)
struct AppearanceComponent_SetSlotVectorParameter final
{
public:
	class FName                                   SlotName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Parameter;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Vector;                                            // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppearanceComponent_SetSlotVectorParameter) == 0x000004, "Wrong alignment on AppearanceComponent_SetSlotVectorParameter");
static_assert(sizeof(AppearanceComponent_SetSlotVectorParameter) == 0x00001C, "Wrong size on AppearanceComponent_SetSlotVectorParameter");
static_assert(offsetof(AppearanceComponent_SetSlotVectorParameter, SlotName) == 0x000000, "Member 'AppearanceComponent_SetSlotVectorParameter::SlotName' has a wrong offset!");
static_assert(offsetof(AppearanceComponent_SetSlotVectorParameter, Parameter) == 0x000008, "Member 'AppearanceComponent_SetSlotVectorParameter::Parameter' has a wrong offset!");
static_assert(offsetof(AppearanceComponent_SetSlotVectorParameter, Vector) == 0x000010, "Member 'AppearanceComponent_SetSlotVectorParameter::Vector' has a wrong offset!");

// Function Indiana.AppearanceComponent.SetVectorParameter
// 0x0014 (0x0014 - 0x0000)
struct AppearanceComponent_SetVectorParameter final
{
public:
	class FName                                   Parameter;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Vector;                                            // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppearanceComponent_SetVectorParameter) == 0x000004, "Wrong alignment on AppearanceComponent_SetVectorParameter");
static_assert(sizeof(AppearanceComponent_SetVectorParameter) == 0x000014, "Wrong size on AppearanceComponent_SetVectorParameter");
static_assert(offsetof(AppearanceComponent_SetVectorParameter, Parameter) == 0x000000, "Member 'AppearanceComponent_SetVectorParameter::Parameter' has a wrong offset!");
static_assert(offsetof(AppearanceComponent_SetVectorParameter, Vector) == 0x000008, "Member 'AppearanceComponent_SetVectorParameter::Vector' has a wrong offset!");

// Function Indiana.AppearanceComponent.GetBodyPart
// 0x001C (0x001C - 0x0000)
struct AppearanceComponent_GetBodyPart final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ImpactLocation;                                    // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ReturnValue;                                       // 0x0014(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppearanceComponent_GetBodyPart) == 0x000004, "Wrong alignment on AppearanceComponent_GetBodyPart");
static_assert(sizeof(AppearanceComponent_GetBodyPart) == 0x00001C, "Wrong size on AppearanceComponent_GetBodyPart");
static_assert(offsetof(AppearanceComponent_GetBodyPart, BoneName) == 0x000000, "Member 'AppearanceComponent_GetBodyPart::BoneName' has a wrong offset!");
static_assert(offsetof(AppearanceComponent_GetBodyPart, ImpactLocation) == 0x000008, "Member 'AppearanceComponent_GetBodyPart::ImpactLocation' has a wrong offset!");
static_assert(offsetof(AppearanceComponent_GetBodyPart, ReturnValue) == 0x000014, "Member 'AppearanceComponent_GetBodyPart::ReturnValue' has a wrong offset!");

// Function Indiana.AppearanceComponent.GetBodyPartsArray
// 0x0010 (0x0010 - 0x0000)
struct AppearanceComponent_GetBodyPartsArray final
{
public:
	TArray<struct FBodyPart>                      ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppearanceComponent_GetBodyPartsArray) == 0x000008, "Wrong alignment on AppearanceComponent_GetBodyPartsArray");
static_assert(sizeof(AppearanceComponent_GetBodyPartsArray) == 0x000010, "Wrong size on AppearanceComponent_GetBodyPartsArray");
static_assert(offsetof(AppearanceComponent_GetBodyPartsArray, ReturnValue) == 0x000000, "Member 'AppearanceComponent_GetBodyPartsArray::ReturnValue' has a wrong offset!");

// Function Indiana.AppearanceComponent.GetBodyPartTags
// 0x0050 (0x0050 - 0x0000)
struct AppearanceComponent_GetBodyPartTags final
{
public:
	TSet<struct FGameplayTag>                     ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppearanceComponent_GetBodyPartTags) == 0x000008, "Wrong alignment on AppearanceComponent_GetBodyPartTags");
static_assert(sizeof(AppearanceComponent_GetBodyPartTags) == 0x000050, "Wrong size on AppearanceComponent_GetBodyPartTags");
static_assert(offsetof(AppearanceComponent_GetBodyPartTags, ReturnValue) == 0x000000, "Member 'AppearanceComponent_GetBodyPartTags::ReturnValue' has a wrong offset!");

// Function Indiana.AppearanceComponent.GetBreakableBoneNames
// 0x0050 (0x0050 - 0x0000)
struct AppearanceComponent_GetBreakableBoneNames final
{
public:
	TSet<class FName>                             ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppearanceComponent_GetBreakableBoneNames) == 0x000008, "Wrong alignment on AppearanceComponent_GetBreakableBoneNames");
static_assert(sizeof(AppearanceComponent_GetBreakableBoneNames) == 0x000050, "Wrong size on AppearanceComponent_GetBreakableBoneNames");
static_assert(offsetof(AppearanceComponent_GetBreakableBoneNames, ReturnValue) == 0x000000, "Member 'AppearanceComponent_GetBreakableBoneNames::ReturnValue' has a wrong offset!");

// Function Indiana.AppearanceComponent.GetBreakBoneAndSocketNames
// 0x0024 (0x0024 - 0x0000)
struct AppearanceComponent_GetBreakBoneAndSocketNames final
{
public:
	struct FGameplayTag                           BodyPartTag;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachedSocket;                                    // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DetachedSocket;                                    // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AppearanceComponent_GetBreakBoneAndSocketNames) == 0x000004, "Wrong alignment on AppearanceComponent_GetBreakBoneAndSocketNames");
static_assert(sizeof(AppearanceComponent_GetBreakBoneAndSocketNames) == 0x000024, "Wrong size on AppearanceComponent_GetBreakBoneAndSocketNames");
static_assert(offsetof(AppearanceComponent_GetBreakBoneAndSocketNames, BodyPartTag) == 0x000000, "Member 'AppearanceComponent_GetBreakBoneAndSocketNames::BodyPartTag' has a wrong offset!");
static_assert(offsetof(AppearanceComponent_GetBreakBoneAndSocketNames, BoneName) == 0x000008, "Member 'AppearanceComponent_GetBreakBoneAndSocketNames::BoneName' has a wrong offset!");
static_assert(offsetof(AppearanceComponent_GetBreakBoneAndSocketNames, AttachedSocket) == 0x000010, "Member 'AppearanceComponent_GetBreakBoneAndSocketNames::AttachedSocket' has a wrong offset!");
static_assert(offsetof(AppearanceComponent_GetBreakBoneAndSocketNames, DetachedSocket) == 0x000018, "Member 'AppearanceComponent_GetBreakBoneAndSocketNames::DetachedSocket' has a wrong offset!");
static_assert(offsetof(AppearanceComponent_GetBreakBoneAndSocketNames, ReturnValue) == 0x000020, "Member 'AppearanceComponent_GetBreakBoneAndSocketNames::ReturnValue' has a wrong offset!");

// Function Indiana.AppearanceComponent.GetBreakBoneName
// 0x0014 (0x0014 - 0x0000)
struct AppearanceComponent_GetBreakBoneName final
{
public:
	struct FGameplayTag                           BodyPartTag;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AppearanceComponent_GetBreakBoneName) == 0x000004, "Wrong alignment on AppearanceComponent_GetBreakBoneName");
static_assert(sizeof(AppearanceComponent_GetBreakBoneName) == 0x000014, "Wrong size on AppearanceComponent_GetBreakBoneName");
static_assert(offsetof(AppearanceComponent_GetBreakBoneName, BodyPartTag) == 0x000000, "Member 'AppearanceComponent_GetBreakBoneName::BodyPartTag' has a wrong offset!");
static_assert(offsetof(AppearanceComponent_GetBreakBoneName, BoneName) == 0x000008, "Member 'AppearanceComponent_GetBreakBoneName::BoneName' has a wrong offset!");
static_assert(offsetof(AppearanceComponent_GetBreakBoneName, ReturnValue) == 0x000010, "Member 'AppearanceComponent_GetBreakBoneName::ReturnValue' has a wrong offset!");

// Function Indiana.OCLComponent.AttemptClose
// 0x0018 (0x0018 - 0x0000)
struct OCLComponent_AttemptClose final
{
public:
	class AActor*                                 Initiator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Block;                                             // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSeal;                                             // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreLockStatus;                                 // 0x000B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreStartEvent;                                 // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreEndEvent;                                   // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreSound;                                      // 0x000E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInstantAnimation;                                 // 0x000F(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOCLResult                                    ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OCLComponent_AttemptClose) == 0x000008, "Wrong alignment on OCLComponent_AttemptClose");
static_assert(sizeof(OCLComponent_AttemptClose) == 0x000018, "Wrong size on OCLComponent_AttemptClose");
static_assert(offsetof(OCLComponent_AttemptClose, Initiator) == 0x000000, "Member 'OCLComponent_AttemptClose::Initiator' has a wrong offset!");
static_assert(offsetof(OCLComponent_AttemptClose, bForce) == 0x000008, "Member 'OCLComponent_AttemptClose::bForce' has a wrong offset!");
static_assert(offsetof(OCLComponent_AttemptClose, Block) == 0x000009, "Member 'OCLComponent_AttemptClose::Block' has a wrong offset!");
static_assert(offsetof(OCLComponent_AttemptClose, bSeal) == 0x00000A, "Member 'OCLComponent_AttemptClose::bSeal' has a wrong offset!");
static_assert(offsetof(OCLComponent_AttemptClose, bIgnoreLockStatus) == 0x00000B, "Member 'OCLComponent_AttemptClose::bIgnoreLockStatus' has a wrong offset!");
static_assert(offsetof(OCLComponent_AttemptClose, bIgnoreStartEvent) == 0x00000C, "Member 'OCLComponent_AttemptClose::bIgnoreStartEvent' has a wrong offset!");
static_assert(offsetof(OCLComponent_AttemptClose, bIgnoreEndEvent) == 0x00000D, "Member 'OCLComponent_AttemptClose::bIgnoreEndEvent' has a wrong offset!");
static_assert(offsetof(OCLComponent_AttemptClose, bIgnoreSound) == 0x00000E, "Member 'OCLComponent_AttemptClose::bIgnoreSound' has a wrong offset!");
static_assert(offsetof(OCLComponent_AttemptClose, bInstantAnimation) == 0x00000F, "Member 'OCLComponent_AttemptClose::bInstantAnimation' has a wrong offset!");
static_assert(offsetof(OCLComponent_AttemptClose, ReturnValue) == 0x000010, "Member 'OCLComponent_AttemptClose::ReturnValue' has a wrong offset!");

// Function Indiana.OCLComponent.AttemptOpen
// 0x0010 (0x0010 - 0x0000)
struct OCLComponent_AttemptOpen final
{
public:
	class AActor*                                 Initiator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSeal;                                             // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreLockStatus;                                 // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreStartEvent;                                 // 0x000B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreEndEvent;                                   // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreSound;                                      // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInstantAnimation;                                 // 0x000E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOCLResult                                    ReturnValue;                                       // 0x000F(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OCLComponent_AttemptOpen) == 0x000008, "Wrong alignment on OCLComponent_AttemptOpen");
static_assert(sizeof(OCLComponent_AttemptOpen) == 0x000010, "Wrong size on OCLComponent_AttemptOpen");
static_assert(offsetof(OCLComponent_AttemptOpen, Initiator) == 0x000000, "Member 'OCLComponent_AttemptOpen::Initiator' has a wrong offset!");
static_assert(offsetof(OCLComponent_AttemptOpen, bForce) == 0x000008, "Member 'OCLComponent_AttemptOpen::bForce' has a wrong offset!");
static_assert(offsetof(OCLComponent_AttemptOpen, bSeal) == 0x000009, "Member 'OCLComponent_AttemptOpen::bSeal' has a wrong offset!");
static_assert(offsetof(OCLComponent_AttemptOpen, bIgnoreLockStatus) == 0x00000A, "Member 'OCLComponent_AttemptOpen::bIgnoreLockStatus' has a wrong offset!");
static_assert(offsetof(OCLComponent_AttemptOpen, bIgnoreStartEvent) == 0x00000B, "Member 'OCLComponent_AttemptOpen::bIgnoreStartEvent' has a wrong offset!");
static_assert(offsetof(OCLComponent_AttemptOpen, bIgnoreEndEvent) == 0x00000C, "Member 'OCLComponent_AttemptOpen::bIgnoreEndEvent' has a wrong offset!");
static_assert(offsetof(OCLComponent_AttemptOpen, bIgnoreSound) == 0x00000D, "Member 'OCLComponent_AttemptOpen::bIgnoreSound' has a wrong offset!");
static_assert(offsetof(OCLComponent_AttemptOpen, bInstantAnimation) == 0x00000E, "Member 'OCLComponent_AttemptOpen::bInstantAnimation' has a wrong offset!");
static_assert(offsetof(OCLComponent_AttemptOpen, ReturnValue) == 0x00000F, "Member 'OCLComponent_AttemptOpen::ReturnValue' has a wrong offset!");

// Function Indiana.OCLComponent.AttemptUnlock
// 0x0010 (0x0010 - 0x0000)
struct OCLComponent_AttemptUnlock final
{
public:
	class AActor*                                 Initiator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOCLResult                                    ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OCLComponent_AttemptUnlock) == 0x000008, "Wrong alignment on OCLComponent_AttemptUnlock");
static_assert(sizeof(OCLComponent_AttemptUnlock) == 0x000010, "Wrong size on OCLComponent_AttemptUnlock");
static_assert(offsetof(OCLComponent_AttemptUnlock, Initiator) == 0x000000, "Member 'OCLComponent_AttemptUnlock::Initiator' has a wrong offset!");
static_assert(offsetof(OCLComponent_AttemptUnlock, ReturnValue) == 0x000008, "Member 'OCLComponent_AttemptUnlock::ReturnValue' has a wrong offset!");

// Function Indiana.OCLComponent.BarOCL
// 0x0001 (0x0001 - 0x0000)
struct OCLComponent_BarOCL final
{
public:
	bool                                          bFireOCLBarredEvent;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OCLComponent_BarOCL) == 0x000001, "Wrong alignment on OCLComponent_BarOCL");
static_assert(sizeof(OCLComponent_BarOCL) == 0x000001, "Wrong size on OCLComponent_BarOCL");
static_assert(offsetof(OCLComponent_BarOCL, bFireOCLBarredEvent) == 0x000000, "Member 'OCLComponent_BarOCL::bFireOCLBarredEvent' has a wrong offset!");

// Function Indiana.OCLComponent.LockOCL
// 0x0001 (0x0001 - 0x0000)
struct OCLComponent_LockOCL final
{
public:
	bool                                          bFireOCLLockedEvent;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OCLComponent_LockOCL) == 0x000001, "Wrong alignment on OCLComponent_LockOCL");
static_assert(sizeof(OCLComponent_LockOCL) == 0x000001, "Wrong size on OCLComponent_LockOCL");
static_assert(offsetof(OCLComponent_LockOCL, bFireOCLLockedEvent) == 0x000000, "Member 'OCLComponent_LockOCL::bFireOCLLockedEvent' has a wrong offset!");

// Function Indiana.OCLComponent.SealOCL
// 0x0001 (0x0001 - 0x0000)
struct OCLComponent_SealOCL final
{
public:
	bool                                          bFireOCLSealedEvent;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OCLComponent_SealOCL) == 0x000001, "Wrong alignment on OCLComponent_SealOCL");
static_assert(sizeof(OCLComponent_SealOCL) == 0x000001, "Wrong size on OCLComponent_SealOCL");
static_assert(offsetof(OCLComponent_SealOCL, bFireOCLSealedEvent) == 0x000000, "Member 'OCLComponent_SealOCL::bFireOCLSealedEvent' has a wrong offset!");

// Function Indiana.OCLComponent.UnbarOCL
// 0x0002 (0x0002 - 0x0000)
struct OCLComponent_UnbarOCL final
{
public:
	bool                                          bFireOCLUnbarredEvent;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnterLockedState;                                 // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OCLComponent_UnbarOCL) == 0x000001, "Wrong alignment on OCLComponent_UnbarOCL");
static_assert(sizeof(OCLComponent_UnbarOCL) == 0x000002, "Wrong size on OCLComponent_UnbarOCL");
static_assert(offsetof(OCLComponent_UnbarOCL, bFireOCLUnbarredEvent) == 0x000000, "Member 'OCLComponent_UnbarOCL::bFireOCLUnbarredEvent' has a wrong offset!");
static_assert(offsetof(OCLComponent_UnbarOCL, bEnterLockedState) == 0x000001, "Member 'OCLComponent_UnbarOCL::bEnterLockedState' has a wrong offset!");

// Function Indiana.OCLComponent.UnlockOCL
// 0x0001 (0x0001 - 0x0000)
struct OCLComponent_UnlockOCL final
{
public:
	bool                                          bFireOCLUnlockedEvent;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OCLComponent_UnlockOCL) == 0x000001, "Wrong alignment on OCLComponent_UnlockOCL");
static_assert(sizeof(OCLComponent_UnlockOCL) == 0x000001, "Wrong size on OCLComponent_UnlockOCL");
static_assert(offsetof(OCLComponent_UnlockOCL, bFireOCLUnlockedEvent) == 0x000000, "Member 'OCLComponent_UnlockOCL::bFireOCLUnlockedEvent' has a wrong offset!");

// Function Indiana.OCLComponent.UnsealOCL
// 0x0001 (0x0001 - 0x0000)
struct OCLComponent_UnsealOCL final
{
public:
	bool                                          bFireOCLUnsealedEvent;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OCLComponent_UnsealOCL) == 0x000001, "Wrong alignment on OCLComponent_UnsealOCL");
static_assert(sizeof(OCLComponent_UnsealOCL) == 0x000001, "Wrong size on OCLComponent_UnsealOCL");
static_assert(offsetof(OCLComponent_UnsealOCL, bFireOCLUnsealedEvent) == 0x000000, "Member 'OCLComponent_UnsealOCL::bFireOCLUnsealedEvent' has a wrong offset!");

// Function Indiana.OCLComponent.GetCurrentState
// 0x0001 (0x0001 - 0x0000)
struct OCLComponent_GetCurrentState final
{
public:
	EOCLState                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OCLComponent_GetCurrentState) == 0x000001, "Wrong alignment on OCLComponent_GetCurrentState");
static_assert(sizeof(OCLComponent_GetCurrentState) == 0x000001, "Wrong size on OCLComponent_GetCurrentState");
static_assert(offsetof(OCLComponent_GetCurrentState, ReturnValue) == 0x000000, "Member 'OCLComponent_GetCurrentState::ReturnValue' has a wrong offset!");

// Function Indiana.OCLComponent.GetExactLockpickDifficulty
// 0x0001 (0x0001 - 0x0000)
struct OCLComponent_GetExactLockpickDifficulty final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OCLComponent_GetExactLockpickDifficulty) == 0x000001, "Wrong alignment on OCLComponent_GetExactLockpickDifficulty");
static_assert(sizeof(OCLComponent_GetExactLockpickDifficulty) == 0x000001, "Wrong size on OCLComponent_GetExactLockpickDifficulty");
static_assert(offsetof(OCLComponent_GetExactLockpickDifficulty, ReturnValue) == 0x000000, "Member 'OCLComponent_GetExactLockpickDifficulty::ReturnValue' has a wrong offset!");

// Function Indiana.OCLComponent.IsBarred
// 0x0001 (0x0001 - 0x0000)
struct OCLComponent_IsBarred final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OCLComponent_IsBarred) == 0x000001, "Wrong alignment on OCLComponent_IsBarred");
static_assert(sizeof(OCLComponent_IsBarred) == 0x000001, "Wrong size on OCLComponent_IsBarred");
static_assert(offsetof(OCLComponent_IsBarred, ReturnValue) == 0x000000, "Member 'OCLComponent_IsBarred::ReturnValue' has a wrong offset!");

// Function Indiana.OCLComponent.IsClosed
// 0x0001 (0x0001 - 0x0000)
struct OCLComponent_IsClosed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OCLComponent_IsClosed) == 0x000001, "Wrong alignment on OCLComponent_IsClosed");
static_assert(sizeof(OCLComponent_IsClosed) == 0x000001, "Wrong size on OCLComponent_IsClosed");
static_assert(offsetof(OCLComponent_IsClosed, ReturnValue) == 0x000000, "Member 'OCLComponent_IsClosed::ReturnValue' has a wrong offset!");

// Function Indiana.OCLComponent.IsClosing
// 0x0001 (0x0001 - 0x0000)
struct OCLComponent_IsClosing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OCLComponent_IsClosing) == 0x000001, "Wrong alignment on OCLComponent_IsClosing");
static_assert(sizeof(OCLComponent_IsClosing) == 0x000001, "Wrong size on OCLComponent_IsClosing");
static_assert(offsetof(OCLComponent_IsClosing, ReturnValue) == 0x000000, "Member 'OCLComponent_IsClosing::ReturnValue' has a wrong offset!");

// Function Indiana.OCLComponent.IsLocked
// 0x0001 (0x0001 - 0x0000)
struct OCLComponent_IsLocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OCLComponent_IsLocked) == 0x000001, "Wrong alignment on OCLComponent_IsLocked");
static_assert(sizeof(OCLComponent_IsLocked) == 0x000001, "Wrong size on OCLComponent_IsLocked");
static_assert(offsetof(OCLComponent_IsLocked, ReturnValue) == 0x000000, "Member 'OCLComponent_IsLocked::ReturnValue' has a wrong offset!");

// Function Indiana.OCLComponent.IsOpen
// 0x0001 (0x0001 - 0x0000)
struct OCLComponent_IsOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OCLComponent_IsOpen) == 0x000001, "Wrong alignment on OCLComponent_IsOpen");
static_assert(sizeof(OCLComponent_IsOpen) == 0x000001, "Wrong size on OCLComponent_IsOpen");
static_assert(offsetof(OCLComponent_IsOpen, ReturnValue) == 0x000000, "Member 'OCLComponent_IsOpen::ReturnValue' has a wrong offset!");

// Function Indiana.OCLComponent.IsOpening
// 0x0001 (0x0001 - 0x0000)
struct OCLComponent_IsOpening final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OCLComponent_IsOpening) == 0x000001, "Wrong alignment on OCLComponent_IsOpening");
static_assert(sizeof(OCLComponent_IsOpening) == 0x000001, "Wrong size on OCLComponent_IsOpening");
static_assert(offsetof(OCLComponent_IsOpening, ReturnValue) == 0x000000, "Member 'OCLComponent_IsOpening::ReturnValue' has a wrong offset!");

// Function Indiana.OCLComponent.IsSealed
// 0x0001 (0x0001 - 0x0000)
struct OCLComponent_IsSealed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OCLComponent_IsSealed) == 0x000001, "Wrong alignment on OCLComponent_IsSealed");
static_assert(sizeof(OCLComponent_IsSealed) == 0x000001, "Wrong size on OCLComponent_IsSealed");
static_assert(offsetof(OCLComponent_IsSealed, ReturnValue) == 0x000000, "Member 'OCLComponent_IsSealed::ReturnValue' has a wrong offset!");

// Function Indiana.OCLComponent.IsSealing
// 0x0001 (0x0001 - 0x0000)
struct OCLComponent_IsSealing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OCLComponent_IsSealing) == 0x000001, "Wrong alignment on OCLComponent_IsSealing");
static_assert(sizeof(OCLComponent_IsSealing) == 0x000001, "Wrong size on OCLComponent_IsSealing");
static_assert(offsetof(OCLComponent_IsSealing, ReturnValue) == 0x000000, "Member 'OCLComponent_IsSealing::ReturnValue' has a wrong offset!");

// Function Indiana.MedKitComponent.OnAbilityMontageEnded
// 0x0010 (0x0010 - 0x0000)
struct MedKitComponent_OnAbilityMontageEnded final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MedKitComponent_OnAbilityMontageEnded) == 0x000008, "Wrong alignment on MedKitComponent_OnAbilityMontageEnded");
static_assert(sizeof(MedKitComponent_OnAbilityMontageEnded) == 0x000010, "Wrong size on MedKitComponent_OnAbilityMontageEnded");
static_assert(offsetof(MedKitComponent_OnAbilityMontageEnded, Montage) == 0x000000, "Member 'MedKitComponent_OnAbilityMontageEnded::Montage' has a wrong offset!");
static_assert(offsetof(MedKitComponent_OnAbilityMontageEnded, bInterrupted) == 0x000008, "Member 'MedKitComponent_OnAbilityMontageEnded::bInterrupted' has a wrong offset!");

// Function Indiana.MedKitComponent.OnAnimNotifyEvent
// 0x0001 (0x0001 - 0x0000)
struct MedKitComponent_OnAnimNotifyEvent final
{
public:
	EAnimNotify                                   AnimNotifyEvent;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MedKitComponent_OnAnimNotifyEvent) == 0x000001, "Wrong alignment on MedKitComponent_OnAnimNotifyEvent");
static_assert(sizeof(MedKitComponent_OnAnimNotifyEvent) == 0x000001, "Wrong size on MedKitComponent_OnAnimNotifyEvent");
static_assert(offsetof(MedKitComponent_OnAnimNotifyEvent, AnimNotifyEvent) == 0x000000, "Member 'MedKitComponent_OnAnimNotifyEvent::AnimNotifyEvent' has a wrong offset!");

// Function Indiana.MedKitComponent.StartMedkit
// 0x0008 (0x0008 - 0x0000)
struct MedKitComponent_StartMedkit final
{
public:
	class UWeapon*                                Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MedKitComponent_StartMedkit) == 0x000008, "Wrong alignment on MedKitComponent_StartMedkit");
static_assert(sizeof(MedKitComponent_StartMedkit) == 0x000008, "Wrong size on MedKitComponent_StartMedkit");
static_assert(offsetof(MedKitComponent_StartMedkit, Weapon) == 0x000000, "Member 'MedKitComponent_StartMedkit::Weapon' has a wrong offset!");

// Function Indiana.PersuadeBehaviorStateInfo.OnTakeDamage
// 0x0110 (0x0110 - 0x0000)
struct PersuadeBehaviorStateInfo_OnTakeDamage final
{
public:
	struct FCauseDamageInfo                       CauseDamageInfo;                                   // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PersuadeBehaviorStateInfo_OnTakeDamage) == 0x000008, "Wrong alignment on PersuadeBehaviorStateInfo_OnTakeDamage");
static_assert(sizeof(PersuadeBehaviorStateInfo_OnTakeDamage) == 0x000110, "Wrong size on PersuadeBehaviorStateInfo_OnTakeDamage");
static_assert(offsetof(PersuadeBehaviorStateInfo_OnTakeDamage, CauseDamageInfo) == 0x000000, "Member 'PersuadeBehaviorStateInfo_OnTakeDamage::CauseDamageInfo' has a wrong offset!");

// Function Indiana.OnTTDMeterPercentage.OnTTDMeterChanged
// 0x0004 (0x0004 - 0x0000)
struct OnTTDMeterPercentage_OnTTDMeterChanged final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnTTDMeterPercentage_OnTTDMeterChanged) == 0x000004, "Wrong alignment on OnTTDMeterPercentage_OnTTDMeterChanged");
static_assert(sizeof(OnTTDMeterPercentage_OnTTDMeterChanged) == 0x000004, "Wrong size on OnTTDMeterPercentage_OnTTDMeterChanged");
static_assert(offsetof(OnTTDMeterPercentage_OnTTDMeterChanged, Value) == 0x000000, "Member 'OnTTDMeterPercentage_OnTTDMeterChanged::Value' has a wrong offset!");

// Function Indiana.PerksTierWidget.GetColorType
// 0x0002 (0x0002 - 0x0000)
struct PerksTierWidget_GetColorType final
{
public:
	bool                                          bUnlocked;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EIndianaUIColorType                           ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerksTierWidget_GetColorType) == 0x000001, "Wrong alignment on PerksTierWidget_GetColorType");
static_assert(sizeof(PerksTierWidget_GetColorType) == 0x000002, "Wrong size on PerksTierWidget_GetColorType");
static_assert(offsetof(PerksTierWidget_GetColorType, bUnlocked) == 0x000000, "Member 'PerksTierWidget_GetColorType::bUnlocked' has a wrong offset!");
static_assert(offsetof(PerksTierWidget_GetColorType, ReturnValue) == 0x000001, "Member 'PerksTierWidget_GetColorType::ReturnValue' has a wrong offset!");

// Function Indiana.PerksTierWidget.GetImageOpacity
// 0x0008 (0x0008 - 0x0000)
struct PerksTierWidget_GetImageOpacity final
{
public:
	bool                                          bUnlocked;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerksTierWidget_GetImageOpacity) == 0x000004, "Wrong alignment on PerksTierWidget_GetImageOpacity");
static_assert(sizeof(PerksTierWidget_GetImageOpacity) == 0x000008, "Wrong size on PerksTierWidget_GetImageOpacity");
static_assert(offsetof(PerksTierWidget_GetImageOpacity, bUnlocked) == 0x000000, "Member 'PerksTierWidget_GetImageOpacity::bUnlocked' has a wrong offset!");
static_assert(offsetof(PerksTierWidget_GetImageOpacity, ReturnValue) == 0x000004, "Member 'PerksTierWidget_GetImageOpacity::ReturnValue' has a wrong offset!");

// Function Indiana.PerksTierWidget.GetTextOpacity
// 0x0008 (0x0008 - 0x0000)
struct PerksTierWidget_GetTextOpacity final
{
public:
	bool                                          bUnlocked;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerksTierWidget_GetTextOpacity) == 0x000004, "Wrong alignment on PerksTierWidget_GetTextOpacity");
static_assert(sizeof(PerksTierWidget_GetTextOpacity) == 0x000008, "Wrong size on PerksTierWidget_GetTextOpacity");
static_assert(offsetof(PerksTierWidget_GetTextOpacity, bUnlocked) == 0x000000, "Member 'PerksTierWidget_GetTextOpacity::bUnlocked' has a wrong offset!");
static_assert(offsetof(PerksTierWidget_GetTextOpacity, ReturnValue) == 0x000004, "Member 'PerksTierWidget_GetTextOpacity::ReturnValue' has a wrong offset!");

// Function Indiana.MeleeSlotManagerComponent.OnAttackerNumMeleeSlotsRequiredChanged
// 0x0008 (0x0008 - 0x0000)
struct MeleeSlotManagerComponent_OnAttackerNumMeleeSlotsRequiredChanged final
{
public:
	class AIndianaAiController*                   AttackerController;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeleeSlotManagerComponent_OnAttackerNumMeleeSlotsRequiredChanged) == 0x000008, "Wrong alignment on MeleeSlotManagerComponent_OnAttackerNumMeleeSlotsRequiredChanged");
static_assert(sizeof(MeleeSlotManagerComponent_OnAttackerNumMeleeSlotsRequiredChanged) == 0x000008, "Wrong size on MeleeSlotManagerComponent_OnAttackerNumMeleeSlotsRequiredChanged");
static_assert(offsetof(MeleeSlotManagerComponent_OnAttackerNumMeleeSlotsRequiredChanged, AttackerController) == 0x000000, "Member 'MeleeSlotManagerComponent_OnAttackerNumMeleeSlotsRequiredChanged::AttackerController' has a wrong offset!");

// Function Indiana.LedgerWidget.AfterSettingAnyPage
// 0x0010 (0x0010 - 0x0000)
struct LedgerWidget_AfterSettingAnyPage final
{
public:
	class UIndianaUserWidget*                     UserWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnimate;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanChangePage;                                    // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActivate;                                         // 0x000E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LedgerWidget_AfterSettingAnyPage) == 0x000008, "Wrong alignment on LedgerWidget_AfterSettingAnyPage");
static_assert(sizeof(LedgerWidget_AfterSettingAnyPage) == 0x000010, "Wrong size on LedgerWidget_AfterSettingAnyPage");
static_assert(offsetof(LedgerWidget_AfterSettingAnyPage, UserWidget) == 0x000000, "Member 'LedgerWidget_AfterSettingAnyPage::UserWidget' has a wrong offset!");
static_assert(offsetof(LedgerWidget_AfterSettingAnyPage, Index_0) == 0x000008, "Member 'LedgerWidget_AfterSettingAnyPage::Index_0' has a wrong offset!");
static_assert(offsetof(LedgerWidget_AfterSettingAnyPage, bAnimate) == 0x00000C, "Member 'LedgerWidget_AfterSettingAnyPage::bAnimate' has a wrong offset!");
static_assert(offsetof(LedgerWidget_AfterSettingAnyPage, bCanChangePage) == 0x00000D, "Member 'LedgerWidget_AfterSettingAnyPage::bCanChangePage' has a wrong offset!");
static_assert(offsetof(LedgerWidget_AfterSettingAnyPage, bActivate) == 0x00000E, "Member 'LedgerWidget_AfterSettingAnyPage::bActivate' has a wrong offset!");

// Function Indiana.LedgerWidget.OnItemAdded
// 0x0010 (0x0010 - 0x0000)
struct LedgerWidget_OnItemAdded final
{
public:
	struct FItemStack                             ItemStack;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(LedgerWidget_OnItemAdded) == 0x000008, "Wrong alignment on LedgerWidget_OnItemAdded");
static_assert(sizeof(LedgerWidget_OnItemAdded) == 0x000010, "Wrong size on LedgerWidget_OnItemAdded");
static_assert(offsetof(LedgerWidget_OnItemAdded, ItemStack) == 0x000000, "Member 'LedgerWidget_OnItemAdded::ItemStack' has a wrong offset!");

// Function Indiana.LedgerWidget.OnSetCurrentPage
// 0x0002 (0x0002 - 0x0000)
struct LedgerWidget_OnSetCurrentPage final
{
public:
	ELedgerPages                                  Page;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnimate;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LedgerWidget_OnSetCurrentPage) == 0x000001, "Wrong alignment on LedgerWidget_OnSetCurrentPage");
static_assert(sizeof(LedgerWidget_OnSetCurrentPage) == 0x000002, "Wrong size on LedgerWidget_OnSetCurrentPage");
static_assert(offsetof(LedgerWidget_OnSetCurrentPage, Page) == 0x000000, "Member 'LedgerWidget_OnSetCurrentPage::Page' has a wrong offset!");
static_assert(offsetof(LedgerWidget_OnSetCurrentPage, bAnimate) == 0x000001, "Member 'LedgerWidget_OnSetCurrentPage::bAnimate' has a wrong offset!");

// Function Indiana.AudioLogManager.OnAudioLogLibraryLoaded
// 0x0028 (0x0028 - 0x0000)
struct AudioLogManager_OnAudioLogLibraryLoaded final
{
public:
	TSoftObjectPtr<class UAudioLogLibraryDataAsset> LibraryDataAsset;                                  // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioLogManager_OnAudioLogLibraryLoaded) == 0x000008, "Wrong alignment on AudioLogManager_OnAudioLogLibraryLoaded");
static_assert(sizeof(AudioLogManager_OnAudioLogLibraryLoaded) == 0x000028, "Wrong size on AudioLogManager_OnAudioLogLibraryLoaded");
static_assert(offsetof(AudioLogManager_OnAudioLogLibraryLoaded, LibraryDataAsset) == 0x000000, "Member 'AudioLogManager_OnAudioLogLibraryLoaded::LibraryDataAsset' has a wrong offset!");

// Function Indiana.AudioLogManager.OnCombatStateChanged
// 0x0002 (0x0002 - 0x0000)
struct AudioLogManager_OnCombatStateChanged final
{
public:
	bool                                          bInCombat;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestoring;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioLogManager_OnCombatStateChanged) == 0x000001, "Wrong alignment on AudioLogManager_OnCombatStateChanged");
static_assert(sizeof(AudioLogManager_OnCombatStateChanged) == 0x000002, "Wrong size on AudioLogManager_OnCombatStateChanged");
static_assert(offsetof(AudioLogManager_OnCombatStateChanged, bInCombat) == 0x000000, "Member 'AudioLogManager_OnCombatStateChanged::bInCombat' has a wrong offset!");
static_assert(offsetof(AudioLogManager_OnCombatStateChanged, bRestoring) == 0x000001, "Member 'AudioLogManager_OnCombatStateChanged::bRestoring' has a wrong offset!");

// Function Indiana.AudioLogManager.OnConversationEnded
// 0x0008 (0x0008 - 0x0000)
struct AudioLogManager_OnConversationEnded final
{
public:
	class UConversationInstance*                  ConversationInstance;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioLogManager_OnConversationEnded) == 0x000008, "Wrong alignment on AudioLogManager_OnConversationEnded");
static_assert(sizeof(AudioLogManager_OnConversationEnded) == 0x000008, "Wrong size on AudioLogManager_OnConversationEnded");
static_assert(offsetof(AudioLogManager_OnConversationEnded, ConversationInstance) == 0x000000, "Member 'AudioLogManager_OnConversationEnded::ConversationInstance' has a wrong offset!");

// Function Indiana.AudioLogManager.OnLoadComplete
// 0x0018 (0x0018 - 0x0000)
struct AudioLogManager_OnLoadComplete final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoadGameResult                               Result;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioLogManager_OnLoadComplete) == 0x000008, "Wrong alignment on AudioLogManager_OnLoadComplete");
static_assert(sizeof(AudioLogManager_OnLoadComplete) == 0x000018, "Wrong size on AudioLogManager_OnLoadComplete");
static_assert(offsetof(AudioLogManager_OnLoadComplete, Filename) == 0x000000, "Member 'AudioLogManager_OnLoadComplete::Filename' has a wrong offset!");
static_assert(offsetof(AudioLogManager_OnLoadComplete, Result) == 0x000010, "Member 'AudioLogManager_OnLoadComplete::Result' has a wrong offset!");

// Function Indiana.AudioLogManager.OnPostMapLoad
// 0x0008 (0x0008 - 0x0000)
struct AudioLogManager_OnPostMapLoad final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioLogManager_OnPostMapLoad) == 0x000008, "Wrong alignment on AudioLogManager_OnPostMapLoad");
static_assert(sizeof(AudioLogManager_OnPostMapLoad) == 0x000008, "Wrong size on AudioLogManager_OnPostMapLoad");
static_assert(offsetof(AudioLogManager_OnPostMapLoad, World) == 0x000000, "Member 'AudioLogManager_OnPostMapLoad::World' has a wrong offset!");

// Function Indiana.AudioLogManager.OnPreMapLoad
// 0x0010 (0x0010 - 0x0000)
struct AudioLogManager_OnPreMapLoad final
{
public:
	class FString                                 MapName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioLogManager_OnPreMapLoad) == 0x000008, "Wrong alignment on AudioLogManager_OnPreMapLoad");
static_assert(sizeof(AudioLogManager_OnPreMapLoad) == 0x000010, "Wrong size on AudioLogManager_OnPreMapLoad");
static_assert(offsetof(AudioLogManager_OnPreMapLoad, MapName) == 0x000000, "Member 'AudioLogManager_OnPreMapLoad::MapName' has a wrong offset!");

// Function Indiana.AudioLogManager.PauseCurrentAudioLog
// 0x0002 (0x0002 - 0x0000)
struct AudioLogManager_PauseCurrentAudioLog final
{
public:
	bool                                          bForce;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromStop;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioLogManager_PauseCurrentAudioLog) == 0x000001, "Wrong alignment on AudioLogManager_PauseCurrentAudioLog");
static_assert(sizeof(AudioLogManager_PauseCurrentAudioLog) == 0x000002, "Wrong size on AudioLogManager_PauseCurrentAudioLog");
static_assert(offsetof(AudioLogManager_PauseCurrentAudioLog, bForce) == 0x000000, "Member 'AudioLogManager_PauseCurrentAudioLog::bForce' has a wrong offset!");
static_assert(offsetof(AudioLogManager_PauseCurrentAudioLog, bFromStop) == 0x000001, "Member 'AudioLogManager_PauseCurrentAudioLog::bFromStop' has a wrong offset!");

// Function Indiana.AudioLogManager.PlayAudioLog
// 0x0004 (0x0004 - 0x0000)
struct AudioLogManager_PlayAudioLog final
{
public:
	int32                                         AudioLogIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioLogManager_PlayAudioLog) == 0x000004, "Wrong alignment on AudioLogManager_PlayAudioLog");
static_assert(sizeof(AudioLogManager_PlayAudioLog) == 0x000004, "Wrong size on AudioLogManager_PlayAudioLog");
static_assert(offsetof(AudioLogManager_PlayAudioLog, AudioLogIndex) == 0x000000, "Member 'AudioLogManager_PlayAudioLog::AudioLogIndex' has a wrong offset!");

// Function Indiana.AudioLogManager.ResumeCurrentAudioLog
// 0x0002 (0x0002 - 0x0000)
struct AudioLogManager_ResumeCurrentAudioLog final
{
public:
	bool                                          bForce;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromPlay;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioLogManager_ResumeCurrentAudioLog) == 0x000001, "Wrong alignment on AudioLogManager_ResumeCurrentAudioLog");
static_assert(sizeof(AudioLogManager_ResumeCurrentAudioLog) == 0x000002, "Wrong size on AudioLogManager_ResumeCurrentAudioLog");
static_assert(offsetof(AudioLogManager_ResumeCurrentAudioLog, bForce) == 0x000000, "Member 'AudioLogManager_ResumeCurrentAudioLog::bForce' has a wrong offset!");
static_assert(offsetof(AudioLogManager_ResumeCurrentAudioLog, bFromPlay) == 0x000001, "Member 'AudioLogManager_ResumeCurrentAudioLog::bFromPlay' has a wrong offset!");

// Function Indiana.AudioLogManager.StopCurrentAudioLog
// 0x0001 (0x0001 - 0x0000)
struct AudioLogManager_StopCurrentAudioLog final
{
public:
	bool                                          bForce;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioLogManager_StopCurrentAudioLog) == 0x000001, "Wrong alignment on AudioLogManager_StopCurrentAudioLog");
static_assert(sizeof(AudioLogManager_StopCurrentAudioLog) == 0x000001, "Wrong size on AudioLogManager_StopCurrentAudioLog");
static_assert(offsetof(AudioLogManager_StopCurrentAudioLog, bForce) == 0x000000, "Member 'AudioLogManager_StopCurrentAudioLog::bForce' has a wrong offset!");

// Function Indiana.AudioLogManager.CanPauseCurrentAudioLog
// 0x0002 (0x0002 - 0x0000)
struct AudioLogManager_CanPauseCurrentAudioLog final
{
public:
	bool                                          bExclusive;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioLogManager_CanPauseCurrentAudioLog) == 0x000001, "Wrong alignment on AudioLogManager_CanPauseCurrentAudioLog");
static_assert(sizeof(AudioLogManager_CanPauseCurrentAudioLog) == 0x000002, "Wrong size on AudioLogManager_CanPauseCurrentAudioLog");
static_assert(offsetof(AudioLogManager_CanPauseCurrentAudioLog, bExclusive) == 0x000000, "Member 'AudioLogManager_CanPauseCurrentAudioLog::bExclusive' has a wrong offset!");
static_assert(offsetof(AudioLogManager_CanPauseCurrentAudioLog, ReturnValue) == 0x000001, "Member 'AudioLogManager_CanPauseCurrentAudioLog::ReturnValue' has a wrong offset!");

// Function Indiana.AudioLogManager.CanResumeCurrentAudioLog
// 0x0002 (0x0002 - 0x0000)
struct AudioLogManager_CanResumeCurrentAudioLog final
{
public:
	bool                                          bExclusive;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioLogManager_CanResumeCurrentAudioLog) == 0x000001, "Wrong alignment on AudioLogManager_CanResumeCurrentAudioLog");
static_assert(sizeof(AudioLogManager_CanResumeCurrentAudioLog) == 0x000002, "Wrong size on AudioLogManager_CanResumeCurrentAudioLog");
static_assert(offsetof(AudioLogManager_CanResumeCurrentAudioLog, bExclusive) == 0x000000, "Member 'AudioLogManager_CanResumeCurrentAudioLog::bExclusive' has a wrong offset!");
static_assert(offsetof(AudioLogManager_CanResumeCurrentAudioLog, ReturnValue) == 0x000001, "Member 'AudioLogManager_CanResumeCurrentAudioLog::ReturnValue' has a wrong offset!");

// Function Indiana.AudioLogManager.CanStopCurrentAudioLog
// 0x0002 (0x0002 - 0x0000)
struct AudioLogManager_CanStopCurrentAudioLog final
{
public:
	bool                                          bExclusive;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioLogManager_CanStopCurrentAudioLog) == 0x000001, "Wrong alignment on AudioLogManager_CanStopCurrentAudioLog");
static_assert(sizeof(AudioLogManager_CanStopCurrentAudioLog) == 0x000002, "Wrong size on AudioLogManager_CanStopCurrentAudioLog");
static_assert(offsetof(AudioLogManager_CanStopCurrentAudioLog, bExclusive) == 0x000000, "Member 'AudioLogManager_CanStopCurrentAudioLog::bExclusive' has a wrong offset!");
static_assert(offsetof(AudioLogManager_CanStopCurrentAudioLog, ReturnValue) == 0x000001, "Member 'AudioLogManager_CanStopCurrentAudioLog::ReturnValue' has a wrong offset!");

// Function Indiana.AudioLogManager.GetCurrentAudioLogPlayState
// 0x0001 (0x0001 - 0x0000)
struct AudioLogManager_GetCurrentAudioLogPlayState final
{
public:
	EAudioLogPlayState                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioLogManager_GetCurrentAudioLogPlayState) == 0x000001, "Wrong alignment on AudioLogManager_GetCurrentAudioLogPlayState");
static_assert(sizeof(AudioLogManager_GetCurrentAudioLogPlayState) == 0x000001, "Wrong size on AudioLogManager_GetCurrentAudioLogPlayState");
static_assert(offsetof(AudioLogManager_GetCurrentAudioLogPlayState, ReturnValue) == 0x000000, "Member 'AudioLogManager_GetCurrentAudioLogPlayState::ReturnValue' has a wrong offset!");

// Function Indiana.AudioLogManager.IsPlayingAudioLog
// 0x0001 (0x0001 - 0x0000)
struct AudioLogManager_IsPlayingAudioLog final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioLogManager_IsPlayingAudioLog) == 0x000001, "Wrong alignment on AudioLogManager_IsPlayingAudioLog");
static_assert(sizeof(AudioLogManager_IsPlayingAudioLog) == 0x000001, "Wrong size on AudioLogManager_IsPlayingAudioLog");
static_assert(offsetof(AudioLogManager_IsPlayingAudioLog, ReturnValue) == 0x000000, "Member 'AudioLogManager_IsPlayingAudioLog::ReturnValue' has a wrong offset!");

// Function Indiana.AudioLogWidget.OnAudioLogPlayStateChanged
// 0x0001 (0x0001 - 0x0000)
struct AudioLogWidget_OnAudioLogPlayStateChanged final
{
public:
	EAudioLogPlayState                            NewPlayState;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioLogWidget_OnAudioLogPlayStateChanged) == 0x000001, "Wrong alignment on AudioLogWidget_OnAudioLogPlayStateChanged");
static_assert(sizeof(AudioLogWidget_OnAudioLogPlayStateChanged) == 0x000001, "Wrong size on AudioLogWidget_OnAudioLogPlayStateChanged");
static_assert(offsetof(AudioLogWidget_OnAudioLogPlayStateChanged, NewPlayState) == 0x000000, "Member 'AudioLogWidget_OnAudioLogPlayStateChanged::NewPlayState' has a wrong offset!");

// Function Indiana.AudioLogWidget.OnHUDVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct AudioLogWidget_OnHUDVisibilityChanged final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioLogWidget_OnHUDVisibilityChanged) == 0x000001, "Wrong alignment on AudioLogWidget_OnHUDVisibilityChanged");
static_assert(sizeof(AudioLogWidget_OnHUDVisibilityChanged) == 0x000001, "Wrong size on AudioLogWidget_OnHUDVisibilityChanged");
static_assert(offsetof(AudioLogWidget_OnHUDVisibilityChanged, bVisible) == 0x000000, "Member 'AudioLogWidget_OnHUDVisibilityChanged::bVisible' has a wrong offset!");

// Function Indiana.AudioLogWidget.ShowAudioLog
// 0x0008 (0x0008 - 0x0000)
struct AudioLogWidget_ShowAudioLog final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentRenderOpacity;                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioLogWidget_ShowAudioLog) == 0x000004, "Wrong alignment on AudioLogWidget_ShowAudioLog");
static_assert(sizeof(AudioLogWidget_ShowAudioLog) == 0x000008, "Wrong size on AudioLogWidget_ShowAudioLog");
static_assert(offsetof(AudioLogWidget_ShowAudioLog, bShow) == 0x000000, "Member 'AudioLogWidget_ShowAudioLog::bShow' has a wrong offset!");
static_assert(offsetof(AudioLogWidget_ShowAudioLog, CurrentRenderOpacity) == 0x000004, "Member 'AudioLogWidget_ShowAudioLog::CurrentRenderOpacity' has a wrong offset!");

// Function Indiana.AudioLogWidget.TacticalTimeDilationEnd
// 0x0004 (0x0004 - 0x0000)
struct AudioLogWidget_TacticalTimeDilationEnd final
{
public:
	float                                         Delta;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioLogWidget_TacticalTimeDilationEnd) == 0x000004, "Wrong alignment on AudioLogWidget_TacticalTimeDilationEnd");
static_assert(sizeof(AudioLogWidget_TacticalTimeDilationEnd) == 0x000004, "Wrong size on AudioLogWidget_TacticalTimeDilationEnd");
static_assert(offsetof(AudioLogWidget_TacticalTimeDilationEnd, Delta) == 0x000000, "Member 'AudioLogWidget_TacticalTimeDilationEnd::Delta' has a wrong offset!");

// Function Indiana.AudioLogWidget.CanStopAudioLog
// 0x0001 (0x0001 - 0x0000)
struct AudioLogWidget_CanStopAudioLog final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioLogWidget_CanStopAudioLog) == 0x000001, "Wrong alignment on AudioLogWidget_CanStopAudioLog");
static_assert(sizeof(AudioLogWidget_CanStopAudioLog) == 0x000001, "Wrong size on AudioLogWidget_CanStopAudioLog");
static_assert(offsetof(AudioLogWidget_CanStopAudioLog, ReturnValue) == 0x000000, "Member 'AudioLogWidget_CanStopAudioLog::ReturnValue' has a wrong offset!");

// Function Indiana.CompanionManager.ChangeCompanionMorale
// 0x000C (0x000C - 0x0000)
struct CompanionManager_ChangeCompanionMorale final
{
public:
	ESpecialObsidianID                            Companion;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMoraleContribution                           Contribution;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoraleAmount;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPositiveMorale;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyActivePartyMembers;                           // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CompanionManager_ChangeCompanionMorale) == 0x000004, "Wrong alignment on CompanionManager_ChangeCompanionMorale");
static_assert(sizeof(CompanionManager_ChangeCompanionMorale) == 0x00000C, "Wrong size on CompanionManager_ChangeCompanionMorale");
static_assert(offsetof(CompanionManager_ChangeCompanionMorale, Companion) == 0x000000, "Member 'CompanionManager_ChangeCompanionMorale::Companion' has a wrong offset!");
static_assert(offsetof(CompanionManager_ChangeCompanionMorale, Contribution) == 0x000001, "Member 'CompanionManager_ChangeCompanionMorale::Contribution' has a wrong offset!");
static_assert(offsetof(CompanionManager_ChangeCompanionMorale, MoraleAmount) == 0x000004, "Member 'CompanionManager_ChangeCompanionMorale::MoraleAmount' has a wrong offset!");
static_assert(offsetof(CompanionManager_ChangeCompanionMorale, bPositiveMorale) == 0x000008, "Member 'CompanionManager_ChangeCompanionMorale::bPositiveMorale' has a wrong offset!");
static_assert(offsetof(CompanionManager_ChangeCompanionMorale, bOnlyActivePartyMembers) == 0x000009, "Member 'CompanionManager_ChangeCompanionMorale::bOnlyActivePartyMembers' has a wrong offset!");

// Function Indiana.CompanionManager.DebugUnlockCompanion
// 0x0001 (0x0001 - 0x0000)
struct CompanionManager_DebugUnlockCompanion final
{
public:
	ESpecialObsidianID                            Companion;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompanionManager_DebugUnlockCompanion) == 0x000001, "Wrong alignment on CompanionManager_DebugUnlockCompanion");
static_assert(sizeof(CompanionManager_DebugUnlockCompanion) == 0x000001, "Wrong size on CompanionManager_DebugUnlockCompanion");
static_assert(offsetof(CompanionManager_DebugUnlockCompanion, Companion) == 0x000000, "Member 'CompanionManager_DebugUnlockCompanion::Companion' has a wrong offset!");

// Function Indiana.CompanionManager.GetCompanionGuid
// 0x0014 (0x0014 - 0x0000)
struct CompanionManager_GetCompanionGuid final
{
public:
	ESpecialObsidianID                            SpecialID;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  ReturnValue;                                       // 0x0004(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompanionManager_GetCompanionGuid) == 0x000004, "Wrong alignment on CompanionManager_GetCompanionGuid");
static_assert(sizeof(CompanionManager_GetCompanionGuid) == 0x000014, "Wrong size on CompanionManager_GetCompanionGuid");
static_assert(offsetof(CompanionManager_GetCompanionGuid, SpecialID) == 0x000000, "Member 'CompanionManager_GetCompanionGuid::SpecialID' has a wrong offset!");
static_assert(offsetof(CompanionManager_GetCompanionGuid, ReturnValue) == 0x000004, "Member 'CompanionManager_GetCompanionGuid::ReturnValue' has a wrong offset!");

// Function Indiana.CompanionManager.GetCompanionMorale
// 0x0008 (0x0008 - 0x0000)
struct CompanionManager_GetCompanionMorale final
{
public:
	ESpecialObsidianID                            Companion;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompanionManager_GetCompanionMorale) == 0x000004, "Wrong alignment on CompanionManager_GetCompanionMorale");
static_assert(sizeof(CompanionManager_GetCompanionMorale) == 0x000008, "Wrong size on CompanionManager_GetCompanionMorale");
static_assert(offsetof(CompanionManager_GetCompanionMorale, Companion) == 0x000000, "Member 'CompanionManager_GetCompanionMorale::Companion' has a wrong offset!");
static_assert(offsetof(CompanionManager_GetCompanionMorale, ReturnValue) == 0x000004, "Member 'CompanionManager_GetCompanionMorale::ReturnValue' has a wrong offset!");

// Function Indiana.CompanionManager.GetCompanionWantsToTalk
// 0x0002 (0x0002 - 0x0000)
struct CompanionManager_GetCompanionWantsToTalk final
{
public:
	ESpecialObsidianID                            Companion;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompanionManager_GetCompanionWantsToTalk) == 0x000001, "Wrong alignment on CompanionManager_GetCompanionWantsToTalk");
static_assert(sizeof(CompanionManager_GetCompanionWantsToTalk) == 0x000002, "Wrong size on CompanionManager_GetCompanionWantsToTalk");
static_assert(offsetof(CompanionManager_GetCompanionWantsToTalk, Companion) == 0x000000, "Member 'CompanionManager_GetCompanionWantsToTalk::Companion' has a wrong offset!");
static_assert(offsetof(CompanionManager_GetCompanionWantsToTalk, ReturnValue) == 0x000001, "Member 'CompanionManager_GetCompanionWantsToTalk::ReturnValue' has a wrong offset!");

// Function Indiana.CompanionManager.HasPlayerUnlockedCompanions
// 0x0001 (0x0001 - 0x0000)
struct CompanionManager_HasPlayerUnlockedCompanions final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompanionManager_HasPlayerUnlockedCompanions) == 0x000001, "Wrong alignment on CompanionManager_HasPlayerUnlockedCompanions");
static_assert(sizeof(CompanionManager_HasPlayerUnlockedCompanions) == 0x000001, "Wrong size on CompanionManager_HasPlayerUnlockedCompanions");
static_assert(offsetof(CompanionManager_HasPlayerUnlockedCompanions, ReturnValue) == 0x000000, "Member 'CompanionManager_HasPlayerUnlockedCompanions::ReturnValue' has a wrong offset!");

// Function Indiana.CompanionManager.IsCompanionDismissed
// 0x0002 (0x0002 - 0x0000)
struct CompanionManager_IsCompanionDismissed final
{
public:
	ESpecialObsidianID                            Companion;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompanionManager_IsCompanionDismissed) == 0x000001, "Wrong alignment on CompanionManager_IsCompanionDismissed");
static_assert(sizeof(CompanionManager_IsCompanionDismissed) == 0x000002, "Wrong size on CompanionManager_IsCompanionDismissed");
static_assert(offsetof(CompanionManager_IsCompanionDismissed, Companion) == 0x000000, "Member 'CompanionManager_IsCompanionDismissed::Companion' has a wrong offset!");
static_assert(offsetof(CompanionManager_IsCompanionDismissed, ReturnValue) == 0x000001, "Member 'CompanionManager_IsCompanionDismissed::ReturnValue' has a wrong offset!");

// Function Indiana.CompanionManager.IsCompanionInActiveParty
// 0x0002 (0x0002 - 0x0000)
struct CompanionManager_IsCompanionInActiveParty final
{
public:
	ESpecialObsidianID                            Companion;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompanionManager_IsCompanionInActiveParty) == 0x000001, "Wrong alignment on CompanionManager_IsCompanionInActiveParty");
static_assert(sizeof(CompanionManager_IsCompanionInActiveParty) == 0x000002, "Wrong size on CompanionManager_IsCompanionInActiveParty");
static_assert(offsetof(CompanionManager_IsCompanionInActiveParty, Companion) == 0x000000, "Member 'CompanionManager_IsCompanionInActiveParty::Companion' has a wrong offset!");
static_assert(offsetof(CompanionManager_IsCompanionInActiveParty, ReturnValue) == 0x000001, "Member 'CompanionManager_IsCompanionInActiveParty::ReturnValue' has a wrong offset!");

// Function Indiana.CompanionManager.IsCompanionInRequestedParty
// 0x0002 (0x0002 - 0x0000)
struct CompanionManager_IsCompanionInRequestedParty final
{
public:
	ESpecialObsidianID                            Companion;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompanionManager_IsCompanionInRequestedParty) == 0x000001, "Wrong alignment on CompanionManager_IsCompanionInRequestedParty");
static_assert(sizeof(CompanionManager_IsCompanionInRequestedParty) == 0x000002, "Wrong size on CompanionManager_IsCompanionInRequestedParty");
static_assert(offsetof(CompanionManager_IsCompanionInRequestedParty, Companion) == 0x000000, "Member 'CompanionManager_IsCompanionInRequestedParty::Companion' has a wrong offset!");
static_assert(offsetof(CompanionManager_IsCompanionInRequestedParty, ReturnValue) == 0x000001, "Member 'CompanionManager_IsCompanionInRequestedParty::ReturnValue' has a wrong offset!");

// Function Indiana.CompanionManager.IsCompanionUnlocked
// 0x0002 (0x0002 - 0x0000)
struct CompanionManager_IsCompanionUnlocked final
{
public:
	ESpecialObsidianID                            Companion;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompanionManager_IsCompanionUnlocked) == 0x000001, "Wrong alignment on CompanionManager_IsCompanionUnlocked");
static_assert(sizeof(CompanionManager_IsCompanionUnlocked) == 0x000002, "Wrong size on CompanionManager_IsCompanionUnlocked");
static_assert(offsetof(CompanionManager_IsCompanionUnlocked, Companion) == 0x000000, "Member 'CompanionManager_IsCompanionUnlocked::Companion' has a wrong offset!");
static_assert(offsetof(CompanionManager_IsCompanionUnlocked, ReturnValue) == 0x000001, "Member 'CompanionManager_IsCompanionUnlocked::ReturnValue' has a wrong offset!");

// Function Indiana.CompanionManager.SetCompanionWantsToTalk
// 0x0002 (0x0002 - 0x0000)
struct CompanionManager_SetCompanionWantsToTalk final
{
public:
	ESpecialObsidianID                            Companion;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWantsToTalk;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompanionManager_SetCompanionWantsToTalk) == 0x000001, "Wrong alignment on CompanionManager_SetCompanionWantsToTalk");
static_assert(sizeof(CompanionManager_SetCompanionWantsToTalk) == 0x000002, "Wrong size on CompanionManager_SetCompanionWantsToTalk");
static_assert(offsetof(CompanionManager_SetCompanionWantsToTalk, Companion) == 0x000000, "Member 'CompanionManager_SetCompanionWantsToTalk::Companion' has a wrong offset!");
static_assert(offsetof(CompanionManager_SetCompanionWantsToTalk, bWantsToTalk) == 0x000001, "Member 'CompanionManager_SetCompanionWantsToTalk::bWantsToTalk' has a wrong offset!");

// Function Indiana.CompanionManager.DebugAddCompanionMorale
// 0x000C (0x000C - 0x0000)
struct CompanionManager_DebugAddCompanionMorale final
{
public:
	uint8                                         Companion;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoraleAmount;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPositiveMorale;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CompanionManager_DebugAddCompanionMorale) == 0x000004, "Wrong alignment on CompanionManager_DebugAddCompanionMorale");
static_assert(sizeof(CompanionManager_DebugAddCompanionMorale) == 0x00000C, "Wrong size on CompanionManager_DebugAddCompanionMorale");
static_assert(offsetof(CompanionManager_DebugAddCompanionMorale, Companion) == 0x000000, "Member 'CompanionManager_DebugAddCompanionMorale::Companion' has a wrong offset!");
static_assert(offsetof(CompanionManager_DebugAddCompanionMorale, MoraleAmount) == 0x000004, "Member 'CompanionManager_DebugAddCompanionMorale::MoraleAmount' has a wrong offset!");
static_assert(offsetof(CompanionManager_DebugAddCompanionMorale, bPositiveMorale) == 0x000008, "Member 'CompanionManager_DebugAddCompanionMorale::bPositiveMorale' has a wrong offset!");

// Function Indiana.MusicManager.SetMusicOverride_BP
// 0x0008 (0x0008 - 0x0000)
struct MusicManager_SetMusicOverride_BP final
{
public:
	const class UMusicTrackData*                  OverrideTrack;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicManager_SetMusicOverride_BP) == 0x000008, "Wrong alignment on MusicManager_SetMusicOverride_BP");
static_assert(sizeof(MusicManager_SetMusicOverride_BP) == 0x000008, "Wrong size on MusicManager_SetMusicOverride_BP");
static_assert(offsetof(MusicManager_SetMusicOverride_BP, OverrideTrack) == 0x000000, "Member 'MusicManager_SetMusicOverride_BP::OverrideTrack' has a wrong offset!");

// Function Indiana.MusicManager.OnPostMapLoad
// 0x0008 (0x0008 - 0x0000)
struct MusicManager_OnPostMapLoad final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicManager_OnPostMapLoad) == 0x000008, "Wrong alignment on MusicManager_OnPostMapLoad");
static_assert(sizeof(MusicManager_OnPostMapLoad) == 0x000008, "Wrong size on MusicManager_OnPostMapLoad");
static_assert(offsetof(MusicManager_OnPostMapLoad, World) == 0x000000, "Member 'MusicManager_OnPostMapLoad::World' has a wrong offset!");

// Function Indiana.MusicManager.OnPreMapLoad
// 0x0010 (0x0010 - 0x0000)
struct MusicManager_OnPreMapLoad final
{
public:
	class FString                                 MapName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicManager_OnPreMapLoad) == 0x000008, "Wrong alignment on MusicManager_OnPreMapLoad");
static_assert(sizeof(MusicManager_OnPreMapLoad) == 0x000010, "Wrong size on MusicManager_OnPreMapLoad");
static_assert(offsetof(MusicManager_OnPreMapLoad, MapName) == 0x000000, "Member 'MusicManager_OnPreMapLoad::MapName' has a wrong offset!");

// Function Indiana.BackgroundPanelWidget.OnInnerTextureLoaded
// 0x0008 (0x0008 - 0x0000)
struct BackgroundPanelWidget_OnInnerTextureLoaded final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackgroundPanelWidget_OnInnerTextureLoaded) == 0x000008, "Wrong alignment on BackgroundPanelWidget_OnInnerTextureLoaded");
static_assert(sizeof(BackgroundPanelWidget_OnInnerTextureLoaded) == 0x000008, "Wrong size on BackgroundPanelWidget_OnInnerTextureLoaded");
static_assert(offsetof(BackgroundPanelWidget_OnInnerTextureLoaded, Texture) == 0x000000, "Member 'BackgroundPanelWidget_OnInnerTextureLoaded::Texture' has a wrong offset!");

// Function Indiana.BackgroundPanelWidget.OnOuterTextureLoaded
// 0x0008 (0x0008 - 0x0000)
struct BackgroundPanelWidget_OnOuterTextureLoaded final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackgroundPanelWidget_OnOuterTextureLoaded) == 0x000008, "Wrong alignment on BackgroundPanelWidget_OnOuterTextureLoaded");
static_assert(sizeof(BackgroundPanelWidget_OnOuterTextureLoaded) == 0x000008, "Wrong size on BackgroundPanelWidget_OnOuterTextureLoaded");
static_assert(offsetof(BackgroundPanelWidget_OnOuterTextureLoaded, Texture) == 0x000000, "Member 'BackgroundPanelWidget_OnOuterTextureLoaded::Texture' has a wrong offset!");

// Function Indiana.BackgroundPanelWidget.RegisterButtons
// 0x0010 (0x0010 - 0x0000)
struct BackgroundPanelWidget_RegisterButtons final
{
public:
	TArray<class UButtonBase*>                    Buttons;                                           // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackgroundPanelWidget_RegisterButtons) == 0x000008, "Wrong alignment on BackgroundPanelWidget_RegisterButtons");
static_assert(sizeof(BackgroundPanelWidget_RegisterButtons) == 0x000010, "Wrong size on BackgroundPanelWidget_RegisterButtons");
static_assert(offsetof(BackgroundPanelWidget_RegisterButtons, Buttons) == 0x000000, "Member 'BackgroundPanelWidget_RegisterButtons::Buttons' has a wrong offset!");

// Function Indiana.BackgroundPanelWidget.SetBackgroundFocused
// 0x0001 (0x0001 - 0x0000)
struct BackgroundPanelWidget_SetBackgroundFocused final
{
public:
	bool                                          bFocused;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackgroundPanelWidget_SetBackgroundFocused) == 0x000001, "Wrong alignment on BackgroundPanelWidget_SetBackgroundFocused");
static_assert(sizeof(BackgroundPanelWidget_SetBackgroundFocused) == 0x000001, "Wrong size on BackgroundPanelWidget_SetBackgroundFocused");
static_assert(offsetof(BackgroundPanelWidget_SetBackgroundFocused, bFocused) == 0x000000, "Member 'BackgroundPanelWidget_SetBackgroundFocused::bFocused' has a wrong offset!");

// Function Indiana.BackgroundSplitPanelWidget.OnInnerBottomTextureLoaded
// 0x0008 (0x0008 - 0x0000)
struct BackgroundSplitPanelWidget_OnInnerBottomTextureLoaded final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackgroundSplitPanelWidget_OnInnerBottomTextureLoaded) == 0x000008, "Wrong alignment on BackgroundSplitPanelWidget_OnInnerBottomTextureLoaded");
static_assert(sizeof(BackgroundSplitPanelWidget_OnInnerBottomTextureLoaded) == 0x000008, "Wrong size on BackgroundSplitPanelWidget_OnInnerBottomTextureLoaded");
static_assert(offsetof(BackgroundSplitPanelWidget_OnInnerBottomTextureLoaded, Texture) == 0x000000, "Member 'BackgroundSplitPanelWidget_OnInnerBottomTextureLoaded::Texture' has a wrong offset!");

// Function Indiana.BackgroundSplitPanelWidget.OnInnerTopTextureLoaded
// 0x0008 (0x0008 - 0x0000)
struct BackgroundSplitPanelWidget_OnInnerTopTextureLoaded final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackgroundSplitPanelWidget_OnInnerTopTextureLoaded) == 0x000008, "Wrong alignment on BackgroundSplitPanelWidget_OnInnerTopTextureLoaded");
static_assert(sizeof(BackgroundSplitPanelWidget_OnInnerTopTextureLoaded) == 0x000008, "Wrong size on BackgroundSplitPanelWidget_OnInnerTopTextureLoaded");
static_assert(offsetof(BackgroundSplitPanelWidget_OnInnerTopTextureLoaded, Texture) == 0x000000, "Member 'BackgroundSplitPanelWidget_OnInnerTopTextureLoaded::Texture' has a wrong offset!");

// Function Indiana.BackgroundSplitPanelWidget.OnOuterBottomTextureLoaded
// 0x0008 (0x0008 - 0x0000)
struct BackgroundSplitPanelWidget_OnOuterBottomTextureLoaded final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackgroundSplitPanelWidget_OnOuterBottomTextureLoaded) == 0x000008, "Wrong alignment on BackgroundSplitPanelWidget_OnOuterBottomTextureLoaded");
static_assert(sizeof(BackgroundSplitPanelWidget_OnOuterBottomTextureLoaded) == 0x000008, "Wrong size on BackgroundSplitPanelWidget_OnOuterBottomTextureLoaded");
static_assert(offsetof(BackgroundSplitPanelWidget_OnOuterBottomTextureLoaded, Texture) == 0x000000, "Member 'BackgroundSplitPanelWidget_OnOuterBottomTextureLoaded::Texture' has a wrong offset!");

// Function Indiana.BackgroundSplitPanelWidget.OnOuterTopTextureLoaded
// 0x0008 (0x0008 - 0x0000)
struct BackgroundSplitPanelWidget_OnOuterTopTextureLoaded final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackgroundSplitPanelWidget_OnOuterTopTextureLoaded) == 0x000008, "Wrong alignment on BackgroundSplitPanelWidget_OnOuterTopTextureLoaded");
static_assert(sizeof(BackgroundSplitPanelWidget_OnOuterTopTextureLoaded) == 0x000008, "Wrong size on BackgroundSplitPanelWidget_OnOuterTopTextureLoaded");
static_assert(offsetof(BackgroundSplitPanelWidget_OnOuterTopTextureLoaded, Texture) == 0x000000, "Member 'BackgroundSplitPanelWidget_OnOuterTopTextureLoaded::Texture' has a wrong offset!");

// Function Indiana.PointOfInterest.OnBeginOverlap
// 0x0010 (0x0010 - 0x0000)
struct PointOfInterest_OnBeginOverlap final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PointOfInterest_OnBeginOverlap) == 0x000008, "Wrong alignment on PointOfInterest_OnBeginOverlap");
static_assert(sizeof(PointOfInterest_OnBeginOverlap) == 0x000010, "Wrong size on PointOfInterest_OnBeginOverlap");
static_assert(offsetof(PointOfInterest_OnBeginOverlap, OverlappedActor) == 0x000000, "Member 'PointOfInterest_OnBeginOverlap::OverlappedActor' has a wrong offset!");
static_assert(offsetof(PointOfInterest_OnBeginOverlap, OtherActor) == 0x000008, "Member 'PointOfInterest_OnBeginOverlap::OtherActor' has a wrong offset!");

// Function Indiana.BeaconManager.OnShipChangedLocation
// 0x0008 (0x0008 - 0x0000)
struct BeaconManager_OnShipChangedLocation final
{
public:
	const class UShipDestinationData*             NewShipLocation;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeaconManager_OnShipChangedLocation) == 0x000008, "Wrong alignment on BeaconManager_OnShipChangedLocation");
static_assert(sizeof(BeaconManager_OnShipChangedLocation) == 0x000008, "Wrong size on BeaconManager_OnShipChangedLocation");
static_assert(offsetof(BeaconManager_OnShipChangedLocation, NewShipLocation) == 0x000000, "Member 'BeaconManager_OnShipChangedLocation::NewShipLocation' has a wrong offset!");

// Function Indiana.BeaconTagWidget.OnHUDVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct BeaconTagWidget_OnHUDVisibilityChanged final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeaconTagWidget_OnHUDVisibilityChanged) == 0x000001, "Wrong alignment on BeaconTagWidget_OnHUDVisibilityChanged");
static_assert(sizeof(BeaconTagWidget_OnHUDVisibilityChanged) == 0x000001, "Wrong size on BeaconTagWidget_OnHUDVisibilityChanged");
static_assert(offsetof(BeaconTagWidget_OnHUDVisibilityChanged, bVisible) == 0x000000, "Member 'BeaconTagWidget_OnHUDVisibilityChanged::bVisible' has a wrong offset!");

// Function Indiana.BeaconTagWidget.OnWaypointMarkerVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct BeaconTagWidget_OnWaypointMarkerVisibilityChanged final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeaconTagWidget_OnWaypointMarkerVisibilityChanged) == 0x000001, "Wrong alignment on BeaconTagWidget_OnWaypointMarkerVisibilityChanged");
static_assert(sizeof(BeaconTagWidget_OnWaypointMarkerVisibilityChanged) == 0x000001, "Wrong size on BeaconTagWidget_OnWaypointMarkerVisibilityChanged");
static_assert(offsetof(BeaconTagWidget_OnWaypointMarkerVisibilityChanged, bVisible) == 0x000000, "Member 'BeaconTagWidget_OnWaypointMarkerVisibilityChanged::bVisible' has a wrong offset!");

// Function Indiana.WeaponMode.GetPrimaryDamageTypeEnum
// 0x0001 (0x0001 - 0x0000)
struct WeaponMode_GetPrimaryDamageTypeEnum final
{
public:
	EIndianaDamageType                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponMode_GetPrimaryDamageTypeEnum) == 0x000001, "Wrong alignment on WeaponMode_GetPrimaryDamageTypeEnum");
static_assert(sizeof(WeaponMode_GetPrimaryDamageTypeEnum) == 0x000001, "Wrong size on WeaponMode_GetPrimaryDamageTypeEnum");
static_assert(offsetof(WeaponMode_GetPrimaryDamageTypeEnum, ReturnValue) == 0x000000, "Member 'WeaponMode_GetPrimaryDamageTypeEnum::ReturnValue' has a wrong offset!");

// Function Indiana.WeaponMode.IsCharging
// 0x0001 (0x0001 - 0x0000)
struct WeaponMode_IsCharging final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponMode_IsCharging) == 0x000001, "Wrong alignment on WeaponMode_IsCharging");
static_assert(sizeof(WeaponMode_IsCharging) == 0x000001, "Wrong size on WeaponMode_IsCharging");
static_assert(offsetof(WeaponMode_IsCharging, ReturnValue) == 0x000000, "Member 'WeaponMode_IsCharging::ReturnValue' has a wrong offset!");

// Function Indiana.WeaponMode.IsFullyAimed
// 0x0001 (0x0001 - 0x0000)
struct WeaponMode_IsFullyAimed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponMode_IsFullyAimed) == 0x000001, "Wrong alignment on WeaponMode_IsFullyAimed");
static_assert(sizeof(WeaponMode_IsFullyAimed) == 0x000001, "Wrong size on WeaponMode_IsFullyAimed");
static_assert(offsetof(WeaponMode_IsFullyAimed, ReturnValue) == 0x000000, "Member 'WeaponMode_IsFullyAimed::ReturnValue' has a wrong offset!");

// Function Indiana.WeaponMode.IsIdle
// 0x0001 (0x0001 - 0x0000)
struct WeaponMode_IsIdle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponMode_IsIdle) == 0x000001, "Wrong alignment on WeaponMode_IsIdle");
static_assert(sizeof(WeaponMode_IsIdle) == 0x000001, "Wrong size on WeaponMode_IsIdle");
static_assert(offsetof(WeaponMode_IsIdle, ReturnValue) == 0x000000, "Member 'WeaponMode_IsIdle::ReturnValue' has a wrong offset!");

// Function Indiana.RangedMode.OnMontageBlendingOut
// 0x0010 (0x0010 - 0x0000)
struct RangedMode_OnMontageBlendingOut final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RangedMode_OnMontageBlendingOut) == 0x000008, "Wrong alignment on RangedMode_OnMontageBlendingOut");
static_assert(sizeof(RangedMode_OnMontageBlendingOut) == 0x000010, "Wrong size on RangedMode_OnMontageBlendingOut");
static_assert(offsetof(RangedMode_OnMontageBlendingOut, Montage) == 0x000000, "Member 'RangedMode_OnMontageBlendingOut::Montage' has a wrong offset!");
static_assert(offsetof(RangedMode_OnMontageBlendingOut, bInterrupted) == 0x000008, "Member 'RangedMode_OnMontageBlendingOut::bInterrupted' has a wrong offset!");

// Function Indiana.RangedMode.GetAimingDirection
// 0x000C (0x000C - 0x0000)
struct RangedMode_GetAimingDirection final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RangedMode_GetAimingDirection) == 0x000004, "Wrong alignment on RangedMode_GetAimingDirection");
static_assert(sizeof(RangedMode_GetAimingDirection) == 0x00000C, "Wrong size on RangedMode_GetAimingDirection");
static_assert(offsetof(RangedMode_GetAimingDirection, ReturnValue) == 0x000000, "Member 'RangedMode_GetAimingDirection::ReturnValue' has a wrong offset!");

// Function Indiana.RangedMode.GetAimingUpDirection
// 0x000C (0x000C - 0x0000)
struct RangedMode_GetAimingUpDirection final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RangedMode_GetAimingUpDirection) == 0x000004, "Wrong alignment on RangedMode_GetAimingUpDirection");
static_assert(sizeof(RangedMode_GetAimingUpDirection) == 0x00000C, "Wrong size on RangedMode_GetAimingUpDirection");
static_assert(offsetof(RangedMode_GetAimingUpDirection, ReturnValue) == 0x000000, "Member 'RangedMode_GetAimingUpDirection::ReturnValue' has a wrong offset!");

// Function Indiana.RangedMode.GetMuzzleLocation
// 0x000C (0x000C - 0x0000)
struct RangedMode_GetMuzzleLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RangedMode_GetMuzzleLocation) == 0x000004, "Wrong alignment on RangedMode_GetMuzzleLocation");
static_assert(sizeof(RangedMode_GetMuzzleLocation) == 0x00000C, "Wrong size on RangedMode_GetMuzzleLocation");
static_assert(offsetof(RangedMode_GetMuzzleLocation, ReturnValue) == 0x000000, "Member 'RangedMode_GetMuzzleLocation::ReturnValue' has a wrong offset!");

// Function Indiana.RangedMode.GetMuzzleLocationAndRotation
// 0x001C (0x001C - 0x0000)
struct RangedMode_GetMuzzleLocationAndRotation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RangedMode_GetMuzzleLocationAndRotation) == 0x000004, "Wrong alignment on RangedMode_GetMuzzleLocationAndRotation");
static_assert(sizeof(RangedMode_GetMuzzleLocationAndRotation) == 0x00001C, "Wrong size on RangedMode_GetMuzzleLocationAndRotation");
static_assert(offsetof(RangedMode_GetMuzzleLocationAndRotation, Location) == 0x000000, "Member 'RangedMode_GetMuzzleLocationAndRotation::Location' has a wrong offset!");
static_assert(offsetof(RangedMode_GetMuzzleLocationAndRotation, Rotation) == 0x00000C, "Member 'RangedMode_GetMuzzleLocationAndRotation::Rotation' has a wrong offset!");
static_assert(offsetof(RangedMode_GetMuzzleLocationAndRotation, ReturnValue) == 0x000018, "Member 'RangedMode_GetMuzzleLocationAndRotation::ReturnValue' has a wrong offset!");

// Function Indiana.RangedMode.GetMuzzleRotation
// 0x000C (0x000C - 0x0000)
struct RangedMode_GetMuzzleRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RangedMode_GetMuzzleRotation) == 0x000004, "Wrong alignment on RangedMode_GetMuzzleRotation");
static_assert(sizeof(RangedMode_GetMuzzleRotation) == 0x00000C, "Wrong size on RangedMode_GetMuzzleRotation");
static_assert(offsetof(RangedMode_GetMuzzleRotation, ReturnValue) == 0x000000, "Member 'RangedMode_GetMuzzleRotation::ReturnValue' has a wrong offset!");

// Function Indiana.RangedMode.GetShotOrigin
// 0x000C (0x000C - 0x0000)
struct RangedMode_GetShotOrigin final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RangedMode_GetShotOrigin) == 0x000004, "Wrong alignment on RangedMode_GetShotOrigin");
static_assert(sizeof(RangedMode_GetShotOrigin) == 0x00000C, "Wrong size on RangedMode_GetShotOrigin");
static_assert(offsetof(RangedMode_GetShotOrigin, ReturnValue) == 0x000000, "Member 'RangedMode_GetShotOrigin::ReturnValue' has a wrong offset!");

// Function Indiana.RangedMode.GetWeaponCurrentAmmoGaugeAlpha
// 0x0004 (0x0004 - 0x0000)
struct RangedMode_GetWeaponCurrentAmmoGaugeAlpha final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RangedMode_GetWeaponCurrentAmmoGaugeAlpha) == 0x000004, "Wrong alignment on RangedMode_GetWeaponCurrentAmmoGaugeAlpha");
static_assert(sizeof(RangedMode_GetWeaponCurrentAmmoGaugeAlpha) == 0x000004, "Wrong size on RangedMode_GetWeaponCurrentAmmoGaugeAlpha");
static_assert(offsetof(RangedMode_GetWeaponCurrentAmmoGaugeAlpha, ReturnValue) == 0x000000, "Member 'RangedMode_GetWeaponCurrentAmmoGaugeAlpha::ReturnValue' has a wrong offset!");

// Function Indiana.RangedMode.HasScope
// 0x0001 (0x0001 - 0x0000)
struct RangedMode_HasScope final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RangedMode_HasScope) == 0x000001, "Wrong alignment on RangedMode_HasScope");
static_assert(sizeof(RangedMode_HasScope) == 0x000001, "Wrong size on RangedMode_HasScope");
static_assert(offsetof(RangedMode_HasScope, ReturnValue) == 0x000000, "Member 'RangedMode_HasScope::ReturnValue' has a wrong offset!");

// Function Indiana.BeamMode.GetTargetLocation
// 0x000C (0x000C - 0x0000)
struct BeamMode_GetTargetLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeamMode_GetTargetLocation) == 0x000004, "Wrong alignment on BeamMode_GetTargetLocation");
static_assert(sizeof(BeamMode_GetTargetLocation) == 0x00000C, "Wrong size on BeamMode_GetTargetLocation");
static_assert(offsetof(BeamMode_GetTargetLocation, ReturnValue) == 0x000000, "Member 'BeamMode_GetTargetLocation::ReturnValue' has a wrong offset!");

// Function Indiana.BeamMode.HasLockedTarget
// 0x0001 (0x0001 - 0x0000)
struct BeamMode_HasLockedTarget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeamMode_HasLockedTarget) == 0x000001, "Wrong alignment on BeamMode_HasLockedTarget");
static_assert(sizeof(BeamMode_HasLockedTarget) == 0x000001, "Wrong size on BeamMode_HasLockedTarget");
static_assert(offsetof(BeamMode_HasLockedTarget, ReturnValue) == 0x000000, "Member 'BeamMode_HasLockedTarget::ReturnValue' has a wrong offset!");

// Function Indiana.BeamMode.IsTargetingPlayer
// 0x0001 (0x0001 - 0x0000)
struct BeamMode_IsTargetingPlayer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeamMode_IsTargetingPlayer) == 0x000001, "Wrong alignment on BeamMode_IsTargetingPlayer");
static_assert(sizeof(BeamMode_IsTargetingPlayer) == 0x000001, "Wrong size on BeamMode_IsTargetingPlayer");
static_assert(offsetof(BeamMode_IsTargetingPlayer, ReturnValue) == 0x000000, "Member 'BeamMode_IsTargetingPlayer::ReturnValue' has a wrong offset!");

// Function Indiana.DecisionTreeComponent.OnActionToggled
// 0x0002 (0x0002 - 0x0000)
struct DecisionTreeComponent_OnActionToggled final
{
public:
	ETogglableAction                              Action;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bToggled;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DecisionTreeComponent_OnActionToggled) == 0x000001, "Wrong alignment on DecisionTreeComponent_OnActionToggled");
static_assert(sizeof(DecisionTreeComponent_OnActionToggled) == 0x000002, "Wrong size on DecisionTreeComponent_OnActionToggled");
static_assert(offsetof(DecisionTreeComponent_OnActionToggled, Action) == 0x000000, "Member 'DecisionTreeComponent_OnActionToggled::Action' has a wrong offset!");
static_assert(offsetof(DecisionTreeComponent_OnActionToggled, bToggled) == 0x000001, "Member 'DecisionTreeComponent_OnActionToggled::bToggled' has a wrong offset!");

// Function Indiana.DecisionTreeComponent.OnAlertStateChange
// 0x0010 (0x0010 - 0x0000)
struct DecisionTreeComponent_OnAlertStateChange final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAlertState                                   PreviousAlertState;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAlertState                                   TargetAlertState;                                  // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestoring;                                        // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DecisionTreeComponent_OnAlertStateChange) == 0x000008, "Wrong alignment on DecisionTreeComponent_OnAlertStateChange");
static_assert(sizeof(DecisionTreeComponent_OnAlertStateChange) == 0x000010, "Wrong size on DecisionTreeComponent_OnAlertStateChange");
static_assert(offsetof(DecisionTreeComponent_OnAlertStateChange, TargetActor) == 0x000000, "Member 'DecisionTreeComponent_OnAlertStateChange::TargetActor' has a wrong offset!");
static_assert(offsetof(DecisionTreeComponent_OnAlertStateChange, PreviousAlertState) == 0x000008, "Member 'DecisionTreeComponent_OnAlertStateChange::PreviousAlertState' has a wrong offset!");
static_assert(offsetof(DecisionTreeComponent_OnAlertStateChange, TargetAlertState) == 0x000009, "Member 'DecisionTreeComponent_OnAlertStateChange::TargetAlertState' has a wrong offset!");
static_assert(offsetof(DecisionTreeComponent_OnAlertStateChange, bRestoring) == 0x00000A, "Member 'DecisionTreeComponent_OnAlertStateChange::bRestoring' has a wrong offset!");

// Function Indiana.DecisionTreeComponent.OnBehaviorPhaseChange
// 0x0004 (0x0004 - 0x0000)
struct DecisionTreeComponent_OnBehaviorPhaseChange final
{
public:
	int32                                         NewBehaviorPhase;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DecisionTreeComponent_OnBehaviorPhaseChange) == 0x000004, "Wrong alignment on DecisionTreeComponent_OnBehaviorPhaseChange");
static_assert(sizeof(DecisionTreeComponent_OnBehaviorPhaseChange) == 0x000004, "Wrong size on DecisionTreeComponent_OnBehaviorPhaseChange");
static_assert(offsetof(DecisionTreeComponent_OnBehaviorPhaseChange, NewBehaviorPhase) == 0x000000, "Member 'DecisionTreeComponent_OnBehaviorPhaseChange::NewBehaviorPhase' has a wrong offset!");

// Function Indiana.DecisionTreeComponent.OnCombatStateChange
// 0x0002 (0x0002 - 0x0000)
struct DecisionTreeComponent_OnCombatStateChange final
{
public:
	bool                                          bIsInCombat;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestoring;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DecisionTreeComponent_OnCombatStateChange) == 0x000001, "Wrong alignment on DecisionTreeComponent_OnCombatStateChange");
static_assert(sizeof(DecisionTreeComponent_OnCombatStateChange) == 0x000002, "Wrong size on DecisionTreeComponent_OnCombatStateChange");
static_assert(offsetof(DecisionTreeComponent_OnCombatStateChange, bIsInCombat) == 0x000000, "Member 'DecisionTreeComponent_OnCombatStateChange::bIsInCombat' has a wrong offset!");
static_assert(offsetof(DecisionTreeComponent_OnCombatStateChange, bRestoring) == 0x000001, "Member 'DecisionTreeComponent_OnCombatStateChange::bRestoring' has a wrong offset!");

// Function Indiana.DecisionTreeComponent.OnDefaultBehaviorChange
// 0x0010 (0x0010 - 0x0000)
struct DecisionTreeComponent_OnDefaultBehaviorChange final
{
public:
	const class UAISettings_Behavior*             NewDefaultBehavior;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFullReset;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DecisionTreeComponent_OnDefaultBehaviorChange) == 0x000008, "Wrong alignment on DecisionTreeComponent_OnDefaultBehaviorChange");
static_assert(sizeof(DecisionTreeComponent_OnDefaultBehaviorChange) == 0x000010, "Wrong size on DecisionTreeComponent_OnDefaultBehaviorChange");
static_assert(offsetof(DecisionTreeComponent_OnDefaultBehaviorChange, NewDefaultBehavior) == 0x000000, "Member 'DecisionTreeComponent_OnDefaultBehaviorChange::NewDefaultBehavior' has a wrong offset!");
static_assert(offsetof(DecisionTreeComponent_OnDefaultBehaviorChange, bFullReset) == 0x000008, "Member 'DecisionTreeComponent_OnDefaultBehaviorChange::bFullReset' has a wrong offset!");

// Function Indiana.DecisionTreeComponent.OnNearbyInterestPoint
// 0x0008 (0x0008 - 0x0000)
struct DecisionTreeComponent_OnNearbyInterestPoint final
{
public:
	class UFurnitureComponent*                    InterestPoint;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DecisionTreeComponent_OnNearbyInterestPoint) == 0x000008, "Wrong alignment on DecisionTreeComponent_OnNearbyInterestPoint");
static_assert(sizeof(DecisionTreeComponent_OnNearbyInterestPoint) == 0x000008, "Wrong size on DecisionTreeComponent_OnNearbyInterestPoint");
static_assert(offsetof(DecisionTreeComponent_OnNearbyInterestPoint, InterestPoint) == 0x000000, "Member 'DecisionTreeComponent_OnNearbyInterestPoint::InterestPoint' has a wrong offset!");

// Function Indiana.DecisionTreeComponent.OnPlayerConversationChange
// 0x0010 (0x0010 - 0x0000)
struct DecisionTreeComponent_OnPlayerConversationChange final
{
public:
	const class UConversationInstance*            Instance;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEntered;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DecisionTreeComponent_OnPlayerConversationChange) == 0x000008, "Wrong alignment on DecisionTreeComponent_OnPlayerConversationChange");
static_assert(sizeof(DecisionTreeComponent_OnPlayerConversationChange) == 0x000010, "Wrong size on DecisionTreeComponent_OnPlayerConversationChange");
static_assert(offsetof(DecisionTreeComponent_OnPlayerConversationChange, Instance) == 0x000000, "Member 'DecisionTreeComponent_OnPlayerConversationChange::Instance' has a wrong offset!");
static_assert(offsetof(DecisionTreeComponent_OnPlayerConversationChange, bEntered) == 0x000008, "Member 'DecisionTreeComponent_OnPlayerConversationChange::bEntered' has a wrong offset!");

// Function Indiana.DecisionTreeComponent.OnPlayerConversationProximityChange
// 0x0001 (0x0001 - 0x0000)
struct DecisionTreeComponent_OnPlayerConversationProximityChange final
{
public:
	bool                                          bInProximity;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DecisionTreeComponent_OnPlayerConversationProximityChange) == 0x000001, "Wrong alignment on DecisionTreeComponent_OnPlayerConversationProximityChange");
static_assert(sizeof(DecisionTreeComponent_OnPlayerConversationProximityChange) == 0x000001, "Wrong size on DecisionTreeComponent_OnPlayerConversationProximityChange");
static_assert(offsetof(DecisionTreeComponent_OnPlayerConversationProximityChange, bInProximity) == 0x000000, "Member 'DecisionTreeComponent_OnPlayerConversationProximityChange::bInProximity' has a wrong offset!");

// Function Indiana.DecisionTreeComponent.OnPlayerProximityChange
// 0x0001 (0x0001 - 0x0000)
struct DecisionTreeComponent_OnPlayerProximityChange final
{
public:
	bool                                          bEnteredProximity;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DecisionTreeComponent_OnPlayerProximityChange) == 0x000001, "Wrong alignment on DecisionTreeComponent_OnPlayerProximityChange");
static_assert(sizeof(DecisionTreeComponent_OnPlayerProximityChange) == 0x000001, "Wrong size on DecisionTreeComponent_OnPlayerProximityChange");
static_assert(offsetof(DecisionTreeComponent_OnPlayerProximityChange, bEnteredProximity) == 0x000000, "Member 'DecisionTreeComponent_OnPlayerProximityChange::bEnteredProximity' has a wrong offset!");

// Function Indiana.DecisionTreeComponent.OnScriptedBehaviorCall
// 0x0010 (0x0010 - 0x0000)
struct DecisionTreeComponent_OnScriptedBehaviorCall final
{
public:
	const class UAISettings_Behavior*             ScriptedBehavior;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterruptible;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DecisionTreeComponent_OnScriptedBehaviorCall) == 0x000008, "Wrong alignment on DecisionTreeComponent_OnScriptedBehaviorCall");
static_assert(sizeof(DecisionTreeComponent_OnScriptedBehaviorCall) == 0x000010, "Wrong size on DecisionTreeComponent_OnScriptedBehaviorCall");
static_assert(offsetof(DecisionTreeComponent_OnScriptedBehaviorCall, ScriptedBehavior) == 0x000000, "Member 'DecisionTreeComponent_OnScriptedBehaviorCall::ScriptedBehavior' has a wrong offset!");
static_assert(offsetof(DecisionTreeComponent_OnScriptedBehaviorCall, bInterruptible) == 0x000008, "Member 'DecisionTreeComponent_OnScriptedBehaviorCall::bInterruptible' has a wrong offset!");

// Function Indiana.DecisionTreeComponent.OnStartTraverse
// 0x0018 (0x0018 - 0x0000)
struct DecisionTreeComponent_OnStartTraverse final
{
public:
	ETraverseType                                 TraverseType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NavLinkDirection;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AReservableNavLink*                     ReservableNavLink;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ALadder*                                ClimbLadder;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DecisionTreeComponent_OnStartTraverse) == 0x000008, "Wrong alignment on DecisionTreeComponent_OnStartTraverse");
static_assert(sizeof(DecisionTreeComponent_OnStartTraverse) == 0x000018, "Wrong size on DecisionTreeComponent_OnStartTraverse");
static_assert(offsetof(DecisionTreeComponent_OnStartTraverse, TraverseType) == 0x000000, "Member 'DecisionTreeComponent_OnStartTraverse::TraverseType' has a wrong offset!");
static_assert(offsetof(DecisionTreeComponent_OnStartTraverse, NavLinkDirection) == 0x000004, "Member 'DecisionTreeComponent_OnStartTraverse::NavLinkDirection' has a wrong offset!");
static_assert(offsetof(DecisionTreeComponent_OnStartTraverse, ReservableNavLink) == 0x000008, "Member 'DecisionTreeComponent_OnStartTraverse::ReservableNavLink' has a wrong offset!");
static_assert(offsetof(DecisionTreeComponent_OnStartTraverse, ClimbLadder) == 0x000010, "Member 'DecisionTreeComponent_OnStartTraverse::ClimbLadder' has a wrong offset!");

// Function Indiana.DecisionTreeComponent.OnStateOfBeingChange
// 0x0002 (0x0002 - 0x0000)
struct DecisionTreeComponent_OnStateOfBeingChange final
{
public:
	EStateOfBeing                                 NewStateOfBeing;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStateOfBeing                                 OldStateOfBeing;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DecisionTreeComponent_OnStateOfBeingChange) == 0x000001, "Wrong alignment on DecisionTreeComponent_OnStateOfBeingChange");
static_assert(sizeof(DecisionTreeComponent_OnStateOfBeingChange) == 0x000002, "Wrong size on DecisionTreeComponent_OnStateOfBeingChange");
static_assert(offsetof(DecisionTreeComponent_OnStateOfBeingChange, NewStateOfBeing) == 0x000000, "Member 'DecisionTreeComponent_OnStateOfBeingChange::NewStateOfBeing' has a wrong offset!");
static_assert(offsetof(DecisionTreeComponent_OnStateOfBeingChange, OldStateOfBeing) == 0x000001, "Member 'DecisionTreeComponent_OnStateOfBeingChange::OldStateOfBeing' has a wrong offset!");

// Function Indiana.DecisionTreeComponent.OnStatusEffectAdded
// 0x0010 (0x0010 - 0x0000)
struct DecisionTreeComponent_OnStatusEffectAdded final
{
public:
	class UStatusEffectManagerComponent*          Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStatusEffect*                          StatusEffect;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DecisionTreeComponent_OnStatusEffectAdded) == 0x000008, "Wrong alignment on DecisionTreeComponent_OnStatusEffectAdded");
static_assert(sizeof(DecisionTreeComponent_OnStatusEffectAdded) == 0x000010, "Wrong size on DecisionTreeComponent_OnStatusEffectAdded");
static_assert(offsetof(DecisionTreeComponent_OnStatusEffectAdded, Sender) == 0x000000, "Member 'DecisionTreeComponent_OnStatusEffectAdded::Sender' has a wrong offset!");
static_assert(offsetof(DecisionTreeComponent_OnStatusEffectAdded, StatusEffect) == 0x000008, "Member 'DecisionTreeComponent_OnStatusEffectAdded::StatusEffect' has a wrong offset!");

// Function Indiana.DecisionTreeComponent.OnTether
// 0x0010 (0x0010 - 0x0000)
struct DecisionTreeComponent_OnTether final
{
public:
	bool                                          bCanceled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TetherReturnLocation;                              // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DecisionTreeComponent_OnTether) == 0x000004, "Wrong alignment on DecisionTreeComponent_OnTether");
static_assert(sizeof(DecisionTreeComponent_OnTether) == 0x000010, "Wrong size on DecisionTreeComponent_OnTether");
static_assert(offsetof(DecisionTreeComponent_OnTether, bCanceled) == 0x000000, "Member 'DecisionTreeComponent_OnTether::bCanceled' has a wrong offset!");
static_assert(offsetof(DecisionTreeComponent_OnTether, TetherReturnLocation) == 0x000004, "Member 'DecisionTreeComponent_OnTether::TetherReturnLocation' has a wrong offset!");

// Function Indiana.DecisionTreeComponent.OnWeaponPreferenceChange
// 0x0002 (0x0002 - 0x0000)
struct DecisionTreeComponent_OnWeaponPreferenceChange final
{
public:
	EWeaponPreference                             NewWeaponPreference;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWeaponPreference                             OldWeaponPreference;                               // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DecisionTreeComponent_OnWeaponPreferenceChange) == 0x000001, "Wrong alignment on DecisionTreeComponent_OnWeaponPreferenceChange");
static_assert(sizeof(DecisionTreeComponent_OnWeaponPreferenceChange) == 0x000002, "Wrong size on DecisionTreeComponent_OnWeaponPreferenceChange");
static_assert(offsetof(DecisionTreeComponent_OnWeaponPreferenceChange, NewWeaponPreference) == 0x000000, "Member 'DecisionTreeComponent_OnWeaponPreferenceChange::NewWeaponPreference' has a wrong offset!");
static_assert(offsetof(DecisionTreeComponent_OnWeaponPreferenceChange, OldWeaponPreference) == 0x000001, "Member 'DecisionTreeComponent_OnWeaponPreferenceChange::OldWeaponPreference' has a wrong offset!");

// Function Indiana.DestructibleShoutComponent.OnDestructibleDestroyed
// 0x0008 (0x0008 - 0x0000)
struct DestructibleShoutComponent_OnDestructibleDestroyed final
{
public:
	class AActor*                                 Instigator;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DestructibleShoutComponent_OnDestructibleDestroyed) == 0x000008, "Wrong alignment on DestructibleShoutComponent_OnDestructibleDestroyed");
static_assert(sizeof(DestructibleShoutComponent_OnDestructibleDestroyed) == 0x000008, "Wrong size on DestructibleShoutComponent_OnDestructibleDestroyed");
static_assert(offsetof(DestructibleShoutComponent_OnDestructibleDestroyed, Instigator) == 0x000000, "Member 'DestructibleShoutComponent_OnDestructibleDestroyed::Instigator' has a wrong offset!");

// Function Indiana.TestAudioDataTypeReference.GetTestAudioBank
// 0x0010 (0x0010 - 0x0000)
struct TestAudioDataTypeReference_GetTestAudioBank final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TestAudioDataTypeReference_GetTestAudioBank) == 0x000008, "Wrong alignment on TestAudioDataTypeReference_GetTestAudioBank");
static_assert(sizeof(TestAudioDataTypeReference_GetTestAudioBank) == 0x000010, "Wrong size on TestAudioDataTypeReference_GetTestAudioBank");
static_assert(offsetof(TestAudioDataTypeReference_GetTestAudioBank, ReturnValue) == 0x000000, "Member 'TestAudioDataTypeReference_GetTestAudioBank::ReturnValue' has a wrong offset!");

// Function Indiana.TestAudioDataTypeReference.GetTestAudioEnvironment
// 0x0010 (0x0010 - 0x0000)
struct TestAudioDataTypeReference_GetTestAudioEnvironment final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TestAudioDataTypeReference_GetTestAudioEnvironment) == 0x000008, "Wrong alignment on TestAudioDataTypeReference_GetTestAudioEnvironment");
static_assert(sizeof(TestAudioDataTypeReference_GetTestAudioEnvironment) == 0x000010, "Wrong size on TestAudioDataTypeReference_GetTestAudioEnvironment");
static_assert(offsetof(TestAudioDataTypeReference_GetTestAudioEnvironment, ReturnValue) == 0x000000, "Member 'TestAudioDataTypeReference_GetTestAudioEnvironment::ReturnValue' has a wrong offset!");

// Function Indiana.TestAudioDataTypeReference.GetTestAudioEvent
// 0x0010 (0x0010 - 0x0000)
struct TestAudioDataTypeReference_GetTestAudioEvent final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TestAudioDataTypeReference_GetTestAudioEvent) == 0x000008, "Wrong alignment on TestAudioDataTypeReference_GetTestAudioEvent");
static_assert(sizeof(TestAudioDataTypeReference_GetTestAudioEvent) == 0x000010, "Wrong size on TestAudioDataTypeReference_GetTestAudioEvent");
static_assert(offsetof(TestAudioDataTypeReference_GetTestAudioEvent, ReturnValue) == 0x000000, "Member 'TestAudioDataTypeReference_GetTestAudioEvent::ReturnValue' has a wrong offset!");

// Function Indiana.TestAudioDataTypeReference.GetTestAudioState
// 0x0010 (0x0010 - 0x0000)
struct TestAudioDataTypeReference_GetTestAudioState final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TestAudioDataTypeReference_GetTestAudioState) == 0x000008, "Wrong alignment on TestAudioDataTypeReference_GetTestAudioState");
static_assert(sizeof(TestAudioDataTypeReference_GetTestAudioState) == 0x000010, "Wrong size on TestAudioDataTypeReference_GetTestAudioState");
static_assert(offsetof(TestAudioDataTypeReference_GetTestAudioState, ReturnValue) == 0x000000, "Member 'TestAudioDataTypeReference_GetTestAudioState::ReturnValue' has a wrong offset!");

// Function Indiana.ConversationInterface.ConversationEnded
// 0x0014 (0x0014 - 0x0000)
struct ConversationInterface_ConversationEnded final
{
public:
	struct FGuid                                  Guid;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ConversationInterface_ConversationEnded) == 0x000004, "Wrong alignment on ConversationInterface_ConversationEnded");
static_assert(sizeof(ConversationInterface_ConversationEnded) == 0x000014, "Wrong size on ConversationInterface_ConversationEnded");
static_assert(offsetof(ConversationInterface_ConversationEnded, Guid) == 0x000000, "Member 'ConversationInterface_ConversationEnded::Guid' has a wrong offset!");
static_assert(offsetof(ConversationInterface_ConversationEnded, ReturnValue) == 0x000010, "Member 'ConversationInterface_ConversationEnded::ReturnValue' has a wrong offset!");

// Function Indiana.ConversationInterface.ConversationNodeChanged
// 0x0020 (0x0020 - 0x0000)
struct ConversationInterface_ConversationNodeChanged final
{
public:
	class AActor*                                 Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Camera;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Audio;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NodeID;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ConversationInterface_ConversationNodeChanged) == 0x000008, "Wrong alignment on ConversationInterface_ConversationNodeChanged");
static_assert(sizeof(ConversationInterface_ConversationNodeChanged) == 0x000020, "Wrong size on ConversationInterface_ConversationNodeChanged");
static_assert(offsetof(ConversationInterface_ConversationNodeChanged, Character) == 0x000000, "Member 'ConversationInterface_ConversationNodeChanged::Character' has a wrong offset!");
static_assert(offsetof(ConversationInterface_ConversationNodeChanged, Camera) == 0x000008, "Member 'ConversationInterface_ConversationNodeChanged::Camera' has a wrong offset!");
static_assert(offsetof(ConversationInterface_ConversationNodeChanged, Audio) == 0x000010, "Member 'ConversationInterface_ConversationNodeChanged::Audio' has a wrong offset!");
static_assert(offsetof(ConversationInterface_ConversationNodeChanged, NodeID) == 0x000018, "Member 'ConversationInterface_ConversationNodeChanged::NodeID' has a wrong offset!");
static_assert(offsetof(ConversationInterface_ConversationNodeChanged, ReturnValue) == 0x00001C, "Member 'ConversationInterface_ConversationNodeChanged::ReturnValue' has a wrong offset!");

// Function Indiana.ConversationInterface.ConversationStarted
// 0x0020 (0x0020 - 0x0000)
struct ConversationInterface_ConversationStarted final
{
public:
	class AActor*                                 Speaker;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  Guid;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NodeID;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ConversationInterface_ConversationStarted) == 0x000008, "Wrong alignment on ConversationInterface_ConversationStarted");
static_assert(sizeof(ConversationInterface_ConversationStarted) == 0x000020, "Wrong size on ConversationInterface_ConversationStarted");
static_assert(offsetof(ConversationInterface_ConversationStarted, Speaker) == 0x000000, "Member 'ConversationInterface_ConversationStarted::Speaker' has a wrong offset!");
static_assert(offsetof(ConversationInterface_ConversationStarted, Guid) == 0x000008, "Member 'ConversationInterface_ConversationStarted::Guid' has a wrong offset!");
static_assert(offsetof(ConversationInterface_ConversationStarted, NodeID) == 0x000018, "Member 'ConversationInterface_ConversationStarted::NodeID' has a wrong offset!");
static_assert(offsetof(ConversationInterface_ConversationStarted, ReturnValue) == 0x00001C, "Member 'ConversationInterface_ConversationStarted::ReturnValue' has a wrong offset!");

// Function Indiana.CompanionSelectionWidget.SelectionFailed
// 0x0004 (0x0004 - 0x0000)
struct CompanionSelectionWidget_SelectionFailed final
{
public:
	int32                                         CharacterIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompanionSelectionWidget_SelectionFailed) == 0x000004, "Wrong alignment on CompanionSelectionWidget_SelectionFailed");
static_assert(sizeof(CompanionSelectionWidget_SelectionFailed) == 0x000004, "Wrong size on CompanionSelectionWidget_SelectionFailed");
static_assert(offsetof(CompanionSelectionWidget_SelectionFailed, CharacterIndex) == 0x000000, "Member 'CompanionSelectionWidget_SelectionFailed::CharacterIndex' has a wrong offset!");

// Function Indiana.CompanionSelectionWidget.SetCharacterAvailable
// 0x0008 (0x0008 - 0x0000)
struct CompanionSelectionWidget_SetCharacterAvailable final
{
public:
	int32                                         CharacterIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsable;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CompanionSelectionWidget_SetCharacterAvailable) == 0x000004, "Wrong alignment on CompanionSelectionWidget_SetCharacterAvailable");
static_assert(sizeof(CompanionSelectionWidget_SetCharacterAvailable) == 0x000008, "Wrong size on CompanionSelectionWidget_SetCharacterAvailable");
static_assert(offsetof(CompanionSelectionWidget_SetCharacterAvailable, CharacterIndex) == 0x000000, "Member 'CompanionSelectionWidget_SetCharacterAvailable::CharacterIndex' has a wrong offset!");
static_assert(offsetof(CompanionSelectionWidget_SetCharacterAvailable, bUsable) == 0x000004, "Member 'CompanionSelectionWidget_SetCharacterAvailable::bUsable' has a wrong offset!");

// Function Indiana.CompanionSelectionWidget.SetCharacterSelected
// 0x0008 (0x0008 - 0x0000)
struct CompanionSelectionWidget_SetCharacterSelected final
{
public:
	int32                                         CharacterIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSelected;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CompanionSelectionWidget_SetCharacterSelected) == 0x000004, "Wrong alignment on CompanionSelectionWidget_SetCharacterSelected");
static_assert(sizeof(CompanionSelectionWidget_SetCharacterSelected) == 0x000008, "Wrong size on CompanionSelectionWidget_SetCharacterSelected");
static_assert(offsetof(CompanionSelectionWidget_SetCharacterSelected, CharacterIndex) == 0x000000, "Member 'CompanionSelectionWidget_SetCharacterSelected::CharacterIndex' has a wrong offset!");
static_assert(offsetof(CompanionSelectionWidget_SetCharacterSelected, bSelected) == 0x000004, "Member 'CompanionSelectionWidget_SetCharacterSelected::bSelected' has a wrong offset!");

// Function Indiana.InventoryWidget.AfterSettingCurrentPage
// 0x0010 (0x0010 - 0x0000)
struct InventoryWidget_AfterSettingCurrentPage final
{
public:
	class UIndianaUserWidget*                     UserWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnimate;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanChangePage;                                    // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActivate;                                         // 0x000E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryWidget_AfterSettingCurrentPage) == 0x000008, "Wrong alignment on InventoryWidget_AfterSettingCurrentPage");
static_assert(sizeof(InventoryWidget_AfterSettingCurrentPage) == 0x000010, "Wrong size on InventoryWidget_AfterSettingCurrentPage");
static_assert(offsetof(InventoryWidget_AfterSettingCurrentPage, UserWidget) == 0x000000, "Member 'InventoryWidget_AfterSettingCurrentPage::UserWidget' has a wrong offset!");
static_assert(offsetof(InventoryWidget_AfterSettingCurrentPage, Index_0) == 0x000008, "Member 'InventoryWidget_AfterSettingCurrentPage::Index_0' has a wrong offset!");
static_assert(offsetof(InventoryWidget_AfterSettingCurrentPage, bAnimate) == 0x00000C, "Member 'InventoryWidget_AfterSettingCurrentPage::bAnimate' has a wrong offset!");
static_assert(offsetof(InventoryWidget_AfterSettingCurrentPage, bCanChangePage) == 0x00000D, "Member 'InventoryWidget_AfterSettingCurrentPage::bCanChangePage' has a wrong offset!");
static_assert(offsetof(InventoryWidget_AfterSettingCurrentPage, bActivate) == 0x00000E, "Member 'InventoryWidget_AfterSettingCurrentPage::bActivate' has a wrong offset!");

// Function Indiana.InventoryWidget.OnDragDrop_AssignDrugSlot
// 0x0008 (0x0008 - 0x0000)
struct InventoryWidget_OnDragDrop_AssignDrugSlot final
{
public:
	class UIndianaDragDropOperation*              Operation;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryWidget_OnDragDrop_AssignDrugSlot) == 0x000008, "Wrong alignment on InventoryWidget_OnDragDrop_AssignDrugSlot");
static_assert(sizeof(InventoryWidget_OnDragDrop_AssignDrugSlot) == 0x000008, "Wrong size on InventoryWidget_OnDragDrop_AssignDrugSlot");
static_assert(offsetof(InventoryWidget_OnDragDrop_AssignDrugSlot, Operation) == 0x000000, "Member 'InventoryWidget_OnDragDrop_AssignDrugSlot::Operation' has a wrong offset!");

// Function Indiana.InventoryWidget.OnDragDrop_AssignGadgetSlot
// 0x0008 (0x0008 - 0x0000)
struct InventoryWidget_OnDragDrop_AssignGadgetSlot final
{
public:
	class UIndianaDragDropOperation*              Operation;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryWidget_OnDragDrop_AssignGadgetSlot) == 0x000008, "Wrong alignment on InventoryWidget_OnDragDrop_AssignGadgetSlot");
static_assert(sizeof(InventoryWidget_OnDragDrop_AssignGadgetSlot) == 0x000008, "Wrong size on InventoryWidget_OnDragDrop_AssignGadgetSlot");
static_assert(offsetof(InventoryWidget_OnDragDrop_AssignGadgetSlot, Operation) == 0x000000, "Member 'InventoryWidget_OnDragDrop_AssignGadgetSlot::Operation' has a wrong offset!");

// Function Indiana.InventoryWidget.OnDragDrop_ClearDrugSlot
// 0x0008 (0x0008 - 0x0000)
struct InventoryWidget_OnDragDrop_ClearDrugSlot final
{
public:
	class UIndianaDragDropOperation*              Operation;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryWidget_OnDragDrop_ClearDrugSlot) == 0x000008, "Wrong alignment on InventoryWidget_OnDragDrop_ClearDrugSlot");
static_assert(sizeof(InventoryWidget_OnDragDrop_ClearDrugSlot) == 0x000008, "Wrong size on InventoryWidget_OnDragDrop_ClearDrugSlot");
static_assert(offsetof(InventoryWidget_OnDragDrop_ClearDrugSlot, Operation) == 0x000000, "Member 'InventoryWidget_OnDragDrop_ClearDrugSlot::Operation' has a wrong offset!");

// Function Indiana.InventoryWidget.OnDragDrop_ClearGadgetSlot
// 0x0008 (0x0008 - 0x0000)
struct InventoryWidget_OnDragDrop_ClearGadgetSlot final
{
public:
	class UIndianaDragDropOperation*              Operation;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryWidget_OnDragDrop_ClearGadgetSlot) == 0x000008, "Wrong alignment on InventoryWidget_OnDragDrop_ClearGadgetSlot");
static_assert(sizeof(InventoryWidget_OnDragDrop_ClearGadgetSlot) == 0x000008, "Wrong size on InventoryWidget_OnDragDrop_ClearGadgetSlot");
static_assert(offsetof(InventoryWidget_OnDragDrop_ClearGadgetSlot, Operation) == 0x000000, "Member 'InventoryWidget_OnDragDrop_ClearGadgetSlot::Operation' has a wrong offset!");

// Function Indiana.InventoryWidget.OnDragDrop_DropItem
// 0x0008 (0x0008 - 0x0000)
struct InventoryWidget_OnDragDrop_DropItem final
{
public:
	class UIndianaDragDropOperation*              Operation;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryWidget_OnDragDrop_DropItem) == 0x000008, "Wrong alignment on InventoryWidget_OnDragDrop_DropItem");
static_assert(sizeof(InventoryWidget_OnDragDrop_DropItem) == 0x000008, "Wrong size on InventoryWidget_OnDragDrop_DropItem");
static_assert(offsetof(InventoryWidget_OnDragDrop_DropItem, Operation) == 0x000000, "Member 'InventoryWidget_OnDragDrop_DropItem::Operation' has a wrong offset!");

// Function Indiana.InventoryWidget.OnDragDrop_ItemViewerArmorSwap
// 0x0008 (0x0008 - 0x0000)
struct InventoryWidget_OnDragDrop_ItemViewerArmorSwap final
{
public:
	class UIndianaDragDropOperation*              Operation;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryWidget_OnDragDrop_ItemViewerArmorSwap) == 0x000008, "Wrong alignment on InventoryWidget_OnDragDrop_ItemViewerArmorSwap");
static_assert(sizeof(InventoryWidget_OnDragDrop_ItemViewerArmorSwap) == 0x000008, "Wrong size on InventoryWidget_OnDragDrop_ItemViewerArmorSwap");
static_assert(offsetof(InventoryWidget_OnDragDrop_ItemViewerArmorSwap, Operation) == 0x000000, "Member 'InventoryWidget_OnDragDrop_ItemViewerArmorSwap::Operation' has a wrong offset!");

// Function Indiana.InventoryWidget.OnDragDrop_ItemViewerInternalSwap
// 0x0008 (0x0008 - 0x0000)
struct InventoryWidget_OnDragDrop_ItemViewerInternalSwap final
{
public:
	class UIndianaDragDropOperation*              Operation;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryWidget_OnDragDrop_ItemViewerInternalSwap) == 0x000008, "Wrong alignment on InventoryWidget_OnDragDrop_ItemViewerInternalSwap");
static_assert(sizeof(InventoryWidget_OnDragDrop_ItemViewerInternalSwap) == 0x000008, "Wrong size on InventoryWidget_OnDragDrop_ItemViewerInternalSwap");
static_assert(offsetof(InventoryWidget_OnDragDrop_ItemViewerInternalSwap, Operation) == 0x000000, "Member 'InventoryWidget_OnDragDrop_ItemViewerInternalSwap::Operation' has a wrong offset!");

// Function Indiana.InventoryWidget.OnDragDrop_ItemViewerWeaponSwap
// 0x0008 (0x0008 - 0x0000)
struct InventoryWidget_OnDragDrop_ItemViewerWeaponSwap final
{
public:
	class UIndianaDragDropOperation*              Operation;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryWidget_OnDragDrop_ItemViewerWeaponSwap) == 0x000008, "Wrong alignment on InventoryWidget_OnDragDrop_ItemViewerWeaponSwap");
static_assert(sizeof(InventoryWidget_OnDragDrop_ItemViewerWeaponSwap) == 0x000008, "Wrong size on InventoryWidget_OnDragDrop_ItemViewerWeaponSwap");
static_assert(offsetof(InventoryWidget_OnDragDrop_ItemViewerWeaponSwap, Operation) == 0x000000, "Member 'InventoryWidget_OnDragDrop_ItemViewerWeaponSwap::Operation' has a wrong offset!");

// Function Indiana.InventoryWidget.OnDragDrop_SetWeaponSlot
// 0x0008 (0x0008 - 0x0000)
struct InventoryWidget_OnDragDrop_SetWeaponSlot final
{
public:
	class UIndianaDragDropOperation*              Operation;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryWidget_OnDragDrop_SetWeaponSlot) == 0x000008, "Wrong alignment on InventoryWidget_OnDragDrop_SetWeaponSlot");
static_assert(sizeof(InventoryWidget_OnDragDrop_SetWeaponSlot) == 0x000008, "Wrong size on InventoryWidget_OnDragDrop_SetWeaponSlot");
static_assert(offsetof(InventoryWidget_OnDragDrop_SetWeaponSlot, Operation) == 0x000000, "Member 'InventoryWidget_OnDragDrop_SetWeaponSlot::Operation' has a wrong offset!");

// Function Indiana.InventoryWidget.OnDragDrop_SwapDrugSlot
// 0x0008 (0x0008 - 0x0000)
struct InventoryWidget_OnDragDrop_SwapDrugSlot final
{
public:
	class UIndianaDragDropOperation*              Operation;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryWidget_OnDragDrop_SwapDrugSlot) == 0x000008, "Wrong alignment on InventoryWidget_OnDragDrop_SwapDrugSlot");
static_assert(sizeof(InventoryWidget_OnDragDrop_SwapDrugSlot) == 0x000008, "Wrong size on InventoryWidget_OnDragDrop_SwapDrugSlot");
static_assert(offsetof(InventoryWidget_OnDragDrop_SwapDrugSlot, Operation) == 0x000000, "Member 'InventoryWidget_OnDragDrop_SwapDrugSlot::Operation' has a wrong offset!");

// Function Indiana.InventoryWidget.OnDragDrop_SwapGadgetSlot
// 0x0008 (0x0008 - 0x0000)
struct InventoryWidget_OnDragDrop_SwapGadgetSlot final
{
public:
	class UIndianaDragDropOperation*              Operation;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryWidget_OnDragDrop_SwapGadgetSlot) == 0x000008, "Wrong alignment on InventoryWidget_OnDragDrop_SwapGadgetSlot");
static_assert(sizeof(InventoryWidget_OnDragDrop_SwapGadgetSlot) == 0x000008, "Wrong size on InventoryWidget_OnDragDrop_SwapGadgetSlot");
static_assert(offsetof(InventoryWidget_OnDragDrop_SwapGadgetSlot, Operation) == 0x000000, "Member 'InventoryWidget_OnDragDrop_SwapGadgetSlot::Operation' has a wrong offset!");

// Function Indiana.InventoryWidget.OnDragDrop_SwapWeaponSlot
// 0x0008 (0x0008 - 0x0000)
struct InventoryWidget_OnDragDrop_SwapWeaponSlot final
{
public:
	class UIndianaDragDropOperation*              Operation;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryWidget_OnDragDrop_SwapWeaponSlot) == 0x000008, "Wrong alignment on InventoryWidget_OnDragDrop_SwapWeaponSlot");
static_assert(sizeof(InventoryWidget_OnDragDrop_SwapWeaponSlot) == 0x000008, "Wrong size on InventoryWidget_OnDragDrop_SwapWeaponSlot");
static_assert(offsetof(InventoryWidget_OnDragDrop_SwapWeaponSlot, Operation) == 0x000000, "Member 'InventoryWidget_OnDragDrop_SwapWeaponSlot::Operation' has a wrong offset!");

// Function Indiana.InventoryWidget.OnItemAdded
// 0x0010 (0x0010 - 0x0000)
struct InventoryWidget_OnItemAdded final
{
public:
	struct FItemStack                             ItemStack;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryWidget_OnItemAdded) == 0x000008, "Wrong alignment on InventoryWidget_OnItemAdded");
static_assert(sizeof(InventoryWidget_OnItemAdded) == 0x000010, "Wrong size on InventoryWidget_OnItemAdded");
static_assert(offsetof(InventoryWidget_OnItemAdded, ItemStack) == 0x000000, "Member 'InventoryWidget_OnItemAdded::ItemStack' has a wrong offset!");

// Function Indiana.InventoryWidget.OnItemCountChanged
// 0x0010 (0x0010 - 0x0000)
struct InventoryWidget_OnItemCountChanged final
{
public:
	struct FItemStack                             ItemStack;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryWidget_OnItemCountChanged) == 0x000008, "Wrong alignment on InventoryWidget_OnItemCountChanged");
static_assert(sizeof(InventoryWidget_OnItemCountChanged) == 0x000010, "Wrong size on InventoryWidget_OnItemCountChanged");
static_assert(offsetof(InventoryWidget_OnItemCountChanged, ItemStack) == 0x000000, "Member 'InventoryWidget_OnItemCountChanged::ItemStack' has a wrong offset!");

// Function Indiana.InventoryWidget.OnItemJunkStatusChanged
// 0x0010 (0x0010 - 0x0000)
struct InventoryWidget_OnItemJunkStatusChanged final
{
public:
	struct FItemStack                             ItemStack;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryWidget_OnItemJunkStatusChanged) == 0x000008, "Wrong alignment on InventoryWidget_OnItemJunkStatusChanged");
static_assert(sizeof(InventoryWidget_OnItemJunkStatusChanged) == 0x000010, "Wrong size on InventoryWidget_OnItemJunkStatusChanged");
static_assert(offsetof(InventoryWidget_OnItemJunkStatusChanged, ItemStack) == 0x000000, "Member 'InventoryWidget_OnItemJunkStatusChanged::ItemStack' has a wrong offset!");

// Function Indiana.InventoryWidget.OnItemRemoved
// 0x0010 (0x0010 - 0x0000)
struct InventoryWidget_OnItemRemoved final
{
public:
	struct FItemStack                             ItemStack;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryWidget_OnItemRemoved) == 0x000008, "Wrong alignment on InventoryWidget_OnItemRemoved");
static_assert(sizeof(InventoryWidget_OnItemRemoved) == 0x000010, "Wrong size on InventoryWidget_OnItemRemoved");
static_assert(offsetof(InventoryWidget_OnItemRemoved, ItemStack) == 0x000000, "Member 'InventoryWidget_OnItemRemoved::ItemStack' has a wrong offset!");

// Function Indiana.InventoryWidget.OnScrollingPageChangeComplete
// 0x0010 (0x0010 - 0x0000)
struct InventoryWidget_OnScrollingPageChangeComplete final
{
public:
	class UIndianaUserWidget*                     UserWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryWidget_OnScrollingPageChangeComplete) == 0x000008, "Wrong alignment on InventoryWidget_OnScrollingPageChangeComplete");
static_assert(sizeof(InventoryWidget_OnScrollingPageChangeComplete) == 0x000010, "Wrong size on InventoryWidget_OnScrollingPageChangeComplete");
static_assert(offsetof(InventoryWidget_OnScrollingPageChangeComplete, UserWidget) == 0x000000, "Member 'InventoryWidget_OnScrollingPageChangeComplete::UserWidget' has a wrong offset!");
static_assert(offsetof(InventoryWidget_OnScrollingPageChangeComplete, Index_0) == 0x000008, "Member 'InventoryWidget_OnScrollingPageChangeComplete::Index_0' has a wrong offset!");

// Function Indiana.InventoryWidget.OnScrollingPageChangeStart
// 0x0010 (0x0010 - 0x0000)
struct InventoryWidget_OnScrollingPageChangeStart final
{
public:
	class UIndianaUserWidget*                     UserWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryWidget_OnScrollingPageChangeStart) == 0x000008, "Wrong alignment on InventoryWidget_OnScrollingPageChangeStart");
static_assert(sizeof(InventoryWidget_OnScrollingPageChangeStart) == 0x000010, "Wrong size on InventoryWidget_OnScrollingPageChangeStart");
static_assert(offsetof(InventoryWidget_OnScrollingPageChangeStart, UserWidget) == 0x000000, "Member 'InventoryWidget_OnScrollingPageChangeStart::UserWidget' has a wrong offset!");
static_assert(offsetof(InventoryWidget_OnScrollingPageChangeStart, Index_0) == 0x000008, "Member 'InventoryWidget_OnScrollingPageChangeStart::Index_0' has a wrong offset!");

// Function Indiana.InventoryWidget.OnWeaponStartEquip
// 0x0008 (0x0008 - 0x0000)
struct InventoryWidget_OnWeaponStartEquip final
{
public:
	class UWeapon*                                Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryWidget_OnWeaponStartEquip) == 0x000008, "Wrong alignment on InventoryWidget_OnWeaponStartEquip");
static_assert(sizeof(InventoryWidget_OnWeaponStartEquip) == 0x000008, "Wrong size on InventoryWidget_OnWeaponStartEquip");
static_assert(offsetof(InventoryWidget_OnWeaponStartEquip, Weapon) == 0x000000, "Member 'InventoryWidget_OnWeaponStartEquip::Weapon' has a wrong offset!");

// Function Indiana.CompanionCommandComponent.OnCalledShotCameraStep
// 0x0010 (0x0010 - 0x0000)
struct CompanionCommandComponent_OnCalledShotCameraStep final
{
public:
	class AActor*                                 Attacker;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECalledShotCameraStep                         OldCameraStep;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECalledShotCameraStep                         NewCameraStep;                                     // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCloseRange;                                       // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CompanionCommandComponent_OnCalledShotCameraStep) == 0x000008, "Wrong alignment on CompanionCommandComponent_OnCalledShotCameraStep");
static_assert(sizeof(CompanionCommandComponent_OnCalledShotCameraStep) == 0x000010, "Wrong size on CompanionCommandComponent_OnCalledShotCameraStep");
static_assert(offsetof(CompanionCommandComponent_OnCalledShotCameraStep, Attacker) == 0x000000, "Member 'CompanionCommandComponent_OnCalledShotCameraStep::Attacker' has a wrong offset!");
static_assert(offsetof(CompanionCommandComponent_OnCalledShotCameraStep, OldCameraStep) == 0x000008, "Member 'CompanionCommandComponent_OnCalledShotCameraStep::OldCameraStep' has a wrong offset!");
static_assert(offsetof(CompanionCommandComponent_OnCalledShotCameraStep, NewCameraStep) == 0x000009, "Member 'CompanionCommandComponent_OnCalledShotCameraStep::NewCameraStep' has a wrong offset!");
static_assert(offsetof(CompanionCommandComponent_OnCalledShotCameraStep, bCloseRange) == 0x00000A, "Member 'CompanionCommandComponent_OnCalledShotCameraStep::bCloseRange' has a wrong offset!");

// Function Indiana.CompanionCommandComponent.OnStatUpdated
// 0x0008 (0x0008 - 0x0000)
struct CompanionCommandComponent_OnStatUpdated final
{
public:
	const class URpgStat*                         Stat;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompanionCommandComponent_OnStatUpdated) == 0x000008, "Wrong alignment on CompanionCommandComponent_OnStatUpdated");
static_assert(sizeof(CompanionCommandComponent_OnStatUpdated) == 0x000008, "Wrong size on CompanionCommandComponent_OnStatUpdated");
static_assert(offsetof(CompanionCommandComponent_OnStatUpdated, Stat) == 0x000000, "Member 'CompanionCommandComponent_OnStatUpdated::Stat' has a wrong offset!");

// Function Indiana.Switch.CycleNextState
// 0x0008 (0x0008 - 0x0000)
struct Switch_CycleNextState final
{
public:
	class AActor*                                 Initiator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Switch_CycleNextState) == 0x000008, "Wrong alignment on Switch_CycleNextState");
static_assert(sizeof(Switch_CycleNextState) == 0x000008, "Wrong size on Switch_CycleNextState");
static_assert(offsetof(Switch_CycleNextState, Initiator) == 0x000000, "Member 'Switch_CycleNextState::Initiator' has a wrong offset!");

// Function Indiana.Switch.SetCurrentState
// 0x0010 (0x0010 - 0x0000)
struct Switch_SetCurrentState final
{
public:
	int32                                         NewState;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Initiator;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Switch_SetCurrentState) == 0x000008, "Wrong alignment on Switch_SetCurrentState");
static_assert(sizeof(Switch_SetCurrentState) == 0x000010, "Wrong size on Switch_SetCurrentState");
static_assert(offsetof(Switch_SetCurrentState, NewState) == 0x000000, "Member 'Switch_SetCurrentState::NewState' has a wrong offset!");
static_assert(offsetof(Switch_SetCurrentState, Initiator) == 0x000008, "Member 'Switch_SetCurrentState::Initiator' has a wrong offset!");

// Function Indiana.Switch.GetCurrentState
// 0x0004 (0x0004 - 0x0000)
struct Switch_GetCurrentState final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Switch_GetCurrentState) == 0x000004, "Wrong alignment on Switch_GetCurrentState");
static_assert(sizeof(Switch_GetCurrentState) == 0x000004, "Wrong size on Switch_GetCurrentState");
static_assert(offsetof(Switch_GetCurrentState, ReturnValue) == 0x000000, "Member 'Switch_GetCurrentState::ReturnValue' has a wrong offset!");

// Function Indiana.ComputerTerminalAudioComponent.Play
// 0x0001 (0x0001 - 0x0000)
struct ComputerTerminalAudioComponent_Play final
{
public:
	EComputerTerminalEventType                    Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ComputerTerminalAudioComponent_Play) == 0x000001, "Wrong alignment on ComputerTerminalAudioComponent_Play");
static_assert(sizeof(ComputerTerminalAudioComponent_Play) == 0x000001, "Wrong size on ComputerTerminalAudioComponent_Play");
static_assert(offsetof(ComputerTerminalAudioComponent_Play, Type) == 0x000000, "Member 'ComputerTerminalAudioComponent_Play::Type' has a wrong offset!");

// Function Indiana.ComputerTerminalAudioComponent.Stop
// 0x0001 (0x0001 - 0x0000)
struct ComputerTerminalAudioComponent_Stop final
{
public:
	EComputerTerminalEventType                    Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ComputerTerminalAudioComponent_Stop) == 0x000001, "Wrong alignment on ComputerTerminalAudioComponent_Stop");
static_assert(sizeof(ComputerTerminalAudioComponent_Stop) == 0x000001, "Wrong size on ComputerTerminalAudioComponent_Stop");
static_assert(offsetof(ComputerTerminalAudioComponent_Stop, Type) == 0x000000, "Member 'ComputerTerminalAudioComponent_Stop::Type' has a wrong offset!");

// Function Indiana.BTTask_Disable.OnDisableFinished
// 0x0008 (0x0008 - 0x0000)
struct BTTask_Disable_OnDisableFinished final
{
public:
	class UStatusEffect*                          StatusEffect;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTTask_Disable_OnDisableFinished) == 0x000008, "Wrong alignment on BTTask_Disable_OnDisableFinished");
static_assert(sizeof(BTTask_Disable_OnDisableFinished) == 0x000008, "Wrong size on BTTask_Disable_OnDisableFinished");
static_assert(offsetof(BTTask_Disable_OnDisableFinished, StatusEffect) == 0x000000, "Member 'BTTask_Disable_OnDisableFinished::StatusEffect' has a wrong offset!");

// Function Indiana.BTTask_Disable.OnFreezeComplete
// 0x0008 (0x0008 - 0x0000)
struct BTTask_Disable_OnFreezeComplete final
{
public:
	class UStatusEffect*                          StatusEffect;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTTask_Disable_OnFreezeComplete) == 0x000008, "Wrong alignment on BTTask_Disable_OnFreezeComplete");
static_assert(sizeof(BTTask_Disable_OnFreezeComplete) == 0x000008, "Wrong size on BTTask_Disable_OnFreezeComplete");
static_assert(offsetof(BTTask_Disable_OnFreezeComplete, StatusEffect) == 0x000000, "Member 'BTTask_Disable_OnFreezeComplete::StatusEffect' has a wrong offset!");

// Function Indiana.BTTask_Disable.OnIdleFinished
// 0x0008 (0x0008 - 0x0000)
struct BTTask_Disable_OnIdleFinished final
{
public:
	class UStatusEffect*                          StatusEffect;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTTask_Disable_OnIdleFinished) == 0x000008, "Wrong alignment on BTTask_Disable_OnIdleFinished");
static_assert(sizeof(BTTask_Disable_OnIdleFinished) == 0x000008, "Wrong size on BTTask_Disable_OnIdleFinished");
static_assert(offsetof(BTTask_Disable_OnIdleFinished, StatusEffect) == 0x000000, "Member 'BTTask_Disable_OnIdleFinished::StatusEffect' has a wrong offset!");

// Function Indiana.BTTask_Disable.OnMontageBlendingOut
// 0x0010 (0x0010 - 0x0000)
struct BTTask_Disable_OnMontageBlendingOut final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BTTask_Disable_OnMontageBlendingOut) == 0x000008, "Wrong alignment on BTTask_Disable_OnMontageBlendingOut");
static_assert(sizeof(BTTask_Disable_OnMontageBlendingOut) == 0x000010, "Wrong size on BTTask_Disable_OnMontageBlendingOut");
static_assert(offsetof(BTTask_Disable_OnMontageBlendingOut, Montage) == 0x000000, "Member 'BTTask_Disable_OnMontageBlendingOut::Montage' has a wrong offset!");
static_assert(offsetof(BTTask_Disable_OnMontageBlendingOut, bInterrupted) == 0x000008, "Member 'BTTask_Disable_OnMontageBlendingOut::bInterrupted' has a wrong offset!");

// Function Indiana.BTTask_Disable.OnPushComplete
// 0x0008 (0x0008 - 0x0000)
struct BTTask_Disable_OnPushComplete final
{
public:
	class UStatusEffect*                          StatusEffect;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTTask_Disable_OnPushComplete) == 0x000008, "Wrong alignment on BTTask_Disable_OnPushComplete");
static_assert(sizeof(BTTask_Disable_OnPushComplete) == 0x000008, "Wrong size on BTTask_Disable_OnPushComplete");
static_assert(offsetof(BTTask_Disable_OnPushComplete, StatusEffect) == 0x000000, "Member 'BTTask_Disable_OnPushComplete::StatusEffect' has a wrong offset!");

// Function Indiana.BTTask_Disable.OnRagdollComplete
// 0x0008 (0x0008 - 0x0000)
struct BTTask_Disable_OnRagdollComplete final
{
public:
	class UStatusEffect*                          StatusEffect;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTTask_Disable_OnRagdollComplete) == 0x000008, "Wrong alignment on BTTask_Disable_OnRagdollComplete");
static_assert(sizeof(BTTask_Disable_OnRagdollComplete) == 0x000008, "Wrong size on BTTask_Disable_OnRagdollComplete");
static_assert(offsetof(BTTask_Disable_OnRagdollComplete, StatusEffect) == 0x000000, "Member 'BTTask_Disable_OnRagdollComplete::StatusEffect' has a wrong offset!");

// Function Indiana.IndianaCharacterDummy.CopyFromCharacter
// 0x0008 (0x0008 - 0x0000)
struct IndianaCharacterDummy_CopyFromCharacter final
{
public:
	class AIndianaCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaCharacterDummy_CopyFromCharacter) == 0x000008, "Wrong alignment on IndianaCharacterDummy_CopyFromCharacter");
static_assert(sizeof(IndianaCharacterDummy_CopyFromCharacter) == 0x000008, "Wrong size on IndianaCharacterDummy_CopyFromCharacter");
static_assert(offsetof(IndianaCharacterDummy_CopyFromCharacter, Character) == 0x000000, "Member 'IndianaCharacterDummy_CopyFromCharacter::Character' has a wrong offset!");

// Function Indiana.IndianaCharacterDummy.OnWeaponEndEquip
// 0x0008 (0x0008 - 0x0000)
struct IndianaCharacterDummy_OnWeaponEndEquip final
{
public:
	class UWeapon*                                Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaCharacterDummy_OnWeaponEndEquip) == 0x000008, "Wrong alignment on IndianaCharacterDummy_OnWeaponEndEquip");
static_assert(sizeof(IndianaCharacterDummy_OnWeaponEndEquip) == 0x000008, "Wrong size on IndianaCharacterDummy_OnWeaponEndEquip");
static_assert(offsetof(IndianaCharacterDummy_OnWeaponEndEquip, Weapon) == 0x000000, "Member 'IndianaCharacterDummy_OnWeaponEndEquip::Weapon' has a wrong offset!");

// Function Indiana.IndianaCharacterDummy.SetUISelectionState
// 0x0001 (0x0001 - 0x0000)
struct IndianaCharacterDummy_SetUISelectionState final
{
public:
	EUISelectionState                             InSelectionState;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaCharacterDummy_SetUISelectionState) == 0x000001, "Wrong alignment on IndianaCharacterDummy_SetUISelectionState");
static_assert(sizeof(IndianaCharacterDummy_SetUISelectionState) == 0x000001, "Wrong size on IndianaCharacterDummy_SetUISelectionState");
static_assert(offsetof(IndianaCharacterDummy_SetUISelectionState, InSelectionState) == 0x000000, "Member 'IndianaCharacterDummy_SetUISelectionState::InSelectionState' has a wrong offset!");

// Function Indiana.CheckBoxWidget.UpdateCheckBoxSize
// 0x0004 (0x0004 - 0x0000)
struct CheckBoxWidget_UpdateCheckBoxSize final
{
public:
	int32                                         FontSizeModifier;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CheckBoxWidget_UpdateCheckBoxSize) == 0x000004, "Wrong alignment on CheckBoxWidget_UpdateCheckBoxSize");
static_assert(sizeof(CheckBoxWidget_UpdateCheckBoxSize) == 0x000004, "Wrong size on CheckBoxWidget_UpdateCheckBoxSize");
static_assert(offsetof(CheckBoxWidget_UpdateCheckBoxSize, FontSizeModifier) == 0x000000, "Member 'CheckBoxWidget_UpdateCheckBoxSize::FontSizeModifier' has a wrong offset!");

// Function Indiana.ButtonBase.GetFocusedBrush
// 0x0088 (0x0088 - 0x0000)
struct ButtonBase_GetFocusedBrush final
{
public:
	struct FSlateBrush                            ReturnValue;                                       // 0x0000(0x0088)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ButtonBase_GetFocusedBrush) == 0x000008, "Wrong alignment on ButtonBase_GetFocusedBrush");
static_assert(sizeof(ButtonBase_GetFocusedBrush) == 0x000088, "Wrong size on ButtonBase_GetFocusedBrush");
static_assert(offsetof(ButtonBase_GetFocusedBrush, ReturnValue) == 0x000000, "Member 'ButtonBase_GetFocusedBrush::ReturnValue' has a wrong offset!");

// Function Indiana.ButtonBase.GetHoveredBrush
// 0x0088 (0x0088 - 0x0000)
struct ButtonBase_GetHoveredBrush final
{
public:
	struct FSlateBrush                            ReturnValue;                                       // 0x0000(0x0088)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ButtonBase_GetHoveredBrush) == 0x000008, "Wrong alignment on ButtonBase_GetHoveredBrush");
static_assert(sizeof(ButtonBase_GetHoveredBrush) == 0x000088, "Wrong size on ButtonBase_GetHoveredBrush");
static_assert(offsetof(ButtonBase_GetHoveredBrush, ReturnValue) == 0x000000, "Member 'ButtonBase_GetHoveredBrush::ReturnValue' has a wrong offset!");

// Function Indiana.ButtonBase.GetNormalBrush
// 0x0088 (0x0088 - 0x0000)
struct ButtonBase_GetNormalBrush final
{
public:
	struct FSlateBrush                            ReturnValue;                                       // 0x0000(0x0088)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ButtonBase_GetNormalBrush) == 0x000008, "Wrong alignment on ButtonBase_GetNormalBrush");
static_assert(sizeof(ButtonBase_GetNormalBrush) == 0x000088, "Wrong size on ButtonBase_GetNormalBrush");
static_assert(offsetof(ButtonBase_GetNormalBrush, ReturnValue) == 0x000000, "Member 'ButtonBase_GetNormalBrush::ReturnValue' has a wrong offset!");

// Function Indiana.ButtonBase.GetPressedBrush
// 0x0088 (0x0088 - 0x0000)
struct ButtonBase_GetPressedBrush final
{
public:
	struct FSlateBrush                            ReturnValue;                                       // 0x0000(0x0088)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ButtonBase_GetPressedBrush) == 0x000008, "Wrong alignment on ButtonBase_GetPressedBrush");
static_assert(sizeof(ButtonBase_GetPressedBrush) == 0x000088, "Wrong size on ButtonBase_GetPressedBrush");
static_assert(offsetof(ButtonBase_GetPressedBrush, ReturnValue) == 0x000000, "Member 'ButtonBase_GetPressedBrush::ReturnValue' has a wrong offset!");

// Function Indiana.ButtonBase.GetSelectedFocusedBrush
// 0x0088 (0x0088 - 0x0000)
struct ButtonBase_GetSelectedFocusedBrush final
{
public:
	struct FSlateBrush                            ReturnValue;                                       // 0x0000(0x0088)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ButtonBase_GetSelectedFocusedBrush) == 0x000008, "Wrong alignment on ButtonBase_GetSelectedFocusedBrush");
static_assert(sizeof(ButtonBase_GetSelectedFocusedBrush) == 0x000088, "Wrong size on ButtonBase_GetSelectedFocusedBrush");
static_assert(offsetof(ButtonBase_GetSelectedFocusedBrush, ReturnValue) == 0x000000, "Member 'ButtonBase_GetSelectedFocusedBrush::ReturnValue' has a wrong offset!");

// Function Indiana.ButtonBase.GetSelectedHoveredBrush
// 0x0088 (0x0088 - 0x0000)
struct ButtonBase_GetSelectedHoveredBrush final
{
public:
	struct FSlateBrush                            ReturnValue;                                       // 0x0000(0x0088)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ButtonBase_GetSelectedHoveredBrush) == 0x000008, "Wrong alignment on ButtonBase_GetSelectedHoveredBrush");
static_assert(sizeof(ButtonBase_GetSelectedHoveredBrush) == 0x000088, "Wrong size on ButtonBase_GetSelectedHoveredBrush");
static_assert(offsetof(ButtonBase_GetSelectedHoveredBrush, ReturnValue) == 0x000000, "Member 'ButtonBase_GetSelectedHoveredBrush::ReturnValue' has a wrong offset!");

// Function Indiana.ButtonBase.GetSelectedNormalBrush
// 0x0088 (0x0088 - 0x0000)
struct ButtonBase_GetSelectedNormalBrush final
{
public:
	struct FSlateBrush                            ReturnValue;                                       // 0x0000(0x0088)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ButtonBase_GetSelectedNormalBrush) == 0x000008, "Wrong alignment on ButtonBase_GetSelectedNormalBrush");
static_assert(sizeof(ButtonBase_GetSelectedNormalBrush) == 0x000088, "Wrong size on ButtonBase_GetSelectedNormalBrush");
static_assert(offsetof(ButtonBase_GetSelectedNormalBrush, ReturnValue) == 0x000000, "Member 'ButtonBase_GetSelectedNormalBrush::ReturnValue' has a wrong offset!");

// Function Indiana.ButtonBase.GetSelectedPressedBrush
// 0x0088 (0x0088 - 0x0000)
struct ButtonBase_GetSelectedPressedBrush final
{
public:
	struct FSlateBrush                            ReturnValue;                                       // 0x0000(0x0088)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ButtonBase_GetSelectedPressedBrush) == 0x000008, "Wrong alignment on ButtonBase_GetSelectedPressedBrush");
static_assert(sizeof(ButtonBase_GetSelectedPressedBrush) == 0x000088, "Wrong size on ButtonBase_GetSelectedPressedBrush");
static_assert(offsetof(ButtonBase_GetSelectedPressedBrush, ReturnValue) == 0x000000, "Member 'ButtonBase_GetSelectedPressedBrush::ReturnValue' has a wrong offset!");

// Function Indiana.ButtonBase.SetAdvancedHitAlpha
// 0x0004 (0x0004 - 0x0000)
struct ButtonBase_SetAdvancedHitAlpha final
{
public:
	int32                                         InAlpha;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ButtonBase_SetAdvancedHitAlpha) == 0x000004, "Wrong alignment on ButtonBase_SetAdvancedHitAlpha");
static_assert(sizeof(ButtonBase_SetAdvancedHitAlpha) == 0x000004, "Wrong size on ButtonBase_SetAdvancedHitAlpha");
static_assert(offsetof(ButtonBase_SetAdvancedHitAlpha, InAlpha) == 0x000000, "Member 'ButtonBase_SetAdvancedHitAlpha::InAlpha' has a wrong offset!");

// Function Indiana.ButtonBase.SetAdvancedHitTexture
// 0x0008 (0x0008 - 0x0000)
struct ButtonBase_SetAdvancedHitTexture final
{
public:
	class UTexture2D*                             InTexture;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ButtonBase_SetAdvancedHitTexture) == 0x000008, "Wrong alignment on ButtonBase_SetAdvancedHitTexture");
static_assert(sizeof(ButtonBase_SetAdvancedHitTexture) == 0x000008, "Wrong size on ButtonBase_SetAdvancedHitTexture");
static_assert(offsetof(ButtonBase_SetAdvancedHitTexture, InTexture) == 0x000000, "Member 'ButtonBase_SetAdvancedHitTexture::InTexture' has a wrong offset!");

// Function Indiana.ButtonBase.SetAllowSelectionStateChange
// 0x0001 (0x0001 - 0x0000)
struct ButtonBase_SetAllowSelectionStateChange final
{
public:
	bool                                          bAllowChange;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ButtonBase_SetAllowSelectionStateChange) == 0x000001, "Wrong alignment on ButtonBase_SetAllowSelectionStateChange");
static_assert(sizeof(ButtonBase_SetAllowSelectionStateChange) == 0x000001, "Wrong size on ButtonBase_SetAllowSelectionStateChange");
static_assert(offsetof(ButtonBase_SetAllowSelectionStateChange, bAllowChange) == 0x000000, "Member 'ButtonBase_SetAllowSelectionStateChange::bAllowChange' has a wrong offset!");

// Function Indiana.ButtonBase.SetButtonColor
// 0x0010 (0x0010 - 0x0000)
struct ButtonBase_SetButtonColor final
{
public:
	struct FLinearColor                           InBackgroundColor;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ButtonBase_SetButtonColor) == 0x000004, "Wrong alignment on ButtonBase_SetButtonColor");
static_assert(sizeof(ButtonBase_SetButtonColor) == 0x000010, "Wrong size on ButtonBase_SetButtonColor");
static_assert(offsetof(ButtonBase_SetButtonColor, InBackgroundColor) == 0x000000, "Member 'ButtonBase_SetButtonColor::InBackgroundColor' has a wrong offset!");

// Function Indiana.ButtonBase.SetButtonType
// 0x0001 (0x0001 - 0x0000)
struct ButtonBase_SetButtonType final
{
public:
	EButtonType                                   TypeIn;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ButtonBase_SetButtonType) == 0x000001, "Wrong alignment on ButtonBase_SetButtonType");
static_assert(sizeof(ButtonBase_SetButtonType) == 0x000001, "Wrong size on ButtonBase_SetButtonType");
static_assert(offsetof(ButtonBase_SetButtonType, TypeIn) == 0x000000, "Member 'ButtonBase_SetButtonType::TypeIn' has a wrong offset!");

// Function Indiana.ButtonBase.SetContentColor
// 0x0010 (0x0010 - 0x0000)
struct ButtonBase_SetContentColor final
{
public:
	struct FLinearColor                           InColorAndOpacity;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ButtonBase_SetContentColor) == 0x000004, "Wrong alignment on ButtonBase_SetContentColor");
static_assert(sizeof(ButtonBase_SetContentColor) == 0x000010, "Wrong size on ButtonBase_SetContentColor");
static_assert(offsetof(ButtonBase_SetContentColor, InColorAndOpacity) == 0x000000, "Member 'ButtonBase_SetContentColor::InColorAndOpacity' has a wrong offset!");

// Function Indiana.ButtonBase.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct ButtonBase_SetEnabled final
{
public:
	bool                                          bInEnabled;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ButtonBase_SetEnabled) == 0x000001, "Wrong alignment on ButtonBase_SetEnabled");
static_assert(sizeof(ButtonBase_SetEnabled) == 0x000001, "Wrong size on ButtonBase_SetEnabled");
static_assert(offsetof(ButtonBase_SetEnabled, bInEnabled) == 0x000000, "Member 'ButtonBase_SetEnabled::bInEnabled' has a wrong offset!");

// Function Indiana.ButtonBase.SetFocusable
// 0x0001 (0x0001 - 0x0000)
struct ButtonBase_SetFocusable final
{
public:
	bool                                          bFocused;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ButtonBase_SetFocusable) == 0x000001, "Wrong alignment on ButtonBase_SetFocusable");
static_assert(sizeof(ButtonBase_SetFocusable) == 0x000001, "Wrong size on ButtonBase_SetFocusable");
static_assert(offsetof(ButtonBase_SetFocusable, bFocused) == 0x000000, "Member 'ButtonBase_SetFocusable::bFocused' has a wrong offset!");

// Function Indiana.ButtonBase.SetFocusedBrush
// 0x0088 (0x0088 - 0x0000)
struct ButtonBase_SetFocusedBrush final
{
public:
	struct FSlateBrush                            InBrush;                                           // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ButtonBase_SetFocusedBrush) == 0x000008, "Wrong alignment on ButtonBase_SetFocusedBrush");
static_assert(sizeof(ButtonBase_SetFocusedBrush) == 0x000088, "Wrong size on ButtonBase_SetFocusedBrush");
static_assert(offsetof(ButtonBase_SetFocusedBrush, InBrush) == 0x000000, "Member 'ButtonBase_SetFocusedBrush::InBrush' has a wrong offset!");

// Function Indiana.ButtonBase.SetHoveredBrush
// 0x0088 (0x0088 - 0x0000)
struct ButtonBase_SetHoveredBrush final
{
public:
	struct FSlateBrush                            InBrush;                                           // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ButtonBase_SetHoveredBrush) == 0x000008, "Wrong alignment on ButtonBase_SetHoveredBrush");
static_assert(sizeof(ButtonBase_SetHoveredBrush) == 0x000088, "Wrong size on ButtonBase_SetHoveredBrush");
static_assert(offsetof(ButtonBase_SetHoveredBrush, InBrush) == 0x000000, "Member 'ButtonBase_SetHoveredBrush::InBrush' has a wrong offset!");

// Function Indiana.ButtonBase.SetNormalBrush
// 0x0088 (0x0088 - 0x0000)
struct ButtonBase_SetNormalBrush final
{
public:
	struct FSlateBrush                            InBrush;                                           // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ButtonBase_SetNormalBrush) == 0x000008, "Wrong alignment on ButtonBase_SetNormalBrush");
static_assert(sizeof(ButtonBase_SetNormalBrush) == 0x000088, "Wrong size on ButtonBase_SetNormalBrush");
static_assert(offsetof(ButtonBase_SetNormalBrush, InBrush) == 0x000000, "Member 'ButtonBase_SetNormalBrush::InBrush' has a wrong offset!");

// Function Indiana.ButtonBase.SetPressedBrush
// 0x0088 (0x0088 - 0x0000)
struct ButtonBase_SetPressedBrush final
{
public:
	struct FSlateBrush                            InBrush;                                           // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ButtonBase_SetPressedBrush) == 0x000008, "Wrong alignment on ButtonBase_SetPressedBrush");
static_assert(sizeof(ButtonBase_SetPressedBrush) == 0x000088, "Wrong size on ButtonBase_SetPressedBrush");
static_assert(offsetof(ButtonBase_SetPressedBrush, InBrush) == 0x000000, "Member 'ButtonBase_SetPressedBrush::InBrush' has a wrong offset!");

// Function Indiana.ButtonBase.SetSelected
// 0x0002 (0x0002 - 0x0000)
struct ButtonBase_SetSelected final
{
public:
	bool                                          bSelected_0;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFocusCause                                   Cause;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ButtonBase_SetSelected) == 0x000001, "Wrong alignment on ButtonBase_SetSelected");
static_assert(sizeof(ButtonBase_SetSelected) == 0x000002, "Wrong size on ButtonBase_SetSelected");
static_assert(offsetof(ButtonBase_SetSelected, bSelected_0) == 0x000000, "Member 'ButtonBase_SetSelected::bSelected_0' has a wrong offset!");
static_assert(offsetof(ButtonBase_SetSelected, Cause) == 0x000001, "Member 'ButtonBase_SetSelected::Cause' has a wrong offset!");

// Function Indiana.ButtonBase.SetSelectedFocusedBrush
// 0x0088 (0x0088 - 0x0000)
struct ButtonBase_SetSelectedFocusedBrush final
{
public:
	struct FSlateBrush                            InBrush;                                           // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ButtonBase_SetSelectedFocusedBrush) == 0x000008, "Wrong alignment on ButtonBase_SetSelectedFocusedBrush");
static_assert(sizeof(ButtonBase_SetSelectedFocusedBrush) == 0x000088, "Wrong size on ButtonBase_SetSelectedFocusedBrush");
static_assert(offsetof(ButtonBase_SetSelectedFocusedBrush, InBrush) == 0x000000, "Member 'ButtonBase_SetSelectedFocusedBrush::InBrush' has a wrong offset!");

// Function Indiana.ButtonBase.SetSelectedHoveredBrush
// 0x0088 (0x0088 - 0x0000)
struct ButtonBase_SetSelectedHoveredBrush final
{
public:
	struct FSlateBrush                            InBrush;                                           // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ButtonBase_SetSelectedHoveredBrush) == 0x000008, "Wrong alignment on ButtonBase_SetSelectedHoveredBrush");
static_assert(sizeof(ButtonBase_SetSelectedHoveredBrush) == 0x000088, "Wrong size on ButtonBase_SetSelectedHoveredBrush");
static_assert(offsetof(ButtonBase_SetSelectedHoveredBrush, InBrush) == 0x000000, "Member 'ButtonBase_SetSelectedHoveredBrush::InBrush' has a wrong offset!");

// Function Indiana.ButtonBase.SetSelectedNormalBrush
// 0x0088 (0x0088 - 0x0000)
struct ButtonBase_SetSelectedNormalBrush final
{
public:
	struct FSlateBrush                            InBrush;                                           // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ButtonBase_SetSelectedNormalBrush) == 0x000008, "Wrong alignment on ButtonBase_SetSelectedNormalBrush");
static_assert(sizeof(ButtonBase_SetSelectedNormalBrush) == 0x000088, "Wrong size on ButtonBase_SetSelectedNormalBrush");
static_assert(offsetof(ButtonBase_SetSelectedNormalBrush, InBrush) == 0x000000, "Member 'ButtonBase_SetSelectedNormalBrush::InBrush' has a wrong offset!");

// Function Indiana.ButtonBase.SetSelectedPressedBrush
// 0x0088 (0x0088 - 0x0000)
struct ButtonBase_SetSelectedPressedBrush final
{
public:
	struct FSlateBrush                            InBrush;                                           // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ButtonBase_SetSelectedPressedBrush) == 0x000008, "Wrong alignment on ButtonBase_SetSelectedPressedBrush");
static_assert(sizeof(ButtonBase_SetSelectedPressedBrush) == 0x000088, "Wrong size on ButtonBase_SetSelectedPressedBrush");
static_assert(offsetof(ButtonBase_SetSelectedPressedBrush, InBrush) == 0x000000, "Member 'ButtonBase_SetSelectedPressedBrush::InBrush' has a wrong offset!");

// Function Indiana.ButtonBase.AllowsSelectionStateChange
// 0x0001 (0x0001 - 0x0000)
struct ButtonBase_AllowsSelectionStateChange final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ButtonBase_AllowsSelectionStateChange) == 0x000001, "Wrong alignment on ButtonBase_AllowsSelectionStateChange");
static_assert(sizeof(ButtonBase_AllowsSelectionStateChange) == 0x000001, "Wrong size on ButtonBase_AllowsSelectionStateChange");
static_assert(offsetof(ButtonBase_AllowsSelectionStateChange, ReturnValue) == 0x000000, "Member 'ButtonBase_AllowsSelectionStateChange::ReturnValue' has a wrong offset!");

// Function Indiana.ButtonBase.GetButtonType
// 0x0001 (0x0001 - 0x0000)
struct ButtonBase_GetButtonType final
{
public:
	EButtonType                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ButtonBase_GetButtonType) == 0x000001, "Wrong alignment on ButtonBase_GetButtonType");
static_assert(sizeof(ButtonBase_GetButtonType) == 0x000001, "Wrong size on ButtonBase_GetButtonType");
static_assert(offsetof(ButtonBase_GetButtonType, ReturnValue) == 0x000000, "Member 'ButtonBase_GetButtonType::ReturnValue' has a wrong offset!");

// Function Indiana.ButtonBase.IsPressed
// 0x0001 (0x0001 - 0x0000)
struct ButtonBase_IsPressed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ButtonBase_IsPressed) == 0x000001, "Wrong alignment on ButtonBase_IsPressed");
static_assert(sizeof(ButtonBase_IsPressed) == 0x000001, "Wrong size on ButtonBase_IsPressed");
static_assert(offsetof(ButtonBase_IsPressed, ReturnValue) == 0x000000, "Member 'ButtonBase_IsPressed::ReturnValue' has a wrong offset!");

// Function Indiana.ButtonBase.IsSelected
// 0x0001 (0x0001 - 0x0000)
struct ButtonBase_IsSelected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ButtonBase_IsSelected) == 0x000001, "Wrong alignment on ButtonBase_IsSelected");
static_assert(sizeof(ButtonBase_IsSelected) == 0x000001, "Wrong size on ButtonBase_IsSelected");
static_assert(offsetof(ButtonBase_IsSelected, ReturnValue) == 0x000000, "Member 'ButtonBase_IsSelected::ReturnValue' has a wrong offset!");

// Function Indiana.ButtonBaseContainerWidget.OnActivatableChange
// 0x0001 (0x0001 - 0x0000)
struct ButtonBaseContainerWidget_OnActivatableChange final
{
public:
	bool                                          bActivatable;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ButtonBaseContainerWidget_OnActivatableChange) == 0x000001, "Wrong alignment on ButtonBaseContainerWidget_OnActivatableChange");
static_assert(sizeof(ButtonBaseContainerWidget_OnActivatableChange) == 0x000001, "Wrong size on ButtonBaseContainerWidget_OnActivatableChange");
static_assert(offsetof(ButtonBaseContainerWidget_OnActivatableChange, bActivatable) == 0x000000, "Member 'ButtonBaseContainerWidget_OnActivatableChange::bActivatable' has a wrong offset!");

// Function Indiana.IndianaCharacter.CastSpellDebug
// 0x0010 (0x0010 - 0x0000)
struct IndianaCharacter_CastSpellDebug final
{
public:
	class FString                                 SpellName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaCharacter_CastSpellDebug) == 0x000008, "Wrong alignment on IndianaCharacter_CastSpellDebug");
static_assert(sizeof(IndianaCharacter_CastSpellDebug) == 0x000010, "Wrong size on IndianaCharacter_CastSpellDebug");
static_assert(offsetof(IndianaCharacter_CastSpellDebug, SpellName) == 0x000000, "Member 'IndianaCharacter_CastSpellDebug::SpellName' has a wrong offset!");

// Function Indiana.IndianaCharacter.CastSpellDebugTarget
// 0x0010 (0x0010 - 0x0000)
struct IndianaCharacter_CastSpellDebugTarget final
{
public:
	class FString                                 SpellName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaCharacter_CastSpellDebugTarget) == 0x000008, "Wrong alignment on IndianaCharacter_CastSpellDebugTarget");
static_assert(sizeof(IndianaCharacter_CastSpellDebugTarget) == 0x000010, "Wrong size on IndianaCharacter_CastSpellDebugTarget");
static_assert(offsetof(IndianaCharacter_CastSpellDebugTarget, SpellName) == 0x000000, "Member 'IndianaCharacter_CastSpellDebugTarget::SpellName' has a wrong offset!");

// Function Indiana.IndianaCharacter.DamageCaused
// 0x0110 (0x0110 - 0x0000)
struct IndianaCharacter_DamageCaused final
{
public:
	struct FCauseDamageInfo                       CauseDamageInfo;                                   // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaCharacter_DamageCaused) == 0x000008, "Wrong alignment on IndianaCharacter_DamageCaused");
static_assert(sizeof(IndianaCharacter_DamageCaused) == 0x000110, "Wrong size on IndianaCharacter_DamageCaused");
static_assert(offsetof(IndianaCharacter_DamageCaused, CauseDamageInfo) == 0x000000, "Member 'IndianaCharacter_DamageCaused::CauseDamageInfo' has a wrong offset!");

// Function Indiana.IndianaCharacter.Died
// 0x0110 (0x0110 - 0x0000)
struct IndianaCharacter_Died final
{
public:
	struct FCauseDamageInfo                       CDI;                                               // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaCharacter_Died) == 0x000008, "Wrong alignment on IndianaCharacter_Died");
static_assert(sizeof(IndianaCharacter_Died) == 0x000110, "Wrong size on IndianaCharacter_Died");
static_assert(offsetof(IndianaCharacter_Died, CDI) == 0x000000, "Member 'IndianaCharacter_Died::CDI' has a wrong offset!");

// Function Indiana.IndianaCharacter.ExecuteDeath
// 0x0001 (0x0001 - 0x0000)
struct IndianaCharacter_ExecuteDeath final
{
public:
	bool                                          bFromReload;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaCharacter_ExecuteDeath) == 0x000001, "Wrong alignment on IndianaCharacter_ExecuteDeath");
static_assert(sizeof(IndianaCharacter_ExecuteDeath) == 0x000001, "Wrong size on IndianaCharacter_ExecuteDeath");
static_assert(offsetof(IndianaCharacter_ExecuteDeath, bFromReload) == 0x000000, "Member 'IndianaCharacter_ExecuteDeath::bFromReload' has a wrong offset!");

// Function Indiana.IndianaCharacter.ItemAdded
// 0x0010 (0x0010 - 0x0000)
struct IndianaCharacter_ItemAdded final
{
public:
	struct FItemStack                             Item;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaCharacter_ItemAdded) == 0x000008, "Wrong alignment on IndianaCharacter_ItemAdded");
static_assert(sizeof(IndianaCharacter_ItemAdded) == 0x000010, "Wrong size on IndianaCharacter_ItemAdded");
static_assert(offsetof(IndianaCharacter_ItemAdded, Item) == 0x000000, "Member 'IndianaCharacter_ItemAdded::Item' has a wrong offset!");

// Function Indiana.IndianaCharacter.ItemRemoved
// 0x0010 (0x0010 - 0x0000)
struct IndianaCharacter_ItemRemoved final
{
public:
	struct FItemStack                             Item;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaCharacter_ItemRemoved) == 0x000008, "Wrong alignment on IndianaCharacter_ItemRemoved");
static_assert(sizeof(IndianaCharacter_ItemRemoved) == 0x000010, "Wrong size on IndianaCharacter_ItemRemoved");
static_assert(offsetof(IndianaCharacter_ItemRemoved, Item) == 0x000000, "Member 'IndianaCharacter_ItemRemoved::Item' has a wrong offset!");

// Function Indiana.IndianaCharacter.OnAttack
// 0x0004 (0x0004 - 0x0000)
struct IndianaCharacter_OnAttack final
{
public:
	float                                         DurationScalar;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaCharacter_OnAttack) == 0x000004, "Wrong alignment on IndianaCharacter_OnAttack");
static_assert(sizeof(IndianaCharacter_OnAttack) == 0x000004, "Wrong size on IndianaCharacter_OnAttack");
static_assert(offsetof(IndianaCharacter_OnAttack, DurationScalar) == 0x000000, "Member 'IndianaCharacter_OnAttack::DurationScalar' has a wrong offset!");

// Function Indiana.IndianaCharacter.OnDifficultyChanged
// 0x0001 (0x0001 - 0x0000)
struct IndianaCharacter_OnDifficultyChanged final
{
public:
	EGameDifficulty                               NewDifficulty;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaCharacter_OnDifficultyChanged) == 0x000001, "Wrong alignment on IndianaCharacter_OnDifficultyChanged");
static_assert(sizeof(IndianaCharacter_OnDifficultyChanged) == 0x000001, "Wrong size on IndianaCharacter_OnDifficultyChanged");
static_assert(offsetof(IndianaCharacter_OnDifficultyChanged, NewDifficulty) == 0x000000, "Member 'IndianaCharacter_OnDifficultyChanged::NewDifficulty' has a wrong offset!");

// Function Indiana.IndianaCharacter.OnLevelChanged
// 0x0004 (0x0004 - 0x0000)
struct IndianaCharacter_OnLevelChanged final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaCharacter_OnLevelChanged) == 0x000004, "Wrong alignment on IndianaCharacter_OnLevelChanged");
static_assert(sizeof(IndianaCharacter_OnLevelChanged) == 0x000004, "Wrong size on IndianaCharacter_OnLevelChanged");
static_assert(offsetof(IndianaCharacter_OnLevelChanged, Level) == 0x000000, "Member 'IndianaCharacter_OnLevelChanged::Level' has a wrong offset!");

// Function Indiana.IndianaCharacter.OnNewStateOfBeing
// 0x0002 (0x0002 - 0x0000)
struct IndianaCharacter_OnNewStateOfBeing final
{
public:
	EStateOfBeing                                 NewStateOfBeing;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStateOfBeing                                 OldStateOfBeing;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaCharacter_OnNewStateOfBeing) == 0x000001, "Wrong alignment on IndianaCharacter_OnNewStateOfBeing");
static_assert(sizeof(IndianaCharacter_OnNewStateOfBeing) == 0x000002, "Wrong size on IndianaCharacter_OnNewStateOfBeing");
static_assert(offsetof(IndianaCharacter_OnNewStateOfBeing, NewStateOfBeing) == 0x000000, "Member 'IndianaCharacter_OnNewStateOfBeing::NewStateOfBeing' has a wrong offset!");
static_assert(offsetof(IndianaCharacter_OnNewStateOfBeing, OldStateOfBeing) == 0x000001, "Member 'IndianaCharacter_OnNewStateOfBeing::OldStateOfBeing' has a wrong offset!");

// Function Indiana.IndianaCharacter.OnPreStateOfBeingChange
// 0x0001 (0x0001 - 0x0000)
struct IndianaCharacter_OnPreStateOfBeingChange final
{
public:
	EStateOfBeing                                 StateOfBeing;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaCharacter_OnPreStateOfBeingChange) == 0x000001, "Wrong alignment on IndianaCharacter_OnPreStateOfBeingChange");
static_assert(sizeof(IndianaCharacter_OnPreStateOfBeingChange) == 0x000001, "Wrong size on IndianaCharacter_OnPreStateOfBeingChange");
static_assert(offsetof(IndianaCharacter_OnPreStateOfBeingChange, StateOfBeing) == 0x000000, "Member 'IndianaCharacter_OnPreStateOfBeingChange::StateOfBeing' has a wrong offset!");

// Function Indiana.IndianaCharacter.OnRestoredStateOfBeing
// 0x0001 (0x0001 - 0x0000)
struct IndianaCharacter_OnRestoredStateOfBeing final
{
public:
	EStateOfBeing                                 RestoredStateOfBeing;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaCharacter_OnRestoredStateOfBeing) == 0x000001, "Wrong alignment on IndianaCharacter_OnRestoredStateOfBeing");
static_assert(sizeof(IndianaCharacter_OnRestoredStateOfBeing) == 0x000001, "Wrong size on IndianaCharacter_OnRestoredStateOfBeing");
static_assert(offsetof(IndianaCharacter_OnRestoredStateOfBeing, RestoredStateOfBeing) == 0x000000, "Member 'IndianaCharacter_OnRestoredStateOfBeing::RestoredStateOfBeing' has a wrong offset!");

// Function Indiana.IndianaCharacter.PlayWeaponEvent
// 0x0010 (0x0010 - 0x0000)
struct IndianaCharacter_PlayWeaponEvent final
{
public:
	class FString                                 WeaponEvent;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaCharacter_PlayWeaponEvent) == 0x000008, "Wrong alignment on IndianaCharacter_PlayWeaponEvent");
static_assert(sizeof(IndianaCharacter_PlayWeaponEvent) == 0x000010, "Wrong size on IndianaCharacter_PlayWeaponEvent");
static_assert(offsetof(IndianaCharacter_PlayWeaponEvent, WeaponEvent) == 0x000000, "Member 'IndianaCharacter_PlayWeaponEvent::WeaponEvent' has a wrong offset!");

// Function Indiana.IndianaCharacter.GetCurrentWeapon
// 0x0008 (0x0008 - 0x0000)
struct IndianaCharacter_GetCurrentWeapon final
{
public:
	class UWeapon*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaCharacter_GetCurrentWeapon) == 0x000008, "Wrong alignment on IndianaCharacter_GetCurrentWeapon");
static_assert(sizeof(IndianaCharacter_GetCurrentWeapon) == 0x000008, "Wrong size on IndianaCharacter_GetCurrentWeapon");
static_assert(offsetof(IndianaCharacter_GetCurrentWeapon, ReturnValue) == 0x000000, "Member 'IndianaCharacter_GetCurrentWeapon::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaCharacter.GetEquipmentComponent
// 0x0008 (0x0008 - 0x0000)
struct IndianaCharacter_GetEquipmentComponent final
{
public:
	class UEquipmentComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaCharacter_GetEquipmentComponent) == 0x000008, "Wrong alignment on IndianaCharacter_GetEquipmentComponent");
static_assert(sizeof(IndianaCharacter_GetEquipmentComponent) == 0x000008, "Wrong size on IndianaCharacter_GetEquipmentComponent");
static_assert(offsetof(IndianaCharacter_GetEquipmentComponent, ReturnValue) == 0x000000, "Member 'IndianaCharacter_GetEquipmentComponent::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaCharacter.GetItemQuantity
// 0x0010 (0x0010 - 0x0000)
struct IndianaCharacter_GetItemQuantity final
{
public:
	TSubclassOf<class UItem>                      Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaCharacter_GetItemQuantity) == 0x000008, "Wrong alignment on IndianaCharacter_GetItemQuantity");
static_assert(sizeof(IndianaCharacter_GetItemQuantity) == 0x000010, "Wrong size on IndianaCharacter_GetItemQuantity");
static_assert(offsetof(IndianaCharacter_GetItemQuantity, Item) == 0x000000, "Member 'IndianaCharacter_GetItemQuantity::Item' has a wrong offset!");
static_assert(offsetof(IndianaCharacter_GetItemQuantity, ReturnValue) == 0x000008, "Member 'IndianaCharacter_GetItemQuantity::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaCharacter.GetStatusEffectManager
// 0x0008 (0x0008 - 0x0000)
struct IndianaCharacter_GetStatusEffectManager final
{
public:
	class UStatusEffectManagerComponent*          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaCharacter_GetStatusEffectManager) == 0x000008, "Wrong alignment on IndianaCharacter_GetStatusEffectManager");
static_assert(sizeof(IndianaCharacter_GetStatusEffectManager) == 0x000008, "Wrong size on IndianaCharacter_GetStatusEffectManager");
static_assert(offsetof(IndianaCharacter_GetStatusEffectManager, ReturnValue) == 0x000000, "Member 'IndianaCharacter_GetStatusEffectManager::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaCharacter.HasItem
// 0x0010 (0x0010 - 0x0000)
struct IndianaCharacter_HasItem final
{
public:
	TSubclassOf<class UItem>                      Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaCharacter_HasItem) == 0x000008, "Wrong alignment on IndianaCharacter_HasItem");
static_assert(sizeof(IndianaCharacter_HasItem) == 0x000010, "Wrong size on IndianaCharacter_HasItem");
static_assert(offsetof(IndianaCharacter_HasItem, Item) == 0x000000, "Member 'IndianaCharacter_HasItem::Item' has a wrong offset!");
static_assert(offsetof(IndianaCharacter_HasItem, ReturnValue) == 0x000008, "Member 'IndianaCharacter_HasItem::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaCharacter.IsArmorEquipped
// 0x0010 (0x0010 - 0x0000)
struct IndianaCharacter_IsArmorEquipped final
{
public:
	TSubclassOf<class UArmorItem>                 ArmorClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaCharacter_IsArmorEquipped) == 0x000008, "Wrong alignment on IndianaCharacter_IsArmorEquipped");
static_assert(sizeof(IndianaCharacter_IsArmorEquipped) == 0x000010, "Wrong size on IndianaCharacter_IsArmorEquipped");
static_assert(offsetof(IndianaCharacter_IsArmorEquipped, ArmorClass) == 0x000000, "Member 'IndianaCharacter_IsArmorEquipped::ArmorClass' has a wrong offset!");
static_assert(offsetof(IndianaCharacter_IsArmorEquipped, ReturnValue) == 0x000008, "Member 'IndianaCharacter_IsArmorEquipped::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaCharacter.IsWeaponEquipped
// 0x0010 (0x0010 - 0x0000)
struct IndianaCharacter_IsWeaponEquipped final
{
public:
	TSubclassOf<class UWeapon>                    WeaponClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaCharacter_IsWeaponEquipped) == 0x000008, "Wrong alignment on IndianaCharacter_IsWeaponEquipped");
static_assert(sizeof(IndianaCharacter_IsWeaponEquipped) == 0x000010, "Wrong size on IndianaCharacter_IsWeaponEquipped");
static_assert(offsetof(IndianaCharacter_IsWeaponEquipped, WeaponClass) == 0x000000, "Member 'IndianaCharacter_IsWeaponEquipped::WeaponClass' has a wrong offset!");
static_assert(offsetof(IndianaCharacter_IsWeaponEquipped, ReturnValue) == 0x000008, "Member 'IndianaCharacter_IsWeaponEquipped::ReturnValue' has a wrong offset!");

// Function Indiana.ButtonBaseSlot.SetHorizontalAlignment
// 0x0001 (0x0001 - 0x0000)
struct ButtonBaseSlot_SetHorizontalAlignment final
{
public:
	EHorizontalAlignment                          InHorizontalAlignment;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ButtonBaseSlot_SetHorizontalAlignment) == 0x000001, "Wrong alignment on ButtonBaseSlot_SetHorizontalAlignment");
static_assert(sizeof(ButtonBaseSlot_SetHorizontalAlignment) == 0x000001, "Wrong size on ButtonBaseSlot_SetHorizontalAlignment");
static_assert(offsetof(ButtonBaseSlot_SetHorizontalAlignment, InHorizontalAlignment) == 0x000000, "Member 'ButtonBaseSlot_SetHorizontalAlignment::InHorizontalAlignment' has a wrong offset!");

// Function Indiana.ButtonBaseSlot.SetPadding
// 0x0010 (0x0010 - 0x0000)
struct ButtonBaseSlot_SetPadding final
{
public:
	struct FMargin                                InPadding;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ButtonBaseSlot_SetPadding) == 0x000004, "Wrong alignment on ButtonBaseSlot_SetPadding");
static_assert(sizeof(ButtonBaseSlot_SetPadding) == 0x000010, "Wrong size on ButtonBaseSlot_SetPadding");
static_assert(offsetof(ButtonBaseSlot_SetPadding, InPadding) == 0x000000, "Member 'ButtonBaseSlot_SetPadding::InPadding' has a wrong offset!");

// Function Indiana.ButtonBaseSlot.SetVerticalAlignment
// 0x0001 (0x0001 - 0x0000)
struct ButtonBaseSlot_SetVerticalAlignment final
{
public:
	EVerticalAlignment                            InVerticalAlignment;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ButtonBaseSlot_SetVerticalAlignment) == 0x000001, "Wrong alignment on ButtonBaseSlot_SetVerticalAlignment");
static_assert(sizeof(ButtonBaseSlot_SetVerticalAlignment) == 0x000001, "Wrong size on ButtonBaseSlot_SetVerticalAlignment");
static_assert(offsetof(ButtonBaseSlot_SetVerticalAlignment, InVerticalAlignment) == 0x000000, "Member 'ButtonBaseSlot_SetVerticalAlignment::InVerticalAlignment' has a wrong offset!");

// Function Indiana.SkillCheckInterruption.MontageFinished
// 0x0010 (0x0010 - 0x0000)
struct SkillCheckInterruption_MontageFinished final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SkillCheckInterruption_MontageFinished) == 0x000008, "Wrong alignment on SkillCheckInterruption_MontageFinished");
static_assert(sizeof(SkillCheckInterruption_MontageFinished) == 0x000010, "Wrong size on SkillCheckInterruption_MontageFinished");
static_assert(offsetof(SkillCheckInterruption_MontageFinished, Montage) == 0x000000, "Member 'SkillCheckInterruption_MontageFinished::Montage' has a wrong offset!");
static_assert(offsetof(SkillCheckInterruption_MontageFinished, bInterrupted) == 0x000008, "Member 'SkillCheckInterruption_MontageFinished::bInterrupted' has a wrong offset!");

// Function Indiana.StatusTagWidget.OnCombatStateChanged
// 0x0002 (0x0002 - 0x0000)
struct StatusTagWidget_OnCombatStateChanged final
{
public:
	bool                                          bCombatIn;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestoring;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusTagWidget_OnCombatStateChanged) == 0x000001, "Wrong alignment on StatusTagWidget_OnCombatStateChanged");
static_assert(sizeof(StatusTagWidget_OnCombatStateChanged) == 0x000002, "Wrong size on StatusTagWidget_OnCombatStateChanged");
static_assert(offsetof(StatusTagWidget_OnCombatStateChanged, bCombatIn) == 0x000000, "Member 'StatusTagWidget_OnCombatStateChanged::bCombatIn' has a wrong offset!");
static_assert(offsetof(StatusTagWidget_OnCombatStateChanged, bRestoring) == 0x000001, "Member 'StatusTagWidget_OnCombatStateChanged::bRestoring' has a wrong offset!");

// Function Indiana.StatusTagWidget.OnHealthBarModeChanged
// 0x0004 (0x0004 - 0x0000)
struct StatusTagWidget_OnHealthBarModeChanged final
{
public:
	int32                                         ModeIn;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusTagWidget_OnHealthBarModeChanged) == 0x000004, "Wrong alignment on StatusTagWidget_OnHealthBarModeChanged");
static_assert(sizeof(StatusTagWidget_OnHealthBarModeChanged) == 0x000004, "Wrong size on StatusTagWidget_OnHealthBarModeChanged");
static_assert(offsetof(StatusTagWidget_OnHealthBarModeChanged, ModeIn) == 0x000000, "Member 'StatusTagWidget_OnHealthBarModeChanged::ModeIn' has a wrong offset!");

// Function Indiana.StatusTagWidget.OnHUDVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct StatusTagWidget_OnHUDVisibilityChanged final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusTagWidget_OnHUDVisibilityChanged) == 0x000001, "Wrong alignment on StatusTagWidget_OnHUDVisibilityChanged");
static_assert(sizeof(StatusTagWidget_OnHUDVisibilityChanged) == 0x000001, "Wrong size on StatusTagWidget_OnHUDVisibilityChanged");
static_assert(offsetof(StatusTagWidget_OnHUDVisibilityChanged, bVisible) == 0x000000, "Member 'StatusTagWidget_OnHUDVisibilityChanged::bVisible' has a wrong offset!");

// Function Indiana.StatusTagWidget.OnMeterVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct StatusTagWidget_OnMeterVisibilityChanged final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusTagWidget_OnMeterVisibilityChanged) == 0x000001, "Wrong alignment on StatusTagWidget_OnMeterVisibilityChanged");
static_assert(sizeof(StatusTagWidget_OnMeterVisibilityChanged) == 0x000001, "Wrong size on StatusTagWidget_OnMeterVisibilityChanged");
static_assert(offsetof(StatusTagWidget_OnMeterVisibilityChanged, bVisible) == 0x000000, "Member 'StatusTagWidget_OnMeterVisibilityChanged::bVisible' has a wrong offset!");

// Function Indiana.StatusTagWidget.OnSetPlayerTargeted
// 0x0001 (0x0001 - 0x0000)
struct StatusTagWidget_OnSetPlayerTargeted final
{
public:
	bool                                          bIsTarget;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusTagWidget_OnSetPlayerTargeted) == 0x000001, "Wrong alignment on StatusTagWidget_OnSetPlayerTargeted");
static_assert(sizeof(StatusTagWidget_OnSetPlayerTargeted) == 0x000001, "Wrong size on StatusTagWidget_OnSetPlayerTargeted");
static_assert(offsetof(StatusTagWidget_OnSetPlayerTargeted, bIsTarget) == 0x000000, "Member 'StatusTagWidget_OnSetPlayerTargeted::bIsTarget' has a wrong offset!");

// Function Indiana.ConversationWidget.OnHistoryScroll
// 0x0004 (0x0004 - 0x0000)
struct ConversationWidget_OnHistoryScroll final
{
public:
	float                                         InputDelta;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConversationWidget_OnHistoryScroll) == 0x000004, "Wrong alignment on ConversationWidget_OnHistoryScroll");
static_assert(sizeof(ConversationWidget_OnHistoryScroll) == 0x000004, "Wrong size on ConversationWidget_OnHistoryScroll");
static_assert(offsetof(ConversationWidget_OnHistoryScroll, InputDelta) == 0x000000, "Member 'ConversationWidget_OnHistoryScroll::InputDelta' has a wrong offset!");

// Function Indiana.ConversationWidget.SetConversationBackingFillRatio
// 0x0004 (0x0004 - 0x0000)
struct ConversationWidget_SetConversationBackingFillRatio final
{
public:
	float                                         DesiredOverlayHeight;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConversationWidget_SetConversationBackingFillRatio) == 0x000004, "Wrong alignment on ConversationWidget_SetConversationBackingFillRatio");
static_assert(sizeof(ConversationWidget_SetConversationBackingFillRatio) == 0x000004, "Wrong size on ConversationWidget_SetConversationBackingFillRatio");
static_assert(offsetof(ConversationWidget_SetConversationBackingFillRatio, DesiredOverlayHeight) == 0x000000, "Member 'ConversationWidget_SetConversationBackingFillRatio::DesiredOverlayHeight' has a wrong offset!");

// Function Indiana.ConversationWidget.SetHistoryBackingFillRatio
// 0x0004 (0x0004 - 0x0000)
struct ConversationWidget_SetHistoryBackingFillRatio final
{
public:
	float                                         DesiredHistoryHeight;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConversationWidget_SetHistoryBackingFillRatio) == 0x000004, "Wrong alignment on ConversationWidget_SetHistoryBackingFillRatio");
static_assert(sizeof(ConversationWidget_SetHistoryBackingFillRatio) == 0x000004, "Wrong size on ConversationWidget_SetHistoryBackingFillRatio");
static_assert(offsetof(ConversationWidget_SetHistoryBackingFillRatio, DesiredHistoryHeight) == 0x000000, "Member 'ConversationWidget_SetHistoryBackingFillRatio::DesiredHistoryHeight' has a wrong offset!");

// Function Indiana.ConversationWidget.ShouldShowInputLabelLine
// 0x0001 (0x0001 - 0x0000)
struct ConversationWidget_ShouldShowInputLabelLine final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConversationWidget_ShouldShowInputLabelLine) == 0x000001, "Wrong alignment on ConversationWidget_ShouldShowInputLabelLine");
static_assert(sizeof(ConversationWidget_ShouldShowInputLabelLine) == 0x000001, "Wrong size on ConversationWidget_ShouldShowInputLabelLine");
static_assert(offsetof(ConversationWidget_ShouldShowInputLabelLine, ReturnValue) == 0x000000, "Member 'ConversationWidget_ShouldShowInputLabelLine::ReturnValue' has a wrong offset!");

// Function Indiana.ConversationWidget.ShouldShowResponseLine
// 0x0001 (0x0001 - 0x0000)
struct ConversationWidget_ShouldShowResponseLine final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConversationWidget_ShouldShowResponseLine) == 0x000001, "Wrong alignment on ConversationWidget_ShouldShowResponseLine");
static_assert(sizeof(ConversationWidget_ShouldShowResponseLine) == 0x000001, "Wrong size on ConversationWidget_ShouldShowResponseLine");
static_assert(offsetof(ConversationWidget_ShouldShowResponseLine, ReturnValue) == 0x000000, "Member 'ConversationWidget_ShouldShowResponseLine::ReturnValue' has a wrong offset!");

// Function Indiana.CauseDamageReticleWidget.OnCauseDamage
// 0x0110 (0x0110 - 0x0000)
struct CauseDamageReticleWidget_OnCauseDamage final
{
public:
	struct FCauseDamageInfo                       CauseDamageInfo;                                   // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CauseDamageReticleWidget_OnCauseDamage) == 0x000008, "Wrong alignment on CauseDamageReticleWidget_OnCauseDamage");
static_assert(sizeof(CauseDamageReticleWidget_OnCauseDamage) == 0x000110, "Wrong size on CauseDamageReticleWidget_OnCauseDamage");
static_assert(offsetof(CauseDamageReticleWidget_OnCauseDamage, CauseDamageInfo) == 0x000000, "Member 'CauseDamageReticleWidget_OnCauseDamage::CauseDamageInfo' has a wrong offset!");

// Function Indiana.CCAppearancePageWidget.OnBorderMouseDown
// 0x0160 (0x0160 - 0x0000)
struct CCAppearancePageWidget_OnBorderMouseDown final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CCAppearancePageWidget_OnBorderMouseDown) == 0x000008, "Wrong alignment on CCAppearancePageWidget_OnBorderMouseDown");
static_assert(sizeof(CCAppearancePageWidget_OnBorderMouseDown) == 0x000160, "Wrong size on CCAppearancePageWidget_OnBorderMouseDown");
static_assert(offsetof(CCAppearancePageWidget_OnBorderMouseDown, MyGeometry) == 0x000000, "Member 'CCAppearancePageWidget_OnBorderMouseDown::MyGeometry' has a wrong offset!");
static_assert(offsetof(CCAppearancePageWidget_OnBorderMouseDown, MouseEvent) == 0x000038, "Member 'CCAppearancePageWidget_OnBorderMouseDown::MouseEvent' has a wrong offset!");
static_assert(offsetof(CCAppearancePageWidget_OnBorderMouseDown, ReturnValue) == 0x0000A8, "Member 'CCAppearancePageWidget_OnBorderMouseDown::ReturnValue' has a wrong offset!");

// Function Indiana.CCAppearancePageWidget.OnExpandableAreaChanged
// 0x0010 (0x0010 - 0x0000)
struct CCAppearancePageWidget_OnExpandableAreaChanged final
{
public:
	class UExpandableAreaBase*                    AreaBaseWidget;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsExpanded;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CCAppearancePageWidget_OnExpandableAreaChanged) == 0x000008, "Wrong alignment on CCAppearancePageWidget_OnExpandableAreaChanged");
static_assert(sizeof(CCAppearancePageWidget_OnExpandableAreaChanged) == 0x000010, "Wrong size on CCAppearancePageWidget_OnExpandableAreaChanged");
static_assert(offsetof(CCAppearancePageWidget_OnExpandableAreaChanged, AreaBaseWidget) == 0x000000, "Member 'CCAppearancePageWidget_OnExpandableAreaChanged::AreaBaseWidget' has a wrong offset!");
static_assert(offsetof(CCAppearancePageWidget_OnExpandableAreaChanged, bIsExpanded) == 0x000008, "Member 'CCAppearancePageWidget_OnExpandableAreaChanged::bIsExpanded' has a wrong offset!");

// Function Indiana.SliderBase.ModifySliderValue
// 0x0004 (0x0004 - 0x0000)
struct SliderBase_ModifySliderValue final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SliderBase_ModifySliderValue) == 0x000004, "Wrong alignment on SliderBase_ModifySliderValue");
static_assert(sizeof(SliderBase_ModifySliderValue) == 0x000004, "Wrong size on SliderBase_ModifySliderValue");
static_assert(offsetof(SliderBase_ModifySliderValue, InValue) == 0x000000, "Member 'SliderBase_ModifySliderValue::InValue' has a wrong offset!");

// Function Indiana.SliderBase.SetAndCommitValue
// 0x0004 (0x0004 - 0x0000)
struct SliderBase_SetAndCommitValue final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SliderBase_SetAndCommitValue) == 0x000004, "Wrong alignment on SliderBase_SetAndCommitValue");
static_assert(sizeof(SliderBase_SetAndCommitValue) == 0x000004, "Wrong size on SliderBase_SetAndCommitValue");
static_assert(offsetof(SliderBase_SetAndCommitValue, InValue) == 0x000000, "Member 'SliderBase_SetAndCommitValue::InValue' has a wrong offset!");

// Function Indiana.SliderBase.SetIndentHandle
// 0x0001 (0x0001 - 0x0000)
struct SliderBase_SetIndentHandle final
{
public:
	bool                                          InValue;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SliderBase_SetIndentHandle) == 0x000001, "Wrong alignment on SliderBase_SetIndentHandle");
static_assert(sizeof(SliderBase_SetIndentHandle) == 0x000001, "Wrong size on SliderBase_SetIndentHandle");
static_assert(offsetof(SliderBase_SetIndentHandle, InValue) == 0x000000, "Member 'SliderBase_SetIndentHandle::InValue' has a wrong offset!");

// Function Indiana.SliderBase.SetLocked
// 0x0001 (0x0001 - 0x0000)
struct SliderBase_SetLocked final
{
public:
	bool                                          InValue;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SliderBase_SetLocked) == 0x000001, "Wrong alignment on SliderBase_SetLocked");
static_assert(sizeof(SliderBase_SetLocked) == 0x000001, "Wrong size on SliderBase_SetLocked");
static_assert(offsetof(SliderBase_SetLocked, InValue) == 0x000000, "Member 'SliderBase_SetLocked::InValue' has a wrong offset!");

// Function Indiana.SliderBase.SetStepSize
// 0x0004 (0x0004 - 0x0000)
struct SliderBase_SetStepSize final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SliderBase_SetStepSize) == 0x000004, "Wrong alignment on SliderBase_SetStepSize");
static_assert(sizeof(SliderBase_SetStepSize) == 0x000004, "Wrong size on SliderBase_SetStepSize");
static_assert(offsetof(SliderBase_SetStepSize, InValue) == 0x000000, "Member 'SliderBase_SetStepSize::InValue' has a wrong offset!");

// Function Indiana.SliderBase.SetValue
// 0x0004 (0x0004 - 0x0000)
struct SliderBase_SetValue final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SliderBase_SetValue) == 0x000004, "Wrong alignment on SliderBase_SetValue");
static_assert(sizeof(SliderBase_SetValue) == 0x000004, "Wrong size on SliderBase_SetValue");
static_assert(offsetof(SliderBase_SetValue, InValue) == 0x000000, "Member 'SliderBase_SetValue::InValue' has a wrong offset!");

// Function Indiana.SliderBase.GetValue
// 0x0004 (0x0004 - 0x0000)
struct SliderBase_GetValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SliderBase_GetValue) == 0x000004, "Wrong alignment on SliderBase_GetValue");
static_assert(sizeof(SliderBase_GetValue) == 0x000004, "Wrong size on SliderBase_GetValue");
static_assert(offsetof(SliderBase_GetValue, ReturnValue) == 0x000000, "Member 'SliderBase_GetValue::ReturnValue' has a wrong offset!");

// Function Indiana.TutorialManager.HideTutorialEventMessage
// 0x0001 (0x0001 - 0x0000)
struct TutorialManager_HideTutorialEventMessage final
{
public:
	ETutorialEvent                                TutorialEvent;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialManager_HideTutorialEventMessage) == 0x000001, "Wrong alignment on TutorialManager_HideTutorialEventMessage");
static_assert(sizeof(TutorialManager_HideTutorialEventMessage) == 0x000001, "Wrong size on TutorialManager_HideTutorialEventMessage");
static_assert(offsetof(TutorialManager_HideTutorialEventMessage, TutorialEvent) == 0x000000, "Member 'TutorialManager_HideTutorialEventMessage::TutorialEvent' has a wrong offset!");

// Function Indiana.TutorialManager.IsTutorialEventCompleted
// 0x0002 (0x0002 - 0x0000)
struct TutorialManager_IsTutorialEventCompleted final
{
public:
	ETutorialEvent                                TutorialEvent;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialManager_IsTutorialEventCompleted) == 0x000001, "Wrong alignment on TutorialManager_IsTutorialEventCompleted");
static_assert(sizeof(TutorialManager_IsTutorialEventCompleted) == 0x000002, "Wrong size on TutorialManager_IsTutorialEventCompleted");
static_assert(offsetof(TutorialManager_IsTutorialEventCompleted, TutorialEvent) == 0x000000, "Member 'TutorialManager_IsTutorialEventCompleted::TutorialEvent' has a wrong offset!");
static_assert(offsetof(TutorialManager_IsTutorialEventCompleted, ReturnValue) == 0x000001, "Member 'TutorialManager_IsTutorialEventCompleted::ReturnValue' has a wrong offset!");

// Function Indiana.TutorialManager.MarkTutorialEventComplete
// 0x0001 (0x0001 - 0x0000)
struct TutorialManager_MarkTutorialEventComplete final
{
public:
	ETutorialEvent                                TutorialEvent;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialManager_MarkTutorialEventComplete) == 0x000001, "Wrong alignment on TutorialManager_MarkTutorialEventComplete");
static_assert(sizeof(TutorialManager_MarkTutorialEventComplete) == 0x000001, "Wrong size on TutorialManager_MarkTutorialEventComplete");
static_assert(offsetof(TutorialManager_MarkTutorialEventComplete, TutorialEvent) == 0x000000, "Member 'TutorialManager_MarkTutorialEventComplete::TutorialEvent' has a wrong offset!");

// Function Indiana.TutorialManager.ShowTutorialEventMessage
// 0x0003 (0x0003 - 0x0000)
struct TutorialManager_ShowTutorialEventMessage final
{
public:
	ETutorialEvent                                TutorialEvent;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowOncePerSession;                               // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInfiniteDuration;                                 // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialManager_ShowTutorialEventMessage) == 0x000001, "Wrong alignment on TutorialManager_ShowTutorialEventMessage");
static_assert(sizeof(TutorialManager_ShowTutorialEventMessage) == 0x000003, "Wrong size on TutorialManager_ShowTutorialEventMessage");
static_assert(offsetof(TutorialManager_ShowTutorialEventMessage, TutorialEvent) == 0x000000, "Member 'TutorialManager_ShowTutorialEventMessage::TutorialEvent' has a wrong offset!");
static_assert(offsetof(TutorialManager_ShowTutorialEventMessage, bShowOncePerSession) == 0x000001, "Member 'TutorialManager_ShowTutorialEventMessage::bShowOncePerSession' has a wrong offset!");
static_assert(offsetof(TutorialManager_ShowTutorialEventMessage, bInfiniteDuration) == 0x000002, "Member 'TutorialManager_ShowTutorialEventMessage::bInfiniteDuration' has a wrong offset!");

// Function Indiana.TutorialManager.ItemDamageStatusChange
// 0x0001 (0x0001 - 0x0000)
struct TutorialManager_ItemDamageStatusChange final
{
public:
	EItemDegradationState                         DegredationState;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialManager_ItemDamageStatusChange) == 0x000001, "Wrong alignment on TutorialManager_ItemDamageStatusChange");
static_assert(sizeof(TutorialManager_ItemDamageStatusChange) == 0x000001, "Wrong size on TutorialManager_ItemDamageStatusChange");
static_assert(offsetof(TutorialManager_ItemDamageStatusChange, DegredationState) == 0x000000, "Member 'TutorialManager_ItemDamageStatusChange::DegredationState' has a wrong offset!");

// Function Indiana.TutorialManager.PlayerCausedDamage
// 0x0110 (0x0110 - 0x0000)
struct TutorialManager_PlayerCausedDamage final
{
public:
	struct FCauseDamageInfo                       CauseDamageInfo;                                   // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialManager_PlayerCausedDamage) == 0x000008, "Wrong alignment on TutorialManager_PlayerCausedDamage");
static_assert(sizeof(TutorialManager_PlayerCausedDamage) == 0x000110, "Wrong size on TutorialManager_PlayerCausedDamage");
static_assert(offsetof(TutorialManager_PlayerCausedDamage, CauseDamageInfo) == 0x000000, "Member 'TutorialManager_PlayerCausedDamage::CauseDamageInfo' has a wrong offset!");

// Function Indiana.TutorialManager.PlayerCombatStateChanged
// 0x0002 (0x0002 - 0x0000)
struct TutorialManager_PlayerCombatStateChanged final
{
public:
	bool                                          bIsInCombat;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestoring;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialManager_PlayerCombatStateChanged) == 0x000001, "Wrong alignment on TutorialManager_PlayerCombatStateChanged");
static_assert(sizeof(TutorialManager_PlayerCombatStateChanged) == 0x000002, "Wrong size on TutorialManager_PlayerCombatStateChanged");
static_assert(offsetof(TutorialManager_PlayerCombatStateChanged, bIsInCombat) == 0x000000, "Member 'TutorialManager_PlayerCombatStateChanged::bIsInCombat' has a wrong offset!");
static_assert(offsetof(TutorialManager_PlayerCombatStateChanged, bRestoring) == 0x000001, "Member 'TutorialManager_PlayerCombatStateChanged::bRestoring' has a wrong offset!");

// Function Indiana.TutorialManager.PlayerCompanionAdded
// 0x0010 (0x0010 - 0x0000)
struct TutorialManager_PlayerCompanionAdded final
{
public:
	class AIndianaAiCharacter*                    NPC;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRegister;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TutorialManager_PlayerCompanionAdded) == 0x000008, "Wrong alignment on TutorialManager_PlayerCompanionAdded");
static_assert(sizeof(TutorialManager_PlayerCompanionAdded) == 0x000010, "Wrong size on TutorialManager_PlayerCompanionAdded");
static_assert(offsetof(TutorialManager_PlayerCompanionAdded, NPC) == 0x000000, "Member 'TutorialManager_PlayerCompanionAdded::NPC' has a wrong offset!");
static_assert(offsetof(TutorialManager_PlayerCompanionAdded, bRegister) == 0x000008, "Member 'TutorialManager_PlayerCompanionAdded::bRegister' has a wrong offset!");

// Function Indiana.TutorialManager.PlayerCompanionKilled
// 0x0008 (0x0008 - 0x0000)
struct TutorialManager_PlayerCompanionKilled final
{
public:
	class AActor*                                 Companion;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialManager_PlayerCompanionKilled) == 0x000008, "Wrong alignment on TutorialManager_PlayerCompanionKilled");
static_assert(sizeof(TutorialManager_PlayerCompanionKilled) == 0x000008, "Wrong size on TutorialManager_PlayerCompanionKilled");
static_assert(offsetof(TutorialManager_PlayerCompanionKilled, Companion) == 0x000000, "Member 'TutorialManager_PlayerCompanionKilled::Companion' has a wrong offset!");

// Function Indiana.TutorialManager.PlayerEncumberedChanged
// 0x0001 (0x0001 - 0x0000)
struct TutorialManager_PlayerEncumberedChanged final
{
public:
	bool                                          bEncumbered;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialManager_PlayerEncumberedChanged) == 0x000001, "Wrong alignment on TutorialManager_PlayerEncumberedChanged");
static_assert(sizeof(TutorialManager_PlayerEncumberedChanged) == 0x000001, "Wrong size on TutorialManager_PlayerEncumberedChanged");
static_assert(offsetof(TutorialManager_PlayerEncumberedChanged, bEncumbered) == 0x000000, "Member 'TutorialManager_PlayerEncumberedChanged::bEncumbered' has a wrong offset!");

// Function Indiana.TutorialManager.PlayerEnteredRestrictedArea
// 0x0008 (0x0008 - 0x0000)
struct TutorialManager_PlayerEnteredRestrictedArea final
{
public:
	const class ARestrictedArea*                  RestrictedArea;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialManager_PlayerEnteredRestrictedArea) == 0x000008, "Wrong alignment on TutorialManager_PlayerEnteredRestrictedArea");
static_assert(sizeof(TutorialManager_PlayerEnteredRestrictedArea) == 0x000008, "Wrong size on TutorialManager_PlayerEnteredRestrictedArea");
static_assert(offsetof(TutorialManager_PlayerEnteredRestrictedArea, RestrictedArea) == 0x000000, "Member 'TutorialManager_PlayerEnteredRestrictedArea::RestrictedArea' has a wrong offset!");

// Function Indiana.TutorialManager.PlayerFinishedEquipping
// 0x0008 (0x0008 - 0x0000)
struct TutorialManager_PlayerFinishedEquipping final
{
public:
	class UWeapon*                                Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialManager_PlayerFinishedEquipping) == 0x000008, "Wrong alignment on TutorialManager_PlayerFinishedEquipping");
static_assert(sizeof(TutorialManager_PlayerFinishedEquipping) == 0x000008, "Wrong size on TutorialManager_PlayerFinishedEquipping");
static_assert(offsetof(TutorialManager_PlayerFinishedEquipping, Weapon) == 0x000000, "Member 'TutorialManager_PlayerFinishedEquipping::Weapon' has a wrong offset!");

// Function Indiana.TutorialManager.PlayerHealthChanged
// 0x0010 (0x0010 - 0x0000)
struct TutorialManager_PlayerHealthChanged final
{
public:
	float                                         HealthChanged;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Instigator;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialManager_PlayerHealthChanged) == 0x000008, "Wrong alignment on TutorialManager_PlayerHealthChanged");
static_assert(sizeof(TutorialManager_PlayerHealthChanged) == 0x000010, "Wrong size on TutorialManager_PlayerHealthChanged");
static_assert(offsetof(TutorialManager_PlayerHealthChanged, HealthChanged) == 0x000000, "Member 'TutorialManager_PlayerHealthChanged::HealthChanged' has a wrong offset!");
static_assert(offsetof(TutorialManager_PlayerHealthChanged, Instigator) == 0x000008, "Member 'TutorialManager_PlayerHealthChanged::Instigator' has a wrong offset!");

// Function Indiana.TutorialManager.PlayerItemAdded
// 0x0010 (0x0010 - 0x0000)
struct TutorialManager_PlayerItemAdded final
{
public:
	struct FItemStack                             Item;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialManager_PlayerItemAdded) == 0x000008, "Wrong alignment on TutorialManager_PlayerItemAdded");
static_assert(sizeof(TutorialManager_PlayerItemAdded) == 0x000010, "Wrong size on TutorialManager_PlayerItemAdded");
static_assert(offsetof(TutorialManager_PlayerItemAdded, Item) == 0x000000, "Member 'TutorialManager_PlayerItemAdded::Item' has a wrong offset!");

// Function Indiana.TutorialManager.PlayerKill
// 0x0118 (0x0118 - 0x0000)
struct TutorialManager_PlayerKill final
{
public:
	class AActor*                                 Victim;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCauseDamageInfo                       CauseDamageInfo;                                   // 0x0008(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialManager_PlayerKill) == 0x000008, "Wrong alignment on TutorialManager_PlayerKill");
static_assert(sizeof(TutorialManager_PlayerKill) == 0x000118, "Wrong size on TutorialManager_PlayerKill");
static_assert(offsetof(TutorialManager_PlayerKill, Victim) == 0x000000, "Member 'TutorialManager_PlayerKill::Victim' has a wrong offset!");
static_assert(offsetof(TutorialManager_PlayerKill, CauseDamageInfo) == 0x000008, "Member 'TutorialManager_PlayerKill::CauseDamageInfo' has a wrong offset!");

// Function Indiana.TutorialManager.PlayerLanded
// 0x0004 (0x0004 - 0x0000)
struct TutorialManager_PlayerLanded final
{
public:
	float                                         DistanceFell;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialManager_PlayerLanded) == 0x000004, "Wrong alignment on TutorialManager_PlayerLanded");
static_assert(sizeof(TutorialManager_PlayerLanded) == 0x000004, "Wrong size on TutorialManager_PlayerLanded");
static_assert(offsetof(TutorialManager_PlayerLanded, DistanceFell) == 0x000000, "Member 'TutorialManager_PlayerLanded::DistanceFell' has a wrong offset!");

// Function Indiana.TutorialManager.PlayerLevelChanged
// 0x0004 (0x0004 - 0x0000)
struct TutorialManager_PlayerLevelChanged final
{
public:
	int32                                         NewLevel;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialManager_PlayerLevelChanged) == 0x000004, "Wrong alignment on TutorialManager_PlayerLevelChanged");
static_assert(sizeof(TutorialManager_PlayerLevelChanged) == 0x000004, "Wrong size on TutorialManager_PlayerLevelChanged");
static_assert(offsetof(TutorialManager_PlayerLevelChanged, NewLevel) == 0x000000, "Member 'TutorialManager_PlayerLevelChanged::NewLevel' has a wrong offset!");

// Function Indiana.TutorialManager.PlayerSkillCheckSuccess
// 0x000C (0x000C - 0x0000)
struct TutorialManager_PlayerSkillCheckSuccess final
{
public:
	EXPGainReason                                 Reason;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         XPEarned;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkill                                        SkillUsed;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TutorialManager_PlayerSkillCheckSuccess) == 0x000004, "Wrong alignment on TutorialManager_PlayerSkillCheckSuccess");
static_assert(sizeof(TutorialManager_PlayerSkillCheckSuccess) == 0x00000C, "Wrong size on TutorialManager_PlayerSkillCheckSuccess");
static_assert(offsetof(TutorialManager_PlayerSkillCheckSuccess, Reason) == 0x000000, "Member 'TutorialManager_PlayerSkillCheckSuccess::Reason' has a wrong offset!");
static_assert(offsetof(TutorialManager_PlayerSkillCheckSuccess, XPEarned) == 0x000004, "Member 'TutorialManager_PlayerSkillCheckSuccess::XPEarned' has a wrong offset!");
static_assert(offsetof(TutorialManager_PlayerSkillCheckSuccess, SkillUsed) == 0x000008, "Member 'TutorialManager_PlayerSkillCheckSuccess::SkillUsed' has a wrong offset!");

// Function Indiana.TutorialManager.PlayerSkillUpdated
// 0x0008 (0x0008 - 0x0000)
struct TutorialManager_PlayerSkillUpdated final
{
public:
	ESkill                                        Skill;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NewValue;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialManager_PlayerSkillUpdated) == 0x000004, "Wrong alignment on TutorialManager_PlayerSkillUpdated");
static_assert(sizeof(TutorialManager_PlayerSkillUpdated) == 0x000008, "Wrong size on TutorialManager_PlayerSkillUpdated");
static_assert(offsetof(TutorialManager_PlayerSkillUpdated, Skill) == 0x000000, "Member 'TutorialManager_PlayerSkillUpdated::Skill' has a wrong offset!");
static_assert(offsetof(TutorialManager_PlayerSkillUpdated, NewValue) == 0x000004, "Member 'TutorialManager_PlayerSkillUpdated::NewValue' has a wrong offset!");

// Function Indiana.TutorialManager.PlayerTakeDamage
// 0x0110 (0x0110 - 0x0000)
struct TutorialManager_PlayerTakeDamage final
{
public:
	struct FCauseDamageInfo                       CauseDamageInfo;                                   // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialManager_PlayerTakeDamage) == 0x000008, "Wrong alignment on TutorialManager_PlayerTakeDamage");
static_assert(sizeof(TutorialManager_PlayerTakeDamage) == 0x000110, "Wrong size on TutorialManager_PlayerTakeDamage");
static_assert(offsetof(TutorialManager_PlayerTakeDamage, CauseDamageInfo) == 0x000000, "Member 'TutorialManager_PlayerTakeDamage::CauseDamageInfo' has a wrong offset!");

// Function Indiana.TutorialManager.PlayerTargetChange
// 0x0001 (0x0001 - 0x0000)
struct TutorialManager_PlayerTargetChange final
{
public:
	bool                                          bAdded;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialManager_PlayerTargetChange) == 0x000001, "Wrong alignment on TutorialManager_PlayerTargetChange");
static_assert(sizeof(TutorialManager_PlayerTargetChange) == 0x000001, "Wrong size on TutorialManager_PlayerTargetChange");
static_assert(offsetof(TutorialManager_PlayerTargetChange, bAdded) == 0x000000, "Member 'TutorialManager_PlayerTargetChange::bAdded' has a wrong offset!");

// Function Indiana.CCSkillsPageWidget.OnUserScrolled
// 0x0004 (0x0004 - 0x0000)
struct CCSkillsPageWidget_OnUserScrolled final
{
public:
	float                                         ScrollAmount;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CCSkillsPageWidget_OnUserScrolled) == 0x000004, "Wrong alignment on CCSkillsPageWidget_OnUserScrolled");
static_assert(sizeof(CCSkillsPageWidget_OnUserScrolled) == 0x000004, "Wrong size on CCSkillsPageWidget_OnUserScrolled");
static_assert(offsetof(CCSkillsPageWidget_OnUserScrolled, ScrollAmount) == 0x000000, "Member 'CCSkillsPageWidget_OnUserScrolled::ScrollAmount' has a wrong offset!");

// Function Indiana.CharacterCreationMasterWidget.OnIntroMovieComplete
// 0x0001 (0x0001 - 0x0000)
struct CharacterCreationMasterWidget_OnIntroMovieComplete final
{
public:
	bool                                          bWasSkipped;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterCreationMasterWidget_OnIntroMovieComplete) == 0x000001, "Wrong alignment on CharacterCreationMasterWidget_OnIntroMovieComplete");
static_assert(sizeof(CharacterCreationMasterWidget_OnIntroMovieComplete) == 0x000001, "Wrong size on CharacterCreationMasterWidget_OnIntroMovieComplete");
static_assert(offsetof(CharacterCreationMasterWidget_OnIntroMovieComplete, bWasSkipped) == 0x000000, "Member 'CharacterCreationMasterWidget_OnIntroMovieComplete::bWasSkipped' has a wrong offset!");

// Function Indiana.CharacterCreationMasterWidget.OnIntroMovieCompleteImpl
// 0x0001 (0x0001 - 0x0000)
struct CharacterCreationMasterWidget_OnIntroMovieCompleteImpl final
{
public:
	bool                                          bWasSkipped;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterCreationMasterWidget_OnIntroMovieCompleteImpl) == 0x000001, "Wrong alignment on CharacterCreationMasterWidget_OnIntroMovieCompleteImpl");
static_assert(sizeof(CharacterCreationMasterWidget_OnIntroMovieCompleteImpl) == 0x000001, "Wrong size on CharacterCreationMasterWidget_OnIntroMovieCompleteImpl");
static_assert(offsetof(CharacterCreationMasterWidget_OnIntroMovieCompleteImpl, bWasSkipped) == 0x000000, "Member 'CharacterCreationMasterWidget_OnIntroMovieCompleteImpl::bWasSkipped' has a wrong offset!");

// Function Indiana.CharacterCreationMasterWidget.OnOutroMoviePartOneComplete
// 0x0001 (0x0001 - 0x0000)
struct CharacterCreationMasterWidget_OnOutroMoviePartOneComplete final
{
public:
	bool                                          bWasSkipped;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterCreationMasterWidget_OnOutroMoviePartOneComplete) == 0x000001, "Wrong alignment on CharacterCreationMasterWidget_OnOutroMoviePartOneComplete");
static_assert(sizeof(CharacterCreationMasterWidget_OnOutroMoviePartOneComplete) == 0x000001, "Wrong size on CharacterCreationMasterWidget_OnOutroMoviePartOneComplete");
static_assert(offsetof(CharacterCreationMasterWidget_OnOutroMoviePartOneComplete, bWasSkipped) == 0x000000, "Member 'CharacterCreationMasterWidget_OnOutroMoviePartOneComplete::bWasSkipped' has a wrong offset!");

// Function Indiana.CharacterCreationMasterWidget.OnOutroMoviePartTwoComplete
// 0x0001 (0x0001 - 0x0000)
struct CharacterCreationMasterWidget_OnOutroMoviePartTwoComplete final
{
public:
	bool                                          bWasSkipped;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterCreationMasterWidget_OnOutroMoviePartTwoComplete) == 0x000001, "Wrong alignment on CharacterCreationMasterWidget_OnOutroMoviePartTwoComplete");
static_assert(sizeof(CharacterCreationMasterWidget_OnOutroMoviePartTwoComplete) == 0x000001, "Wrong size on CharacterCreationMasterWidget_OnOutroMoviePartTwoComplete");
static_assert(offsetof(CharacterCreationMasterWidget_OnOutroMoviePartTwoComplete, bWasSkipped) == 0x000000, "Member 'CharacterCreationMasterWidget_OnOutroMoviePartTwoComplete::bWasSkipped' has a wrong offset!");

// Function Indiana.CharacterCreationMasterWidget.OnOutroMovieTwoComplete
// 0x0001 (0x0001 - 0x0000)
struct CharacterCreationMasterWidget_OnOutroMovieTwoComplete final
{
public:
	bool                                          bWasSkipped;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterCreationMasterWidget_OnOutroMovieTwoComplete) == 0x000001, "Wrong alignment on CharacterCreationMasterWidget_OnOutroMovieTwoComplete");
static_assert(sizeof(CharacterCreationMasterWidget_OnOutroMovieTwoComplete) == 0x000001, "Wrong size on CharacterCreationMasterWidget_OnOutroMovieTwoComplete");
static_assert(offsetof(CharacterCreationMasterWidget_OnOutroMovieTwoComplete, bWasSkipped) == 0x000000, "Member 'CharacterCreationMasterWidget_OnOutroMovieTwoComplete::bWasSkipped' has a wrong offset!");

// Function Indiana.CharacterCreationMasterWidget.PlayPartTwoOutroMovie
// 0x0001 (0x0001 - 0x0000)
struct CharacterCreationMasterWidget_PlayPartTwoOutroMovie final
{
public:
	bool                                          bWasSkipped;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterCreationMasterWidget_PlayPartTwoOutroMovie) == 0x000001, "Wrong alignment on CharacterCreationMasterWidget_PlayPartTwoOutroMovie");
static_assert(sizeof(CharacterCreationMasterWidget_PlayPartTwoOutroMovie) == 0x000001, "Wrong size on CharacterCreationMasterWidget_PlayPartTwoOutroMovie");
static_assert(offsetof(CharacterCreationMasterWidget_PlayPartTwoOutroMovie, bWasSkipped) == 0x000000, "Member 'CharacterCreationMasterWidget_PlayPartTwoOutroMovie::bWasSkipped' has a wrong offset!");

// Function Indiana.DeathClass.Execute
// 0x0008 (0x0008 - 0x0000)
struct DeathClass_Execute final
{
public:
	class UCharacterDeathComponent*               InDeathComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeathClass_Execute) == 0x000008, "Wrong alignment on DeathClass_Execute");
static_assert(sizeof(DeathClass_Execute) == 0x000008, "Wrong size on DeathClass_Execute");
static_assert(offsetof(DeathClass_Execute, InDeathComponent) == 0x000000, "Member 'DeathClass_Execute::InDeathComponent' has a wrong offset!");

// Function Indiana.DeathClass.ExecuteOnReload
// 0x0008 (0x0008 - 0x0000)
struct DeathClass_ExecuteOnReload final
{
public:
	class UCharacterDeathComponent*               InDeathComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeathClass_ExecuteOnReload) == 0x000008, "Wrong alignment on DeathClass_ExecuteOnReload");
static_assert(sizeof(DeathClass_ExecuteOnReload) == 0x000008, "Wrong size on DeathClass_ExecuteOnReload");
static_assert(offsetof(DeathClass_ExecuteOnReload, InDeathComponent) == 0x000000, "Member 'DeathClass_ExecuteOnReload::InDeathComponent' has a wrong offset!");

// Function Indiana.DeathClass.FindAndPostAudioEvent
// 0x0008 (0x0008 - 0x0000)
struct DeathClass_FindAndPostAudioEvent final
{
public:
	struct FGameplayTag                           DeathAudioEvent;                                   // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeathClass_FindAndPostAudioEvent) == 0x000004, "Wrong alignment on DeathClass_FindAndPostAudioEvent");
static_assert(sizeof(DeathClass_FindAndPostAudioEvent) == 0x000008, "Wrong size on DeathClass_FindAndPostAudioEvent");
static_assert(offsetof(DeathClass_FindAndPostAudioEvent, DeathAudioEvent) == 0x000000, "Member 'DeathClass_FindAndPostAudioEvent::DeathAudioEvent' has a wrong offset!");

// Function Indiana.DeathClass.FindAudioEvent
// 0x0010 (0x0010 - 0x0000)
struct DeathClass_FindAudioEvent final
{
public:
	struct FGameplayTag                           DeathAudioEvent;                                   // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeathClass_FindAudioEvent) == 0x000008, "Wrong alignment on DeathClass_FindAudioEvent");
static_assert(sizeof(DeathClass_FindAudioEvent) == 0x000010, "Wrong size on DeathClass_FindAudioEvent");
static_assert(offsetof(DeathClass_FindAudioEvent, DeathAudioEvent) == 0x000000, "Member 'DeathClass_FindAudioEvent::DeathAudioEvent' has a wrong offset!");
static_assert(offsetof(DeathClass_FindAudioEvent, ReturnValue) == 0x000008, "Member 'DeathClass_FindAudioEvent::ReturnValue' has a wrong offset!");

// Function Indiana.DeathClass.Tick
// 0x0004 (0x0004 - 0x0000)
struct DeathClass_Tick final
{
public:
	float                                         Delta;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeathClass_Tick) == 0x000004, "Wrong alignment on DeathClass_Tick");
static_assert(sizeof(DeathClass_Tick) == 0x000004, "Wrong size on DeathClass_Tick");
static_assert(offsetof(DeathClass_Tick, Delta) == 0x000000, "Member 'DeathClass_Tick::Delta' has a wrong offset!");

// Function Indiana.CustomMaterialModVisual.ApplyScalarParam
// 0x0014 (0x0014 - 0x0000)
struct CustomMaterialModVisual_ApplyScalarParam final
{
public:
	class FName                                   MaterialSlotName;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParamName;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ParamValue;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomMaterialModVisual_ApplyScalarParam) == 0x000004, "Wrong alignment on CustomMaterialModVisual_ApplyScalarParam");
static_assert(sizeof(CustomMaterialModVisual_ApplyScalarParam) == 0x000014, "Wrong size on CustomMaterialModVisual_ApplyScalarParam");
static_assert(offsetof(CustomMaterialModVisual_ApplyScalarParam, MaterialSlotName) == 0x000000, "Member 'CustomMaterialModVisual_ApplyScalarParam::MaterialSlotName' has a wrong offset!");
static_assert(offsetof(CustomMaterialModVisual_ApplyScalarParam, ParamName) == 0x000008, "Member 'CustomMaterialModVisual_ApplyScalarParam::ParamName' has a wrong offset!");
static_assert(offsetof(CustomMaterialModVisual_ApplyScalarParam, ParamValue) == 0x000010, "Member 'CustomMaterialModVisual_ApplyScalarParam::ParamValue' has a wrong offset!");

// Function Indiana.CustomMaterialModVisual.ApplyScalarParamToAll
// 0x0014 (0x0014 - 0x0000)
struct CustomMaterialModVisual_ApplyScalarParamToAll final
{
public:
	class FName                                   ParamName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ParamValue;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OnlyApplyIfParamSet;                               // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomMaterialModVisual_ApplyScalarParamToAll) == 0x000004, "Wrong alignment on CustomMaterialModVisual_ApplyScalarParamToAll");
static_assert(sizeof(CustomMaterialModVisual_ApplyScalarParamToAll) == 0x000014, "Wrong size on CustomMaterialModVisual_ApplyScalarParamToAll");
static_assert(offsetof(CustomMaterialModVisual_ApplyScalarParamToAll, ParamName) == 0x000000, "Member 'CustomMaterialModVisual_ApplyScalarParamToAll::ParamName' has a wrong offset!");
static_assert(offsetof(CustomMaterialModVisual_ApplyScalarParamToAll, ParamValue) == 0x000008, "Member 'CustomMaterialModVisual_ApplyScalarParamToAll::ParamValue' has a wrong offset!");
static_assert(offsetof(CustomMaterialModVisual_ApplyScalarParamToAll, OnlyApplyIfParamSet) == 0x00000C, "Member 'CustomMaterialModVisual_ApplyScalarParamToAll::OnlyApplyIfParamSet' has a wrong offset!");

// Function Indiana.CustomMaterialModVisual.ApplyTextureParam
// 0x0038 (0x0038 - 0x0000)
struct CustomMaterialModVisual_ApplyTextureParam final
{
public:
	class FName                                   MaterialSlotName;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParamName;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                ParamValue;                                        // 0x0010(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomMaterialModVisual_ApplyTextureParam) == 0x000008, "Wrong alignment on CustomMaterialModVisual_ApplyTextureParam");
static_assert(sizeof(CustomMaterialModVisual_ApplyTextureParam) == 0x000038, "Wrong size on CustomMaterialModVisual_ApplyTextureParam");
static_assert(offsetof(CustomMaterialModVisual_ApplyTextureParam, MaterialSlotName) == 0x000000, "Member 'CustomMaterialModVisual_ApplyTextureParam::MaterialSlotName' has a wrong offset!");
static_assert(offsetof(CustomMaterialModVisual_ApplyTextureParam, ParamName) == 0x000008, "Member 'CustomMaterialModVisual_ApplyTextureParam::ParamName' has a wrong offset!");
static_assert(offsetof(CustomMaterialModVisual_ApplyTextureParam, ParamValue) == 0x000010, "Member 'CustomMaterialModVisual_ApplyTextureParam::ParamValue' has a wrong offset!");

// Function Indiana.CustomMaterialModVisual.ApplyTextureParamToAll
// 0x0038 (0x0038 - 0x0000)
struct CustomMaterialModVisual_ApplyTextureParamToAll final
{
public:
	class FName                                   ParamName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                ParamValue;                                        // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OnlyApplyIfParamSet;                               // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomMaterialModVisual_ApplyTextureParamToAll) == 0x000008, "Wrong alignment on CustomMaterialModVisual_ApplyTextureParamToAll");
static_assert(sizeof(CustomMaterialModVisual_ApplyTextureParamToAll) == 0x000038, "Wrong size on CustomMaterialModVisual_ApplyTextureParamToAll");
static_assert(offsetof(CustomMaterialModVisual_ApplyTextureParamToAll, ParamName) == 0x000000, "Member 'CustomMaterialModVisual_ApplyTextureParamToAll::ParamName' has a wrong offset!");
static_assert(offsetof(CustomMaterialModVisual_ApplyTextureParamToAll, ParamValue) == 0x000008, "Member 'CustomMaterialModVisual_ApplyTextureParamToAll::ParamValue' has a wrong offset!");
static_assert(offsetof(CustomMaterialModVisual_ApplyTextureParamToAll, OnlyApplyIfParamSet) == 0x000030, "Member 'CustomMaterialModVisual_ApplyTextureParamToAll::OnlyApplyIfParamSet' has a wrong offset!");

// Function Indiana.CustomMaterialModVisual.ApplyVectorParam
// 0x0020 (0x0020 - 0x0000)
struct CustomMaterialModVisual_ApplyVectorParam final
{
public:
	class FName                                   MaterialSlotName;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParamName;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ParamValue;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomMaterialModVisual_ApplyVectorParam) == 0x000004, "Wrong alignment on CustomMaterialModVisual_ApplyVectorParam");
static_assert(sizeof(CustomMaterialModVisual_ApplyVectorParam) == 0x000020, "Wrong size on CustomMaterialModVisual_ApplyVectorParam");
static_assert(offsetof(CustomMaterialModVisual_ApplyVectorParam, MaterialSlotName) == 0x000000, "Member 'CustomMaterialModVisual_ApplyVectorParam::MaterialSlotName' has a wrong offset!");
static_assert(offsetof(CustomMaterialModVisual_ApplyVectorParam, ParamName) == 0x000008, "Member 'CustomMaterialModVisual_ApplyVectorParam::ParamName' has a wrong offset!");
static_assert(offsetof(CustomMaterialModVisual_ApplyVectorParam, ParamValue) == 0x000010, "Member 'CustomMaterialModVisual_ApplyVectorParam::ParamValue' has a wrong offset!");

// Function Indiana.CustomMaterialModVisual.ApplyVectorParamToAll
// 0x0020 (0x0020 - 0x0000)
struct CustomMaterialModVisual_ApplyVectorParamToAll final
{
public:
	class FName                                   ParamName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ParamValue;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OnlyApplyIfParamSet;                               // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomMaterialModVisual_ApplyVectorParamToAll) == 0x000004, "Wrong alignment on CustomMaterialModVisual_ApplyVectorParamToAll");
static_assert(sizeof(CustomMaterialModVisual_ApplyVectorParamToAll) == 0x000020, "Wrong size on CustomMaterialModVisual_ApplyVectorParamToAll");
static_assert(offsetof(CustomMaterialModVisual_ApplyVectorParamToAll, ParamName) == 0x000000, "Member 'CustomMaterialModVisual_ApplyVectorParamToAll::ParamName' has a wrong offset!");
static_assert(offsetof(CustomMaterialModVisual_ApplyVectorParamToAll, ParamValue) == 0x000008, "Member 'CustomMaterialModVisual_ApplyVectorParamToAll::ParamValue' has a wrong offset!");
static_assert(offsetof(CustomMaterialModVisual_ApplyVectorParamToAll, OnlyApplyIfParamSet) == 0x000018, "Member 'CustomMaterialModVisual_ApplyVectorParamToAll::OnlyApplyIfParamSet' has a wrong offset!");

// Function Indiana.CustomMaterialModVisual.CopyParamOverrides
// 0x0010 (0x0010 - 0x0000)
struct CustomMaterialModVisual_CopyParamOverrides final
{
public:
	class UMaterialInstanceDynamic*               Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DestinationSlotName;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomMaterialModVisual_CopyParamOverrides) == 0x000008, "Wrong alignment on CustomMaterialModVisual_CopyParamOverrides");
static_assert(sizeof(CustomMaterialModVisual_CopyParamOverrides) == 0x000010, "Wrong size on CustomMaterialModVisual_CopyParamOverrides");
static_assert(offsetof(CustomMaterialModVisual_CopyParamOverrides, Source) == 0x000000, "Member 'CustomMaterialModVisual_CopyParamOverrides::Source' has a wrong offset!");
static_assert(offsetof(CustomMaterialModVisual_CopyParamOverrides, DestinationSlotName) == 0x000008, "Member 'CustomMaterialModVisual_CopyParamOverrides::DestinationSlotName' has a wrong offset!");

// Function Indiana.CharacterInfoComponent.OnCompanionRegistered
// 0x0010 (0x0010 - 0x0000)
struct CharacterInfoComponent_OnCompanionRegistered final
{
public:
	class AIndianaAiCharacter*                    Companion;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRegister;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterInfoComponent_OnCompanionRegistered) == 0x000008, "Wrong alignment on CharacterInfoComponent_OnCompanionRegistered");
static_assert(sizeof(CharacterInfoComponent_OnCompanionRegistered) == 0x000010, "Wrong size on CharacterInfoComponent_OnCompanionRegistered");
static_assert(offsetof(CharacterInfoComponent_OnCompanionRegistered, Companion) == 0x000000, "Member 'CharacterInfoComponent_OnCompanionRegistered::Companion' has a wrong offset!");
static_assert(offsetof(CharacterInfoComponent_OnCompanionRegistered, bRegister) == 0x000008, "Member 'CharacterInfoComponent_OnCompanionRegistered::bRegister' has a wrong offset!");

// Function Indiana.CharacterInfoComponent.OnStatUpdated
// 0x0008 (0x0008 - 0x0000)
struct CharacterInfoComponent_OnStatUpdated final
{
public:
	const class URpgStat*                         Stat;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInfoComponent_OnStatUpdated) == 0x000008, "Wrong alignment on CharacterInfoComponent_OnStatUpdated");
static_assert(sizeof(CharacterInfoComponent_OnStatUpdated) == 0x000008, "Wrong size on CharacterInfoComponent_OnStatUpdated");
static_assert(offsetof(CharacterInfoComponent_OnStatUpdated, Stat) == 0x000000, "Member 'CharacterInfoComponent_OnStatUpdated::Stat' has a wrong offset!");

// Function Indiana.CharacterInfoComponent.OnWeaponEndEquip
// 0x0008 (0x0008 - 0x0000)
struct CharacterInfoComponent_OnWeaponEndEquip final
{
public:
	class UWeapon*                                Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInfoComponent_OnWeaponEndEquip) == 0x000008, "Wrong alignment on CharacterInfoComponent_OnWeaponEndEquip");
static_assert(sizeof(CharacterInfoComponent_OnWeaponEndEquip) == 0x000008, "Wrong size on CharacterInfoComponent_OnWeaponEndEquip");
static_assert(offsetof(CharacterInfoComponent_OnWeaponEndEquip, Weapon) == 0x000000, "Member 'CharacterInfoComponent_OnWeaponEndEquip::Weapon' has a wrong offset!");

// Function Indiana.CharacterInfoComponent.OnWeaponEndUnequip
// 0x0008 (0x0008 - 0x0000)
struct CharacterInfoComponent_OnWeaponEndUnequip final
{
public:
	class UWeapon*                                Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInfoComponent_OnWeaponEndUnequip) == 0x000008, "Wrong alignment on CharacterInfoComponent_OnWeaponEndUnequip");
static_assert(sizeof(CharacterInfoComponent_OnWeaponEndUnequip) == 0x000008, "Wrong size on CharacterInfoComponent_OnWeaponEndUnequip");
static_assert(offsetof(CharacterInfoComponent_OnWeaponEndUnequip, Weapon) == 0x000000, "Member 'CharacterInfoComponent_OnWeaponEndUnequip::Weapon' has a wrong offset!");

// Function Indiana.CharacterInfoComponent.PerkPointsAdd
// 0x0004 (0x0004 - 0x0000)
struct CharacterInfoComponent_PerkPointsAdd final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInfoComponent_PerkPointsAdd) == 0x000004, "Wrong alignment on CharacterInfoComponent_PerkPointsAdd");
static_assert(sizeof(CharacterInfoComponent_PerkPointsAdd) == 0x000004, "Wrong size on CharacterInfoComponent_PerkPointsAdd");
static_assert(offsetof(CharacterInfoComponent_PerkPointsAdd, Value) == 0x000000, "Member 'CharacterInfoComponent_PerkPointsAdd::Value' has a wrong offset!");

// Function Indiana.CharacterInfoComponent.PerkPurchase
// 0x0010 (0x0010 - 0x0000)
struct CharacterInfoComponent_PerkPurchase final
{
public:
	class FString                                 PerkName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInfoComponent_PerkPurchase) == 0x000008, "Wrong alignment on CharacterInfoComponent_PerkPurchase");
static_assert(sizeof(CharacterInfoComponent_PerkPurchase) == 0x000010, "Wrong size on CharacterInfoComponent_PerkPurchase");
static_assert(offsetof(CharacterInfoComponent_PerkPurchase, PerkName) == 0x000000, "Member 'CharacterInfoComponent_PerkPurchase::PerkName' has a wrong offset!");

// Function Indiana.CharacterInfoComponent.PerkRemove
// 0x0010 (0x0010 - 0x0000)
struct CharacterInfoComponent_PerkRemove final
{
public:
	class FString                                 PerkName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInfoComponent_PerkRemove) == 0x000008, "Wrong alignment on CharacterInfoComponent_PerkRemove");
static_assert(sizeof(CharacterInfoComponent_PerkRemove) == 0x000010, "Wrong size on CharacterInfoComponent_PerkRemove");
static_assert(offsetof(CharacterInfoComponent_PerkRemove, PerkName) == 0x000000, "Member 'CharacterInfoComponent_PerkRemove::PerkName' has a wrong offset!");

// Function Indiana.CharacterInfoComponent.SetLevel
// 0x0004 (0x0004 - 0x0000)
struct CharacterInfoComponent_SetLevel final
{
public:
	int32                                         NewLevel;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInfoComponent_SetLevel) == 0x000004, "Wrong alignment on CharacterInfoComponent_SetLevel");
static_assert(sizeof(CharacterInfoComponent_SetLevel) == 0x000004, "Wrong size on CharacterInfoComponent_SetLevel");
static_assert(offsetof(CharacterInfoComponent_SetLevel, NewLevel) == 0x000000, "Member 'CharacterInfoComponent_SetLevel::NewLevel' has a wrong offset!");

// Function Indiana.CharacterInfoComponent.GetCreatureXPType
// 0x0001 (0x0001 - 0x0000)
struct CharacterInfoComponent_GetCreatureXPType final
{
public:
	ECreatureXPType                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInfoComponent_GetCreatureXPType) == 0x000001, "Wrong alignment on CharacterInfoComponent_GetCreatureXPType");
static_assert(sizeof(CharacterInfoComponent_GetCreatureXPType) == 0x000001, "Wrong size on CharacterInfoComponent_GetCreatureXPType");
static_assert(offsetof(CharacterInfoComponent_GetCreatureXPType, ReturnValue) == 0x000000, "Member 'CharacterInfoComponent_GetCreatureXPType::ReturnValue' has a wrong offset!");

// Function Indiana.CharacterInfoComponent.GetGender
// 0x0001 (0x0001 - 0x0000)
struct CharacterInfoComponent_GetGender final
{
public:
	EGender                                       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInfoComponent_GetGender) == 0x000001, "Wrong alignment on CharacterInfoComponent_GetGender");
static_assert(sizeof(CharacterInfoComponent_GetGender) == 0x000001, "Wrong size on CharacterInfoComponent_GetGender");
static_assert(offsetof(CharacterInfoComponent_GetGender, ReturnValue) == 0x000000, "Member 'CharacterInfoComponent_GetGender::ReturnValue' has a wrong offset!");

// Function Indiana.CharacterInfoComponent.GetLevel
// 0x0004 (0x0004 - 0x0000)
struct CharacterInfoComponent_GetLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInfoComponent_GetLevel) == 0x000004, "Wrong alignment on CharacterInfoComponent_GetLevel");
static_assert(sizeof(CharacterInfoComponent_GetLevel) == 0x000004, "Wrong size on CharacterInfoComponent_GetLevel");
static_assert(offsetof(CharacterInfoComponent_GetLevel, ReturnValue) == 0x000000, "Member 'CharacterInfoComponent_GetLevel::ReturnValue' has a wrong offset!");

// Function Indiana.CharacterInfoComponent.GetLevelScaledAtLocation
// 0x0010 (0x0010 - 0x0000)
struct CharacterInfoComponent_GetLevelScaledAtLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInfoComponent_GetLevelScaledAtLocation) == 0x000004, "Wrong alignment on CharacterInfoComponent_GetLevelScaledAtLocation");
static_assert(sizeof(CharacterInfoComponent_GetLevelScaledAtLocation) == 0x000010, "Wrong size on CharacterInfoComponent_GetLevelScaledAtLocation");
static_assert(offsetof(CharacterInfoComponent_GetLevelScaledAtLocation, Location) == 0x000000, "Member 'CharacterInfoComponent_GetLevelScaledAtLocation::Location' has a wrong offset!");
static_assert(offsetof(CharacterInfoComponent_GetLevelScaledAtLocation, ReturnValue) == 0x00000C, "Member 'CharacterInfoComponent_GetLevelScaledAtLocation::ReturnValue' has a wrong offset!");

// Function Indiana.CharacterInfoComponent.GetLevelScaledByWorld
// 0x0004 (0x0004 - 0x0000)
struct CharacterInfoComponent_GetLevelScaledByWorld final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInfoComponent_GetLevelScaledByWorld) == 0x000004, "Wrong alignment on CharacterInfoComponent_GetLevelScaledByWorld");
static_assert(sizeof(CharacterInfoComponent_GetLevelScaledByWorld) == 0x000004, "Wrong size on CharacterInfoComponent_GetLevelScaledByWorld");
static_assert(offsetof(CharacterInfoComponent_GetLevelScaledByWorld, ReturnValue) == 0x000000, "Member 'CharacterInfoComponent_GetLevelScaledByWorld::ReturnValue' has a wrong offset!");

// Function Indiana.CharacterInfoComponent.GetName
// 0x0010 (0x0010 - 0x0000)
struct CharacterInfoComponent_GetName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInfoComponent_GetName) == 0x000008, "Wrong alignment on CharacterInfoComponent_GetName");
static_assert(sizeof(CharacterInfoComponent_GetName) == 0x000010, "Wrong size on CharacterInfoComponent_GetName");
static_assert(offsetof(CharacterInfoComponent_GetName, ReturnValue) == 0x000000, "Member 'CharacterInfoComponent_GetName::ReturnValue' has a wrong offset!");

// Function Indiana.CharacterMedKitWidget.AbilityControlModeChanged
// 0x0004 (0x0004 - 0x0000)
struct CharacterMedKitWidget_AbilityControlModeChanged final
{
public:
	int32                                         NewSetting;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterMedKitWidget_AbilityControlModeChanged) == 0x000004, "Wrong alignment on CharacterMedKitWidget_AbilityControlModeChanged");
static_assert(sizeof(CharacterMedKitWidget_AbilityControlModeChanged) == 0x000004, "Wrong size on CharacterMedKitWidget_AbilityControlModeChanged");
static_assert(offsetof(CharacterMedKitWidget_AbilityControlModeChanged, NewSetting) == 0x000000, "Member 'CharacterMedKitWidget_AbilityControlModeChanged::NewSetting' has a wrong offset!");

// Function Indiana.CharacterMedKitWidget.InhalerModeChanged
// 0x0004 (0x0004 - 0x0000)
struct CharacterMedKitWidget_InhalerModeChanged final
{
public:
	int32                                         NewSetting;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterMedKitWidget_InhalerModeChanged) == 0x000004, "Wrong alignment on CharacterMedKitWidget_InhalerModeChanged");
static_assert(sizeof(CharacterMedKitWidget_InhalerModeChanged) == 0x000004, "Wrong size on CharacterMedKitWidget_InhalerModeChanged");
static_assert(offsetof(CharacterMedKitWidget_InhalerModeChanged, NewSetting) == 0x000000, "Member 'CharacterMedKitWidget_InhalerModeChanged::NewSetting' has a wrong offset!");

// Function Indiana.CharacterMedKitWidget.OnHealthChanged
// 0x0010 (0x0010 - 0x0000)
struct CharacterMedKitWidget_OnHealthChanged final
{
public:
	float                                         HealthChange;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 InInstigator;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterMedKitWidget_OnHealthChanged) == 0x000008, "Wrong alignment on CharacterMedKitWidget_OnHealthChanged");
static_assert(sizeof(CharacterMedKitWidget_OnHealthChanged) == 0x000010, "Wrong size on CharacterMedKitWidget_OnHealthChanged");
static_assert(offsetof(CharacterMedKitWidget_OnHealthChanged, HealthChange) == 0x000000, "Member 'CharacterMedKitWidget_OnHealthChanged::HealthChange' has a wrong offset!");
static_assert(offsetof(CharacterMedKitWidget_OnHealthChanged, InInstigator) == 0x000008, "Member 'CharacterMedKitWidget_OnHealthChanged::InInstigator' has a wrong offset!");

// Function Indiana.CharacterMedKitWidget.OnInventoryItemAddedRemoved
// 0x0010 (0x0010 - 0x0000)
struct CharacterMedKitWidget_OnInventoryItemAddedRemoved final
{
public:
	struct FItemStack                             ItemStack;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterMedKitWidget_OnInventoryItemAddedRemoved) == 0x000008, "Wrong alignment on CharacterMedKitWidget_OnInventoryItemAddedRemoved");
static_assert(sizeof(CharacterMedKitWidget_OnInventoryItemAddedRemoved) == 0x000010, "Wrong size on CharacterMedKitWidget_OnInventoryItemAddedRemoved");
static_assert(offsetof(CharacterMedKitWidget_OnInventoryItemAddedRemoved, ItemStack) == 0x000000, "Member 'CharacterMedKitWidget_OnInventoryItemAddedRemoved::ItemStack' has a wrong offset!");

// Function Indiana.CharacterMedKitWidget.UpdateDrugSlots
// 0x0004 (0x0004 - 0x0000)
struct CharacterMedKitWidget_UpdateDrugSlots final
{
public:
	int32                                         ConsumablesUsed;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterMedKitWidget_UpdateDrugSlots) == 0x000004, "Wrong alignment on CharacterMedKitWidget_UpdateDrugSlots");
static_assert(sizeof(CharacterMedKitWidget_UpdateDrugSlots) == 0x000004, "Wrong size on CharacterMedKitWidget_UpdateDrugSlots");
static_assert(offsetof(CharacterMedKitWidget_UpdateDrugSlots, ConsumablesUsed) == 0x000000, "Member 'CharacterMedKitWidget_UpdateDrugSlots::ConsumablesUsed' has a wrong offset!");

// Function Indiana.CharacterNameplateWidget.OnLevelChanged
// 0x0004 (0x0004 - 0x0000)
struct CharacterNameplateWidget_OnLevelChanged final
{
public:
	int32                                         NewLevel;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterNameplateWidget_OnLevelChanged) == 0x000004, "Wrong alignment on CharacterNameplateWidget_OnLevelChanged");
static_assert(sizeof(CharacterNameplateWidget_OnLevelChanged) == 0x000004, "Wrong size on CharacterNameplateWidget_OnLevelChanged");
static_assert(offsetof(CharacterNameplateWidget_OnLevelChanged, NewLevel) == 0x000000, "Member 'CharacterNameplateWidget_OnLevelChanged::NewLevel' has a wrong offset!");

// Function Indiana.CharacterOverviewWidget.HideTTDMeter
// 0x0001 (0x0001 - 0x0000)
struct CharacterOverviewWidget_HideTTDMeter final
{
public:
	bool                                          bHide;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterOverviewWidget_HideTTDMeter) == 0x000001, "Wrong alignment on CharacterOverviewWidget_HideTTDMeter");
static_assert(sizeof(CharacterOverviewWidget_HideTTDMeter) == 0x000001, "Wrong size on CharacterOverviewWidget_HideTTDMeter");
static_assert(offsetof(CharacterOverviewWidget_HideTTDMeter, bHide) == 0x000000, "Member 'CharacterOverviewWidget_HideTTDMeter::bHide' has a wrong offset!");

// Function Indiana.CharacterOverviewWidget.OnAbilityControlModeChanged
// 0x0004 (0x0004 - 0x0000)
struct CharacterOverviewWidget_OnAbilityControlModeChanged final
{
public:
	int32                                         AbilityControlModeIn;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterOverviewWidget_OnAbilityControlModeChanged) == 0x000004, "Wrong alignment on CharacterOverviewWidget_OnAbilityControlModeChanged");
static_assert(sizeof(CharacterOverviewWidget_OnAbilityControlModeChanged) == 0x000004, "Wrong size on CharacterOverviewWidget_OnAbilityControlModeChanged");
static_assert(offsetof(CharacterOverviewWidget_OnAbilityControlModeChanged, AbilityControlModeIn) == 0x000000, "Member 'CharacterOverviewWidget_OnAbilityControlModeChanged::AbilityControlModeIn' has a wrong offset!");

// Function Indiana.CharacterOverviewWidget.OnCombatStateChange
// 0x0002 (0x0002 - 0x0000)
struct CharacterOverviewWidget_OnCombatStateChange final
{
public:
	bool                                          bCombatIn;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestoring;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterOverviewWidget_OnCombatStateChange) == 0x000001, "Wrong alignment on CharacterOverviewWidget_OnCombatStateChange");
static_assert(sizeof(CharacterOverviewWidget_OnCombatStateChange) == 0x000002, "Wrong size on CharacterOverviewWidget_OnCombatStateChange");
static_assert(offsetof(CharacterOverviewWidget_OnCombatStateChange, bCombatIn) == 0x000000, "Member 'CharacterOverviewWidget_OnCombatStateChange::bCombatIn' has a wrong offset!");
static_assert(offsetof(CharacterOverviewWidget_OnCombatStateChange, bRestoring) == 0x000001, "Member 'CharacterOverviewWidget_OnCombatStateChange::bRestoring' has a wrong offset!");

// Function Indiana.CharacterOverviewWidget.OnDifficultyChanged
// 0x0001 (0x0001 - 0x0000)
struct CharacterOverviewWidget_OnDifficultyChanged final
{
public:
	EGameDifficulty                               DifficultyIn;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterOverviewWidget_OnDifficultyChanged) == 0x000001, "Wrong alignment on CharacterOverviewWidget_OnDifficultyChanged");
static_assert(sizeof(CharacterOverviewWidget_OnDifficultyChanged) == 0x000001, "Wrong size on CharacterOverviewWidget_OnDifficultyChanged");
static_assert(offsetof(CharacterOverviewWidget_OnDifficultyChanged, DifficultyIn) == 0x000000, "Member 'CharacterOverviewWidget_OnDifficultyChanged::DifficultyIn' has a wrong offset!");

// Function Indiana.CharacterOverviewWidget.OnDodged
// 0x0001 (0x0001 - 0x0000)
struct CharacterOverviewWidget_OnDodged final
{
public:
	EDodgeDirection                               EDodgeDirection;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterOverviewWidget_OnDodged) == 0x000001, "Wrong alignment on CharacterOverviewWidget_OnDodged");
static_assert(sizeof(CharacterOverviewWidget_OnDodged) == 0x000001, "Wrong size on CharacterOverviewWidget_OnDodged");
static_assert(offsetof(CharacterOverviewWidget_OnDodged, EDodgeDirection) == 0x000000, "Member 'CharacterOverviewWidget_OnDodged::EDodgeDirection' has a wrong offset!");

// Function Indiana.CharacterOverviewWidget.OnDodgeDisplayModeChanged
// 0x0004 (0x0004 - 0x0000)
struct CharacterOverviewWidget_OnDodgeDisplayModeChanged final
{
public:
	int32                                         DodgeDisplayModeIn;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterOverviewWidget_OnDodgeDisplayModeChanged) == 0x000004, "Wrong alignment on CharacterOverviewWidget_OnDodgeDisplayModeChanged");
static_assert(sizeof(CharacterOverviewWidget_OnDodgeDisplayModeChanged) == 0x000004, "Wrong size on CharacterOverviewWidget_OnDodgeDisplayModeChanged");
static_assert(offsetof(CharacterOverviewWidget_OnDodgeDisplayModeChanged, DodgeDisplayModeIn) == 0x000000, "Member 'CharacterOverviewWidget_OnDodgeDisplayModeChanged::DodgeDisplayModeIn' has a wrong offset!");

// Function Indiana.CharacterOverviewWidget.OnHUDVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct CharacterOverviewWidget_OnHUDVisibilityChanged final
{
public:
	bool                                          bHUDVisibility;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterOverviewWidget_OnHUDVisibilityChanged) == 0x000001, "Wrong alignment on CharacterOverviewWidget_OnHUDVisibilityChanged");
static_assert(sizeof(CharacterOverviewWidget_OnHUDVisibilityChanged) == 0x000001, "Wrong size on CharacterOverviewWidget_OnHUDVisibilityChanged");
static_assert(offsetof(CharacterOverviewWidget_OnHUDVisibilityChanged, bHUDVisibility) == 0x000000, "Member 'CharacterOverviewWidget_OnHUDVisibilityChanged::bHUDVisibility' has a wrong offset!");

// Function Indiana.CharacterOverviewWidget.OnInhalerModeChanged
// 0x0004 (0x0004 - 0x0000)
struct CharacterOverviewWidget_OnInhalerModeChanged final
{
public:
	int32                                         InhalerModeIn;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterOverviewWidget_OnInhalerModeChanged) == 0x000004, "Wrong alignment on CharacterOverviewWidget_OnInhalerModeChanged");
static_assert(sizeof(CharacterOverviewWidget_OnInhalerModeChanged) == 0x000004, "Wrong size on CharacterOverviewWidget_OnInhalerModeChanged");
static_assert(offsetof(CharacterOverviewWidget_OnInhalerModeChanged, InhalerModeIn) == 0x000000, "Member 'CharacterOverviewWidget_OnInhalerModeChanged::InhalerModeIn' has a wrong offset!");

// Function Indiana.CharacterOverviewWidget.OnPlayerCombatStateChange
// 0x0001 (0x0001 - 0x0000)
struct CharacterOverviewWidget_OnPlayerCombatStateChange final
{
public:
	bool                                          IsPlayerInCombat;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterOverviewWidget_OnPlayerCombatStateChange) == 0x000001, "Wrong alignment on CharacterOverviewWidget_OnPlayerCombatStateChange");
static_assert(sizeof(CharacterOverviewWidget_OnPlayerCombatStateChange) == 0x000001, "Wrong size on CharacterOverviewWidget_OnPlayerCombatStateChange");
static_assert(offsetof(CharacterOverviewWidget_OnPlayerCombatStateChange, IsPlayerInCombat) == 0x000000, "Member 'CharacterOverviewWidget_OnPlayerCombatStateChange::IsPlayerInCombat' has a wrong offset!");

// Function Indiana.CharacterOverviewWidget.OnPlayerStatusBarModeChanged
// 0x0004 (0x0004 - 0x0000)
struct CharacterOverviewWidget_OnPlayerStatusBarModeChanged final
{
public:
	int32                                         ModeIn;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterOverviewWidget_OnPlayerStatusBarModeChanged) == 0x000004, "Wrong alignment on CharacterOverviewWidget_OnPlayerStatusBarModeChanged");
static_assert(sizeof(CharacterOverviewWidget_OnPlayerStatusBarModeChanged) == 0x000004, "Wrong size on CharacterOverviewWidget_OnPlayerStatusBarModeChanged");
static_assert(offsetof(CharacterOverviewWidget_OnPlayerStatusBarModeChanged, ModeIn) == 0x000000, "Member 'CharacterOverviewWidget_OnPlayerStatusBarModeChanged::ModeIn' has a wrong offset!");

// Function Indiana.CharacterOverviewWidget.OnPreventTTDChanged
// 0x0001 (0x0001 - 0x0000)
struct CharacterOverviewWidget_OnPreventTTDChanged final
{
public:
	bool                                          bPreventTTD;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterOverviewWidget_OnPreventTTDChanged) == 0x000001, "Wrong alignment on CharacterOverviewWidget_OnPreventTTDChanged");
static_assert(sizeof(CharacterOverviewWidget_OnPreventTTDChanged) == 0x000001, "Wrong size on CharacterOverviewWidget_OnPreventTTDChanged");
static_assert(offsetof(CharacterOverviewWidget_OnPreventTTDChanged, bPreventTTD) == 0x000000, "Member 'CharacterOverviewWidget_OnPreventTTDChanged::bPreventTTD' has a wrong offset!");

// Function Indiana.CharacterOverviewWidget.OnSkillUpdated
// 0x0008 (0x0008 - 0x0000)
struct CharacterOverviewWidget_OnSkillUpdated final
{
public:
	ESkill                                        Skill;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NewValue;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterOverviewWidget_OnSkillUpdated) == 0x000004, "Wrong alignment on CharacterOverviewWidget_OnSkillUpdated");
static_assert(sizeof(CharacterOverviewWidget_OnSkillUpdated) == 0x000008, "Wrong size on CharacterOverviewWidget_OnSkillUpdated");
static_assert(offsetof(CharacterOverviewWidget_OnSkillUpdated, Skill) == 0x000000, "Member 'CharacterOverviewWidget_OnSkillUpdated::Skill' has a wrong offset!");
static_assert(offsetof(CharacterOverviewWidget_OnSkillUpdated, NewValue) == 0x000004, "Member 'CharacterOverviewWidget_OnSkillUpdated::NewValue' has a wrong offset!");

// Function Indiana.CharacterOverviewWidget.OnSurvivalModeChanged
// 0x0001 (0x0001 - 0x0000)
struct CharacterOverviewWidget_OnSurvivalModeChanged final
{
public:
	bool                                          bSurvivalBarVisibilityIn;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterOverviewWidget_OnSurvivalModeChanged) == 0x000001, "Wrong alignment on CharacterOverviewWidget_OnSurvivalModeChanged");
static_assert(sizeof(CharacterOverviewWidget_OnSurvivalModeChanged) == 0x000001, "Wrong size on CharacterOverviewWidget_OnSurvivalModeChanged");
static_assert(offsetof(CharacterOverviewWidget_OnSurvivalModeChanged, bSurvivalBarVisibilityIn) == 0x000000, "Member 'CharacterOverviewWidget_OnSurvivalModeChanged::bSurvivalBarVisibilityIn' has a wrong offset!");

// Function Indiana.CharacterOverviewWidget.OnTTDDisplayModeChanged
// 0x0004 (0x0004 - 0x0000)
struct CharacterOverviewWidget_OnTTDDisplayModeChanged final
{
public:
	int32                                         TTDDisplayModeIn;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterOverviewWidget_OnTTDDisplayModeChanged) == 0x000004, "Wrong alignment on CharacterOverviewWidget_OnTTDDisplayModeChanged");
static_assert(sizeof(CharacterOverviewWidget_OnTTDDisplayModeChanged) == 0x000004, "Wrong size on CharacterOverviewWidget_OnTTDDisplayModeChanged");
static_assert(offsetof(CharacterOverviewWidget_OnTTDDisplayModeChanged, TTDDisplayModeIn) == 0x000000, "Member 'CharacterOverviewWidget_OnTTDDisplayModeChanged::TTDDisplayModeIn' has a wrong offset!");

// Function Indiana.ConsumableAmmoPool.GetNextConsumableClass
// 0x0008 (0x0008 - 0x0000)
struct ConsumableAmmoPool_GetNextConsumableClass final
{
public:
	TSubclassOf<class UConsumableItem>            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConsumableAmmoPool_GetNextConsumableClass) == 0x000008, "Wrong alignment on ConsumableAmmoPool_GetNextConsumableClass");
static_assert(sizeof(ConsumableAmmoPool_GetNextConsumableClass) == 0x000008, "Wrong size on ConsumableAmmoPool_GetNextConsumableClass");
static_assert(offsetof(ConsumableAmmoPool_GetNextConsumableClass, ReturnValue) == 0x000000, "Member 'ConsumableAmmoPool_GetNextConsumableClass::ReturnValue' has a wrong offset!");

// Function Indiana.CharacterLibrary.GetAttributeValue
// 0x0010 (0x0010 - 0x0000)
struct CharacterLibrary_GetAttributeValue final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttribute                                    Attribute;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterLibrary_GetAttributeValue) == 0x000008, "Wrong alignment on CharacterLibrary_GetAttributeValue");
static_assert(sizeof(CharacterLibrary_GetAttributeValue) == 0x000010, "Wrong size on CharacterLibrary_GetAttributeValue");
static_assert(offsetof(CharacterLibrary_GetAttributeValue, Actor) == 0x000000, "Member 'CharacterLibrary_GetAttributeValue::Actor' has a wrong offset!");
static_assert(offsetof(CharacterLibrary_GetAttributeValue, Attribute) == 0x000008, "Member 'CharacterLibrary_GetAttributeValue::Attribute' has a wrong offset!");
static_assert(offsetof(CharacterLibrary_GetAttributeValue, ReturnValue) == 0x00000C, "Member 'CharacterLibrary_GetAttributeValue::ReturnValue' has a wrong offset!");

// Function Indiana.CharacterLibrary.GetSkillValue
// 0x0010 (0x0010 - 0x0000)
struct CharacterLibrary_GetSkillValue final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkill                                        Skill;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterLibrary_GetSkillValue) == 0x000008, "Wrong alignment on CharacterLibrary_GetSkillValue");
static_assert(sizeof(CharacterLibrary_GetSkillValue) == 0x000010, "Wrong size on CharacterLibrary_GetSkillValue");
static_assert(offsetof(CharacterLibrary_GetSkillValue, Actor) == 0x000000, "Member 'CharacterLibrary_GetSkillValue::Actor' has a wrong offset!");
static_assert(offsetof(CharacterLibrary_GetSkillValue, Skill) == 0x000008, "Member 'CharacterLibrary_GetSkillValue::Skill' has a wrong offset!");
static_assert(offsetof(CharacterLibrary_GetSkillValue, ReturnValue) == 0x00000C, "Member 'CharacterLibrary_GetSkillValue::ReturnValue' has a wrong offset!");

// Function Indiana.CharacterShoutComponent.OnAlertStateChange
// 0x0010 (0x0010 - 0x0000)
struct CharacterShoutComponent_OnAlertStateChange final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAlertState                                   PreviousAlertState;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAlertState                                   TargetAlertState;                                  // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestoring;                                        // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterShoutComponent_OnAlertStateChange) == 0x000008, "Wrong alignment on CharacterShoutComponent_OnAlertStateChange");
static_assert(sizeof(CharacterShoutComponent_OnAlertStateChange) == 0x000010, "Wrong size on CharacterShoutComponent_OnAlertStateChange");
static_assert(offsetof(CharacterShoutComponent_OnAlertStateChange, TargetActor) == 0x000000, "Member 'CharacterShoutComponent_OnAlertStateChange::TargetActor' has a wrong offset!");
static_assert(offsetof(CharacterShoutComponent_OnAlertStateChange, PreviousAlertState) == 0x000008, "Member 'CharacterShoutComponent_OnAlertStateChange::PreviousAlertState' has a wrong offset!");
static_assert(offsetof(CharacterShoutComponent_OnAlertStateChange, TargetAlertState) == 0x000009, "Member 'CharacterShoutComponent_OnAlertStateChange::TargetAlertState' has a wrong offset!");
static_assert(offsetof(CharacterShoutComponent_OnAlertStateChange, bRestoring) == 0x00000A, "Member 'CharacterShoutComponent_OnAlertStateChange::bRestoring' has a wrong offset!");

// Function Indiana.CharacterShoutComponent.OnCharacterDeath
// 0x0110 (0x0110 - 0x0000)
struct CharacterShoutComponent_OnCharacterDeath final
{
public:
	struct FCauseDamageInfo                       CDI;                                               // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterShoutComponent_OnCharacterDeath) == 0x000008, "Wrong alignment on CharacterShoutComponent_OnCharacterDeath");
static_assert(sizeof(CharacterShoutComponent_OnCharacterDeath) == 0x000110, "Wrong size on CharacterShoutComponent_OnCharacterDeath");
static_assert(offsetof(CharacterShoutComponent_OnCharacterDeath, CDI) == 0x000000, "Member 'CharacterShoutComponent_OnCharacterDeath::CDI' has a wrong offset!");

// Function Indiana.CharacterShoutComponent.OnCombatStateChange
// 0x0002 (0x0002 - 0x0000)
struct CharacterShoutComponent_OnCombatStateChange final
{
public:
	bool                                          bIsInCombat;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestoring;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterShoutComponent_OnCombatStateChange) == 0x000001, "Wrong alignment on CharacterShoutComponent_OnCombatStateChange");
static_assert(sizeof(CharacterShoutComponent_OnCombatStateChange) == 0x000002, "Wrong size on CharacterShoutComponent_OnCombatStateChange");
static_assert(offsetof(CharacterShoutComponent_OnCombatStateChange, bIsInCombat) == 0x000000, "Member 'CharacterShoutComponent_OnCombatStateChange::bIsInCombat' has a wrong offset!");
static_assert(offsetof(CharacterShoutComponent_OnCombatStateChange, bRestoring) == 0x000001, "Member 'CharacterShoutComponent_OnCombatStateChange::bRestoring' has a wrong offset!");

// Function Indiana.IndianaAutoPlayer.OnAsyncSaveComplete
// 0x0002 (0x0002 - 0x0000)
struct IndianaAutoPlayer_OnAsyncSaveComplete final
{
public:
	ESaveGameResult                               Result;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESaveGameType                                 SaveType;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaAutoPlayer_OnAsyncSaveComplete) == 0x000001, "Wrong alignment on IndianaAutoPlayer_OnAsyncSaveComplete");
static_assert(sizeof(IndianaAutoPlayer_OnAsyncSaveComplete) == 0x000002, "Wrong size on IndianaAutoPlayer_OnAsyncSaveComplete");
static_assert(offsetof(IndianaAutoPlayer_OnAsyncSaveComplete, Result) == 0x000000, "Member 'IndianaAutoPlayer_OnAsyncSaveComplete::Result' has a wrong offset!");
static_assert(offsetof(IndianaAutoPlayer_OnAsyncSaveComplete, SaveType) == 0x000001, "Member 'IndianaAutoPlayer_OnAsyncSaveComplete::SaveType' has a wrong offset!");

// Function Indiana.CharacterStatusEffectsWidget.OnAddStatusEffect
// 0x0010 (0x0010 - 0x0000)
struct CharacterStatusEffectsWidget_OnAddStatusEffect final
{
public:
	class UStatusEffectManagerComponent*          Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStatusEffect*                          StatusEffect;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterStatusEffectsWidget_OnAddStatusEffect) == 0x000008, "Wrong alignment on CharacterStatusEffectsWidget_OnAddStatusEffect");
static_assert(sizeof(CharacterStatusEffectsWidget_OnAddStatusEffect) == 0x000010, "Wrong size on CharacterStatusEffectsWidget_OnAddStatusEffect");
static_assert(offsetof(CharacterStatusEffectsWidget_OnAddStatusEffect, Sender) == 0x000000, "Member 'CharacterStatusEffectsWidget_OnAddStatusEffect::Sender' has a wrong offset!");
static_assert(offsetof(CharacterStatusEffectsWidget_OnAddStatusEffect, StatusEffect) == 0x000008, "Member 'CharacterStatusEffectsWidget_OnAddStatusEffect::StatusEffect' has a wrong offset!");

// Function Indiana.CharacterStatusEffectsWidget.OnRemoveStatusEffect
// 0x0010 (0x0010 - 0x0000)
struct CharacterStatusEffectsWidget_OnRemoveStatusEffect final
{
public:
	class UStatusEffectManagerComponent*          Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStatusEffect*                          StatusEffect;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterStatusEffectsWidget_OnRemoveStatusEffect) == 0x000008, "Wrong alignment on CharacterStatusEffectsWidget_OnRemoveStatusEffect");
static_assert(sizeof(CharacterStatusEffectsWidget_OnRemoveStatusEffect) == 0x000010, "Wrong size on CharacterStatusEffectsWidget_OnRemoveStatusEffect");
static_assert(offsetof(CharacterStatusEffectsWidget_OnRemoveStatusEffect, Sender) == 0x000000, "Member 'CharacterStatusEffectsWidget_OnRemoveStatusEffect::Sender' has a wrong offset!");
static_assert(offsetof(CharacterStatusEffectsWidget_OnRemoveStatusEffect, StatusEffect) == 0x000008, "Member 'CharacterStatusEffectsWidget_OnRemoveStatusEffect::StatusEffect' has a wrong offset!");

// Function Indiana.ConversationBlueprintLibrary.AddConversationEndedDelegate
// 0x0014 (0x0014 - 0x0000)
struct ConversationBlueprintLibrary_AddConversationEndedDelegate final
{
public:
	int32                                         InstanceId;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             Event;                                             // 0x0004(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConversationBlueprintLibrary_AddConversationEndedDelegate) == 0x000004, "Wrong alignment on ConversationBlueprintLibrary_AddConversationEndedDelegate");
static_assert(sizeof(ConversationBlueprintLibrary_AddConversationEndedDelegate) == 0x000014, "Wrong size on ConversationBlueprintLibrary_AddConversationEndedDelegate");
static_assert(offsetof(ConversationBlueprintLibrary_AddConversationEndedDelegate, InstanceId) == 0x000000, "Member 'ConversationBlueprintLibrary_AddConversationEndedDelegate::InstanceId' has a wrong offset!");
static_assert(offsetof(ConversationBlueprintLibrary_AddConversationEndedDelegate, Event) == 0x000004, "Member 'ConversationBlueprintLibrary_AddConversationEndedDelegate::Event' has a wrong offset!");

// Function Indiana.ConversationBlueprintLibrary.AssignAllParticipantsAsOverrides
// 0x0200 (0x0200 - 0x0000)
struct ConversationBlueprintLibrary_AssignAllParticipantsAsOverrides final
{
public:
	struct FConversationDescription               Description;                                       // 0x0000(0x01F8)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AActor*                                 OverrideActor;                                     // 0x01F8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConversationBlueprintLibrary_AssignAllParticipantsAsOverrides) == 0x000008, "Wrong alignment on ConversationBlueprintLibrary_AssignAllParticipantsAsOverrides");
static_assert(sizeof(ConversationBlueprintLibrary_AssignAllParticipantsAsOverrides) == 0x000200, "Wrong size on ConversationBlueprintLibrary_AssignAllParticipantsAsOverrides");
static_assert(offsetof(ConversationBlueprintLibrary_AssignAllParticipantsAsOverrides, Description) == 0x000000, "Member 'ConversationBlueprintLibrary_AssignAllParticipantsAsOverrides::Description' has a wrong offset!");
static_assert(offsetof(ConversationBlueprintLibrary_AssignAllParticipantsAsOverrides, OverrideActor) == 0x0001F8, "Member 'ConversationBlueprintLibrary_AssignAllParticipantsAsOverrides::OverrideActor' has a wrong offset!");

// Function Indiana.ConversationBlueprintLibrary.CanStartConversation
// 0x0030 (0x0030 - 0x0000)
struct ConversationBlueprintLibrary_CanStartConversation final
{
public:
	ECheckBranches                                Branches;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UConversationData*                      Conversation;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartNode;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCharacterDescription>          OverrideCharacters;                                // 0x0018(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bAllowedDuringCombat;                              // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0029(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ConversationBlueprintLibrary_CanStartConversation) == 0x000008, "Wrong alignment on ConversationBlueprintLibrary_CanStartConversation");
static_assert(sizeof(ConversationBlueprintLibrary_CanStartConversation) == 0x000030, "Wrong size on ConversationBlueprintLibrary_CanStartConversation");
static_assert(offsetof(ConversationBlueprintLibrary_CanStartConversation, Branches) == 0x000000, "Member 'ConversationBlueprintLibrary_CanStartConversation::Branches' has a wrong offset!");
static_assert(offsetof(ConversationBlueprintLibrary_CanStartConversation, Conversation) == 0x000008, "Member 'ConversationBlueprintLibrary_CanStartConversation::Conversation' has a wrong offset!");
static_assert(offsetof(ConversationBlueprintLibrary_CanStartConversation, StartNode) == 0x000010, "Member 'ConversationBlueprintLibrary_CanStartConversation::StartNode' has a wrong offset!");
static_assert(offsetof(ConversationBlueprintLibrary_CanStartConversation, OverrideCharacters) == 0x000018, "Member 'ConversationBlueprintLibrary_CanStartConversation::OverrideCharacters' has a wrong offset!");
static_assert(offsetof(ConversationBlueprintLibrary_CanStartConversation, bAllowedDuringCombat) == 0x000028, "Member 'ConversationBlueprintLibrary_CanStartConversation::bAllowedDuringCombat' has a wrong offset!");
static_assert(offsetof(ConversationBlueprintLibrary_CanStartConversation, ReturnValue) == 0x000029, "Member 'ConversationBlueprintLibrary_CanStartConversation::ReturnValue' has a wrong offset!");

// Function Indiana.ConversationBlueprintLibrary.CanStartConversationByDescription
// 0x0208 (0x0208 - 0x0000)
struct ConversationBlueprintLibrary_CanStartConversationByDescription final
{
public:
	ECheckBranches                                Branches;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FConversationDescription               Description;                                       // 0x0008(0x01F8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0200(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_201[0x7];                                      // 0x0201(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ConversationBlueprintLibrary_CanStartConversationByDescription) == 0x000008, "Wrong alignment on ConversationBlueprintLibrary_CanStartConversationByDescription");
static_assert(sizeof(ConversationBlueprintLibrary_CanStartConversationByDescription) == 0x000208, "Wrong size on ConversationBlueprintLibrary_CanStartConversationByDescription");
static_assert(offsetof(ConversationBlueprintLibrary_CanStartConversationByDescription, Branches) == 0x000000, "Member 'ConversationBlueprintLibrary_CanStartConversationByDescription::Branches' has a wrong offset!");
static_assert(offsetof(ConversationBlueprintLibrary_CanStartConversationByDescription, Description) == 0x000008, "Member 'ConversationBlueprintLibrary_CanStartConversationByDescription::Description' has a wrong offset!");
static_assert(offsetof(ConversationBlueprintLibrary_CanStartConversationByDescription, ReturnValue) == 0x000200, "Member 'ConversationBlueprintLibrary_CanStartConversationByDescription::ReturnValue' has a wrong offset!");

// Function Indiana.ConversationBlueprintLibrary.EndConversation
// 0x0008 (0x0008 - 0x0000)
struct ConversationBlueprintLibrary_EndConversation final
{
public:
	int32                                         ConversationInstanceID;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConversationBlueprintLibrary_EndConversation) == 0x000004, "Wrong alignment on ConversationBlueprintLibrary_EndConversation");
static_assert(sizeof(ConversationBlueprintLibrary_EndConversation) == 0x000008, "Wrong size on ConversationBlueprintLibrary_EndConversation");
static_assert(offsetof(ConversationBlueprintLibrary_EndConversation, ConversationInstanceID) == 0x000000, "Member 'ConversationBlueprintLibrary_EndConversation::ConversationInstanceID' has a wrong offset!");
static_assert(offsetof(ConversationBlueprintLibrary_EndConversation, ReturnValue) == 0x000004, "Member 'ConversationBlueprintLibrary_EndConversation::ReturnValue' has a wrong offset!");

// Function Indiana.ConversationBlueprintLibrary.GetSpeakerGameDataReferences
// 0x0018 (0x0018 - 0x0000)
struct ConversationBlueprintLibrary_GetSpeakerGameDataReferences final
{
public:
	class UConversationData*                      ConversationData;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSpeakerGameDataReferenceID>    ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConversationBlueprintLibrary_GetSpeakerGameDataReferences) == 0x000008, "Wrong alignment on ConversationBlueprintLibrary_GetSpeakerGameDataReferences");
static_assert(sizeof(ConversationBlueprintLibrary_GetSpeakerGameDataReferences) == 0x000018, "Wrong size on ConversationBlueprintLibrary_GetSpeakerGameDataReferences");
static_assert(offsetof(ConversationBlueprintLibrary_GetSpeakerGameDataReferences, ConversationData) == 0x000000, "Member 'ConversationBlueprintLibrary_GetSpeakerGameDataReferences::ConversationData' has a wrong offset!");
static_assert(offsetof(ConversationBlueprintLibrary_GetSpeakerGameDataReferences, ReturnValue) == 0x000008, "Member 'ConversationBlueprintLibrary_GetSpeakerGameDataReferences::ReturnValue' has a wrong offset!");

// Function Indiana.ConversationBlueprintLibrary.MakeCharacterDescription
// 0x0028 (0x0028 - 0x0000)
struct ConversationBlueprintLibrary_MakeCharacterDescription final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCharacterDescription                  ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConversationBlueprintLibrary_MakeCharacterDescription) == 0x000008, "Wrong alignment on ConversationBlueprintLibrary_MakeCharacterDescription");
static_assert(sizeof(ConversationBlueprintLibrary_MakeCharacterDescription) == 0x000028, "Wrong size on ConversationBlueprintLibrary_MakeCharacterDescription");
static_assert(offsetof(ConversationBlueprintLibrary_MakeCharacterDescription, Actor) == 0x000000, "Member 'ConversationBlueprintLibrary_MakeCharacterDescription::Actor' has a wrong offset!");
static_assert(offsetof(ConversationBlueprintLibrary_MakeCharacterDescription, ReturnValue) == 0x000008, "Member 'ConversationBlueprintLibrary_MakeCharacterDescription::ReturnValue' has a wrong offset!");

// Function Indiana.ConversationBlueprintLibrary.StartConversation
// 0x0030 (0x0030 - 0x0000)
struct ConversationBlueprintLibrary_StartConversation final
{
public:
	ECheckBranches                                Branches;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InstanceId;                                        // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UConversationData*                      Conversation;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartNode;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCharacterDescription>          OverrideCharacters;                                // 0x0018(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bAllowedDuringCombat;                              // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0029(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ConversationBlueprintLibrary_StartConversation) == 0x000008, "Wrong alignment on ConversationBlueprintLibrary_StartConversation");
static_assert(sizeof(ConversationBlueprintLibrary_StartConversation) == 0x000030, "Wrong size on ConversationBlueprintLibrary_StartConversation");
static_assert(offsetof(ConversationBlueprintLibrary_StartConversation, Branches) == 0x000000, "Member 'ConversationBlueprintLibrary_StartConversation::Branches' has a wrong offset!");
static_assert(offsetof(ConversationBlueprintLibrary_StartConversation, InstanceId) == 0x000004, "Member 'ConversationBlueprintLibrary_StartConversation::InstanceId' has a wrong offset!");
static_assert(offsetof(ConversationBlueprintLibrary_StartConversation, Conversation) == 0x000008, "Member 'ConversationBlueprintLibrary_StartConversation::Conversation' has a wrong offset!");
static_assert(offsetof(ConversationBlueprintLibrary_StartConversation, StartNode) == 0x000010, "Member 'ConversationBlueprintLibrary_StartConversation::StartNode' has a wrong offset!");
static_assert(offsetof(ConversationBlueprintLibrary_StartConversation, OverrideCharacters) == 0x000018, "Member 'ConversationBlueprintLibrary_StartConversation::OverrideCharacters' has a wrong offset!");
static_assert(offsetof(ConversationBlueprintLibrary_StartConversation, bAllowedDuringCombat) == 0x000028, "Member 'ConversationBlueprintLibrary_StartConversation::bAllowedDuringCombat' has a wrong offset!");
static_assert(offsetof(ConversationBlueprintLibrary_StartConversation, ReturnValue) == 0x000029, "Member 'ConversationBlueprintLibrary_StartConversation::ReturnValue' has a wrong offset!");

// Function Indiana.ConversationBlueprintLibrary.StartConversationByDescription
// 0x0208 (0x0208 - 0x0000)
struct ConversationBlueprintLibrary_StartConversationByDescription final
{
public:
	ECheckBranches                                Branches;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FConversationDescription               Description;                                       // 0x0008(0x01F8)(Parm, NativeAccessSpecifierPublic)
	int32                                         InstanceId;                                        // 0x0200(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0204(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_205[0x3];                                      // 0x0205(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ConversationBlueprintLibrary_StartConversationByDescription) == 0x000008, "Wrong alignment on ConversationBlueprintLibrary_StartConversationByDescription");
static_assert(sizeof(ConversationBlueprintLibrary_StartConversationByDescription) == 0x000208, "Wrong size on ConversationBlueprintLibrary_StartConversationByDescription");
static_assert(offsetof(ConversationBlueprintLibrary_StartConversationByDescription, Branches) == 0x000000, "Member 'ConversationBlueprintLibrary_StartConversationByDescription::Branches' has a wrong offset!");
static_assert(offsetof(ConversationBlueprintLibrary_StartConversationByDescription, Description) == 0x000008, "Member 'ConversationBlueprintLibrary_StartConversationByDescription::Description' has a wrong offset!");
static_assert(offsetof(ConversationBlueprintLibrary_StartConversationByDescription, InstanceId) == 0x000200, "Member 'ConversationBlueprintLibrary_StartConversationByDescription::InstanceId' has a wrong offset!");
static_assert(offsetof(ConversationBlueprintLibrary_StartConversationByDescription, ReturnValue) == 0x000204, "Member 'ConversationBlueprintLibrary_StartConversationByDescription::ReturnValue' has a wrong offset!");

// Function Indiana.ConversationBlueprintLibrary.StartConversationByDescriptionAtNode
// 0x0210 (0x0210 - 0x0000)
struct ConversationBlueprintLibrary_StartConversationByDescriptionAtNode final
{
public:
	ECheckBranches                                Branches;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FConversationDescription               Description;                                       // 0x0008(0x01F8)(Parm, NativeAccessSpecifierPublic)
	int32                                         StartNode;                                         // 0x0200(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstanceId;                                        // 0x0204(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0208(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_209[0x7];                                      // 0x0209(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ConversationBlueprintLibrary_StartConversationByDescriptionAtNode) == 0x000008, "Wrong alignment on ConversationBlueprintLibrary_StartConversationByDescriptionAtNode");
static_assert(sizeof(ConversationBlueprintLibrary_StartConversationByDescriptionAtNode) == 0x000210, "Wrong size on ConversationBlueprintLibrary_StartConversationByDescriptionAtNode");
static_assert(offsetof(ConversationBlueprintLibrary_StartConversationByDescriptionAtNode, Branches) == 0x000000, "Member 'ConversationBlueprintLibrary_StartConversationByDescriptionAtNode::Branches' has a wrong offset!");
static_assert(offsetof(ConversationBlueprintLibrary_StartConversationByDescriptionAtNode, Description) == 0x000008, "Member 'ConversationBlueprintLibrary_StartConversationByDescriptionAtNode::Description' has a wrong offset!");
static_assert(offsetof(ConversationBlueprintLibrary_StartConversationByDescriptionAtNode, StartNode) == 0x000200, "Member 'ConversationBlueprintLibrary_StartConversationByDescriptionAtNode::StartNode' has a wrong offset!");
static_assert(offsetof(ConversationBlueprintLibrary_StartConversationByDescriptionAtNode, InstanceId) == 0x000204, "Member 'ConversationBlueprintLibrary_StartConversationByDescriptionAtNode::InstanceId' has a wrong offset!");
static_assert(offsetof(ConversationBlueprintLibrary_StartConversationByDescriptionAtNode, ReturnValue) == 0x000208, "Member 'ConversationBlueprintLibrary_StartConversationByDescriptionAtNode::ReturnValue' has a wrong offset!");

// Function Indiana.ConversationBlueprintLibrary.StartConversationWithActorInterface
// 0x0028 (0x0028 - 0x0000)
struct ConversationBlueprintLibrary_StartConversationWithActorInterface final
{
public:
	ECheckBranches                                Branches;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IConversationActorInterface> Actor;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	int32                                         StartNode;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstanceId;                                        // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ConversationBlueprintLibrary_StartConversationWithActorInterface) == 0x000008, "Wrong alignment on ConversationBlueprintLibrary_StartConversationWithActorInterface");
static_assert(sizeof(ConversationBlueprintLibrary_StartConversationWithActorInterface) == 0x000028, "Wrong size on ConversationBlueprintLibrary_StartConversationWithActorInterface");
static_assert(offsetof(ConversationBlueprintLibrary_StartConversationWithActorInterface, Branches) == 0x000000, "Member 'ConversationBlueprintLibrary_StartConversationWithActorInterface::Branches' has a wrong offset!");
static_assert(offsetof(ConversationBlueprintLibrary_StartConversationWithActorInterface, Actor) == 0x000008, "Member 'ConversationBlueprintLibrary_StartConversationWithActorInterface::Actor' has a wrong offset!");
static_assert(offsetof(ConversationBlueprintLibrary_StartConversationWithActorInterface, StartNode) == 0x000018, "Member 'ConversationBlueprintLibrary_StartConversationWithActorInterface::StartNode' has a wrong offset!");
static_assert(offsetof(ConversationBlueprintLibrary_StartConversationWithActorInterface, InstanceId) == 0x00001C, "Member 'ConversationBlueprintLibrary_StartConversationWithActorInterface::InstanceId' has a wrong offset!");
static_assert(offsetof(ConversationBlueprintLibrary_StartConversationWithActorInterface, ReturnValue) == 0x000020, "Member 'ConversationBlueprintLibrary_StartConversationWithActorInterface::ReturnValue' has a wrong offset!");

// Function Indiana.ConversationBlueprintLibrary.StartPlayerControllerConversation
// 0x0030 (0x0030 - 0x0000)
struct ConversationBlueprintLibrary_StartPlayerControllerConversation final
{
public:
	ECheckBranches                                Branches;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InstanceId;                                        // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UConversationData*                      ConversationData;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartNode;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCharacterDescription>          OverrideCharacters;                                // 0x0018(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bAllowedDuringCombat;                              // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0029(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ConversationBlueprintLibrary_StartPlayerControllerConversation) == 0x000008, "Wrong alignment on ConversationBlueprintLibrary_StartPlayerControllerConversation");
static_assert(sizeof(ConversationBlueprintLibrary_StartPlayerControllerConversation) == 0x000030, "Wrong size on ConversationBlueprintLibrary_StartPlayerControllerConversation");
static_assert(offsetof(ConversationBlueprintLibrary_StartPlayerControllerConversation, Branches) == 0x000000, "Member 'ConversationBlueprintLibrary_StartPlayerControllerConversation::Branches' has a wrong offset!");
static_assert(offsetof(ConversationBlueprintLibrary_StartPlayerControllerConversation, InstanceId) == 0x000004, "Member 'ConversationBlueprintLibrary_StartPlayerControllerConversation::InstanceId' has a wrong offset!");
static_assert(offsetof(ConversationBlueprintLibrary_StartPlayerControllerConversation, ConversationData) == 0x000008, "Member 'ConversationBlueprintLibrary_StartPlayerControllerConversation::ConversationData' has a wrong offset!");
static_assert(offsetof(ConversationBlueprintLibrary_StartPlayerControllerConversation, StartNode) == 0x000010, "Member 'ConversationBlueprintLibrary_StartPlayerControllerConversation::StartNode' has a wrong offset!");
static_assert(offsetof(ConversationBlueprintLibrary_StartPlayerControllerConversation, OverrideCharacters) == 0x000018, "Member 'ConversationBlueprintLibrary_StartPlayerControllerConversation::OverrideCharacters' has a wrong offset!");
static_assert(offsetof(ConversationBlueprintLibrary_StartPlayerControllerConversation, bAllowedDuringCombat) == 0x000028, "Member 'ConversationBlueprintLibrary_StartPlayerControllerConversation::bAllowedDuringCombat' has a wrong offset!");
static_assert(offsetof(ConversationBlueprintLibrary_StartPlayerControllerConversation, ReturnValue) == 0x000029, "Member 'ConversationBlueprintLibrary_StartPlayerControllerConversation::ReturnValue' has a wrong offset!");

// Function Indiana.ConversationBlueprintLibrary.StartSlideshow
// 0x0010 (0x0010 - 0x0000)
struct ConversationBlueprintLibrary_StartSlideshow final
{
public:
	class UConversationData*                      Conversation;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstanceId;                                        // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ConversationBlueprintLibrary_StartSlideshow) == 0x000008, "Wrong alignment on ConversationBlueprintLibrary_StartSlideshow");
static_assert(sizeof(ConversationBlueprintLibrary_StartSlideshow) == 0x000010, "Wrong size on ConversationBlueprintLibrary_StartSlideshow");
static_assert(offsetof(ConversationBlueprintLibrary_StartSlideshow, Conversation) == 0x000000, "Member 'ConversationBlueprintLibrary_StartSlideshow::Conversation' has a wrong offset!");
static_assert(offsetof(ConversationBlueprintLibrary_StartSlideshow, InstanceId) == 0x000008, "Member 'ConversationBlueprintLibrary_StartSlideshow::InstanceId' has a wrong offset!");
static_assert(offsetof(ConversationBlueprintLibrary_StartSlideshow, ReturnValue) == 0x00000C, "Member 'ConversationBlueprintLibrary_StartSlideshow::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGlobals.GetTutorialManager
// 0x0008 (0x0008 - 0x0000)
struct IndianaGlobals_GetTutorialManager final
{
public:
	class UTutorialManager*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGlobals_GetTutorialManager) == 0x000008, "Wrong alignment on IndianaGlobals_GetTutorialManager");
static_assert(sizeof(IndianaGlobals_GetTutorialManager) == 0x000008, "Wrong size on IndianaGlobals_GetTutorialManager");
static_assert(offsetof(IndianaGlobals_GetTutorialManager, ReturnValue) == 0x000000, "Member 'IndianaGlobals_GetTutorialManager::ReturnValue' has a wrong offset!");

// Function Indiana.ChatterGameHelpers.PlayChatterEvent
// 0x0010 (0x0010 - 0x0000)
struct ChatterGameHelpers_PlayChatterEvent final
{
public:
	class AActor*                                 Speaker;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EChatterEventType                             ChatterEvent;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChatterGameHelpers_PlayChatterEvent) == 0x000008, "Wrong alignment on ChatterGameHelpers_PlayChatterEvent");
static_assert(sizeof(ChatterGameHelpers_PlayChatterEvent) == 0x000010, "Wrong size on ChatterGameHelpers_PlayChatterEvent");
static_assert(offsetof(ChatterGameHelpers_PlayChatterEvent, Speaker) == 0x000000, "Member 'ChatterGameHelpers_PlayChatterEvent::Speaker' has a wrong offset!");
static_assert(offsetof(ChatterGameHelpers_PlayChatterEvent, ChatterEvent) == 0x000008, "Member 'ChatterGameHelpers_PlayChatterEvent::ChatterEvent' has a wrong offset!");

// Function Indiana.ChatterManager.OnConversationBegin
// 0x0008 (0x0008 - 0x0000)
struct ChatterManager_OnConversationBegin final
{
public:
	class UConversationInstance*                  ConversationInstance;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChatterManager_OnConversationBegin) == 0x000008, "Wrong alignment on ChatterManager_OnConversationBegin");
static_assert(sizeof(ChatterManager_OnConversationBegin) == 0x000008, "Wrong size on ChatterManager_OnConversationBegin");
static_assert(offsetof(ChatterManager_OnConversationBegin, ConversationInstance) == 0x000000, "Member 'ChatterManager_OnConversationBegin::ConversationInstance' has a wrong offset!");

// Function Indiana.CodexJournal.OnAudioLogFocusedCB
// 0x0008 (0x0008 - 0x0000)
struct CodexJournal_OnAudioLogFocusedCB final
{
public:
	class UButtonBase*                            ButtonFocused;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CodexJournal_OnAudioLogFocusedCB) == 0x000008, "Wrong alignment on CodexJournal_OnAudioLogFocusedCB");
static_assert(sizeof(CodexJournal_OnAudioLogFocusedCB) == 0x000008, "Wrong size on CodexJournal_OnAudioLogFocusedCB");
static_assert(offsetof(CodexJournal_OnAudioLogFocusedCB, ButtonFocused) == 0x000000, "Member 'CodexJournal_OnAudioLogFocusedCB::ButtonFocused' has a wrong offset!");

// Function Indiana.CodexJournal.OnAudioLogHoveredCB
// 0x0008 (0x0008 - 0x0000)
struct CodexJournal_OnAudioLogHoveredCB final
{
public:
	class UButtonBase*                            ButtonHovered;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CodexJournal_OnAudioLogHoveredCB) == 0x000008, "Wrong alignment on CodexJournal_OnAudioLogHoveredCB");
static_assert(sizeof(CodexJournal_OnAudioLogHoveredCB) == 0x000008, "Wrong size on CodexJournal_OnAudioLogHoveredCB");
static_assert(offsetof(CodexJournal_OnAudioLogHoveredCB, ButtonHovered) == 0x000000, "Member 'CodexJournal_OnAudioLogHoveredCB::ButtonHovered' has a wrong offset!");

// Function Indiana.CodexJournal.OnAudioLogListEntryAdded
// 0x0010 (0x0010 - 0x0000)
struct CodexJournal_OnAudioLogListEntryAdded final
{
public:
	class UGenericCollapsableListEntry*           ListEntry;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioLogDataAsset*                     DataAsset;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CodexJournal_OnAudioLogListEntryAdded) == 0x000008, "Wrong alignment on CodexJournal_OnAudioLogListEntryAdded");
static_assert(sizeof(CodexJournal_OnAudioLogListEntryAdded) == 0x000010, "Wrong size on CodexJournal_OnAudioLogListEntryAdded");
static_assert(offsetof(CodexJournal_OnAudioLogListEntryAdded, ListEntry) == 0x000000, "Member 'CodexJournal_OnAudioLogListEntryAdded::ListEntry' has a wrong offset!");
static_assert(offsetof(CodexJournal_OnAudioLogListEntryAdded, DataAsset) == 0x000008, "Member 'CodexJournal_OnAudioLogListEntryAdded::DataAsset' has a wrong offset!");

// Function Indiana.CodexJournal.OnAudioLogUnfocusedCB
// 0x0008 (0x0008 - 0x0000)
struct CodexJournal_OnAudioLogUnfocusedCB final
{
public:
	class UButtonBase*                            ButtonUnfocused;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CodexJournal_OnAudioLogUnfocusedCB) == 0x000008, "Wrong alignment on CodexJournal_OnAudioLogUnfocusedCB");
static_assert(sizeof(CodexJournal_OnAudioLogUnfocusedCB) == 0x000008, "Wrong size on CodexJournal_OnAudioLogUnfocusedCB");
static_assert(offsetof(CodexJournal_OnAudioLogUnfocusedCB, ButtonUnfocused) == 0x000000, "Member 'CodexJournal_OnAudioLogUnfocusedCB::ButtonUnfocused' has a wrong offset!");

// Function Indiana.CodexJournal.OnAudioLogUnhoveredCB
// 0x0008 (0x0008 - 0x0000)
struct CodexJournal_OnAudioLogUnhoveredCB final
{
public:
	class UButtonBase*                            ButtonUnhovered;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CodexJournal_OnAudioLogUnhoveredCB) == 0x000008, "Wrong alignment on CodexJournal_OnAudioLogUnhoveredCB");
static_assert(sizeof(CodexJournal_OnAudioLogUnhoveredCB) == 0x000008, "Wrong size on CodexJournal_OnAudioLogUnhoveredCB");
static_assert(offsetof(CodexJournal_OnAudioLogUnhoveredCB, ButtonUnhovered) == 0x000000, "Member 'CodexJournal_OnAudioLogUnhoveredCB::ButtonUnhovered' has a wrong offset!");

// Function Indiana.CompassEntryWidget.InitProperties
// 0x0010 (0x0010 - 0x0000)
struct CompassEntryWidget_InitProperties final
{
public:
	struct FEntryData                             EntryData;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompassEntryWidget_InitProperties) == 0x000008, "Wrong alignment on CompassEntryWidget_InitProperties");
static_assert(sizeof(CompassEntryWidget_InitProperties) == 0x000010, "Wrong size on CompassEntryWidget_InitProperties");
static_assert(offsetof(CompassEntryWidget_InitProperties, EntryData) == 0x000000, "Member 'CompassEntryWidget_InitProperties::EntryData' has a wrong offset!");

// Function Indiana.ComputerTerminal.AttemptUnlock
// 0x0010 (0x0010 - 0x0000)
struct ComputerTerminal_AttemptUnlock final
{
public:
	class AActor*                                 Initiator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComputerTerminalResult                       ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ComputerTerminal_AttemptUnlock) == 0x000008, "Wrong alignment on ComputerTerminal_AttemptUnlock");
static_assert(sizeof(ComputerTerminal_AttemptUnlock) == 0x000010, "Wrong size on ComputerTerminal_AttemptUnlock");
static_assert(offsetof(ComputerTerminal_AttemptUnlock, Initiator) == 0x000000, "Member 'ComputerTerminal_AttemptUnlock::Initiator' has a wrong offset!");
static_assert(offsetof(ComputerTerminal_AttemptUnlock, ReturnValue) == 0x000008, "Member 'ComputerTerminal_AttemptUnlock::ReturnValue' has a wrong offset!");

// Function Indiana.ComputerTerminal.AttemptUse
// 0x0010 (0x0010 - 0x0000)
struct ComputerTerminal_AttemptUse final
{
public:
	class AActor*                                 Initiator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComputerTerminalResult                       ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ComputerTerminal_AttemptUse) == 0x000008, "Wrong alignment on ComputerTerminal_AttemptUse");
static_assert(sizeof(ComputerTerminal_AttemptUse) == 0x000010, "Wrong size on ComputerTerminal_AttemptUse");
static_assert(offsetof(ComputerTerminal_AttemptUse, Initiator) == 0x000000, "Member 'ComputerTerminal_AttemptUse::Initiator' has a wrong offset!");
static_assert(offsetof(ComputerTerminal_AttemptUse, bForce) == 0x000008, "Member 'ComputerTerminal_AttemptUse::bForce' has a wrong offset!");
static_assert(offsetof(ComputerTerminal_AttemptUse, ReturnValue) == 0x000009, "Member 'ComputerTerminal_AttemptUse::ReturnValue' has a wrong offset!");

// Function Indiana.ComputerTerminal.GetCurrentState
// 0x0001 (0x0001 - 0x0000)
struct ComputerTerminal_GetCurrentState final
{
public:
	EComputerLockState                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ComputerTerminal_GetCurrentState) == 0x000001, "Wrong alignment on ComputerTerminal_GetCurrentState");
static_assert(sizeof(ComputerTerminal_GetCurrentState) == 0x000001, "Wrong size on ComputerTerminal_GetCurrentState");
static_assert(offsetof(ComputerTerminal_GetCurrentState, ReturnValue) == 0x000000, "Member 'ComputerTerminal_GetCurrentState::ReturnValue' has a wrong offset!");

// Function Indiana.ComputerTerminal.LockComputer
// 0x0001 (0x0001 - 0x0000)
struct ComputerTerminal_LockComputer final
{
public:
	bool                                          bFireComputerLockedEvent;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ComputerTerminal_LockComputer) == 0x000001, "Wrong alignment on ComputerTerminal_LockComputer");
static_assert(sizeof(ComputerTerminal_LockComputer) == 0x000001, "Wrong size on ComputerTerminal_LockComputer");
static_assert(offsetof(ComputerTerminal_LockComputer, bFireComputerLockedEvent) == 0x000000, "Member 'ComputerTerminal_LockComputer::bFireComputerLockedEvent' has a wrong offset!");

// Function Indiana.ComputerTerminal.UnlockComputer
// 0x0001 (0x0001 - 0x0000)
struct ComputerTerminal_UnlockComputer final
{
public:
	bool                                          bFireComputerUnlockedEvent;                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ComputerTerminal_UnlockComputer) == 0x000001, "Wrong alignment on ComputerTerminal_UnlockComputer");
static_assert(sizeof(ComputerTerminal_UnlockComputer) == 0x000001, "Wrong size on ComputerTerminal_UnlockComputer");
static_assert(offsetof(ComputerTerminal_UnlockComputer, bFireComputerUnlockedEvent) == 0x000000, "Member 'ComputerTerminal_UnlockComputer::bFireComputerUnlockedEvent' has a wrong offset!");

// Function Indiana.ComputerTerminal.GetExactHackDifficulty
// 0x0001 (0x0001 - 0x0000)
struct ComputerTerminal_GetExactHackDifficulty final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ComputerTerminal_GetExactHackDifficulty) == 0x000001, "Wrong alignment on ComputerTerminal_GetExactHackDifficulty");
static_assert(sizeof(ComputerTerminal_GetExactHackDifficulty) == 0x000001, "Wrong size on ComputerTerminal_GetExactHackDifficulty");
static_assert(offsetof(ComputerTerminal_GetExactHackDifficulty, ReturnValue) == 0x000000, "Member 'ComputerTerminal_GetExactHackDifficulty::ReturnValue' has a wrong offset!");

// Function Indiana.ComputerTerminalWidgetComponent.OnOwnerStateChange
// 0x0002 (0x0002 - 0x0000)
struct ComputerTerminalWidgetComponent_OnOwnerStateChange final
{
public:
	EComputerLockState                            PreviousState;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComputerLockState                            CurrentState;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ComputerTerminalWidgetComponent_OnOwnerStateChange) == 0x000001, "Wrong alignment on ComputerTerminalWidgetComponent_OnOwnerStateChange");
static_assert(sizeof(ComputerTerminalWidgetComponent_OnOwnerStateChange) == 0x000002, "Wrong size on ComputerTerminalWidgetComponent_OnOwnerStateChange");
static_assert(offsetof(ComputerTerminalWidgetComponent_OnOwnerStateChange, PreviousState) == 0x000000, "Member 'ComputerTerminalWidgetComponent_OnOwnerStateChange::PreviousState' has a wrong offset!");
static_assert(offsetof(ComputerTerminalWidgetComponent_OnOwnerStateChange, CurrentState) == 0x000001, "Member 'ComputerTerminalWidgetComponent_OnOwnerStateChange::CurrentState' has a wrong offset!");

// Function Indiana.ConsumableItem.OnStatUpdated
// 0x0008 (0x0008 - 0x0000)
struct ConsumableItem_OnStatUpdated final
{
public:
	const class URpgStat*                         Stat;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConsumableItem_OnStatUpdated) == 0x000008, "Wrong alignment on ConsumableItem_OnStatUpdated");
static_assert(sizeof(ConsumableItem_OnStatUpdated) == 0x000008, "Wrong size on ConsumableItem_OnStatUpdated");
static_assert(offsetof(ConsumableItem_OnStatUpdated, Stat) == 0x000000, "Member 'ConsumableItem_OnStatUpdated::Stat' has a wrong offset!");

// Function Indiana.ConversationInstance.GetPayloadActorChecked
// 0x0010 (0x0010 - 0x0000)
struct ConversationInstance_GetPayloadActorChecked final
{
public:
	EPayloadID                                    Key;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECheckBranches                                Branches;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConversationInstance_GetPayloadActorChecked) == 0x000008, "Wrong alignment on ConversationInstance_GetPayloadActorChecked");
static_assert(sizeof(ConversationInstance_GetPayloadActorChecked) == 0x000010, "Wrong size on ConversationInstance_GetPayloadActorChecked");
static_assert(offsetof(ConversationInstance_GetPayloadActorChecked, Key) == 0x000000, "Member 'ConversationInstance_GetPayloadActorChecked::Key' has a wrong offset!");
static_assert(offsetof(ConversationInstance_GetPayloadActorChecked, Branches) == 0x000001, "Member 'ConversationInstance_GetPayloadActorChecked::Branches' has a wrong offset!");
static_assert(offsetof(ConversationInstance_GetPayloadActorChecked, ReturnValue) == 0x000008, "Member 'ConversationInstance_GetPayloadActorChecked::ReturnValue' has a wrong offset!");

// Function Indiana.ConversationInstance.OnCharacterCombatStateChange
// 0x0002 (0x0002 - 0x0000)
struct ConversationInstance_OnCharacterCombatStateChange final
{
public:
	bool                                          bInCombat;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestoring;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConversationInstance_OnCharacterCombatStateChange) == 0x000001, "Wrong alignment on ConversationInstance_OnCharacterCombatStateChange");
static_assert(sizeof(ConversationInstance_OnCharacterCombatStateChange) == 0x000002, "Wrong size on ConversationInstance_OnCharacterCombatStateChange");
static_assert(offsetof(ConversationInstance_OnCharacterCombatStateChange, bInCombat) == 0x000000, "Member 'ConversationInstance_OnCharacterCombatStateChange::bInCombat' has a wrong offset!");
static_assert(offsetof(ConversationInstance_OnCharacterCombatStateChange, bRestoring) == 0x000001, "Member 'ConversationInstance_OnCharacterCombatStateChange::bRestoring' has a wrong offset!");

// Function Indiana.ConversationInstance.OnCharacterDeath
// 0x0118 (0x0118 - 0x0000)
struct ConversationInstance_OnCharacterDeath final
{
public:
	class AActor*                                 Instigator;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCauseDamageInfo                       CauseDamageInfo;                                   // 0x0008(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConversationInstance_OnCharacterDeath) == 0x000008, "Wrong alignment on ConversationInstance_OnCharacterDeath");
static_assert(sizeof(ConversationInstance_OnCharacterDeath) == 0x000118, "Wrong size on ConversationInstance_OnCharacterDeath");
static_assert(offsetof(ConversationInstance_OnCharacterDeath, Instigator) == 0x000000, "Member 'ConversationInstance_OnCharacterDeath::Instigator' has a wrong offset!");
static_assert(offsetof(ConversationInstance_OnCharacterDeath, CauseDamageInfo) == 0x000008, "Member 'ConversationInstance_OnCharacterDeath::CauseDamageInfo' has a wrong offset!");

// Function Indiana.ConversationInstance.OnParticipantEndPlay
// 0x0010 (0x0010 - 0x0000)
struct ConversationInstance_OnParticipantEndPlay final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                Reason;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ConversationInstance_OnParticipantEndPlay) == 0x000008, "Wrong alignment on ConversationInstance_OnParticipantEndPlay");
static_assert(sizeof(ConversationInstance_OnParticipantEndPlay) == 0x000010, "Wrong size on ConversationInstance_OnParticipantEndPlay");
static_assert(offsetof(ConversationInstance_OnParticipantEndPlay, Actor) == 0x000000, "Member 'ConversationInstance_OnParticipantEndPlay::Actor' has a wrong offset!");
static_assert(offsetof(ConversationInstance_OnParticipantEndPlay, Reason) == 0x000008, "Member 'ConversationInstance_OnParticipantEndPlay::Reason' has a wrong offset!");

// Function Indiana.ConversationInstance.GetCurrentSpeakerGameDataReferenceID
// 0x0018 (0x0018 - 0x0000)
struct ConversationInstance_GetCurrentSpeakerGameDataReferenceID final
{
public:
	struct FSpeakerGameDataReferenceID            ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConversationInstance_GetCurrentSpeakerGameDataReferenceID) == 0x000008, "Wrong alignment on ConversationInstance_GetCurrentSpeakerGameDataReferenceID");
static_assert(sizeof(ConversationInstance_GetCurrentSpeakerGameDataReferenceID) == 0x000018, "Wrong size on ConversationInstance_GetCurrentSpeakerGameDataReferenceID");
static_assert(offsetof(ConversationInstance_GetCurrentSpeakerGameDataReferenceID, ReturnValue) == 0x000000, "Member 'ConversationInstance_GetCurrentSpeakerGameDataReferenceID::ReturnValue' has a wrong offset!");

// Function Indiana.ConversationInstance.IsCurrentSpeakerGameDataReferenceID
// 0x0020 (0x0020 - 0x0000)
struct ConversationInstance_IsCurrentSpeakerGameDataReferenceID final
{
public:
	struct FSpeakerGameDataReferenceID            SpeakerGameData;                                   // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ConversationInstance_IsCurrentSpeakerGameDataReferenceID) == 0x000008, "Wrong alignment on ConversationInstance_IsCurrentSpeakerGameDataReferenceID");
static_assert(sizeof(ConversationInstance_IsCurrentSpeakerGameDataReferenceID) == 0x000020, "Wrong size on ConversationInstance_IsCurrentSpeakerGameDataReferenceID");
static_assert(offsetof(ConversationInstance_IsCurrentSpeakerGameDataReferenceID, SpeakerGameData) == 0x000000, "Member 'ConversationInstance_IsCurrentSpeakerGameDataReferenceID::SpeakerGameData' has a wrong offset!");
static_assert(offsetof(ConversationInstance_IsCurrentSpeakerGameDataReferenceID, ReturnValue) == 0x000018, "Member 'ConversationInstance_IsCurrentSpeakerGameDataReferenceID::ReturnValue' has a wrong offset!");

// Function Indiana.ConversationManager.ClearConversationNodeAsRead
// 0x0010 (0x0010 - 0x0000)
struct ConversationManager_ClearConversationNodeAsRead final
{
public:
	const class UConversationData*                Conversation;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NodeID;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ConversationManager_ClearConversationNodeAsRead) == 0x000008, "Wrong alignment on ConversationManager_ClearConversationNodeAsRead");
static_assert(sizeof(ConversationManager_ClearConversationNodeAsRead) == 0x000010, "Wrong size on ConversationManager_ClearConversationNodeAsRead");
static_assert(offsetof(ConversationManager_ClearConversationNodeAsRead, Conversation) == 0x000000, "Member 'ConversationManager_ClearConversationNodeAsRead::Conversation' has a wrong offset!");
static_assert(offsetof(ConversationManager_ClearConversationNodeAsRead, NodeID) == 0x000008, "Member 'ConversationManager_ClearConversationNodeAsRead::NodeID' has a wrong offset!");

// Function Indiana.ConversationManager.HasConversationNodeBeenVisited
// 0x0010 (0x0010 - 0x0000)
struct ConversationManager_HasConversationNodeBeenVisited final
{
public:
	const class UConversationData*                Conversation;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NodeID;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECheckBranches                                Branches;                                          // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ConversationManager_HasConversationNodeBeenVisited) == 0x000008, "Wrong alignment on ConversationManager_HasConversationNodeBeenVisited");
static_assert(sizeof(ConversationManager_HasConversationNodeBeenVisited) == 0x000010, "Wrong size on ConversationManager_HasConversationNodeBeenVisited");
static_assert(offsetof(ConversationManager_HasConversationNodeBeenVisited, Conversation) == 0x000000, "Member 'ConversationManager_HasConversationNodeBeenVisited::Conversation' has a wrong offset!");
static_assert(offsetof(ConversationManager_HasConversationNodeBeenVisited, NodeID) == 0x000008, "Member 'ConversationManager_HasConversationNodeBeenVisited::NodeID' has a wrong offset!");
static_assert(offsetof(ConversationManager_HasConversationNodeBeenVisited, Branches) == 0x00000C, "Member 'ConversationManager_HasConversationNodeBeenVisited::Branches' has a wrong offset!");
static_assert(offsetof(ConversationManager_HasConversationNodeBeenVisited, ReturnValue) == 0x00000D, "Member 'ConversationManager_HasConversationNodeBeenVisited::ReturnValue' has a wrong offset!");

// Function Indiana.ConversationManager.MarkConversationNodeAsRead
// 0x0010 (0x0010 - 0x0000)
struct ConversationManager_MarkConversationNodeAsRead final
{
public:
	const class UConversationData*                Conversation;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NodeID;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ConversationManager_MarkConversationNodeAsRead) == 0x000008, "Wrong alignment on ConversationManager_MarkConversationNodeAsRead");
static_assert(sizeof(ConversationManager_MarkConversationNodeAsRead) == 0x000010, "Wrong size on ConversationManager_MarkConversationNodeAsRead");
static_assert(offsetof(ConversationManager_MarkConversationNodeAsRead, Conversation) == 0x000000, "Member 'ConversationManager_MarkConversationNodeAsRead::Conversation' has a wrong offset!");
static_assert(offsetof(ConversationManager_MarkConversationNodeAsRead, NodeID) == 0x000008, "Member 'ConversationManager_MarkConversationNodeAsRead::NodeID' has a wrong offset!");

// Function Indiana.ScalableImage.SizeSettingChanged
// 0x0004 (0x0004 - 0x0000)
struct ScalableImage_SizeSettingChanged final
{
public:
	int32                                         SizeIn;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScalableImage_SizeSettingChanged) == 0x000004, "Wrong alignment on ScalableImage_SizeSettingChanged");
static_assert(sizeof(ScalableImage_SizeSettingChanged) == 0x000004, "Wrong size on ScalableImage_SizeSettingChanged");
static_assert(offsetof(ScalableImage_SizeSettingChanged, SizeIn) == 0x000000, "Member 'ScalableImage_SizeSettingChanged::SizeIn' has a wrong offset!");

// Function Indiana.ConversationResponseWidget.OnResponseSkillsChanged
// 0x0001 (0x0001 - 0x0000)
struct ConversationResponseWidget_OnResponseSkillsChanged final
{
public:
	bool                                          bContainsSkillCheck;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConversationResponseWidget_OnResponseSkillsChanged) == 0x000001, "Wrong alignment on ConversationResponseWidget_OnResponseSkillsChanged");
static_assert(sizeof(ConversationResponseWidget_OnResponseSkillsChanged) == 0x000001, "Wrong size on ConversationResponseWidget_OnResponseSkillsChanged");
static_assert(offsetof(ConversationResponseWidget_OnResponseSkillsChanged, bContainsSkillCheck) == 0x000000, "Member 'ConversationResponseWidget_OnResponseSkillsChanged::bContainsSkillCheck' has a wrong offset!");

// Function Indiana.ConversationResponseWidget.OnSetSelectableOption
// 0x0001 (0x0001 - 0x0000)
struct ConversationResponseWidget_OnSetSelectableOption final
{
public:
	bool                                          bSelectable;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConversationResponseWidget_OnSetSelectableOption) == 0x000001, "Wrong alignment on ConversationResponseWidget_OnSetSelectableOption");
static_assert(sizeof(ConversationResponseWidget_OnSetSelectableOption) == 0x000001, "Wrong size on ConversationResponseWidget_OnSetSelectableOption");
static_assert(offsetof(ConversationResponseWidget_OnSetSelectableOption, bSelectable) == 0x000000, "Member 'ConversationResponseWidget_OnSetSelectableOption::bSelectable' has a wrong offset!");

// Function Indiana.ConversationResponseWidget.OnSetSkillCheckRequiredCompanion
// 0x0001 (0x0001 - 0x0000)
struct ConversationResponseWidget_OnSetSkillCheckRequiredCompanion final
{
public:
	bool                                          bSelectable;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConversationResponseWidget_OnSetSkillCheckRequiredCompanion) == 0x000001, "Wrong alignment on ConversationResponseWidget_OnSetSkillCheckRequiredCompanion");
static_assert(sizeof(ConversationResponseWidget_OnSetSkillCheckRequiredCompanion) == 0x000001, "Wrong size on ConversationResponseWidget_OnSetSkillCheckRequiredCompanion");
static_assert(offsetof(ConversationResponseWidget_OnSetSkillCheckRequiredCompanion, bSelectable) == 0x000000, "Member 'ConversationResponseWidget_OnSetSkillCheckRequiredCompanion::bSelectable' has a wrong offset!");

// Function Indiana.ConversationResponseWidget.IsSelectable
// 0x0001 (0x0001 - 0x0000)
struct ConversationResponseWidget_IsSelectable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConversationResponseWidget_IsSelectable) == 0x000001, "Wrong alignment on ConversationResponseWidget_IsSelectable");
static_assert(sizeof(ConversationResponseWidget_IsSelectable) == 0x000001, "Wrong size on ConversationResponseWidget_IsSelectable");
static_assert(offsetof(ConversationResponseWidget_IsSelectable, ReturnValue) == 0x000000, "Member 'ConversationResponseWidget_IsSelectable::ReturnValue' has a wrong offset!");

// Function Indiana.Corpse.GetItemsOnCorpse
// 0x0010 (0x0010 - 0x0000)
struct Corpse_GetItemsOnCorpse final
{
public:
	TArray<class UItem*>                          OutItems;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Corpse_GetItemsOnCorpse) == 0x000008, "Wrong alignment on Corpse_GetItemsOnCorpse");
static_assert(sizeof(Corpse_GetItemsOnCorpse) == 0x000010, "Wrong size on Corpse_GetItemsOnCorpse");
static_assert(offsetof(Corpse_GetItemsOnCorpse, OutItems) == 0x000000, "Member 'Corpse_GetItemsOnCorpse::OutItems' has a wrong offset!");

// Function Indiana.Corpse.HandleItemAdded
// 0x0010 (0x0010 - 0x0000)
struct Corpse_HandleItemAdded final
{
public:
	struct FItemStack                             ItemStack;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Corpse_HandleItemAdded) == 0x000008, "Wrong alignment on Corpse_HandleItemAdded");
static_assert(sizeof(Corpse_HandleItemAdded) == 0x000010, "Wrong size on Corpse_HandleItemAdded");
static_assert(offsetof(Corpse_HandleItemAdded, ItemStack) == 0x000000, "Member 'Corpse_HandleItemAdded::ItemStack' has a wrong offset!");

// Function Indiana.Corpse.HandleItemRemoved
// 0x0010 (0x0010 - 0x0000)
struct Corpse_HandleItemRemoved final
{
public:
	struct FItemStack                             ItemStack;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Corpse_HandleItemRemoved) == 0x000008, "Wrong alignment on Corpse_HandleItemRemoved");
static_assert(sizeof(Corpse_HandleItemRemoved) == 0x000010, "Wrong size on Corpse_HandleItemRemoved");
static_assert(offsetof(Corpse_HandleItemRemoved, ItemStack) == 0x000000, "Member 'Corpse_HandleItemRemoved::ItemStack' has a wrong offset!");

// Function Indiana.RadialWidget.OnRadialScroll
// 0x0004 (0x0004 - 0x0000)
struct RadialWidget_OnRadialScroll final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RadialWidget_OnRadialScroll) == 0x000004, "Wrong alignment on RadialWidget_OnRadialScroll");
static_assert(sizeof(RadialWidget_OnRadialScroll) == 0x000004, "Wrong size on RadialWidget_OnRadialScroll");
static_assert(offsetof(RadialWidget_OnRadialScroll, Value) == 0x000000, "Member 'RadialWidget_OnRadialScroll::Value' has a wrong offset!");

// Function Indiana.CustomEventEffect.CustomStop
// 0x0008 (0x0008 - 0x0000)
struct CustomEventEffect_CustomStop final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomEventEffect_CustomStop) == 0x000008, "Wrong alignment on CustomEventEffect_CustomStop");
static_assert(sizeof(CustomEventEffect_CustomStop) == 0x000008, "Wrong size on CustomEventEffect_CustomStop");
static_assert(offsetof(CustomEventEffect_CustomStop, TargetActor) == 0x000000, "Member 'CustomEventEffect_CustomStop::TargetActor' has a wrong offset!");

// Function Indiana.CustomEventEffect.CustomTrigger
// 0x0088 (0x0088 - 0x0000)
struct CustomEventEffect_CustomTrigger final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEventEffectParams                     Params_0;                                          // 0x0008(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomEventEffect_CustomTrigger) == 0x000008, "Wrong alignment on CustomEventEffect_CustomTrigger");
static_assert(sizeof(CustomEventEffect_CustomTrigger) == 0x000088, "Wrong size on CustomEventEffect_CustomTrigger");
static_assert(offsetof(CustomEventEffect_CustomTrigger, TargetActor) == 0x000000, "Member 'CustomEventEffect_CustomTrigger::TargetActor' has a wrong offset!");
static_assert(offsetof(CustomEventEffect_CustomTrigger, Params_0) == 0x000008, "Member 'CustomEventEffect_CustomTrigger::Params_0' has a wrong offset!");

// Function Indiana.SettingsMenuCheckBoxWidget.OnValueChanged
// 0x0008 (0x0008 - 0x0000)
struct SettingsMenuCheckBoxWidget_OnValueChanged final
{
public:
	const class UButtonBase*                      Button;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsMenuCheckBoxWidget_OnValueChanged) == 0x000008, "Wrong alignment on SettingsMenuCheckBoxWidget_OnValueChanged");
static_assert(sizeof(SettingsMenuCheckBoxWidget_OnValueChanged) == 0x000008, "Wrong size on SettingsMenuCheckBoxWidget_OnValueChanged");
static_assert(offsetof(SettingsMenuCheckBoxWidget_OnValueChanged, Button) == 0x000000, "Member 'SettingsMenuCheckBoxWidget_OnValueChanged::Button' has a wrong offset!");

// Function Indiana.DeathBehavior.GetTargetMesh
// 0x0008 (0x0008 - 0x0000)
struct DeathBehavior_GetTargetMesh final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeathBehavior_GetTargetMesh) == 0x000008, "Wrong alignment on DeathBehavior_GetTargetMesh");
static_assert(sizeof(DeathBehavior_GetTargetMesh) == 0x000008, "Wrong size on DeathBehavior_GetTargetMesh");
static_assert(offsetof(DeathBehavior_GetTargetMesh, ReturnValue) == 0x000000, "Member 'DeathBehavior_GetTargetMesh::ReturnValue' has a wrong offset!");

// Function Indiana.DeathMenuWidget.OnLoadComplete
// 0x0018 (0x0018 - 0x0000)
struct DeathMenuWidget_OnLoadComplete final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoadGameResult                               Result;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DeathMenuWidget_OnLoadComplete) == 0x000008, "Wrong alignment on DeathMenuWidget_OnLoadComplete");
static_assert(sizeof(DeathMenuWidget_OnLoadComplete) == 0x000018, "Wrong size on DeathMenuWidget_OnLoadComplete");
static_assert(offsetof(DeathMenuWidget_OnLoadComplete, Filename) == 0x000000, "Member 'DeathMenuWidget_OnLoadComplete::Filename' has a wrong offset!");
static_assert(offsetof(DeathMenuWidget_OnLoadComplete, Result) == 0x000010, "Member 'DeathMenuWidget_OnLoadComplete::Result' has a wrong offset!");

// Function Indiana.DeathMenuWidget.OnQueryLatestSaveFinished
// 0x0018 (0x0018 - 0x0000)
struct DeathMenuWidget_OnQueryLatestSaveFinished final
{
public:
	class FString                                 LatestSaveName;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasSaves;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DeathMenuWidget_OnQueryLatestSaveFinished) == 0x000008, "Wrong alignment on DeathMenuWidget_OnQueryLatestSaveFinished");
static_assert(sizeof(DeathMenuWidget_OnQueryLatestSaveFinished) == 0x000018, "Wrong size on DeathMenuWidget_OnQueryLatestSaveFinished");
static_assert(offsetof(DeathMenuWidget_OnQueryLatestSaveFinished, LatestSaveName) == 0x000000, "Member 'DeathMenuWidget_OnQueryLatestSaveFinished::LatestSaveName' has a wrong offset!");
static_assert(offsetof(DeathMenuWidget_OnQueryLatestSaveFinished, bHasSaves) == 0x000010, "Member 'DeathMenuWidget_OnQueryLatestSaveFinished::bHasSaves' has a wrong offset!");

// Function Indiana.PlayerInteractionComponent.OnDiscrepencyAmplifierActivated
// 0x0001 (0x0001 - 0x0000)
struct PlayerInteractionComponent_OnDiscrepencyAmplifierActivated final
{
public:
	bool                                          bActivated;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionComponent_OnDiscrepencyAmplifierActivated) == 0x000001, "Wrong alignment on PlayerInteractionComponent_OnDiscrepencyAmplifierActivated");
static_assert(sizeof(PlayerInteractionComponent_OnDiscrepencyAmplifierActivated) == 0x000001, "Wrong size on PlayerInteractionComponent_OnDiscrepencyAmplifierActivated");
static_assert(offsetof(PlayerInteractionComponent_OnDiscrepencyAmplifierActivated, bActivated) == 0x000000, "Member 'PlayerInteractionComponent_OnDiscrepencyAmplifierActivated::bActivated' has a wrong offset!");

// Function Indiana.PlayerInteractionComponent.OnHighlightModeChanged
// 0x0001 (0x0001 - 0x0000)
struct PlayerInteractionComponent_OnHighlightModeChanged final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionComponent_OnHighlightModeChanged) == 0x000001, "Wrong alignment on PlayerInteractionComponent_OnHighlightModeChanged");
static_assert(sizeof(PlayerInteractionComponent_OnHighlightModeChanged) == 0x000001, "Wrong size on PlayerInteractionComponent_OnHighlightModeChanged");
static_assert(offsetof(PlayerInteractionComponent_OnHighlightModeChanged, bVisible) == 0x000000, "Member 'PlayerInteractionComponent_OnHighlightModeChanged::bVisible' has a wrong offset!");

// Function Indiana.PlayerInteractionComponent.OnHUDVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct PlayerInteractionComponent_OnHUDVisibilityChanged final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionComponent_OnHUDVisibilityChanged) == 0x000001, "Wrong alignment on PlayerInteractionComponent_OnHUDVisibilityChanged");
static_assert(sizeof(PlayerInteractionComponent_OnHUDVisibilityChanged) == 0x000001, "Wrong size on PlayerInteractionComponent_OnHUDVisibilityChanged");
static_assert(offsetof(PlayerInteractionComponent_OnHUDVisibilityChanged, bVisible) == 0x000000, "Member 'PlayerInteractionComponent_OnHUDVisibilityChanged::bVisible' has a wrong offset!");

// Function Indiana.DestructibleAudioComponent.Play
// 0x0001 (0x0001 - 0x0000)
struct DestructibleAudioComponent_Play final
{
public:
	EDestructibleEventType                        Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DestructibleAudioComponent_Play) == 0x000001, "Wrong alignment on DestructibleAudioComponent_Play");
static_assert(sizeof(DestructibleAudioComponent_Play) == 0x000001, "Wrong size on DestructibleAudioComponent_Play");
static_assert(offsetof(DestructibleAudioComponent_Play, Type) == 0x000000, "Member 'DestructibleAudioComponent_Play::Type' has a wrong offset!");

// Function Indiana.DestructibleAudioComponent.Stop
// 0x0001 (0x0001 - 0x0000)
struct DestructibleAudioComponent_Stop final
{
public:
	EDestructibleEventType                        Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DestructibleAudioComponent_Stop) == 0x000001, "Wrong alignment on DestructibleAudioComponent_Stop");
static_assert(sizeof(DestructibleAudioComponent_Stop) == 0x000001, "Wrong size on DestructibleAudioComponent_Stop");
static_assert(offsetof(DestructibleAudioComponent_Stop, Type) == 0x000000, "Member 'DestructibleAudioComponent_Stop::Type' has a wrong offset!");

// Function Indiana.DevelopmentFunctionality.DebugDrawLightmapInfo
// 0x0018 (0x0018 - 0x0000)
struct DevelopmentFunctionality_DebugDrawLightmapInfo final
{
public:
	class FString                                 LightmapName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DevelopmentFunctionality_DebugDrawLightmapInfo) == 0x000008, "Wrong alignment on DevelopmentFunctionality_DebugDrawLightmapInfo");
static_assert(sizeof(DevelopmentFunctionality_DebugDrawLightmapInfo) == 0x000018, "Wrong size on DevelopmentFunctionality_DebugDrawLightmapInfo");
static_assert(offsetof(DevelopmentFunctionality_DebugDrawLightmapInfo, LightmapName) == 0x000000, "Member 'DevelopmentFunctionality_DebugDrawLightmapInfo::LightmapName' has a wrong offset!");
static_assert(offsetof(DevelopmentFunctionality_DebugDrawLightmapInfo, Duration) == 0x000010, "Member 'DevelopmentFunctionality_DebugDrawLightmapInfo::Duration' has a wrong offset!");

// Function Indiana.DevelopmentFunctionality.DebugDrawLightmapNamesPerComponent
// 0x0008 (0x0008 - 0x0000)
struct DevelopmentFunctionality_DebugDrawLightmapNamesPerComponent final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LightmapTextureIndex;                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DevelopmentFunctionality_DebugDrawLightmapNamesPerComponent) == 0x000004, "Wrong alignment on DevelopmentFunctionality_DebugDrawLightmapNamesPerComponent");
static_assert(sizeof(DevelopmentFunctionality_DebugDrawLightmapNamesPerComponent) == 0x000008, "Wrong size on DevelopmentFunctionality_DebugDrawLightmapNamesPerComponent");
static_assert(offsetof(DevelopmentFunctionality_DebugDrawLightmapNamesPerComponent, Duration) == 0x000000, "Member 'DevelopmentFunctionality_DebugDrawLightmapNamesPerComponent::Duration' has a wrong offset!");
static_assert(offsetof(DevelopmentFunctionality_DebugDrawLightmapNamesPerComponent, LightmapTextureIndex) == 0x000004, "Member 'DevelopmentFunctionality_DebugDrawLightmapNamesPerComponent::LightmapTextureIndex' has a wrong offset!");

// Function Indiana.DevelopmentFunctionality.DebugDrawLightmapNamesSummary
// 0x000C (0x000C - 0x0000)
struct DevelopmentFunctionality_DebugDrawLightmapNamesSummary final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LightmapTextureIndex;                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeThreshold;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DevelopmentFunctionality_DebugDrawLightmapNamesSummary) == 0x000004, "Wrong alignment on DevelopmentFunctionality_DebugDrawLightmapNamesSummary");
static_assert(sizeof(DevelopmentFunctionality_DebugDrawLightmapNamesSummary) == 0x00000C, "Wrong size on DevelopmentFunctionality_DebugDrawLightmapNamesSummary");
static_assert(offsetof(DevelopmentFunctionality_DebugDrawLightmapNamesSummary, Duration) == 0x000000, "Member 'DevelopmentFunctionality_DebugDrawLightmapNamesSummary::Duration' has a wrong offset!");
static_assert(offsetof(DevelopmentFunctionality_DebugDrawLightmapNamesSummary, LightmapTextureIndex) == 0x000004, "Member 'DevelopmentFunctionality_DebugDrawLightmapNamesSummary::LightmapTextureIndex' has a wrong offset!");
static_assert(offsetof(DevelopmentFunctionality_DebugDrawLightmapNamesSummary, VolumeThreshold) == 0x000008, "Member 'DevelopmentFunctionality_DebugDrawLightmapNamesSummary::VolumeThreshold' has a wrong offset!");

// Function Indiana.DevelopmentFunctionality.StartInfoTracking
// 0x0008 (0x0008 - 0x0000)
struct DevelopmentFunctionality_StartInfoTracking final
{
public:
	float                                         TrackRate;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTrackStats;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DevelopmentFunctionality_StartInfoTracking) == 0x000004, "Wrong alignment on DevelopmentFunctionality_StartInfoTracking");
static_assert(sizeof(DevelopmentFunctionality_StartInfoTracking) == 0x000008, "Wrong size on DevelopmentFunctionality_StartInfoTracking");
static_assert(offsetof(DevelopmentFunctionality_StartInfoTracking, TrackRate) == 0x000000, "Member 'DevelopmentFunctionality_StartInfoTracking::TrackRate' has a wrong offset!");
static_assert(offsetof(DevelopmentFunctionality_StartInfoTracking, bTrackStats) == 0x000004, "Member 'DevelopmentFunctionality_StartInfoTracking::bTrackStats' has a wrong offset!");

// Function Indiana.DialogBoxWidget.SetNewBackingMaterialHeight
// 0x0004 (0x0004 - 0x0000)
struct DialogBoxWidget_SetNewBackingMaterialHeight final
{
public:
	float                                         NewHeight;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DialogBoxWidget_SetNewBackingMaterialHeight) == 0x000004, "Wrong alignment on DialogBoxWidget_SetNewBackingMaterialHeight");
static_assert(sizeof(DialogBoxWidget_SetNewBackingMaterialHeight) == 0x000004, "Wrong size on DialogBoxWidget_SetNewBackingMaterialHeight");
static_assert(offsetof(DialogBoxWidget_SetNewBackingMaterialHeight, NewHeight) == 0x000000, "Member 'DialogBoxWidget_SetNewBackingMaterialHeight::NewHeight' has a wrong offset!");

// Function Indiana.DifficultyManager.GetGameDifficulty
// 0x0001 (0x0001 - 0x0000)
struct DifficultyManager_GetGameDifficulty final
{
public:
	EGameDifficulty                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DifficultyManager_GetGameDifficulty) == 0x000001, "Wrong alignment on DifficultyManager_GetGameDifficulty");
static_assert(sizeof(DifficultyManager_GetGameDifficulty) == 0x000001, "Wrong size on DifficultyManager_GetGameDifficulty");
static_assert(offsetof(DifficultyManager_GetGameDifficulty, ReturnValue) == 0x000000, "Member 'DifficultyManager_GetGameDifficulty::ReturnValue' has a wrong offset!");

// Function Indiana.DifficultyManager.SetDifficulty
// 0x0001 (0x0001 - 0x0000)
struct DifficultyManager_SetDifficulty final
{
public:
	EGameDifficulty                               NewDifficulty;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DifficultyManager_SetDifficulty) == 0x000001, "Wrong alignment on DifficultyManager_SetDifficulty");
static_assert(sizeof(DifficultyManager_SetDifficulty) == 0x000001, "Wrong size on DifficultyManager_SetDifficulty");
static_assert(offsetof(DifficultyManager_SetDifficulty, NewDifficulty) == 0x000000, "Member 'DifficultyManager_SetDifficulty::NewDifficulty' has a wrong offset!");

// Function Indiana.DifficultyManager.SetSurvivalMode
// 0x0001 (0x0001 - 0x0000)
struct DifficultyManager_SetSurvivalMode final
{
public:
	bool                                          IsSurvivalMode;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DifficultyManager_SetSurvivalMode) == 0x000001, "Wrong alignment on DifficultyManager_SetSurvivalMode");
static_assert(sizeof(DifficultyManager_SetSurvivalMode) == 0x000001, "Wrong size on DifficultyManager_SetSurvivalMode");
static_assert(offsetof(DifficultyManager_SetSurvivalMode, IsSurvivalMode) == 0x000000, "Member 'DifficultyManager_SetSurvivalMode::IsSurvivalMode' has a wrong offset!");

// Function Indiana.DifficultySelectWidget.ValueChanged
// 0x0008 (0x0008 - 0x0000)
struct DifficultySelectWidget_ValueChanged final
{
public:
	class UUserSetting*                           UserSetting;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DifficultySelectWidget_ValueChanged) == 0x000008, "Wrong alignment on DifficultySelectWidget_ValueChanged");
static_assert(sizeof(DifficultySelectWidget_ValueChanged) == 0x000008, "Wrong size on DifficultySelectWidget_ValueChanged");
static_assert(offsetof(DifficultySelectWidget_ValueChanged, UserSetting) == 0x000000, "Member 'DifficultySelectWidget_ValueChanged::UserSetting' has a wrong offset!");

// Function Indiana.PersonalSpaceComponent.OnNewStateOfBeing
// 0x0002 (0x0002 - 0x0000)
struct PersonalSpaceComponent_OnNewStateOfBeing final
{
public:
	EStateOfBeing                                 NewStateOfBeing;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStateOfBeing                                 OldStateOfBeing;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PersonalSpaceComponent_OnNewStateOfBeing) == 0x000001, "Wrong alignment on PersonalSpaceComponent_OnNewStateOfBeing");
static_assert(sizeof(PersonalSpaceComponent_OnNewStateOfBeing) == 0x000002, "Wrong size on PersonalSpaceComponent_OnNewStateOfBeing");
static_assert(offsetof(PersonalSpaceComponent_OnNewStateOfBeing, NewStateOfBeing) == 0x000000, "Member 'PersonalSpaceComponent_OnNewStateOfBeing::NewStateOfBeing' has a wrong offset!");
static_assert(offsetof(PersonalSpaceComponent_OnNewStateOfBeing, OldStateOfBeing) == 0x000001, "Member 'PersonalSpaceComponent_OnNewStateOfBeing::OldStateOfBeing' has a wrong offset!");

// Function Indiana.DLCManager.OnGlobalVarChanged
// 0x0018 (0x0018 - 0x0000)
struct DLCManager_OnGlobalVarChanged final
{
public:
	class FString                                 VariableName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewValue;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DLCManager_OnGlobalVarChanged) == 0x000008, "Wrong alignment on DLCManager_OnGlobalVarChanged");
static_assert(sizeof(DLCManager_OnGlobalVarChanged) == 0x000018, "Wrong size on DLCManager_OnGlobalVarChanged");
static_assert(offsetof(DLCManager_OnGlobalVarChanged, VariableName) == 0x000000, "Member 'DLCManager_OnGlobalVarChanged::VariableName' has a wrong offset!");
static_assert(offsetof(DLCManager_OnGlobalVarChanged, NewValue) == 0x000010, "Member 'DLCManager_OnGlobalVarChanged::NewValue' has a wrong offset!");

// Function Indiana.DLCManager.IsINX1Installed
// 0x0001 (0x0001 - 0x0000)
struct DLCManager_IsINX1Installed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DLCManager_IsINX1Installed) == 0x000001, "Wrong alignment on DLCManager_IsINX1Installed");
static_assert(sizeof(DLCManager_IsINX1Installed) == 0x000001, "Wrong size on DLCManager_IsINX1Installed");
static_assert(offsetof(DLCManager_IsINX1Installed, ReturnValue) == 0x000000, "Member 'DLCManager_IsINX1Installed::ReturnValue' has a wrong offset!");

// Function Indiana.DLCManager.IsINX2Installed
// 0x0001 (0x0001 - 0x0000)
struct DLCManager_IsINX2Installed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DLCManager_IsINX2Installed) == 0x000001, "Wrong alignment on DLCManager_IsINX2Installed");
static_assert(sizeof(DLCManager_IsINX2Installed) == 0x000001, "Wrong size on DLCManager_IsINX2Installed");
static_assert(offsetof(DLCManager_IsINX2Installed, ReturnValue) == 0x000000, "Member 'DLCManager_IsINX2Installed::ReturnValue' has a wrong offset!");

// Function Indiana.DragContainerWidget.OnDragConfirmDrop
// 0x0008 (0x0008 - 0x0000)
struct DragContainerWidget_OnDragConfirmDrop final
{
public:
	class UIndianaDragDropOperation*              Operation;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DragContainerWidget_OnDragConfirmDrop) == 0x000008, "Wrong alignment on DragContainerWidget_OnDragConfirmDrop");
static_assert(sizeof(DragContainerWidget_OnDragConfirmDrop) == 0x000008, "Wrong size on DragContainerWidget_OnDragConfirmDrop");
static_assert(offsetof(DragContainerWidget_OnDragConfirmDrop, Operation) == 0x000000, "Member 'DragContainerWidget_OnDragConfirmDrop::Operation' has a wrong offset!");

// Function Indiana.DragContainerWidget.OnDragGroupCancelled
// 0x0008 (0x0008 - 0x0000)
struct DragContainerWidget_OnDragGroupCancelled final
{
public:
	class UIndianaDragDropOperation*              Operation;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DragContainerWidget_OnDragGroupCancelled) == 0x000008, "Wrong alignment on DragContainerWidget_OnDragGroupCancelled");
static_assert(sizeof(DragContainerWidget_OnDragGroupCancelled) == 0x000008, "Wrong size on DragContainerWidget_OnDragGroupCancelled");
static_assert(offsetof(DragContainerWidget_OnDragGroupCancelled, Operation) == 0x000000, "Member 'DragContainerWidget_OnDragGroupCancelled::Operation' has a wrong offset!");

// Function Indiana.DragContainerWidget.OnDragGroupDrop
// 0x0008 (0x0008 - 0x0000)
struct DragContainerWidget_OnDragGroupDrop final
{
public:
	class UIndianaDragDropOperation*              Operation;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DragContainerWidget_OnDragGroupDrop) == 0x000008, "Wrong alignment on DragContainerWidget_OnDragGroupDrop");
static_assert(sizeof(DragContainerWidget_OnDragGroupDrop) == 0x000008, "Wrong size on DragContainerWidget_OnDragGroupDrop");
static_assert(offsetof(DragContainerWidget_OnDragGroupDrop, Operation) == 0x000000, "Member 'DragContainerWidget_OnDragGroupDrop::Operation' has a wrong offset!");

// Function Indiana.DragContainerWidget.OnDragGroupStarted
// 0x0008 (0x0008 - 0x0000)
struct DragContainerWidget_OnDragGroupStarted final
{
public:
	class UIndianaDragDropOperation*              Operation;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DragContainerWidget_OnDragGroupStarted) == 0x000008, "Wrong alignment on DragContainerWidget_OnDragGroupStarted");
static_assert(sizeof(DragContainerWidget_OnDragGroupStarted) == 0x000008, "Wrong size on DragContainerWidget_OnDragGroupStarted");
static_assert(offsetof(DragContainerWidget_OnDragGroupStarted, Operation) == 0x000000, "Member 'DragContainerWidget_OnDragGroupStarted::Operation' has a wrong offset!");

// Function Indiana.DragContainerWidget.OnDragStarted
// 0x0008 (0x0008 - 0x0000)
struct DragContainerWidget_OnDragStarted final
{
public:
	class UIndianaDragDropOperation*              Operation;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DragContainerWidget_OnDragStarted) == 0x000008, "Wrong alignment on DragContainerWidget_OnDragStarted");
static_assert(sizeof(DragContainerWidget_OnDragStarted) == 0x000008, "Wrong size on DragContainerWidget_OnDragStarted");
static_assert(offsetof(DragContainerWidget_OnDragStarted, Operation) == 0x000000, "Member 'DragContainerWidget_OnDragStarted::Operation' has a wrong offset!");

// Function Indiana.DragContainerWidget.OnOperationDragCancelled
// 0x0008 (0x0008 - 0x0000)
struct DragContainerWidget_OnOperationDragCancelled final
{
public:
	class UDragDropOperation*                     Operation;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DragContainerWidget_OnOperationDragCancelled) == 0x000008, "Wrong alignment on DragContainerWidget_OnOperationDragCancelled");
static_assert(sizeof(DragContainerWidget_OnOperationDragCancelled) == 0x000008, "Wrong size on DragContainerWidget_OnOperationDragCancelled");
static_assert(offsetof(DragContainerWidget_OnOperationDragCancelled, Operation) == 0x000000, "Member 'DragContainerWidget_OnOperationDragCancelled::Operation' has a wrong offset!");

// Function Indiana.DragContainerWidget.OnOperationDrop
// 0x0008 (0x0008 - 0x0000)
struct DragContainerWidget_OnOperationDrop final
{
public:
	class UDragDropOperation*                     Operation;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DragContainerWidget_OnOperationDrop) == 0x000008, "Wrong alignment on DragContainerWidget_OnOperationDrop");
static_assert(sizeof(DragContainerWidget_OnOperationDrop) == 0x000008, "Wrong size on DragContainerWidget_OnOperationDrop");
static_assert(offsetof(DragContainerWidget_OnOperationDrop, Operation) == 0x000000, "Member 'DragContainerWidget_OnOperationDrop::Operation' has a wrong offset!");

// Function Indiana.DynamicTOD.GetPreviousWeatherState
// 0x0008 (0x0008 - 0x0000)
struct DynamicTOD_GetPreviousWeatherState final
{
public:
	class UWeatherStateContainer*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicTOD_GetPreviousWeatherState) == 0x000008, "Wrong alignment on DynamicTOD_GetPreviousWeatherState");
static_assert(sizeof(DynamicTOD_GetPreviousWeatherState) == 0x000008, "Wrong size on DynamicTOD_GetPreviousWeatherState");
static_assert(offsetof(DynamicTOD_GetPreviousWeatherState, ReturnValue) == 0x000000, "Member 'DynamicTOD_GetPreviousWeatherState::ReturnValue' has a wrong offset!");

// Function Indiana.DynamicTOD.GetWeatherParticleSystem
// 0x0008 (0x0008 - 0x0000)
struct DynamicTOD_GetWeatherParticleSystem final
{
public:
	class UParticleSystem*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicTOD_GetWeatherParticleSystem) == 0x000008, "Wrong alignment on DynamicTOD_GetWeatherParticleSystem");
static_assert(sizeof(DynamicTOD_GetWeatherParticleSystem) == 0x000008, "Wrong size on DynamicTOD_GetWeatherParticleSystem");
static_assert(offsetof(DynamicTOD_GetWeatherParticleSystem, ReturnValue) == 0x000000, "Member 'DynamicTOD_GetWeatherParticleSystem::ReturnValue' has a wrong offset!");

// Function Indiana.DynamicTOD.GetWeatherWwiseStateName
// 0x0008 (0x0008 - 0x0000)
struct DynamicTOD_GetWeatherWwiseStateName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicTOD_GetWeatherWwiseStateName) == 0x000004, "Wrong alignment on DynamicTOD_GetWeatherWwiseStateName");
static_assert(sizeof(DynamicTOD_GetWeatherWwiseStateName) == 0x000008, "Wrong size on DynamicTOD_GetWeatherWwiseStateName");
static_assert(offsetof(DynamicTOD_GetWeatherWwiseStateName, ReturnValue) == 0x000000, "Member 'DynamicTOD_GetWeatherWwiseStateName::ReturnValue' has a wrong offset!");

// Function Indiana.DynamicTOD.SaveCurrentWeather
// 0x0008 (0x0008 - 0x0000)
struct DynamicTOD_SaveCurrentWeather final
{
public:
	class UWeatherStateContainer*                 InWeatherState;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicTOD_SaveCurrentWeather) == 0x000008, "Wrong alignment on DynamicTOD_SaveCurrentWeather");
static_assert(sizeof(DynamicTOD_SaveCurrentWeather) == 0x000008, "Wrong size on DynamicTOD_SaveCurrentWeather");
static_assert(offsetof(DynamicTOD_SaveCurrentWeather, InWeatherState) == 0x000000, "Member 'DynamicTOD_SaveCurrentWeather::InWeatherState' has a wrong offset!");

// Function Indiana.DynamicTOD.WeatherTimelineUpdateForward
// 0x0008 (0x0008 - 0x0000)
struct DynamicTOD_WeatherTimelineUpdateForward final
{
public:
	float                                         CurrentWeatherAmount;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentMaterialWetness;                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicTOD_WeatherTimelineUpdateForward) == 0x000004, "Wrong alignment on DynamicTOD_WeatherTimelineUpdateForward");
static_assert(sizeof(DynamicTOD_WeatherTimelineUpdateForward) == 0x000008, "Wrong size on DynamicTOD_WeatherTimelineUpdateForward");
static_assert(offsetof(DynamicTOD_WeatherTimelineUpdateForward, CurrentWeatherAmount) == 0x000000, "Member 'DynamicTOD_WeatherTimelineUpdateForward::CurrentWeatherAmount' has a wrong offset!");
static_assert(offsetof(DynamicTOD_WeatherTimelineUpdateForward, CurrentMaterialWetness) == 0x000004, "Member 'DynamicTOD_WeatherTimelineUpdateForward::CurrentMaterialWetness' has a wrong offset!");

// Function Indiana.DynamicTOD.WeatherTimelineUpdateReverse
// 0x0008 (0x0008 - 0x0000)
struct DynamicTOD_WeatherTimelineUpdateReverse final
{
public:
	float                                         CurrentWeatherAmount;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentMaterialWetness;                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicTOD_WeatherTimelineUpdateReverse) == 0x000004, "Wrong alignment on DynamicTOD_WeatherTimelineUpdateReverse");
static_assert(sizeof(DynamicTOD_WeatherTimelineUpdateReverse) == 0x000008, "Wrong size on DynamicTOD_WeatherTimelineUpdateReverse");
static_assert(offsetof(DynamicTOD_WeatherTimelineUpdateReverse, CurrentWeatherAmount) == 0x000000, "Member 'DynamicTOD_WeatherTimelineUpdateReverse::CurrentWeatherAmount' has a wrong offset!");
static_assert(offsetof(DynamicTOD_WeatherTimelineUpdateReverse, CurrentMaterialWetness) == 0x000004, "Member 'DynamicTOD_WeatherTimelineUpdateReverse::CurrentMaterialWetness' has a wrong offset!");

// Function Indiana.ElevatorAudioComponent.Play
// 0x0001 (0x0001 - 0x0000)
struct ElevatorAudioComponent_Play final
{
public:
	EElevatorEventType                            Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ElevatorAudioComponent_Play) == 0x000001, "Wrong alignment on ElevatorAudioComponent_Play");
static_assert(sizeof(ElevatorAudioComponent_Play) == 0x000001, "Wrong size on ElevatorAudioComponent_Play");
static_assert(offsetof(ElevatorAudioComponent_Play, Type) == 0x000000, "Member 'ElevatorAudioComponent_Play::Type' has a wrong offset!");

// Function Indiana.ElevatorAudioComponent.Stop
// 0x0001 (0x0001 - 0x0000)
struct ElevatorAudioComponent_Stop final
{
public:
	EElevatorEventType                            Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ElevatorAudioComponent_Stop) == 0x000001, "Wrong alignment on ElevatorAudioComponent_Stop");
static_assert(sizeof(ElevatorAudioComponent_Stop) == 0x000001, "Wrong size on ElevatorAudioComponent_Stop");
static_assert(offsetof(ElevatorAudioComponent_Stop, Type) == 0x000000, "Member 'ElevatorAudioComponent_Stop::Type' has a wrong offset!");

// Function Indiana.ElevatorDisableStatusEffect.OnElevatorMoveEnd
// 0x0004 (0x0004 - 0x0000)
struct ElevatorDisableStatusEffect_OnElevatorMoveEnd final
{
public:
	int32                                         DestinationFloor;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ElevatorDisableStatusEffect_OnElevatorMoveEnd) == 0x000004, "Wrong alignment on ElevatorDisableStatusEffect_OnElevatorMoveEnd");
static_assert(sizeof(ElevatorDisableStatusEffect_OnElevatorMoveEnd) == 0x000004, "Wrong size on ElevatorDisableStatusEffect_OnElevatorMoveEnd");
static_assert(offsetof(ElevatorDisableStatusEffect_OnElevatorMoveEnd, DestinationFloor) == 0x000000, "Member 'ElevatorDisableStatusEffect_OnElevatorMoveEnd::DestinationFloor' has a wrong offset!");

// Function Indiana.EnemyScannerComponent.TimeDilationEnd
// 0x0004 (0x0004 - 0x0000)
struct EnemyScannerComponent_TimeDilationEnd final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnemyScannerComponent_TimeDilationEnd) == 0x000004, "Wrong alignment on EnemyScannerComponent_TimeDilationEnd");
static_assert(sizeof(EnemyScannerComponent_TimeDilationEnd) == 0x000004, "Wrong size on EnemyScannerComponent_TimeDilationEnd");
static_assert(offsetof(EnemyScannerComponent_TimeDilationEnd, Duration) == 0x000000, "Member 'EnemyScannerComponent_TimeDilationEnd::Duration' has a wrong offset!");

// Function Indiana.OnRailsComponent.FindVantageForActor
// 0x0018 (0x0018 - 0x0000)
struct OnRailsComponent_FindVantageForActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnRailsComponent_FindVantageForActor) == 0x000008, "Wrong alignment on OnRailsComponent_FindVantageForActor");
static_assert(sizeof(OnRailsComponent_FindVantageForActor) == 0x000018, "Wrong size on OnRailsComponent_FindVantageForActor");
static_assert(offsetof(OnRailsComponent_FindVantageForActor, Actor) == 0x000000, "Member 'OnRailsComponent_FindVantageForActor::Actor' has a wrong offset!");
static_assert(offsetof(OnRailsComponent_FindVantageForActor, ReturnValue) == 0x000008, "Member 'OnRailsComponent_FindVantageForActor::ReturnValue' has a wrong offset!");

// Function Indiana.OnRailsComponent.FindVantageForLocation
// 0x0018 (0x0018 - 0x0000)
struct OnRailsComponent_FindVantageForLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnRailsComponent_FindVantageForLocation) == 0x000004, "Wrong alignment on OnRailsComponent_FindVantageForLocation");
static_assert(sizeof(OnRailsComponent_FindVantageForLocation) == 0x000018, "Wrong size on OnRailsComponent_FindVantageForLocation");
static_assert(offsetof(OnRailsComponent_FindVantageForLocation, Location) == 0x000000, "Member 'OnRailsComponent_FindVantageForLocation::Location' has a wrong offset!");
static_assert(offsetof(OnRailsComponent_FindVantageForLocation, ReturnValue) == 0x00000C, "Member 'OnRailsComponent_FindVantageForLocation::ReturnValue' has a wrong offset!");

// Function Indiana.OnRailsComponent.FurthestLocationOnSpline
// 0x000C (0x000C - 0x0000)
struct OnRailsComponent_FurthestLocationOnSpline final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnRailsComponent_FurthestLocationOnSpline) == 0x000004, "Wrong alignment on OnRailsComponent_FurthestLocationOnSpline");
static_assert(sizeof(OnRailsComponent_FurthestLocationOnSpline) == 0x00000C, "Wrong size on OnRailsComponent_FurthestLocationOnSpline");
static_assert(offsetof(OnRailsComponent_FurthestLocationOnSpline, ReturnValue) == 0x000000, "Member 'OnRailsComponent_FurthestLocationOnSpline::ReturnValue' has a wrong offset!");

// Function Indiana.OnRailsComponent.HasVantageForActor
// 0x0010 (0x0010 - 0x0000)
struct OnRailsComponent_HasVantageForActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnRailsComponent_HasVantageForActor) == 0x000008, "Wrong alignment on OnRailsComponent_HasVantageForActor");
static_assert(sizeof(OnRailsComponent_HasVantageForActor) == 0x000010, "Wrong size on OnRailsComponent_HasVantageForActor");
static_assert(offsetof(OnRailsComponent_HasVantageForActor, Actor) == 0x000000, "Member 'OnRailsComponent_HasVantageForActor::Actor' has a wrong offset!");
static_assert(offsetof(OnRailsComponent_HasVantageForActor, ReturnValue) == 0x000008, "Member 'OnRailsComponent_HasVantageForActor::ReturnValue' has a wrong offset!");

// Function Indiana.OnRailsComponent.IsMoving
// 0x0001 (0x0001 - 0x0000)
struct OnRailsComponent_IsMoving final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnRailsComponent_IsMoving) == 0x000001, "Wrong alignment on OnRailsComponent_IsMoving");
static_assert(sizeof(OnRailsComponent_IsMoving) == 0x000001, "Wrong size on OnRailsComponent_IsMoving");
static_assert(offsetof(OnRailsComponent_IsMoving, ReturnValue) == 0x000000, "Member 'OnRailsComponent_IsMoving::ReturnValue' has a wrong offset!");

// Function Indiana.OnRailsComponent.IsMovingForward
// 0x0001 (0x0001 - 0x0000)
struct OnRailsComponent_IsMovingForward final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnRailsComponent_IsMovingForward) == 0x000001, "Wrong alignment on OnRailsComponent_IsMovingForward");
static_assert(sizeof(OnRailsComponent_IsMovingForward) == 0x000001, "Wrong size on OnRailsComponent_IsMovingForward");
static_assert(offsetof(OnRailsComponent_IsMovingForward, ReturnValue) == 0x000000, "Member 'OnRailsComponent_IsMovingForward::ReturnValue' has a wrong offset!");

// Function Indiana.OnRailsComponent.OnCharacterDeath
// 0x0110 (0x0110 - 0x0000)
struct OnRailsComponent_OnCharacterDeath final
{
public:
	struct FCauseDamageInfo                       CDI;                                               // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnRailsComponent_OnCharacterDeath) == 0x000008, "Wrong alignment on OnRailsComponent_OnCharacterDeath");
static_assert(sizeof(OnRailsComponent_OnCharacterDeath) == 0x000110, "Wrong size on OnRailsComponent_OnCharacterDeath");
static_assert(offsetof(OnRailsComponent_OnCharacterDeath, CDI) == 0x000000, "Member 'OnRailsComponent_OnCharacterDeath::CDI' has a wrong offset!");

// Function Indiana.OnRailsComponent.OnCompHit
// 0x00B0 (0x00B0 - 0x0000)
struct OnRailsComponent_OnCompHit final
{
public:
	class UPrimitiveComponent*                    HitComp;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0024(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnRailsComponent_OnCompHit) == 0x000008, "Wrong alignment on OnRailsComponent_OnCompHit");
static_assert(sizeof(OnRailsComponent_OnCompHit) == 0x0000B0, "Wrong size on OnRailsComponent_OnCompHit");
static_assert(offsetof(OnRailsComponent_OnCompHit, HitComp) == 0x000000, "Member 'OnRailsComponent_OnCompHit::HitComp' has a wrong offset!");
static_assert(offsetof(OnRailsComponent_OnCompHit, OtherActor) == 0x000008, "Member 'OnRailsComponent_OnCompHit::OtherActor' has a wrong offset!");
static_assert(offsetof(OnRailsComponent_OnCompHit, OtherComp) == 0x000010, "Member 'OnRailsComponent_OnCompHit::OtherComp' has a wrong offset!");
static_assert(offsetof(OnRailsComponent_OnCompHit, NormalImpulse) == 0x000018, "Member 'OnRailsComponent_OnCompHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(OnRailsComponent_OnCompHit, Hit) == 0x000024, "Member 'OnRailsComponent_OnCompHit::Hit' has a wrong offset!");

// Function Indiana.WorkbenchPageWidget.OnDragDrop_ClearArmorSlot
// 0x0008 (0x0008 - 0x0000)
struct WorkbenchPageWidget_OnDragDrop_ClearArmorSlot final
{
public:
	class UIndianaDragDropOperation*              Operation;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorkbenchPageWidget_OnDragDrop_ClearArmorSlot) == 0x000008, "Wrong alignment on WorkbenchPageWidget_OnDragDrop_ClearArmorSlot");
static_assert(sizeof(WorkbenchPageWidget_OnDragDrop_ClearArmorSlot) == 0x000008, "Wrong size on WorkbenchPageWidget_OnDragDrop_ClearArmorSlot");
static_assert(offsetof(WorkbenchPageWidget_OnDragDrop_ClearArmorSlot, Operation) == 0x000000, "Member 'WorkbenchPageWidget_OnDragDrop_ClearArmorSlot::Operation' has a wrong offset!");

// Function Indiana.WorkbenchPageWidget.OnDragDrop_SetWeaponSlot
// 0x0008 (0x0008 - 0x0000)
struct WorkbenchPageWidget_OnDragDrop_SetWeaponSlot final
{
public:
	class UIndianaDragDropOperation*              Operation;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorkbenchPageWidget_OnDragDrop_SetWeaponSlot) == 0x000008, "Wrong alignment on WorkbenchPageWidget_OnDragDrop_SetWeaponSlot");
static_assert(sizeof(WorkbenchPageWidget_OnDragDrop_SetWeaponSlot) == 0x000008, "Wrong size on WorkbenchPageWidget_OnDragDrop_SetWeaponSlot");
static_assert(offsetof(WorkbenchPageWidget_OnDragDrop_SetWeaponSlot, Operation) == 0x000000, "Member 'WorkbenchPageWidget_OnDragDrop_SetWeaponSlot::Operation' has a wrong offset!");

// Function Indiana.WorkbenchPageWidget.OnDragDrop_SwapWeaponSlot
// 0x0008 (0x0008 - 0x0000)
struct WorkbenchPageWidget_OnDragDrop_SwapWeaponSlot final
{
public:
	class UIndianaDragDropOperation*              Operation;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorkbenchPageWidget_OnDragDrop_SwapWeaponSlot) == 0x000008, "Wrong alignment on WorkbenchPageWidget_OnDragDrop_SwapWeaponSlot");
static_assert(sizeof(WorkbenchPageWidget_OnDragDrop_SwapWeaponSlot) == 0x000008, "Wrong size on WorkbenchPageWidget_OnDragDrop_SwapWeaponSlot");
static_assert(offsetof(WorkbenchPageWidget_OnDragDrop_SwapWeaponSlot, Operation) == 0x000000, "Member 'WorkbenchPageWidget_OnDragDrop_SwapWeaponSlot::Operation' has a wrong offset!");

// Function Indiana.WorkbenchPageWidget.OnItemRemoved
// 0x0010 (0x0010 - 0x0000)
struct WorkbenchPageWidget_OnItemRemoved final
{
public:
	struct FItemStack                             ItemStack;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorkbenchPageWidget_OnItemRemoved) == 0x000008, "Wrong alignment on WorkbenchPageWidget_OnItemRemoved");
static_assert(sizeof(WorkbenchPageWidget_OnItemRemoved) == 0x000010, "Wrong size on WorkbenchPageWidget_OnItemRemoved");
static_assert(offsetof(WorkbenchPageWidget_OnItemRemoved, ItemStack) == 0x000000, "Member 'WorkbenchPageWidget_OnItemRemoved::ItemStack' has a wrong offset!");

// Function Indiana.LegalWidget.SetEnabledConfirmButton
// 0x0001 (0x0001 - 0x0000)
struct LegalWidget_SetEnabledConfirmButton final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LegalWidget_SetEnabledConfirmButton) == 0x000001, "Wrong alignment on LegalWidget_SetEnabledConfirmButton");
static_assert(sizeof(LegalWidget_SetEnabledConfirmButton) == 0x000001, "Wrong size on LegalWidget_SetEnabledConfirmButton");
static_assert(offsetof(LegalWidget_SetEnabledConfirmButton, bEnable) == 0x000000, "Member 'LegalWidget_SetEnabledConfirmButton::bEnable' has a wrong offset!");

// Function Indiana.LegalWidget.UpdateConfirmButtonState
// 0x0004 (0x0004 - 0x0000)
struct LegalWidget_UpdateConfirmButtonState final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LegalWidget_UpdateConfirmButtonState) == 0x000004, "Wrong alignment on LegalWidget_UpdateConfirmButtonState");
static_assert(sizeof(LegalWidget_UpdateConfirmButtonState) == 0x000004, "Wrong size on LegalWidget_UpdateConfirmButtonState");
static_assert(offsetof(LegalWidget_UpdateConfirmButtonState, DeltaTime) == 0x000000, "Member 'LegalWidget_UpdateConfirmButtonState::DeltaTime' has a wrong offset!");

// Function Indiana.LegalWidget.IsLegalSigned
// 0x0001 (0x0001 - 0x0000)
struct LegalWidget_IsLegalSigned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LegalWidget_IsLegalSigned) == 0x000001, "Wrong alignment on LegalWidget_IsLegalSigned");
static_assert(sizeof(LegalWidget_IsLegalSigned) == 0x000001, "Wrong size on LegalWidget_IsLegalSigned");
static_assert(offsetof(LegalWidget_IsLegalSigned, ReturnValue) == 0x000000, "Member 'LegalWidget_IsLegalSigned::ReturnValue' has a wrong offset!");

// Function Indiana.TextEntryWidget.OnTextfieldChanged
// 0x0018 (0x0018 - 0x0000)
struct TextEntryWidget_OnTextfieldChanged final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextEntryWidget_OnTextfieldChanged) == 0x000008, "Wrong alignment on TextEntryWidget_OnTextfieldChanged");
static_assert(sizeof(TextEntryWidget_OnTextfieldChanged) == 0x000018, "Wrong size on TextEntryWidget_OnTextfieldChanged");
static_assert(offsetof(TextEntryWidget_OnTextfieldChanged, Text) == 0x000000, "Member 'TextEntryWidget_OnTextfieldChanged::Text' has a wrong offset!");

// Function Indiana.TextEntryWidget.OnTextfieldCommitted
// 0x0020 (0x0020 - 0x0000)
struct TextEntryWidget_OnTextfieldCommitted final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   CommitType;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TextEntryWidget_OnTextfieldCommitted) == 0x000008, "Wrong alignment on TextEntryWidget_OnTextfieldCommitted");
static_assert(sizeof(TextEntryWidget_OnTextfieldCommitted) == 0x000020, "Wrong size on TextEntryWidget_OnTextfieldCommitted");
static_assert(offsetof(TextEntryWidget_OnTextfieldCommitted, Text) == 0x000000, "Member 'TextEntryWidget_OnTextfieldCommitted::Text' has a wrong offset!");
static_assert(offsetof(TextEntryWidget_OnTextfieldCommitted, CommitType) == 0x000018, "Member 'TextEntryWidget_OnTextfieldCommitted::CommitType' has a wrong offset!");

// Function Indiana.InteractableComponent.GetInteractableComponent
// 0x0010 (0x0010 - 0x0000)
struct InteractableComponent_GetInteractableComponent final
{
public:
	class UChildActorComponent*                   ChildActorComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInteractableComponent*                 ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractableComponent_GetInteractableComponent) == 0x000008, "Wrong alignment on InteractableComponent_GetInteractableComponent");
static_assert(sizeof(InteractableComponent_GetInteractableComponent) == 0x000010, "Wrong size on InteractableComponent_GetInteractableComponent");
static_assert(offsetof(InteractableComponent_GetInteractableComponent, ChildActorComponent) == 0x000000, "Member 'InteractableComponent_GetInteractableComponent::ChildActorComponent' has a wrong offset!");
static_assert(offsetof(InteractableComponent_GetInteractableComponent, ReturnValue) == 0x000008, "Member 'InteractableComponent_GetInteractableComponent::ReturnValue' has a wrong offset!");

// Function Indiana.TextBlockBase.SetColorAndOpacity
// 0x0028 (0x0028 - 0x0000)
struct TextBlockBase_SetColorAndOpacity final
{
public:
	struct FSlateColor                            InColorAndOpacity;                                 // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextBlockBase_SetColorAndOpacity) == 0x000008, "Wrong alignment on TextBlockBase_SetColorAndOpacity");
static_assert(sizeof(TextBlockBase_SetColorAndOpacity) == 0x000028, "Wrong size on TextBlockBase_SetColorAndOpacity");
static_assert(offsetof(TextBlockBase_SetColorAndOpacity, InColorAndOpacity) == 0x000000, "Member 'TextBlockBase_SetColorAndOpacity::InColorAndOpacity' has a wrong offset!");

// Function Indiana.TextBlockBase.SetFont
// 0x0058 (0x0058 - 0x0000)
struct TextBlockBase_SetFont final
{
public:
	struct FSlateFontInfo                         InFontInfo;                                        // 0x0000(0x0058)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextBlockBase_SetFont) == 0x000008, "Wrong alignment on TextBlockBase_SetFont");
static_assert(sizeof(TextBlockBase_SetFont) == 0x000058, "Wrong size on TextBlockBase_SetFont");
static_assert(offsetof(TextBlockBase_SetFont, InFontInfo) == 0x000000, "Member 'TextBlockBase_SetFont::InFontInfo' has a wrong offset!");

// Function Indiana.TextBlockBase.SetOpacity
// 0x0004 (0x0004 - 0x0000)
struct TextBlockBase_SetOpacity final
{
public:
	float                                         InOpacity;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextBlockBase_SetOpacity) == 0x000004, "Wrong alignment on TextBlockBase_SetOpacity");
static_assert(sizeof(TextBlockBase_SetOpacity) == 0x000004, "Wrong size on TextBlockBase_SetOpacity");
static_assert(offsetof(TextBlockBase_SetOpacity, InOpacity) == 0x000000, "Member 'TextBlockBase_SetOpacity::InOpacity' has a wrong offset!");

// Function Indiana.TextBlockBase.SetOutline
// 0x0020 (0x0020 - 0x0000)
struct TextBlockBase_SetOutline final
{
public:
	struct FFontOutlineSettings                   OutlineSettings;                                   // 0x0000(0x0020)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextBlockBase_SetOutline) == 0x000008, "Wrong alignment on TextBlockBase_SetOutline");
static_assert(sizeof(TextBlockBase_SetOutline) == 0x000020, "Wrong size on TextBlockBase_SetOutline");
static_assert(offsetof(TextBlockBase_SetOutline, OutlineSettings) == 0x000000, "Member 'TextBlockBase_SetOutline::OutlineSettings' has a wrong offset!");

// Function Indiana.TextBlockBase.SetShadowColorAndOpacity
// 0x0010 (0x0010 - 0x0000)
struct TextBlockBase_SetShadowColorAndOpacity final
{
public:
	struct FLinearColor                           InShadowColorAndOpacity;                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextBlockBase_SetShadowColorAndOpacity) == 0x000004, "Wrong alignment on TextBlockBase_SetShadowColorAndOpacity");
static_assert(sizeof(TextBlockBase_SetShadowColorAndOpacity) == 0x000010, "Wrong size on TextBlockBase_SetShadowColorAndOpacity");
static_assert(offsetof(TextBlockBase_SetShadowColorAndOpacity, InShadowColorAndOpacity) == 0x000000, "Member 'TextBlockBase_SetShadowColorAndOpacity::InShadowColorAndOpacity' has a wrong offset!");

// Function Indiana.TextBlockBase.SetShadowOffset
// 0x0008 (0x0008 - 0x0000)
struct TextBlockBase_SetShadowOffset final
{
public:
	struct FVector2D                              InShadowOffset;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextBlockBase_SetShadowOffset) == 0x000004, "Wrong alignment on TextBlockBase_SetShadowOffset");
static_assert(sizeof(TextBlockBase_SetShadowOffset) == 0x000008, "Wrong size on TextBlockBase_SetShadowOffset");
static_assert(offsetof(TextBlockBase_SetShadowOffset, InShadowOffset) == 0x000000, "Member 'TextBlockBase_SetShadowOffset::InShadowOffset' has a wrong offset!");

// Function Indiana.TextBlockBase.SetText
// 0x0010 (0x0010 - 0x0000)
struct TextBlockBase_SetText final
{
public:
	class FString                                 InString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextBlockBase_SetText) == 0x000008, "Wrong alignment on TextBlockBase_SetText");
static_assert(sizeof(TextBlockBase_SetText) == 0x000010, "Wrong size on TextBlockBase_SetText");
static_assert(offsetof(TextBlockBase_SetText, InString) == 0x000000, "Member 'TextBlockBase_SetText::InString' has a wrong offset!");

// Function Indiana.TextBlockBase.SetTextByLocString
// 0x0008 (0x0008 - 0x0000)
struct TextBlockBase_SetTextByLocString final
{
public:
	struct FLocString                             LocString;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextBlockBase_SetTextByLocString) == 0x000004, "Wrong alignment on TextBlockBase_SetTextByLocString");
static_assert(sizeof(TextBlockBase_SetTextByLocString) == 0x000008, "Wrong size on TextBlockBase_SetTextByLocString");
static_assert(offsetof(TextBlockBase_SetTextByLocString, LocString) == 0x000000, "Member 'TextBlockBase_SetTextByLocString::LocString' has a wrong offset!");

// Function Indiana.TextBlockBase.UseTextStyleOutline
// 0x0001 (0x0001 - 0x0000)
struct TextBlockBase_UseTextStyleOutline final
{
public:
	bool                                          bShouldUse;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextBlockBase_UseTextStyleOutline) == 0x000001, "Wrong alignment on TextBlockBase_UseTextStyleOutline");
static_assert(sizeof(TextBlockBase_UseTextStyleOutline) == 0x000001, "Wrong size on TextBlockBase_UseTextStyleOutline");
static_assert(offsetof(TextBlockBase_UseTextStyleOutline, bShouldUse) == 0x000000, "Member 'TextBlockBase_UseTextStyleOutline::bShouldUse' has a wrong offset!");

// Function Indiana.TextBlockBase.UseTextStyleShadowOffset
// 0x0001 (0x0001 - 0x0000)
struct TextBlockBase_UseTextStyleShadowOffset final
{
public:
	bool                                          bShouldUse;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextBlockBase_UseTextStyleShadowOffset) == 0x000001, "Wrong alignment on TextBlockBase_UseTextStyleShadowOffset");
static_assert(sizeof(TextBlockBase_UseTextStyleShadowOffset) == 0x000001, "Wrong size on TextBlockBase_UseTextStyleShadowOffset");
static_assert(offsetof(TextBlockBase_UseTextStyleShadowOffset, bShouldUse) == 0x000000, "Member 'TextBlockBase_UseTextStyleShadowOffset::bShouldUse' has a wrong offset!");

// Function Indiana.TextBlockBase.GetColorAndOpacity
// 0x0028 (0x0028 - 0x0000)
struct TextBlockBase_GetColorAndOpacity final
{
public:
	struct FSlateColor                            ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextBlockBase_GetColorAndOpacity) == 0x000008, "Wrong alignment on TextBlockBase_GetColorAndOpacity");
static_assert(sizeof(TextBlockBase_GetColorAndOpacity) == 0x000028, "Wrong size on TextBlockBase_GetColorAndOpacity");
static_assert(offsetof(TextBlockBase_GetColorAndOpacity, ReturnValue) == 0x000000, "Member 'TextBlockBase_GetColorAndOpacity::ReturnValue' has a wrong offset!");

// Function Indiana.TextBlockBase.GetFont
// 0x0058 (0x0058 - 0x0000)
struct TextBlockBase_GetFont final
{
public:
	struct FSlateFontInfo                         ReturnValue;                                       // 0x0000(0x0058)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextBlockBase_GetFont) == 0x000008, "Wrong alignment on TextBlockBase_GetFont");
static_assert(sizeof(TextBlockBase_GetFont) == 0x000058, "Wrong size on TextBlockBase_GetFont");
static_assert(offsetof(TextBlockBase_GetFont, ReturnValue) == 0x000000, "Member 'TextBlockBase_GetFont::ReturnValue' has a wrong offset!");

// Function Indiana.TextBlockBase.GetText
// 0x0018 (0x0018 - 0x0000)
struct TextBlockBase_GetText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextBlockBase_GetText) == 0x000008, "Wrong alignment on TextBlockBase_GetText");
static_assert(sizeof(TextBlockBase_GetText) == 0x000018, "Wrong size on TextBlockBase_GetText");
static_assert(offsetof(TextBlockBase_GetText, ReturnValue) == 0x000000, "Member 'TextBlockBase_GetText::ReturnValue' has a wrong offset!");

// Function Indiana.TextBlockBase.IsEmpty
// 0x0001 (0x0001 - 0x0000)
struct TextBlockBase_IsEmpty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextBlockBase_IsEmpty) == 0x000001, "Wrong alignment on TextBlockBase_IsEmpty");
static_assert(sizeof(TextBlockBase_IsEmpty) == 0x000001, "Wrong size on TextBlockBase_IsEmpty");
static_assert(offsetof(TextBlockBase_IsEmpty, ReturnValue) == 0x000000, "Member 'TextBlockBase_IsEmpty::ReturnValue' has a wrong offset!");

// Function Indiana.OnKillListener.OnKill
// 0x0118 (0x0118 - 0x0000)
struct OnKillListener_OnKill final
{
public:
	class AActor*                                 Victim;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCauseDamageInfo                       CauseDamageInfo;                                   // 0x0008(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnKillListener_OnKill) == 0x000008, "Wrong alignment on OnKillListener_OnKill");
static_assert(sizeof(OnKillListener_OnKill) == 0x000118, "Wrong size on OnKillListener_OnKill");
static_assert(offsetof(OnKillListener_OnKill, Victim) == 0x000000, "Member 'OnKillListener_OnKill::Victim' has a wrong offset!");
static_assert(offsetof(OnKillListener_OnKill, CauseDamageInfo) == 0x000008, "Member 'OnKillListener_OnKill::CauseDamageInfo' has a wrong offset!");

// Function Indiana.OnKillTurnToAshListener.OnKill
// 0x0010 (0x0010 - 0x0000)
struct OnKillTurnToAshListener_OnKill final
{
public:
	class AActor*                                 Victim;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UIndianaDamageType>         DmgType;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnKillTurnToAshListener_OnKill) == 0x000008, "Wrong alignment on OnKillTurnToAshListener_OnKill");
static_assert(sizeof(OnKillTurnToAshListener_OnKill) == 0x000010, "Wrong size on OnKillTurnToAshListener_OnKill");
static_assert(offsetof(OnKillTurnToAshListener_OnKill, Victim) == 0x000000, "Member 'OnKillTurnToAshListener_OnKill::Victim' has a wrong offset!");
static_assert(offsetof(OnKillTurnToAshListener_OnKill, DmgType) == 0x000008, "Member 'OnKillTurnToAshListener_OnKill::DmgType' has a wrong offset!");

// Function Indiana.OnCausedDamage.OnCauseDamage
// 0x0110 (0x0110 - 0x0000)
struct OnCausedDamage_OnCauseDamage final
{
public:
	struct FCauseDamageInfo                       CauseDamageInfo;                                   // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnCausedDamage_OnCauseDamage) == 0x000008, "Wrong alignment on OnCausedDamage_OnCauseDamage");
static_assert(sizeof(OnCausedDamage_OnCauseDamage) == 0x000110, "Wrong size on OnCausedDamage_OnCauseDamage");
static_assert(offsetof(OnCausedDamage_OnCauseDamage, CauseDamageInfo) == 0x000000, "Member 'OnCausedDamage_OnCauseDamage::CauseDamageInfo' has a wrong offset!");

// Function Indiana.IndianaPlayerCharacter.GetIndianaPC
// 0x0008 (0x0008 - 0x0000)
struct IndianaPlayerCharacter_GetIndianaPC final
{
public:
	class AIndianaPlayerCharacter*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerCharacter_GetIndianaPC) == 0x000008, "Wrong alignment on IndianaPlayerCharacter_GetIndianaPC");
static_assert(sizeof(IndianaPlayerCharacter_GetIndianaPC) == 0x000008, "Wrong size on IndianaPlayerCharacter_GetIndianaPC");
static_assert(offsetof(IndianaPlayerCharacter_GetIndianaPC, ReturnValue) == 0x000000, "Member 'IndianaPlayerCharacter_GetIndianaPC::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaPlayerCharacter.AdjustWeaponHealth
// 0x0004 (0x0004 - 0x0000)
struct IndianaPlayerCharacter_AdjustWeaponHealth final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerCharacter_AdjustWeaponHealth) == 0x000004, "Wrong alignment on IndianaPlayerCharacter_AdjustWeaponHealth");
static_assert(sizeof(IndianaPlayerCharacter_AdjustWeaponHealth) == 0x000004, "Wrong size on IndianaPlayerCharacter_AdjustWeaponHealth");
static_assert(offsetof(IndianaPlayerCharacter_AdjustWeaponHealth, Amount) == 0x000000, "Member 'IndianaPlayerCharacter_AdjustWeaponHealth::Amount' has a wrong offset!");

// Function Indiana.IndianaPlayerCharacter.CanAccessTravelDestination
// 0x0010 (0x0010 - 0x0000)
struct IndianaPlayerCharacter_CanAccessTravelDestination final
{
public:
	const class UTravelDestinationData*           TravelDest;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaPlayerCharacter_CanAccessTravelDestination) == 0x000008, "Wrong alignment on IndianaPlayerCharacter_CanAccessTravelDestination");
static_assert(sizeof(IndianaPlayerCharacter_CanAccessTravelDestination) == 0x000010, "Wrong size on IndianaPlayerCharacter_CanAccessTravelDestination");
static_assert(offsetof(IndianaPlayerCharacter_CanAccessTravelDestination, TravelDest) == 0x000000, "Member 'IndianaPlayerCharacter_CanAccessTravelDestination::TravelDest' has a wrong offset!");
static_assert(offsetof(IndianaPlayerCharacter_CanAccessTravelDestination, ReturnValue) == 0x000008, "Member 'IndianaPlayerCharacter_CanAccessTravelDestination::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaPlayerCharacter.CanDiscoverPointOfInterest
// 0x0010 (0x0010 - 0x0000)
struct IndianaPlayerCharacter_CanDiscoverPointOfInterest final
{
public:
	const class UPointOfInterestData*             POIData;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaPlayerCharacter_CanDiscoverPointOfInterest) == 0x000008, "Wrong alignment on IndianaPlayerCharacter_CanDiscoverPointOfInterest");
static_assert(sizeof(IndianaPlayerCharacter_CanDiscoverPointOfInterest) == 0x000010, "Wrong size on IndianaPlayerCharacter_CanDiscoverPointOfInterest");
static_assert(offsetof(IndianaPlayerCharacter_CanDiscoverPointOfInterest, POIData) == 0x000000, "Member 'IndianaPlayerCharacter_CanDiscoverPointOfInterest::POIData' has a wrong offset!");
static_assert(offsetof(IndianaPlayerCharacter_CanDiscoverPointOfInterest, ReturnValue) == 0x000008, "Member 'IndianaPlayerCharacter_CanDiscoverPointOfInterest::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaPlayerCharacter.DebugTravel_SetAwareDestination
// 0x000C (0x000C - 0x0000)
struct IndianaPlayerCharacter_DebugTravel_SetAwareDestination final
{
public:
	class FName                                   TravelDestination;                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewAware;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaPlayerCharacter_DebugTravel_SetAwareDestination) == 0x000004, "Wrong alignment on IndianaPlayerCharacter_DebugTravel_SetAwareDestination");
static_assert(sizeof(IndianaPlayerCharacter_DebugTravel_SetAwareDestination) == 0x00000C, "Wrong size on IndianaPlayerCharacter_DebugTravel_SetAwareDestination");
static_assert(offsetof(IndianaPlayerCharacter_DebugTravel_SetAwareDestination, TravelDestination) == 0x000000, "Member 'IndianaPlayerCharacter_DebugTravel_SetAwareDestination::TravelDestination' has a wrong offset!");
static_assert(offsetof(IndianaPlayerCharacter_DebugTravel_SetAwareDestination, bNewAware) == 0x000008, "Member 'IndianaPlayerCharacter_DebugTravel_SetAwareDestination::bNewAware' has a wrong offset!");

// Function Indiana.IndianaPlayerCharacter.DebugTravel_SetAwareRegion
// 0x000C (0x000C - 0x0000)
struct IndianaPlayerCharacter_DebugTravel_SetAwareRegion final
{
public:
	class FName                                   Region;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewAware;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaPlayerCharacter_DebugTravel_SetAwareRegion) == 0x000004, "Wrong alignment on IndianaPlayerCharacter_DebugTravel_SetAwareRegion");
static_assert(sizeof(IndianaPlayerCharacter_DebugTravel_SetAwareRegion) == 0x00000C, "Wrong size on IndianaPlayerCharacter_DebugTravel_SetAwareRegion");
static_assert(offsetof(IndianaPlayerCharacter_DebugTravel_SetAwareRegion, Region) == 0x000000, "Member 'IndianaPlayerCharacter_DebugTravel_SetAwareRegion::Region' has a wrong offset!");
static_assert(offsetof(IndianaPlayerCharacter_DebugTravel_SetAwareRegion, bNewAware) == 0x000008, "Member 'IndianaPlayerCharacter_DebugTravel_SetAwareRegion::bNewAware' has a wrong offset!");

// Function Indiana.IndianaPlayerCharacter.DebugTravel_SetDestinationHidden
// 0x000C (0x000C - 0x0000)
struct IndianaPlayerCharacter_DebugTravel_SetDestinationHidden final
{
public:
	class FName                                   TravelDestination;                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewHidden;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaPlayerCharacter_DebugTravel_SetDestinationHidden) == 0x000004, "Wrong alignment on IndianaPlayerCharacter_DebugTravel_SetDestinationHidden");
static_assert(sizeof(IndianaPlayerCharacter_DebugTravel_SetDestinationHidden) == 0x00000C, "Wrong size on IndianaPlayerCharacter_DebugTravel_SetDestinationHidden");
static_assert(offsetof(IndianaPlayerCharacter_DebugTravel_SetDestinationHidden, TravelDestination) == 0x000000, "Member 'IndianaPlayerCharacter_DebugTravel_SetDestinationHidden::TravelDestination' has a wrong offset!");
static_assert(offsetof(IndianaPlayerCharacter_DebugTravel_SetDestinationHidden, bNewHidden) == 0x000008, "Member 'IndianaPlayerCharacter_DebugTravel_SetDestinationHidden::bNewHidden' has a wrong offset!");

// Function Indiana.IndianaPlayerCharacter.DebugTravel_SetDestinationLocked
// 0x000C (0x000C - 0x0000)
struct IndianaPlayerCharacter_DebugTravel_SetDestinationLocked final
{
public:
	class FName                                   TravelDestination;                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewLocked;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaPlayerCharacter_DebugTravel_SetDestinationLocked) == 0x000004, "Wrong alignment on IndianaPlayerCharacter_DebugTravel_SetDestinationLocked");
static_assert(sizeof(IndianaPlayerCharacter_DebugTravel_SetDestinationLocked) == 0x00000C, "Wrong size on IndianaPlayerCharacter_DebugTravel_SetDestinationLocked");
static_assert(offsetof(IndianaPlayerCharacter_DebugTravel_SetDestinationLocked, TravelDestination) == 0x000000, "Member 'IndianaPlayerCharacter_DebugTravel_SetDestinationLocked::TravelDestination' has a wrong offset!");
static_assert(offsetof(IndianaPlayerCharacter_DebugTravel_SetDestinationLocked, bNewLocked) == 0x000008, "Member 'IndianaPlayerCharacter_DebugTravel_SetDestinationLocked::bNewLocked' has a wrong offset!");

// Function Indiana.IndianaPlayerCharacter.DebugTravel_SetShipLocation
// 0x0008 (0x0008 - 0x0000)
struct IndianaPlayerCharacter_DebugTravel_SetShipLocation final
{
public:
	class FName                                   ShipLocation;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerCharacter_DebugTravel_SetShipLocation) == 0x000004, "Wrong alignment on IndianaPlayerCharacter_DebugTravel_SetShipLocation");
static_assert(sizeof(IndianaPlayerCharacter_DebugTravel_SetShipLocation) == 0x000008, "Wrong size on IndianaPlayerCharacter_DebugTravel_SetShipLocation");
static_assert(offsetof(IndianaPlayerCharacter_DebugTravel_SetShipLocation, ShipLocation) == 0x000000, "Member 'IndianaPlayerCharacter_DebugTravel_SetShipLocation::ShipLocation' has a wrong offset!");

// Function Indiana.IndianaPlayerCharacter.DebugTravel_SetVisitedDestination
// 0x000C (0x000C - 0x0000)
struct IndianaPlayerCharacter_DebugTravel_SetVisitedDestination final
{
public:
	class FName                                   TravelDestination;                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewVisited;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaPlayerCharacter_DebugTravel_SetVisitedDestination) == 0x000004, "Wrong alignment on IndianaPlayerCharacter_DebugTravel_SetVisitedDestination");
static_assert(sizeof(IndianaPlayerCharacter_DebugTravel_SetVisitedDestination) == 0x00000C, "Wrong size on IndianaPlayerCharacter_DebugTravel_SetVisitedDestination");
static_assert(offsetof(IndianaPlayerCharacter_DebugTravel_SetVisitedDestination, TravelDestination) == 0x000000, "Member 'IndianaPlayerCharacter_DebugTravel_SetVisitedDestination::TravelDestination' has a wrong offset!");
static_assert(offsetof(IndianaPlayerCharacter_DebugTravel_SetVisitedDestination, bNewVisited) == 0x000008, "Member 'IndianaPlayerCharacter_DebugTravel_SetVisitedDestination::bNewVisited' has a wrong offset!");

// Function Indiana.IndianaPlayerCharacter.DebugTravel_SetVisitedRegion
// 0x000C (0x000C - 0x0000)
struct IndianaPlayerCharacter_DebugTravel_SetVisitedRegion final
{
public:
	class FName                                   Region;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewVisited;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaPlayerCharacter_DebugTravel_SetVisitedRegion) == 0x000004, "Wrong alignment on IndianaPlayerCharacter_DebugTravel_SetVisitedRegion");
static_assert(sizeof(IndianaPlayerCharacter_DebugTravel_SetVisitedRegion) == 0x00000C, "Wrong size on IndianaPlayerCharacter_DebugTravel_SetVisitedRegion");
static_assert(offsetof(IndianaPlayerCharacter_DebugTravel_SetVisitedRegion, Region) == 0x000000, "Member 'IndianaPlayerCharacter_DebugTravel_SetVisitedRegion::Region' has a wrong offset!");
static_assert(offsetof(IndianaPlayerCharacter_DebugTravel_SetVisitedRegion, bNewVisited) == 0x000008, "Member 'IndianaPlayerCharacter_DebugTravel_SetVisitedRegion::bNewVisited' has a wrong offset!");

// Function Indiana.IndianaPlayerCharacter.DebugTravel_TravelToDestination
// 0x0008 (0x0008 - 0x0000)
struct IndianaPlayerCharacter_DebugTravel_TravelToDestination final
{
public:
	class FName                                   TravelDestination;                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerCharacter_DebugTravel_TravelToDestination) == 0x000004, "Wrong alignment on IndianaPlayerCharacter_DebugTravel_TravelToDestination");
static_assert(sizeof(IndianaPlayerCharacter_DebugTravel_TravelToDestination) == 0x000008, "Wrong size on IndianaPlayerCharacter_DebugTravel_TravelToDestination");
static_assert(offsetof(IndianaPlayerCharacter_DebugTravel_TravelToDestination, TravelDestination) == 0x000000, "Member 'IndianaPlayerCharacter_DebugTravel_TravelToDestination::TravelDestination' has a wrong offset!");

// Function Indiana.IndianaPlayerCharacter.DiscoverPointOfInterest
// 0x0010 (0x0010 - 0x0000)
struct IndianaPlayerCharacter_DiscoverPointOfInterest final
{
public:
	const class UPointOfInterestData*             POIData;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanAwardXP;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaPlayerCharacter_DiscoverPointOfInterest) == 0x000008, "Wrong alignment on IndianaPlayerCharacter_DiscoverPointOfInterest");
static_assert(sizeof(IndianaPlayerCharacter_DiscoverPointOfInterest) == 0x000010, "Wrong size on IndianaPlayerCharacter_DiscoverPointOfInterest");
static_assert(offsetof(IndianaPlayerCharacter_DiscoverPointOfInterest, POIData) == 0x000000, "Member 'IndianaPlayerCharacter_DiscoverPointOfInterest::POIData' has a wrong offset!");
static_assert(offsetof(IndianaPlayerCharacter_DiscoverPointOfInterest, bCanAwardXP) == 0x000008, "Member 'IndianaPlayerCharacter_DiscoverPointOfInterest::bCanAwardXP' has a wrong offset!");

// Function Indiana.IndianaPlayerCharacter.EquippedWeaponChanged
// 0x0008 (0x0008 - 0x0000)
struct IndianaPlayerCharacter_EquippedWeaponChanged final
{
public:
	class UWeapon*                                NewlyEquippedWeapon;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerCharacter_EquippedWeaponChanged) == 0x000008, "Wrong alignment on IndianaPlayerCharacter_EquippedWeaponChanged");
static_assert(sizeof(IndianaPlayerCharacter_EquippedWeaponChanged) == 0x000008, "Wrong size on IndianaPlayerCharacter_EquippedWeaponChanged");
static_assert(offsetof(IndianaPlayerCharacter_EquippedWeaponChanged, NewlyEquippedWeapon) == 0x000000, "Member 'IndianaPlayerCharacter_EquippedWeaponChanged::NewlyEquippedWeapon' has a wrong offset!");

// Function Indiana.IndianaPlayerCharacter.EvidenceScannerActivated
// 0x0001 (0x0001 - 0x0000)
struct IndianaPlayerCharacter_EvidenceScannerActivated final
{
public:
	bool                                          bActivated;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerCharacter_EvidenceScannerActivated) == 0x000001, "Wrong alignment on IndianaPlayerCharacter_EvidenceScannerActivated");
static_assert(sizeof(IndianaPlayerCharacter_EvidenceScannerActivated) == 0x000001, "Wrong size on IndianaPlayerCharacter_EvidenceScannerActivated");
static_assert(offsetof(IndianaPlayerCharacter_EvidenceScannerActivated, bActivated) == 0x000000, "Member 'IndianaPlayerCharacter_EvidenceScannerActivated::bActivated' has a wrong offset!");

// Function Indiana.IndianaPlayerCharacter.HasDiscoveredPointOfInterest
// 0x0010 (0x0010 - 0x0000)
struct IndianaPlayerCharacter_HasDiscoveredPointOfInterest final
{
public:
	const class UPointOfInterestData*             POIData;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaPlayerCharacter_HasDiscoveredPointOfInterest) == 0x000008, "Wrong alignment on IndianaPlayerCharacter_HasDiscoveredPointOfInterest");
static_assert(sizeof(IndianaPlayerCharacter_HasDiscoveredPointOfInterest) == 0x000010, "Wrong size on IndianaPlayerCharacter_HasDiscoveredPointOfInterest");
static_assert(offsetof(IndianaPlayerCharacter_HasDiscoveredPointOfInterest, POIData) == 0x000000, "Member 'IndianaPlayerCharacter_HasDiscoveredPointOfInterest::POIData' has a wrong offset!");
static_assert(offsetof(IndianaPlayerCharacter_HasDiscoveredPointOfInterest, ReturnValue) == 0x000008, "Member 'IndianaPlayerCharacter_HasDiscoveredPointOfInterest::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaPlayerCharacter.HasOnlyHeardAboutPointOfInterest
// 0x0010 (0x0010 - 0x0000)
struct IndianaPlayerCharacter_HasOnlyHeardAboutPointOfInterest final
{
public:
	const class UPointOfInterestData*             POIData;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaPlayerCharacter_HasOnlyHeardAboutPointOfInterest) == 0x000008, "Wrong alignment on IndianaPlayerCharacter_HasOnlyHeardAboutPointOfInterest");
static_assert(sizeof(IndianaPlayerCharacter_HasOnlyHeardAboutPointOfInterest) == 0x000010, "Wrong size on IndianaPlayerCharacter_HasOnlyHeardAboutPointOfInterest");
static_assert(offsetof(IndianaPlayerCharacter_HasOnlyHeardAboutPointOfInterest, POIData) == 0x000000, "Member 'IndianaPlayerCharacter_HasOnlyHeardAboutPointOfInterest::POIData' has a wrong offset!");
static_assert(offsetof(IndianaPlayerCharacter_HasOnlyHeardAboutPointOfInterest, ReturnValue) == 0x000008, "Member 'IndianaPlayerCharacter_HasOnlyHeardAboutPointOfInterest::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaPlayerCharacter.HasVisitedRegion
// 0x0010 (0x0010 - 0x0000)
struct IndianaPlayerCharacter_HasVisitedRegion final
{
public:
	const class UTravelRegionData*                Region;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaPlayerCharacter_HasVisitedRegion) == 0x000008, "Wrong alignment on IndianaPlayerCharacter_HasVisitedRegion");
static_assert(sizeof(IndianaPlayerCharacter_HasVisitedRegion) == 0x000010, "Wrong size on IndianaPlayerCharacter_HasVisitedRegion");
static_assert(offsetof(IndianaPlayerCharacter_HasVisitedRegion, Region) == 0x000000, "Member 'IndianaPlayerCharacter_HasVisitedRegion::Region' has a wrong offset!");
static_assert(offsetof(IndianaPlayerCharacter_HasVisitedRegion, ReturnValue) == 0x000008, "Member 'IndianaPlayerCharacter_HasVisitedRegion::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaPlayerCharacter.HasVisitedTravelDestination
// 0x0010 (0x0010 - 0x0000)
struct IndianaPlayerCharacter_HasVisitedTravelDestination final
{
public:
	const class UTravelDestinationData*           TravelDest;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaPlayerCharacter_HasVisitedTravelDestination) == 0x000008, "Wrong alignment on IndianaPlayerCharacter_HasVisitedTravelDestination");
static_assert(sizeof(IndianaPlayerCharacter_HasVisitedTravelDestination) == 0x000010, "Wrong size on IndianaPlayerCharacter_HasVisitedTravelDestination");
static_assert(offsetof(IndianaPlayerCharacter_HasVisitedTravelDestination, TravelDest) == 0x000000, "Member 'IndianaPlayerCharacter_HasVisitedTravelDestination::TravelDest' has a wrong offset!");
static_assert(offsetof(IndianaPlayerCharacter_HasVisitedTravelDestination, ReturnValue) == 0x000008, "Member 'IndianaPlayerCharacter_HasVisitedTravelDestination::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaPlayerCharacter.HeadbobbingChanged
// 0x0001 (0x0001 - 0x0000)
struct IndianaPlayerCharacter_HeadbobbingChanged final
{
public:
	bool                                          bHeadbobbing;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerCharacter_HeadbobbingChanged) == 0x000001, "Wrong alignment on IndianaPlayerCharacter_HeadbobbingChanged");
static_assert(sizeof(IndianaPlayerCharacter_HeadbobbingChanged) == 0x000001, "Wrong size on IndianaPlayerCharacter_HeadbobbingChanged");
static_assert(offsetof(IndianaPlayerCharacter_HeadbobbingChanged, bHeadbobbing) == 0x000000, "Member 'IndianaPlayerCharacter_HeadbobbingChanged::bHeadbobbing' has a wrong offset!");

// Function Indiana.IndianaPlayerCharacter.HidePointOfInterest
// 0x0008 (0x0008 - 0x0000)
struct IndianaPlayerCharacter_HidePointOfInterest final
{
public:
	const class UPointOfInterestData*             POIData;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerCharacter_HidePointOfInterest) == 0x000008, "Wrong alignment on IndianaPlayerCharacter_HidePointOfInterest");
static_assert(sizeof(IndianaPlayerCharacter_HidePointOfInterest) == 0x000008, "Wrong size on IndianaPlayerCharacter_HidePointOfInterest");
static_assert(offsetof(IndianaPlayerCharacter_HidePointOfInterest, POIData) == 0x000000, "Member 'IndianaPlayerCharacter_HidePointOfInterest::POIData' has a wrong offset!");

// Function Indiana.IndianaPlayerCharacter.IsAwareOfPointOfInterest
// 0x0010 (0x0010 - 0x0000)
struct IndianaPlayerCharacter_IsAwareOfPointOfInterest final
{
public:
	const class UPointOfInterestData*             POIData;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaPlayerCharacter_IsAwareOfPointOfInterest) == 0x000008, "Wrong alignment on IndianaPlayerCharacter_IsAwareOfPointOfInterest");
static_assert(sizeof(IndianaPlayerCharacter_IsAwareOfPointOfInterest) == 0x000010, "Wrong size on IndianaPlayerCharacter_IsAwareOfPointOfInterest");
static_assert(offsetof(IndianaPlayerCharacter_IsAwareOfPointOfInterest, POIData) == 0x000000, "Member 'IndianaPlayerCharacter_IsAwareOfPointOfInterest::POIData' has a wrong offset!");
static_assert(offsetof(IndianaPlayerCharacter_IsAwareOfPointOfInterest, ReturnValue) == 0x000008, "Member 'IndianaPlayerCharacter_IsAwareOfPointOfInterest::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaPlayerCharacter.IsAwareOfRegion
// 0x0010 (0x0010 - 0x0000)
struct IndianaPlayerCharacter_IsAwareOfRegion final
{
public:
	const class UTravelRegionData*                Region;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaPlayerCharacter_IsAwareOfRegion) == 0x000008, "Wrong alignment on IndianaPlayerCharacter_IsAwareOfRegion");
static_assert(sizeof(IndianaPlayerCharacter_IsAwareOfRegion) == 0x000010, "Wrong size on IndianaPlayerCharacter_IsAwareOfRegion");
static_assert(offsetof(IndianaPlayerCharacter_IsAwareOfRegion, Region) == 0x000000, "Member 'IndianaPlayerCharacter_IsAwareOfRegion::Region' has a wrong offset!");
static_assert(offsetof(IndianaPlayerCharacter_IsAwareOfRegion, ReturnValue) == 0x000008, "Member 'IndianaPlayerCharacter_IsAwareOfRegion::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaPlayerCharacter.IsAwareOfTravelDestination
// 0x0010 (0x0010 - 0x0000)
struct IndianaPlayerCharacter_IsAwareOfTravelDestination final
{
public:
	const class UTravelDestinationData*           TravelDest;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaPlayerCharacter_IsAwareOfTravelDestination) == 0x000008, "Wrong alignment on IndianaPlayerCharacter_IsAwareOfTravelDestination");
static_assert(sizeof(IndianaPlayerCharacter_IsAwareOfTravelDestination) == 0x000010, "Wrong size on IndianaPlayerCharacter_IsAwareOfTravelDestination");
static_assert(offsetof(IndianaPlayerCharacter_IsAwareOfTravelDestination, TravelDest) == 0x000000, "Member 'IndianaPlayerCharacter_IsAwareOfTravelDestination::TravelDest' has a wrong offset!");
static_assert(offsetof(IndianaPlayerCharacter_IsAwareOfTravelDestination, ReturnValue) == 0x000008, "Member 'IndianaPlayerCharacter_IsAwareOfTravelDestination::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaPlayerCharacter.IsTravelDestinationHidden
// 0x0010 (0x0010 - 0x0000)
struct IndianaPlayerCharacter_IsTravelDestinationHidden final
{
public:
	const class UTravelDestinationData*           TravelDest;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaPlayerCharacter_IsTravelDestinationHidden) == 0x000008, "Wrong alignment on IndianaPlayerCharacter_IsTravelDestinationHidden");
static_assert(sizeof(IndianaPlayerCharacter_IsTravelDestinationHidden) == 0x000010, "Wrong size on IndianaPlayerCharacter_IsTravelDestinationHidden");
static_assert(offsetof(IndianaPlayerCharacter_IsTravelDestinationHidden, TravelDest) == 0x000000, "Member 'IndianaPlayerCharacter_IsTravelDestinationHidden::TravelDest' has a wrong offset!");
static_assert(offsetof(IndianaPlayerCharacter_IsTravelDestinationHidden, ReturnValue) == 0x000008, "Member 'IndianaPlayerCharacter_IsTravelDestinationHidden::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaPlayerCharacter.IsTravelDestinationLocked
// 0x0010 (0x0010 - 0x0000)
struct IndianaPlayerCharacter_IsTravelDestinationLocked final
{
public:
	const class UTravelDestinationData*           TravelDest;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaPlayerCharacter_IsTravelDestinationLocked) == 0x000008, "Wrong alignment on IndianaPlayerCharacter_IsTravelDestinationLocked");
static_assert(sizeof(IndianaPlayerCharacter_IsTravelDestinationLocked) == 0x000010, "Wrong size on IndianaPlayerCharacter_IsTravelDestinationLocked");
static_assert(offsetof(IndianaPlayerCharacter_IsTravelDestinationLocked, TravelDest) == 0x000000, "Member 'IndianaPlayerCharacter_IsTravelDestinationLocked::TravelDest' has a wrong offset!");
static_assert(offsetof(IndianaPlayerCharacter_IsTravelDestinationLocked, ReturnValue) == 0x000008, "Member 'IndianaPlayerCharacter_IsTravelDestinationLocked::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaPlayerCharacter.MakePointOfInterestDiscoverable
// 0x0010 (0x0010 - 0x0000)
struct IndianaPlayerCharacter_MakePointOfInterestDiscoverable final
{
public:
	const class UPointOfInterestData*             POIData;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStillHidden;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaPlayerCharacter_MakePointOfInterestDiscoverable) == 0x000008, "Wrong alignment on IndianaPlayerCharacter_MakePointOfInterestDiscoverable");
static_assert(sizeof(IndianaPlayerCharacter_MakePointOfInterestDiscoverable) == 0x000010, "Wrong size on IndianaPlayerCharacter_MakePointOfInterestDiscoverable");
static_assert(offsetof(IndianaPlayerCharacter_MakePointOfInterestDiscoverable, POIData) == 0x000000, "Member 'IndianaPlayerCharacter_MakePointOfInterestDiscoverable::POIData' has a wrong offset!");
static_assert(offsetof(IndianaPlayerCharacter_MakePointOfInterestDiscoverable, bStillHidden) == 0x000008, "Member 'IndianaPlayerCharacter_MakePointOfInterestDiscoverable::bStillHidden' has a wrong offset!");

// Function Indiana.IndianaPlayerCharacter.MentionPointOfInterest
// 0x0008 (0x0008 - 0x0000)
struct IndianaPlayerCharacter_MentionPointOfInterest final
{
public:
	const class UPointOfInterestData*             POIData;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerCharacter_MentionPointOfInterest) == 0x000008, "Wrong alignment on IndianaPlayerCharacter_MentionPointOfInterest");
static_assert(sizeof(IndianaPlayerCharacter_MentionPointOfInterest) == 0x000008, "Wrong size on IndianaPlayerCharacter_MentionPointOfInterest");
static_assert(offsetof(IndianaPlayerCharacter_MentionPointOfInterest, POIData) == 0x000000, "Member 'IndianaPlayerCharacter_MentionPointOfInterest::POIData' has a wrong offset!");

// Function Indiana.IndianaPlayerCharacter.OffsetReticleChanged
// 0x0001 (0x0001 - 0x0000)
struct IndianaPlayerCharacter_OffsetReticleChanged final
{
public:
	bool                                          bUseOffsetReticle;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerCharacter_OffsetReticleChanged) == 0x000001, "Wrong alignment on IndianaPlayerCharacter_OffsetReticleChanged");
static_assert(sizeof(IndianaPlayerCharacter_OffsetReticleChanged) == 0x000001, "Wrong size on IndianaPlayerCharacter_OffsetReticleChanged");
static_assert(offsetof(IndianaPlayerCharacter_OffsetReticleChanged, bUseOffsetReticle) == 0x000000, "Member 'IndianaPlayerCharacter_OffsetReticleChanged::bUseOffsetReticle' has a wrong offset!");

// Function Indiana.IndianaPlayerCharacter.OnDetected
// 0x0008 (0x0008 - 0x0000)
struct IndianaPlayerCharacter_OnDetected final
{
public:
	class AActor*                                 Detector;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerCharacter_OnDetected) == 0x000008, "Wrong alignment on IndianaPlayerCharacter_OnDetected");
static_assert(sizeof(IndianaPlayerCharacter_OnDetected) == 0x000008, "Wrong size on IndianaPlayerCharacter_OnDetected");
static_assert(offsetof(IndianaPlayerCharacter_OnDetected, Detector) == 0x000000, "Member 'IndianaPlayerCharacter_OnDetected::Detector' has a wrong offset!");

// Function Indiana.IndianaPlayerCharacter.OnDodged
// 0x0001 (0x0001 - 0x0000)
struct IndianaPlayerCharacter_OnDodged final
{
public:
	EDodgeDirection                               EDodgeDirection;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerCharacter_OnDodged) == 0x000001, "Wrong alignment on IndianaPlayerCharacter_OnDodged");
static_assert(sizeof(IndianaPlayerCharacter_OnDodged) == 0x000001, "Wrong size on IndianaPlayerCharacter_OnDodged");
static_assert(offsetof(IndianaPlayerCharacter_OnDodged, EDodgeDirection) == 0x000000, "Member 'IndianaPlayerCharacter_OnDodged::EDodgeDirection' has a wrong offset!");

// Function Indiana.IndianaPlayerCharacter.OnHit
// 0x00B0 (0x00B0 - 0x0000)
struct IndianaPlayerCharacter_OnHit final
{
public:
	class UPrimitiveComponent*                    HitComp;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0024(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaPlayerCharacter_OnHit) == 0x000008, "Wrong alignment on IndianaPlayerCharacter_OnHit");
static_assert(sizeof(IndianaPlayerCharacter_OnHit) == 0x0000B0, "Wrong size on IndianaPlayerCharacter_OnHit");
static_assert(offsetof(IndianaPlayerCharacter_OnHit, HitComp) == 0x000000, "Member 'IndianaPlayerCharacter_OnHit::HitComp' has a wrong offset!");
static_assert(offsetof(IndianaPlayerCharacter_OnHit, OtherActor) == 0x000008, "Member 'IndianaPlayerCharacter_OnHit::OtherActor' has a wrong offset!");
static_assert(offsetof(IndianaPlayerCharacter_OnHit, OtherComp) == 0x000010, "Member 'IndianaPlayerCharacter_OnHit::OtherComp' has a wrong offset!");
static_assert(offsetof(IndianaPlayerCharacter_OnHit, NormalImpulse) == 0x000018, "Member 'IndianaPlayerCharacter_OnHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(IndianaPlayerCharacter_OnHit, Hit) == 0x000024, "Member 'IndianaPlayerCharacter_OnHit::Hit' has a wrong offset!");

// Function Indiana.IndianaPlayerCharacter.OnJumpLanded
// 0x0004 (0x0004 - 0x0000)
struct IndianaPlayerCharacter_OnJumpLanded final
{
public:
	float                                         FallDistance;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerCharacter_OnJumpLanded) == 0x000004, "Wrong alignment on IndianaPlayerCharacter_OnJumpLanded");
static_assert(sizeof(IndianaPlayerCharacter_OnJumpLanded) == 0x000004, "Wrong size on IndianaPlayerCharacter_OnJumpLanded");
static_assert(offsetof(IndianaPlayerCharacter_OnJumpLanded, FallDistance) == 0x000000, "Member 'IndianaPlayerCharacter_OnJumpLanded::FallDistance' has a wrong offset!");

// Function Indiana.IndianaPlayerCharacter.OnPartyCombatDamageTaken
// 0x0110 (0x0110 - 0x0000)
struct IndianaPlayerCharacter_OnPartyCombatDamageTaken final
{
public:
	struct FCauseDamageInfo                       DamageInfo;                                        // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerCharacter_OnPartyCombatDamageTaken) == 0x000008, "Wrong alignment on IndianaPlayerCharacter_OnPartyCombatDamageTaken");
static_assert(sizeof(IndianaPlayerCharacter_OnPartyCombatDamageTaken) == 0x000110, "Wrong size on IndianaPlayerCharacter_OnPartyCombatDamageTaken");
static_assert(offsetof(IndianaPlayerCharacter_OnPartyCombatDamageTaken, DamageInfo) == 0x000000, "Member 'IndianaPlayerCharacter_OnPartyCombatDamageTaken::DamageInfo' has a wrong offset!");

// Function Indiana.IndianaPlayerCharacter.OnPauseStateChanged
// 0x0001 (0x0001 - 0x0000)
struct IndianaPlayerCharacter_OnPauseStateChanged final
{
public:
	bool                                          bIsPaused;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerCharacter_OnPauseStateChanged) == 0x000001, "Wrong alignment on IndianaPlayerCharacter_OnPauseStateChanged");
static_assert(sizeof(IndianaPlayerCharacter_OnPauseStateChanged) == 0x000001, "Wrong size on IndianaPlayerCharacter_OnPauseStateChanged");
static_assert(offsetof(IndianaPlayerCharacter_OnPauseStateChanged, bIsPaused) == 0x000000, "Member 'IndianaPlayerCharacter_OnPauseStateChanged::bIsPaused' has a wrong offset!");

// Function Indiana.IndianaPlayerCharacter.OnPlayerInventoryItemAdded
// 0x0010 (0x0010 - 0x0000)
struct IndianaPlayerCharacter_OnPlayerInventoryItemAdded final
{
public:
	struct FItemStack                             ItemStack;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerCharacter_OnPlayerInventoryItemAdded) == 0x000008, "Wrong alignment on IndianaPlayerCharacter_OnPlayerInventoryItemAdded");
static_assert(sizeof(IndianaPlayerCharacter_OnPlayerInventoryItemAdded) == 0x000010, "Wrong size on IndianaPlayerCharacter_OnPlayerInventoryItemAdded");
static_assert(offsetof(IndianaPlayerCharacter_OnPlayerInventoryItemAdded, ItemStack) == 0x000000, "Member 'IndianaPlayerCharacter_OnPlayerInventoryItemAdded::ItemStack' has a wrong offset!");

// Function Indiana.IndianaPlayerCharacter.OnPlayerInventoryItemConsumed
// 0x0010 (0x0010 - 0x0000)
struct IndianaPlayerCharacter_OnPlayerInventoryItemConsumed final
{
public:
	struct FItemStack                             ItemStack;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerCharacter_OnPlayerInventoryItemConsumed) == 0x000008, "Wrong alignment on IndianaPlayerCharacter_OnPlayerInventoryItemConsumed");
static_assert(sizeof(IndianaPlayerCharacter_OnPlayerInventoryItemConsumed) == 0x000010, "Wrong size on IndianaPlayerCharacter_OnPlayerInventoryItemConsumed");
static_assert(offsetof(IndianaPlayerCharacter_OnPlayerInventoryItemConsumed, ItemStack) == 0x000000, "Member 'IndianaPlayerCharacter_OnPlayerInventoryItemConsumed::ItemStack' has a wrong offset!");

// Function Indiana.IndianaPlayerCharacter.SetAllLevels
// 0x0004 (0x0004 - 0x0000)
struct IndianaPlayerCharacter_SetAllLevels final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerCharacter_SetAllLevels) == 0x000004, "Wrong alignment on IndianaPlayerCharacter_SetAllLevels");
static_assert(sizeof(IndianaPlayerCharacter_SetAllLevels) == 0x000004, "Wrong size on IndianaPlayerCharacter_SetAllLevels");
static_assert(offsetof(IndianaPlayerCharacter_SetAllLevels, Level) == 0x000000, "Member 'IndianaPlayerCharacter_SetAllLevels::Level' has a wrong offset!");

// Function Indiana.IndianaPlayerCharacter.SetAwareOfRegion
// 0x0008 (0x0008 - 0x0000)
struct IndianaPlayerCharacter_SetAwareOfRegion final
{
public:
	const class UTravelRegionData*                Region;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerCharacter_SetAwareOfRegion) == 0x000008, "Wrong alignment on IndianaPlayerCharacter_SetAwareOfRegion");
static_assert(sizeof(IndianaPlayerCharacter_SetAwareOfRegion) == 0x000008, "Wrong size on IndianaPlayerCharacter_SetAwareOfRegion");
static_assert(offsetof(IndianaPlayerCharacter_SetAwareOfRegion, Region) == 0x000000, "Member 'IndianaPlayerCharacter_SetAwareOfRegion::Region' has a wrong offset!");

// Function Indiana.IndianaPlayerCharacter.SetAwareOfTravelDestination
// 0x0008 (0x0008 - 0x0000)
struct IndianaPlayerCharacter_SetAwareOfTravelDestination final
{
public:
	const class UTravelDestinationData*           TravelDest;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerCharacter_SetAwareOfTravelDestination) == 0x000008, "Wrong alignment on IndianaPlayerCharacter_SetAwareOfTravelDestination");
static_assert(sizeof(IndianaPlayerCharacter_SetAwareOfTravelDestination) == 0x000008, "Wrong size on IndianaPlayerCharacter_SetAwareOfTravelDestination");
static_assert(offsetof(IndianaPlayerCharacter_SetAwareOfTravelDestination, TravelDest) == 0x000000, "Member 'IndianaPlayerCharacter_SetAwareOfTravelDestination::TravelDest' has a wrong offset!");

// Function Indiana.IndianaPlayerCharacter.SetCurrentShipLocation
// 0x0008 (0x0008 - 0x0000)
struct IndianaPlayerCharacter_SetCurrentShipLocation final
{
public:
	const class UShipDestinationData*             ShipDest;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerCharacter_SetCurrentShipLocation) == 0x000008, "Wrong alignment on IndianaPlayerCharacter_SetCurrentShipLocation");
static_assert(sizeof(IndianaPlayerCharacter_SetCurrentShipLocation) == 0x000008, "Wrong size on IndianaPlayerCharacter_SetCurrentShipLocation");
static_assert(offsetof(IndianaPlayerCharacter_SetCurrentShipLocation, ShipDest) == 0x000000, "Member 'IndianaPlayerCharacter_SetCurrentShipLocation::ShipDest' has a wrong offset!");

// Function Indiana.IndianaPlayerCharacter.SetIsInLowGravity
// 0x0001 (0x0001 - 0x0000)
struct IndianaPlayerCharacter_SetIsInLowGravity final
{
public:
	bool                                          bNewIsInLowGravity;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerCharacter_SetIsInLowGravity) == 0x000001, "Wrong alignment on IndianaPlayerCharacter_SetIsInLowGravity");
static_assert(sizeof(IndianaPlayerCharacter_SetIsInLowGravity) == 0x000001, "Wrong size on IndianaPlayerCharacter_SetIsInLowGravity");
static_assert(offsetof(IndianaPlayerCharacter_SetIsInLowGravity, bNewIsInLowGravity) == 0x000000, "Member 'IndianaPlayerCharacter_SetIsInLowGravity::bNewIsInLowGravity' has a wrong offset!");

// Function Indiana.IndianaPlayerCharacter.SetMovementEnabled
// 0x0001 (0x0001 - 0x0000)
struct IndianaPlayerCharacter_SetMovementEnabled final
{
public:
	bool                                          bNewIsMovementEnabled;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerCharacter_SetMovementEnabled) == 0x000001, "Wrong alignment on IndianaPlayerCharacter_SetMovementEnabled");
static_assert(sizeof(IndianaPlayerCharacter_SetMovementEnabled) == 0x000001, "Wrong size on IndianaPlayerCharacter_SetMovementEnabled");
static_assert(offsetof(IndianaPlayerCharacter_SetMovementEnabled, bNewIsMovementEnabled) == 0x000000, "Member 'IndianaPlayerCharacter_SetMovementEnabled::bNewIsMovementEnabled' has a wrong offset!");

// Function Indiana.IndianaPlayerCharacter.SetTravelDestinationHidden
// 0x0010 (0x0010 - 0x0000)
struct IndianaPlayerCharacter_SetTravelDestinationHidden final
{
public:
	const class UTravelDestinationData*           TravelDest;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetHidden;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaPlayerCharacter_SetTravelDestinationHidden) == 0x000008, "Wrong alignment on IndianaPlayerCharacter_SetTravelDestinationHidden");
static_assert(sizeof(IndianaPlayerCharacter_SetTravelDestinationHidden) == 0x000010, "Wrong size on IndianaPlayerCharacter_SetTravelDestinationHidden");
static_assert(offsetof(IndianaPlayerCharacter_SetTravelDestinationHidden, TravelDest) == 0x000000, "Member 'IndianaPlayerCharacter_SetTravelDestinationHidden::TravelDest' has a wrong offset!");
static_assert(offsetof(IndianaPlayerCharacter_SetTravelDestinationHidden, bSetHidden) == 0x000008, "Member 'IndianaPlayerCharacter_SetTravelDestinationHidden::bSetHidden' has a wrong offset!");

// Function Indiana.IndianaPlayerCharacter.SetTravelDestinationLocked
// 0x0010 (0x0010 - 0x0000)
struct IndianaPlayerCharacter_SetTravelDestinationLocked final
{
public:
	const class UTravelDestinationData*           TravelDest;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLocked;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaPlayerCharacter_SetTravelDestinationLocked) == 0x000008, "Wrong alignment on IndianaPlayerCharacter_SetTravelDestinationLocked");
static_assert(sizeof(IndianaPlayerCharacter_SetTravelDestinationLocked) == 0x000010, "Wrong size on IndianaPlayerCharacter_SetTravelDestinationLocked");
static_assert(offsetof(IndianaPlayerCharacter_SetTravelDestinationLocked, TravelDest) == 0x000000, "Member 'IndianaPlayerCharacter_SetTravelDestinationLocked::TravelDest' has a wrong offset!");
static_assert(offsetof(IndianaPlayerCharacter_SetTravelDestinationLocked, bLocked) == 0x000008, "Member 'IndianaPlayerCharacter_SetTravelDestinationLocked::bLocked' has a wrong offset!");

// Function Indiana.IndianaPlayerCharacter.SetTutorialsEnabled
// 0x0001 (0x0001 - 0x0000)
struct IndianaPlayerCharacter_SetTutorialsEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerCharacter_SetTutorialsEnabled) == 0x000001, "Wrong alignment on IndianaPlayerCharacter_SetTutorialsEnabled");
static_assert(sizeof(IndianaPlayerCharacter_SetTutorialsEnabled) == 0x000001, "Wrong size on IndianaPlayerCharacter_SetTutorialsEnabled");
static_assert(offsetof(IndianaPlayerCharacter_SetTutorialsEnabled, bEnabled) == 0x000000, "Member 'IndianaPlayerCharacter_SetTutorialsEnabled::bEnabled' has a wrong offset!");

// Function Indiana.IndianaPlayerCharacter.SetVisitedRegion
// 0x0008 (0x0008 - 0x0000)
struct IndianaPlayerCharacter_SetVisitedRegion final
{
public:
	const class UTravelRegionData*                Region;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerCharacter_SetVisitedRegion) == 0x000008, "Wrong alignment on IndianaPlayerCharacter_SetVisitedRegion");
static_assert(sizeof(IndianaPlayerCharacter_SetVisitedRegion) == 0x000008, "Wrong size on IndianaPlayerCharacter_SetVisitedRegion");
static_assert(offsetof(IndianaPlayerCharacter_SetVisitedRegion, Region) == 0x000000, "Member 'IndianaPlayerCharacter_SetVisitedRegion::Region' has a wrong offset!");

// Function Indiana.IndianaPlayerCharacter.SetVisitedTravelDestination
// 0x0008 (0x0008 - 0x0000)
struct IndianaPlayerCharacter_SetVisitedTravelDestination final
{
public:
	const class UTravelDestinationData*           TravelDest;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerCharacter_SetVisitedTravelDestination) == 0x000008, "Wrong alignment on IndianaPlayerCharacter_SetVisitedTravelDestination");
static_assert(sizeof(IndianaPlayerCharacter_SetVisitedTravelDestination) == 0x000008, "Wrong size on IndianaPlayerCharacter_SetVisitedTravelDestination");
static_assert(offsetof(IndianaPlayerCharacter_SetVisitedTravelDestination, TravelDest) == 0x000000, "Member 'IndianaPlayerCharacter_SetVisitedTravelDestination::TravelDest' has a wrong offset!");

// Function Indiana.IndianaPlayerCharacter.SuppressInput
// 0x0001 (0x0001 - 0x0000)
struct IndianaPlayerCharacter_SuppressInput final
{
public:
	bool                                          bSuppress;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerCharacter_SuppressInput) == 0x000001, "Wrong alignment on IndianaPlayerCharacter_SuppressInput");
static_assert(sizeof(IndianaPlayerCharacter_SuppressInput) == 0x000001, "Wrong size on IndianaPlayerCharacter_SuppressInput");
static_assert(offsetof(IndianaPlayerCharacter_SuppressInput, bSuppress) == 0x000000, "Member 'IndianaPlayerCharacter_SuppressInput::bSuppress' has a wrong offset!");

// Function Indiana.IndianaPlayerCharacter.TinkerAdvanceWeapon
// 0x0001 (0x0001 - 0x0000)
struct IndianaPlayerCharacter_TinkerAdvanceWeapon final
{
public:
	bool                                          bIgnoreCost;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerCharacter_TinkerAdvanceWeapon) == 0x000001, "Wrong alignment on IndianaPlayerCharacter_TinkerAdvanceWeapon");
static_assert(sizeof(IndianaPlayerCharacter_TinkerAdvanceWeapon) == 0x000001, "Wrong size on IndianaPlayerCharacter_TinkerAdvanceWeapon");
static_assert(offsetof(IndianaPlayerCharacter_TinkerAdvanceWeapon, bIgnoreCost) == 0x000000, "Member 'IndianaPlayerCharacter_TinkerAdvanceWeapon::bIgnoreCost' has a wrong offset!");

// Function Indiana.IndianaPlayerCharacter.TravelToDestination
// 0x0010 (0x0010 - 0x0000)
struct IndianaPlayerCharacter_TravelToDestination final
{
public:
	class UTravelDestinationData*                 Destination;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTriggerAutosave;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaPlayerCharacter_TravelToDestination) == 0x000008, "Wrong alignment on IndianaPlayerCharacter_TravelToDestination");
static_assert(sizeof(IndianaPlayerCharacter_TravelToDestination) == 0x000010, "Wrong size on IndianaPlayerCharacter_TravelToDestination");
static_assert(offsetof(IndianaPlayerCharacter_TravelToDestination, Destination) == 0x000000, "Member 'IndianaPlayerCharacter_TravelToDestination::Destination' has a wrong offset!");
static_assert(offsetof(IndianaPlayerCharacter_TravelToDestination, bTriggerAutosave) == 0x000008, "Member 'IndianaPlayerCharacter_TravelToDestination::bTriggerAutosave' has a wrong offset!");

// Function Indiana.IndianaPlayerCharacter.WasPONRRollbackRecentlyPerformed
// 0x0001 (0x0001 - 0x0000)
struct IndianaPlayerCharacter_WasPONRRollbackRecentlyPerformed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerCharacter_WasPONRRollbackRecentlyPerformed) == 0x000001, "Wrong alignment on IndianaPlayerCharacter_WasPONRRollbackRecentlyPerformed");
static_assert(sizeof(IndianaPlayerCharacter_WasPONRRollbackRecentlyPerformed) == 0x000001, "Wrong size on IndianaPlayerCharacter_WasPONRRollbackRecentlyPerformed");
static_assert(offsetof(IndianaPlayerCharacter_WasPONRRollbackRecentlyPerformed, ReturnValue) == 0x000000, "Member 'IndianaPlayerCharacter_WasPONRRollbackRecentlyPerformed::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaPlayerCharacter.WeaponHolstered
// 0x0008 (0x0008 - 0x0000)
struct IndianaPlayerCharacter_WeaponHolstered final
{
public:
	class UWeapon*                                InWeapon;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerCharacter_WeaponHolstered) == 0x000008, "Wrong alignment on IndianaPlayerCharacter_WeaponHolstered");
static_assert(sizeof(IndianaPlayerCharacter_WeaponHolstered) == 0x000008, "Wrong size on IndianaPlayerCharacter_WeaponHolstered");
static_assert(offsetof(IndianaPlayerCharacter_WeaponHolstered, InWeapon) == 0x000000, "Member 'IndianaPlayerCharacter_WeaponHolstered::InWeapon' has a wrong offset!");

// Function Indiana.IndianaPlayerCharacter.WeaponUnholstered
// 0x0008 (0x0008 - 0x0000)
struct IndianaPlayerCharacter_WeaponUnholstered final
{
public:
	class UWeapon*                                InWeapon;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerCharacter_WeaponUnholstered) == 0x000008, "Wrong alignment on IndianaPlayerCharacter_WeaponUnholstered");
static_assert(sizeof(IndianaPlayerCharacter_WeaponUnholstered) == 0x000008, "Wrong size on IndianaPlayerCharacter_WeaponUnholstered");
static_assert(offsetof(IndianaPlayerCharacter_WeaponUnholstered, InWeapon) == 0x000000, "Member 'IndianaPlayerCharacter_WeaponUnholstered::InWeapon' has a wrong offset!");

// Function Indiana.IndianaPlayerCharacter.IsShipCurrentlyAt
// 0x0010 (0x0010 - 0x0000)
struct IndianaPlayerCharacter_IsShipCurrentlyAt final
{
public:
	const class UTravelDestinationData*           ShipDest;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaPlayerCharacter_IsShipCurrentlyAt) == 0x000008, "Wrong alignment on IndianaPlayerCharacter_IsShipCurrentlyAt");
static_assert(sizeof(IndianaPlayerCharacter_IsShipCurrentlyAt) == 0x000010, "Wrong size on IndianaPlayerCharacter_IsShipCurrentlyAt");
static_assert(offsetof(IndianaPlayerCharacter_IsShipCurrentlyAt, ShipDest) == 0x000000, "Member 'IndianaPlayerCharacter_IsShipCurrentlyAt::ShipDest' has a wrong offset!");
static_assert(offsetof(IndianaPlayerCharacter_IsShipCurrentlyAt, ReturnValue) == 0x000008, "Member 'IndianaPlayerCharacter_IsShipCurrentlyAt::ReturnValue' has a wrong offset!");

// Function Indiana.OnReceiveDamage.OnDamageEvent
// 0x0110 (0x0110 - 0x0000)
struct OnReceiveDamage_OnDamageEvent final
{
public:
	struct FCauseDamageInfo                       CauseDamageInfo;                                   // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnReceiveDamage_OnDamageEvent) == 0x000008, "Wrong alignment on OnReceiveDamage_OnDamageEvent");
static_assert(sizeof(OnReceiveDamage_OnDamageEvent) == 0x000110, "Wrong size on OnReceiveDamage_OnDamageEvent");
static_assert(offsetof(OnReceiveDamage_OnDamageEvent, CauseDamageInfo) == 0x000000, "Member 'OnReceiveDamage_OnDamageEvent::CauseDamageInfo' has a wrong offset!");

// Function Indiana.OnReceiveFallingDamage.OnFallingDamage
// 0x0004 (0x0004 - 0x0000)
struct OnReceiveFallingDamage_OnFallingDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnReceiveFallingDamage_OnFallingDamage) == 0x000004, "Wrong alignment on OnReceiveFallingDamage_OnFallingDamage");
static_assert(sizeof(OnReceiveFallingDamage_OnFallingDamage) == 0x000004, "Wrong size on OnReceiveFallingDamage_OnFallingDamage");
static_assert(offsetof(OnReceiveFallingDamage_OnFallingDamage, Damage) == 0x000000, "Member 'OnReceiveFallingDamage_OnFallingDamage::Damage' has a wrong offset!");

// Function Indiana.OnMeleeActionStart.OnMeleeActionStart
// 0x0001 (0x0001 - 0x0000)
struct OnMeleeActionStart_OnMeleeActionStart final
{
public:
	EMeleeAction                                  ActionStarted;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnMeleeActionStart_OnMeleeActionStart) == 0x000001, "Wrong alignment on OnMeleeActionStart_OnMeleeActionStart");
static_assert(sizeof(OnMeleeActionStart_OnMeleeActionStart) == 0x000001, "Wrong size on OnMeleeActionStart_OnMeleeActionStart");
static_assert(offsetof(OnMeleeActionStart_OnMeleeActionStart, ActionStarted) == 0x000000, "Member 'OnMeleeActionStart_OnMeleeActionStart::ActionStarted' has a wrong offset!");

// Function Indiana.OnMeleeActionEnd.OnMeleeActionEnd
// 0x0001 (0x0001 - 0x0000)
struct OnMeleeActionEnd_OnMeleeActionEnd final
{
public:
	EMeleeAction                                  ActionEnded;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnMeleeActionEnd_OnMeleeActionEnd) == 0x000001, "Wrong alignment on OnMeleeActionEnd_OnMeleeActionEnd");
static_assert(sizeof(OnMeleeActionEnd_OnMeleeActionEnd) == 0x000001, "Wrong size on OnMeleeActionEnd_OnMeleeActionEnd");
static_assert(offsetof(OnMeleeActionEnd_OnMeleeActionEnd, ActionEnded) == 0x000000, "Member 'OnMeleeActionEnd_OnMeleeActionEnd::ActionEnded' has a wrong offset!");

// Function Indiana.OnSpellCast.OnSpellCast
// 0x0008 (0x0008 - 0x0000)
struct OnSpellCast_OnSpellCast final
{
public:
	TSubclassOf<class USpell>                     Spell_0;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnSpellCast_OnSpellCast) == 0x000008, "Wrong alignment on OnSpellCast_OnSpellCast");
static_assert(sizeof(OnSpellCast_OnSpellCast) == 0x000008, "Wrong size on OnSpellCast_OnSpellCast");
static_assert(offsetof(OnSpellCast_OnSpellCast, Spell_0) == 0x000000, "Member 'OnSpellCast_OnSpellCast::Spell_0' has a wrong offset!");

// Function Indiana.OnPerfectBlock.OnPerfectBlockEvent
// 0x0010 (0x0010 - 0x0000)
struct OnPerfectBlock_OnPerfectBlockEvent final
{
public:
	class AIndianaCharacter*                      Attacker;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnPerfectBlock_OnPerfectBlockEvent) == 0x000008, "Wrong alignment on OnPerfectBlock_OnPerfectBlockEvent");
static_assert(sizeof(OnPerfectBlock_OnPerfectBlockEvent) == 0x000010, "Wrong size on OnPerfectBlock_OnPerfectBlockEvent");
static_assert(offsetof(OnPerfectBlock_OnPerfectBlockEvent, Attacker) == 0x000000, "Member 'OnPerfectBlock_OnPerfectBlockEvent::Attacker' has a wrong offset!");
static_assert(offsetof(OnPerfectBlock_OnPerfectBlockEvent, Damage) == 0x000008, "Member 'OnPerfectBlock_OnPerfectBlockEvent::Damage' has a wrong offset!");

// Function Indiana.OnDetected.OnDetectedEvent
// 0x0008 (0x0008 - 0x0000)
struct OnDetected_OnDetectedEvent final
{
public:
	class AActor*                                 Detector;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnDetected_OnDetectedEvent) == 0x000008, "Wrong alignment on OnDetected_OnDetectedEvent");
static_assert(sizeof(OnDetected_OnDetectedEvent) == 0x000008, "Wrong size on OnDetected_OnDetectedEvent");
static_assert(offsetof(OnDetected_OnDetectedEvent, Detector) == 0x000000, "Member 'OnDetected_OnDetectedEvent::Detector' has a wrong offset!");

// Function Indiana.OnIndividualDetected.OnIndividualDetectedEvent
// 0x0008 (0x0008 - 0x0000)
struct OnIndividualDetected_OnIndividualDetectedEvent final
{
public:
	class AIndianaAiCharacter*                    Detector;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnIndividualDetected_OnIndividualDetectedEvent) == 0x000008, "Wrong alignment on OnIndividualDetected_OnIndividualDetectedEvent");
static_assert(sizeof(OnIndividualDetected_OnIndividualDetectedEvent) == 0x000008, "Wrong size on OnIndividualDetected_OnIndividualDetectedEvent");
static_assert(offsetof(OnIndividualDetected_OnIndividualDetectedEvent, Detector) == 0x000000, "Member 'OnIndividualDetected_OnIndividualDetectedEvent::Detector' has a wrong offset!");

// Function Indiana.OnIndividualDetected.OnIndividualUnDetectedEvent
// 0x0008 (0x0008 - 0x0000)
struct OnIndividualDetected_OnIndividualUnDetectedEvent final
{
public:
	class AIndianaAiCharacter*                    Detector;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnIndividualDetected_OnIndividualUnDetectedEvent) == 0x000008, "Wrong alignment on OnIndividualDetected_OnIndividualUnDetectedEvent");
static_assert(sizeof(OnIndividualDetected_OnIndividualUnDetectedEvent) == 0x000008, "Wrong size on OnIndividualDetected_OnIndividualUnDetectedEvent");
static_assert(offsetof(OnIndividualDetected_OnIndividualUnDetectedEvent, Detector) == 0x000000, "Member 'OnIndividualDetected_OnIndividualUnDetectedEvent::Detector' has a wrong offset!");

// Function Indiana.OnDodgeEvent.OnDodge
// 0x0001 (0x0001 - 0x0000)
struct OnDodgeEvent_OnDodge final
{
public:
	EDodgeDirection                               Direction;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnDodgeEvent_OnDodge) == 0x000001, "Wrong alignment on OnDodgeEvent_OnDodge");
static_assert(sizeof(OnDodgeEvent_OnDodge) == 0x000001, "Wrong size on OnDodgeEvent_OnDodge");
static_assert(offsetof(OnDodgeEvent_OnDodge, Direction) == 0x000000, "Member 'OnDodgeEvent_OnDodge::Direction' has a wrong offset!");

// Function Indiana.OnStatusEffectAddedEvent.OnAddStatusEffect
// 0x0010 (0x0010 - 0x0000)
struct OnStatusEffectAddedEvent_OnAddStatusEffect final
{
public:
	class UStatusEffectManagerComponent*          Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStatusEffect*                          StatusEffectAdded;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnStatusEffectAddedEvent_OnAddStatusEffect) == 0x000008, "Wrong alignment on OnStatusEffectAddedEvent_OnAddStatusEffect");
static_assert(sizeof(OnStatusEffectAddedEvent_OnAddStatusEffect) == 0x000010, "Wrong size on OnStatusEffectAddedEvent_OnAddStatusEffect");
static_assert(offsetof(OnStatusEffectAddedEvent_OnAddStatusEffect, Sender) == 0x000000, "Member 'OnStatusEffectAddedEvent_OnAddStatusEffect::Sender' has a wrong offset!");
static_assert(offsetof(OnStatusEffectAddedEvent_OnAddStatusEffect, StatusEffectAdded) == 0x000008, "Member 'OnStatusEffectAddedEvent_OnAddStatusEffect::StatusEffectAdded' has a wrong offset!");

// Function Indiana.OnStatusEffectRemovedEvent.OnStatusEffectRemoved
// 0x0010 (0x0010 - 0x0000)
struct OnStatusEffectRemovedEvent_OnStatusEffectRemoved final
{
public:
	class UStatusEffectManagerComponent*          Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStatusEffect*                          StatusEffectRemoved;                               // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnStatusEffectRemovedEvent_OnStatusEffectRemoved) == 0x000008, "Wrong alignment on OnStatusEffectRemovedEvent_OnStatusEffectRemoved");
static_assert(sizeof(OnStatusEffectRemovedEvent_OnStatusEffectRemoved) == 0x000010, "Wrong size on OnStatusEffectRemovedEvent_OnStatusEffectRemoved");
static_assert(offsetof(OnStatusEffectRemovedEvent_OnStatusEffectRemoved, Sender) == 0x000000, "Member 'OnStatusEffectRemovedEvent_OnStatusEffectRemoved::Sender' has a wrong offset!");
static_assert(offsetof(OnStatusEffectRemovedEvent_OnStatusEffectRemoved, StatusEffectRemoved) == 0x000008, "Member 'OnStatusEffectRemovedEvent_OnStatusEffectRemoved::StatusEffectRemoved' has a wrong offset!");

// Function Indiana.HasStatusEffectsEvent.OnAddStatusEffect
// 0x0010 (0x0010 - 0x0000)
struct HasStatusEffectsEvent_OnAddStatusEffect final
{
public:
	class UStatusEffectManagerComponent*          Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStatusEffect*                          StatusEffectAdded;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HasStatusEffectsEvent_OnAddStatusEffect) == 0x000008, "Wrong alignment on HasStatusEffectsEvent_OnAddStatusEffect");
static_assert(sizeof(HasStatusEffectsEvent_OnAddStatusEffect) == 0x000010, "Wrong size on HasStatusEffectsEvent_OnAddStatusEffect");
static_assert(offsetof(HasStatusEffectsEvent_OnAddStatusEffect, Sender) == 0x000000, "Member 'HasStatusEffectsEvent_OnAddStatusEffect::Sender' has a wrong offset!");
static_assert(offsetof(HasStatusEffectsEvent_OnAddStatusEffect, StatusEffectAdded) == 0x000008, "Member 'HasStatusEffectsEvent_OnAddStatusEffect::StatusEffectAdded' has a wrong offset!");

// Function Indiana.OnSkillUsedEvent.OnSkillUsed
// 0x0010 (0x0010 - 0x0000)
struct OnSkillUsedEvent_OnSkillUsed final
{
public:
	ESkill                                        SkillUsed;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnSkillUsedEvent_OnSkillUsed) == 0x000008, "Wrong alignment on OnSkillUsedEvent_OnSkillUsed");
static_assert(sizeof(OnSkillUsedEvent_OnSkillUsed) == 0x000010, "Wrong size on OnSkillUsedEvent_OnSkillUsed");
static_assert(offsetof(OnSkillUsedEvent_OnSkillUsed, SkillUsed) == 0x000000, "Member 'OnSkillUsedEvent_OnSkillUsed::SkillUsed' has a wrong offset!");
static_assert(offsetof(OnSkillUsedEvent_OnSkillUsed, Target) == 0x000008, "Member 'OnSkillUsedEvent_OnSkillUsed::Target' has a wrong offset!");

// Function Indiana.OnSkillEndedEvent.OnSkillEnded
// 0x0010 (0x0010 - 0x0000)
struct OnSkillEndedEvent_OnSkillEnded final
{
public:
	ESkill                                        SkillUsed;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnSkillEndedEvent_OnSkillEnded) == 0x000008, "Wrong alignment on OnSkillEndedEvent_OnSkillEnded");
static_assert(sizeof(OnSkillEndedEvent_OnSkillEnded) == 0x000010, "Wrong size on OnSkillEndedEvent_OnSkillEnded");
static_assert(offsetof(OnSkillEndedEvent_OnSkillEnded, SkillUsed) == 0x000000, "Member 'OnSkillEndedEvent_OnSkillEnded::SkillUsed' has a wrong offset!");
static_assert(offsetof(OnSkillEndedEvent_OnSkillEnded, Target) == 0x000008, "Member 'OnSkillEndedEvent_OnSkillEnded::Target' has a wrong offset!");

// Function Indiana.OnItemConsumed.OnItemConsumed
// 0x0010 (0x0010 - 0x0000)
struct OnItemConsumed_OnItemConsumed final
{
public:
	struct FItemStack                             ItemStack;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnItemConsumed_OnItemConsumed) == 0x000008, "Wrong alignment on OnItemConsumed_OnItemConsumed");
static_assert(sizeof(OnItemConsumed_OnItemConsumed) == 0x000010, "Wrong size on OnItemConsumed_OnItemConsumed");
static_assert(offsetof(OnItemConsumed_OnItemConsumed, ItemStack) == 0x000000, "Member 'OnItemConsumed_OnItemConsumed::ItemStack' has a wrong offset!");

// Function Indiana.OnSpendMoney.OnMoneySpent
// 0x0008 (0x0008 - 0x0000)
struct OnSpendMoney_OnMoneySpent final
{
public:
	int32                                         Money;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVendorInteraction;                                // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnSpendMoney_OnMoneySpent) == 0x000004, "Wrong alignment on OnSpendMoney_OnMoneySpent");
static_assert(sizeof(OnSpendMoney_OnMoneySpent) == 0x000008, "Wrong size on OnSpendMoney_OnMoneySpent");
static_assert(offsetof(OnSpendMoney_OnMoneySpent, Money) == 0x000000, "Member 'OnSpendMoney_OnMoneySpent::Money' has a wrong offset!");
static_assert(offsetof(OnSpendMoney_OnMoneySpent, bVendorInteraction) == 0x000004, "Member 'OnSpendMoney_OnMoneySpent::bVendorInteraction' has a wrong offset!");

// Function Indiana.OnPickPocket.OnPickPocket
// 0x0008 (0x0008 - 0x0000)
struct OnPickPocket_OnPickPocket final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnPickPocket_OnPickPocket) == 0x000008, "Wrong alignment on OnPickPocket_OnPickPocket");
static_assert(sizeof(OnPickPocket_OnPickPocket) == 0x000008, "Wrong size on OnPickPocket_OnPickPocket");
static_assert(offsetof(OnPickPocket_OnPickPocket, Target) == 0x000000, "Member 'OnPickPocket_OnPickPocket::Target' has a wrong offset!");

// Function Indiana.OnPickPocketStart.OnPickPocket
// 0x0008 (0x0008 - 0x0000)
struct OnPickPocketStart_OnPickPocket final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnPickPocketStart_OnPickPocket) == 0x000008, "Wrong alignment on OnPickPocketStart_OnPickPocket");
static_assert(sizeof(OnPickPocketStart_OnPickPocket) == 0x000008, "Wrong size on OnPickPocketStart_OnPickPocket");
static_assert(offsetof(OnPickPocketStart_OnPickPocket, Target) == 0x000000, "Member 'OnPickPocketStart_OnPickPocket::Target' has a wrong offset!");

// Function Indiana.OnPickPocketEnd.OnPickPocket
// 0x0008 (0x0008 - 0x0000)
struct OnPickPocketEnd_OnPickPocket final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnPickPocketEnd_OnPickPocket) == 0x000008, "Wrong alignment on OnPickPocketEnd_OnPickPocket");
static_assert(sizeof(OnPickPocketEnd_OnPickPocket) == 0x000008, "Wrong size on OnPickPocketEnd_OnPickPocket");
static_assert(offsetof(OnPickPocketEnd_OnPickPocket, Target) == 0x000000, "Member 'OnPickPocketEnd_OnPickPocket::Target' has a wrong offset!");

// Function Indiana.ReputationListener.OnReputationChange
// 0x0020 (0x0020 - 0x0000)
struct ReputationListener_OnReputationChange final
{
public:
	const class UFactionData*                     FactionData;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EReputationType                               InReputationType;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Amount;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UReputationData*                  ReputationBefore;                                  // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UReputationData*                  ReputationAfter;                                   // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReputationListener_OnReputationChange) == 0x000008, "Wrong alignment on ReputationListener_OnReputationChange");
static_assert(sizeof(ReputationListener_OnReputationChange) == 0x000020, "Wrong size on ReputationListener_OnReputationChange");
static_assert(offsetof(ReputationListener_OnReputationChange, FactionData) == 0x000000, "Member 'ReputationListener_OnReputationChange::FactionData' has a wrong offset!");
static_assert(offsetof(ReputationListener_OnReputationChange, InReputationType) == 0x000008, "Member 'ReputationListener_OnReputationChange::InReputationType' has a wrong offset!");
static_assert(offsetof(ReputationListener_OnReputationChange, Amount) == 0x00000C, "Member 'ReputationListener_OnReputationChange::Amount' has a wrong offset!");
static_assert(offsetof(ReputationListener_OnReputationChange, ReputationBefore) == 0x000010, "Member 'ReputationListener_OnReputationChange::ReputationBefore' has a wrong offset!");
static_assert(offsetof(ReputationListener_OnReputationChange, ReputationAfter) == 0x000018, "Member 'ReputationListener_OnReputationChange::ReputationAfter' has a wrong offset!");

// Function Indiana.OnPartyChange.OnPartyChanged
// 0x0010 (0x0010 - 0x0000)
struct OnPartyChange_OnPartyChanged final
{
public:
	class AIndianaAiCharacter*                    Companion;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAdded;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnPartyChange_OnPartyChanged) == 0x000008, "Wrong alignment on OnPartyChange_OnPartyChanged");
static_assert(sizeof(OnPartyChange_OnPartyChanged) == 0x000010, "Wrong size on OnPartyChange_OnPartyChanged");
static_assert(offsetof(OnPartyChange_OnPartyChanged, Companion) == 0x000000, "Member 'OnPartyChange_OnPartyChanged::Companion' has a wrong offset!");
static_assert(offsetof(OnPartyChange_OnPartyChanged, bAdded) == 0x000008, "Member 'OnPartyChange_OnPartyChanged::bAdded' has a wrong offset!");

// Function Indiana.OnBehaviorStateChange.OnBehaviorStateEvent
// 0x0002 (0x0002 - 0x0000)
struct OnBehaviorStateChange_OnBehaviorStateEvent final
{
public:
	EBehaviorState                                InBehaviorState;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBehaviorStateEventType                       InEventType;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnBehaviorStateChange_OnBehaviorStateEvent) == 0x000001, "Wrong alignment on OnBehaviorStateChange_OnBehaviorStateEvent");
static_assert(sizeof(OnBehaviorStateChange_OnBehaviorStateEvent) == 0x000002, "Wrong size on OnBehaviorStateChange_OnBehaviorStateEvent");
static_assert(offsetof(OnBehaviorStateChange_OnBehaviorStateEvent, InBehaviorState) == 0x000000, "Member 'OnBehaviorStateChange_OnBehaviorStateEvent::InBehaviorState' has a wrong offset!");
static_assert(offsetof(OnBehaviorStateChange_OnBehaviorStateEvent, InEventType) == 0x000001, "Member 'OnBehaviorStateChange_OnBehaviorStateEvent::InEventType' has a wrong offset!");

// Function Indiana.OnCalledShotCameraChange.OnCameraStepEvent
// 0x0001 (0x0001 - 0x0000)
struct OnCalledShotCameraChange_OnCameraStepEvent final
{
public:
	ECalledShotCameraStep                         CameraStep;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnCalledShotCameraChange_OnCameraStepEvent) == 0x000001, "Wrong alignment on OnCalledShotCameraChange_OnCameraStepEvent");
static_assert(sizeof(OnCalledShotCameraChange_OnCameraStepEvent) == 0x000001, "Wrong size on OnCalledShotCameraChange_OnCameraStepEvent");
static_assert(offsetof(OnCalledShotCameraChange_OnCameraStepEvent, CameraStep) == 0x000000, "Member 'OnCalledShotCameraChange_OnCameraStepEvent::CameraStep' has a wrong offset!");

// Function Indiana.OnHealthPercentage.OnHealthChanged
// 0x0010 (0x0010 - 0x0000)
struct OnHealthPercentage_OnHealthChanged final
{
public:
	float                                         HealthChange;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Instigator;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnHealthPercentage_OnHealthChanged) == 0x000008, "Wrong alignment on OnHealthPercentage_OnHealthChanged");
static_assert(sizeof(OnHealthPercentage_OnHealthChanged) == 0x000010, "Wrong size on OnHealthPercentage_OnHealthChanged");
static_assert(offsetof(OnHealthPercentage_OnHealthChanged, HealthChange) == 0x000000, "Member 'OnHealthPercentage_OnHealthChanged::HealthChange' has a wrong offset!");
static_assert(offsetof(OnHealthPercentage_OnHealthChanged, Instigator) == 0x000008, "Member 'OnHealthPercentage_OnHealthChanged::Instigator' has a wrong offset!");

// Function Indiana.OnCompanionKilled.OnCompanionKilled
// 0x0008 (0x0008 - 0x0000)
struct OnCompanionKilled_OnCompanionKilled final
{
public:
	class AActor*                                 Companion;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnCompanionKilled_OnCompanionKilled) == 0x000008, "Wrong alignment on OnCompanionKilled_OnCompanionKilled");
static_assert(sizeof(OnCompanionKilled_OnCompanionKilled) == 0x000008, "Wrong size on OnCompanionKilled_OnCompanionKilled");
static_assert(offsetof(OnCompanionKilled_OnCompanionKilled, Companion) == 0x000000, "Member 'OnCompanionKilled_OnCompanionKilled::Companion' has a wrong offset!");

// Function Indiana.OnCinematicModeChange.OnCinematicModeChange
// 0x0001 (0x0001 - 0x0000)
struct OnCinematicModeChange_OnCinematicModeChange final
{
public:
	bool                                          bCinematicMode;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnCinematicModeChange_OnCinematicModeChange) == 0x000001, "Wrong alignment on OnCinematicModeChange_OnCinematicModeChange");
static_assert(sizeof(OnCinematicModeChange_OnCinematicModeChange) == 0x000001, "Wrong size on OnCinematicModeChange_OnCinematicModeChange");
static_assert(offsetof(OnCinematicModeChange_OnCinematicModeChange, bCinematicMode) == 0x000000, "Member 'OnCinematicModeChange_OnCinematicModeChange::bCinematicMode' has a wrong offset!");

// Function Indiana.OnRestrictedAreaEntered.OnRestrictedAreaEntered
// 0x0008 (0x0008 - 0x0000)
struct OnRestrictedAreaEntered_OnRestrictedAreaEntered final
{
public:
	const class ARestrictedArea*                  RestrictedArea;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnRestrictedAreaEntered_OnRestrictedAreaEntered) == 0x000008, "Wrong alignment on OnRestrictedAreaEntered_OnRestrictedAreaEntered");
static_assert(sizeof(OnRestrictedAreaEntered_OnRestrictedAreaEntered) == 0x000008, "Wrong size on OnRestrictedAreaEntered_OnRestrictedAreaEntered");
static_assert(offsetof(OnRestrictedAreaEntered_OnRestrictedAreaEntered, RestrictedArea) == 0x000000, "Member 'OnRestrictedAreaEntered_OnRestrictedAreaEntered::RestrictedArea' has a wrong offset!");

// Function Indiana.OnRestrictedAreaExited.OnRestrictedAreaExited
// 0x0008 (0x0008 - 0x0000)
struct OnRestrictedAreaExited_OnRestrictedAreaExited final
{
public:
	const class ARestrictedArea*                  RestrictedArea;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnRestrictedAreaExited_OnRestrictedAreaExited) == 0x000008, "Wrong alignment on OnRestrictedAreaExited_OnRestrictedAreaExited");
static_assert(sizeof(OnRestrictedAreaExited_OnRestrictedAreaExited) == 0x000008, "Wrong size on OnRestrictedAreaExited_OnRestrictedAreaExited");
static_assert(offsetof(OnRestrictedAreaExited_OnRestrictedAreaExited, RestrictedArea) == 0x000000, "Member 'OnRestrictedAreaExited_OnRestrictedAreaExited::RestrictedArea' has a wrong offset!");

// Function Indiana.OnTactialTimeDialationEnd.OnTacticalTimeDilationEnd
// 0x0004 (0x0004 - 0x0000)
struct OnTactialTimeDialationEnd_OnTacticalTimeDilationEnd final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnTactialTimeDialationEnd_OnTacticalTimeDilationEnd) == 0x000004, "Wrong alignment on OnTactialTimeDialationEnd_OnTacticalTimeDilationEnd");
static_assert(sizeof(OnTactialTimeDialationEnd_OnTacticalTimeDilationEnd) == 0x000004, "Wrong size on OnTactialTimeDialationEnd_OnTacticalTimeDilationEnd");
static_assert(offsetof(OnTactialTimeDialationEnd_OnTacticalTimeDilationEnd, Duration) == 0x000000, "Member 'OnTactialTimeDialationEnd_OnTacticalTimeDilationEnd::Duration' has a wrong offset!");

// Function Indiana.OnInteractableSelectionChanged.OnInteractableSelectionChanged
// 0x0028 (0x0028 - 0x0000)
struct OnInteractableSelectionChanged_OnInteractableSelectionChanged final
{
public:
	struct FInteractionDescription                Description;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnInteractableSelectionChanged_OnInteractableSelectionChanged) == 0x000008, "Wrong alignment on OnInteractableSelectionChanged_OnInteractableSelectionChanged");
static_assert(sizeof(OnInteractableSelectionChanged_OnInteractableSelectionChanged) == 0x000028, "Wrong size on OnInteractableSelectionChanged_OnInteractableSelectionChanged");
static_assert(offsetof(OnInteractableSelectionChanged_OnInteractableSelectionChanged, Description) == 0x000000, "Member 'OnInteractableSelectionChanged_OnInteractableSelectionChanged::Description' has a wrong offset!");

// Function Indiana.OnStatUpdated.OnStatUpdated
// 0x0008 (0x0008 - 0x0000)
struct OnStatUpdated_OnStatUpdated final
{
public:
	const class URpgStat*                         Stat;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnStatUpdated_OnStatUpdated) == 0x000008, "Wrong alignment on OnStatUpdated_OnStatUpdated");
static_assert(sizeof(OnStatUpdated_OnStatUpdated) == 0x000008, "Wrong size on OnStatUpdated_OnStatUpdated");
static_assert(offsetof(OnStatUpdated_OnStatUpdated, Stat) == 0x000000, "Member 'OnStatUpdated_OnStatUpdated::Stat' has a wrong offset!");

// Function Indiana.OnAnimationSpellTrigger.OnAnimationTriggered
// 0x000C (0x000C - 0x0000)
struct OnAnimationSpellTrigger_OnAnimationTriggered final
{
public:
	struct FGameplayTag                           TriggerType;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnAnimationSpellTrigger_OnAnimationTriggered) == 0x000004, "Wrong alignment on OnAnimationSpellTrigger_OnAnimationTriggered");
static_assert(sizeof(OnAnimationSpellTrigger_OnAnimationTriggered) == 0x00000C, "Wrong size on OnAnimationSpellTrigger_OnAnimationTriggered");
static_assert(offsetof(OnAnimationSpellTrigger_OnAnimationTriggered, TriggerType) == 0x000000, "Member 'OnAnimationSpellTrigger_OnAnimationTriggered::TriggerType' has a wrong offset!");
static_assert(offsetof(OnAnimationSpellTrigger_OnAnimationTriggered, Enabled) == 0x000008, "Member 'OnAnimationSpellTrigger_OnAnimationTriggered::Enabled' has a wrong offset!");

// Function Indiana.OnPlayerFirstAttacked.OnFirstAttacked
// 0x0008 (0x0008 - 0x0000)
struct OnPlayerFirstAttacked_OnFirstAttacked final
{
public:
	class AActor*                                 Attacker;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnPlayerFirstAttacked_OnFirstAttacked) == 0x000008, "Wrong alignment on OnPlayerFirstAttacked_OnFirstAttacked");
static_assert(sizeof(OnPlayerFirstAttacked_OnFirstAttacked) == 0x000008, "Wrong size on OnPlayerFirstAttacked_OnFirstAttacked");
static_assert(offsetof(OnPlayerFirstAttacked_OnFirstAttacked, Attacker) == 0x000000, "Member 'OnPlayerFirstAttacked_OnFirstAttacked::Attacker' has a wrong offset!");

// Function Indiana.TravelDestinationData.GetDebugString
// 0x0010 (0x0010 - 0x0000)
struct TravelDestinationData_GetDebugString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TravelDestinationData_GetDebugString) == 0x000008, "Wrong alignment on TravelDestinationData_GetDebugString");
static_assert(sizeof(TravelDestinationData_GetDebugString) == 0x000010, "Wrong size on TravelDestinationData_GetDebugString");
static_assert(offsetof(TravelDestinationData_GetDebugString, ReturnValue) == 0x000000, "Member 'TravelDestinationData_GetDebugString::ReturnValue' has a wrong offset!");

// Function Indiana.OnStateOfBeingChanged.OnStateOfBeingChanged
// 0x0002 (0x0002 - 0x0000)
struct OnStateOfBeingChanged_OnStateOfBeingChanged final
{
public:
	EStateOfBeing                                 NewStateOfBeing;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStateOfBeing                                 OldStateOfBeing;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnStateOfBeingChanged_OnStateOfBeingChanged) == 0x000001, "Wrong alignment on OnStateOfBeingChanged_OnStateOfBeingChanged");
static_assert(sizeof(OnStateOfBeingChanged_OnStateOfBeingChanged) == 0x000002, "Wrong size on OnStateOfBeingChanged_OnStateOfBeingChanged");
static_assert(offsetof(OnStateOfBeingChanged_OnStateOfBeingChanged, NewStateOfBeing) == 0x000000, "Member 'OnStateOfBeingChanged_OnStateOfBeingChanged::NewStateOfBeing' has a wrong offset!");
static_assert(offsetof(OnStateOfBeingChanged_OnStateOfBeingChanged, OldStateOfBeing) == 0x000001, "Member 'OnStateOfBeingChanged_OnStateOfBeingChanged::OldStateOfBeing' has a wrong offset!");

// Function Indiana.OnObjectBumped.OnBumped
// 0x00A8 (0x00A8 - 0x0000)
struct OnObjectBumped_OnBumped final
{
public:
	class AActor*                                 SelfActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x001C(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnObjectBumped_OnBumped) == 0x000008, "Wrong alignment on OnObjectBumped_OnBumped");
static_assert(sizeof(OnObjectBumped_OnBumped) == 0x0000A8, "Wrong size on OnObjectBumped_OnBumped");
static_assert(offsetof(OnObjectBumped_OnBumped, SelfActor) == 0x000000, "Member 'OnObjectBumped_OnBumped::SelfActor' has a wrong offset!");
static_assert(offsetof(OnObjectBumped_OnBumped, OtherActor) == 0x000008, "Member 'OnObjectBumped_OnBumped::OtherActor' has a wrong offset!");
static_assert(offsetof(OnObjectBumped_OnBumped, NormalImpulse) == 0x000010, "Member 'OnObjectBumped_OnBumped::NormalImpulse' has a wrong offset!");
static_assert(offsetof(OnObjectBumped_OnBumped, Hit) == 0x00001C, "Member 'OnObjectBumped_OnBumped::Hit' has a wrong offset!");

// Function Indiana.OnCombatStateChange.OnCombatStateChange
// 0x0002 (0x0002 - 0x0000)
struct OnCombatStateChange_OnCombatStateChange final
{
public:
	bool                                          bInCombat;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestoring;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnCombatStateChange_OnCombatStateChange) == 0x000001, "Wrong alignment on OnCombatStateChange_OnCombatStateChange");
static_assert(sizeof(OnCombatStateChange_OnCombatStateChange) == 0x000002, "Wrong size on OnCombatStateChange_OnCombatStateChange");
static_assert(offsetof(OnCombatStateChange_OnCombatStateChange, bInCombat) == 0x000000, "Member 'OnCombatStateChange_OnCombatStateChange::bInCombat' has a wrong offset!");
static_assert(offsetof(OnCombatStateChange_OnCombatStateChange, bRestoring) == 0x000001, "Member 'OnCombatStateChange_OnCombatStateChange::bRestoring' has a wrong offset!");

// Function Indiana.OnPlayerConversationChange.OnPlayerConversationChange
// 0x0010 (0x0010 - 0x0000)
struct OnPlayerConversationChange_OnPlayerConversationChange final
{
public:
	const class UConversationInstance*            Instance;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInEntered;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnPlayerConversationChange_OnPlayerConversationChange) == 0x000008, "Wrong alignment on OnPlayerConversationChange_OnPlayerConversationChange");
static_assert(sizeof(OnPlayerConversationChange_OnPlayerConversationChange) == 0x000010, "Wrong size on OnPlayerConversationChange_OnPlayerConversationChange");
static_assert(offsetof(OnPlayerConversationChange_OnPlayerConversationChange, Instance) == 0x000000, "Member 'OnPlayerConversationChange_OnPlayerConversationChange::Instance' has a wrong offset!");
static_assert(offsetof(OnPlayerConversationChange_OnPlayerConversationChange, bInEntered) == 0x000008, "Member 'OnPlayerConversationChange_OnPlayerConversationChange::bInEntered' has a wrong offset!");

// Function Indiana.InventoryPageWidget.OnItemCompare
// 0x0001 (0x0001 - 0x0000)
struct InventoryPageWidget_OnItemCompare final
{
public:
	bool                                          bCompared;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryPageWidget_OnItemCompare) == 0x000001, "Wrong alignment on InventoryPageWidget_OnItemCompare");
static_assert(sizeof(InventoryPageWidget_OnItemCompare) == 0x000001, "Wrong size on InventoryPageWidget_OnItemCompare");
static_assert(offsetof(InventoryPageWidget_OnItemCompare, bCompared) == 0x000000, "Member 'InventoryPageWidget_OnItemCompare::bCompared' has a wrong offset!");

// Function Indiana.OnAddictionTimerEntersMaxed.OnAddictionTimerEntersMaxed
// 0x0008 (0x0008 - 0x0000)
struct OnAddictionTimerEntersMaxed_OnAddictionTimerEntersMaxed final
{
public:
	struct FGameplayTag                           TimerTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnAddictionTimerEntersMaxed_OnAddictionTimerEntersMaxed) == 0x000004, "Wrong alignment on OnAddictionTimerEntersMaxed_OnAddictionTimerEntersMaxed");
static_assert(sizeof(OnAddictionTimerEntersMaxed_OnAddictionTimerEntersMaxed) == 0x000008, "Wrong size on OnAddictionTimerEntersMaxed_OnAddictionTimerEntersMaxed");
static_assert(offsetof(OnAddictionTimerEntersMaxed_OnAddictionTimerEntersMaxed, TimerTag) == 0x000000, "Member 'OnAddictionTimerEntersMaxed_OnAddictionTimerEntersMaxed::TimerTag' has a wrong offset!");

// Function Indiana.TrapTrigger.ChangeState
// 0x0001 (0x0001 - 0x0000)
struct TrapTrigger_ChangeState final
{
public:
	ETrapTriggerState                             State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrapTrigger_ChangeState) == 0x000001, "Wrong alignment on TrapTrigger_ChangeState");
static_assert(sizeof(TrapTrigger_ChangeState) == 0x000001, "Wrong size on TrapTrigger_ChangeState");
static_assert(offsetof(TrapTrigger_ChangeState, State) == 0x000000, "Member 'TrapTrigger_ChangeState::State' has a wrong offset!");

// Function Indiana.TrapTrigger.DisarmTrapTrigger
// 0x0001 (0x0001 - 0x0000)
struct TrapTrigger_DisarmTrapTrigger final
{
public:
	bool                                          bAlertEffectSources;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrapTrigger_DisarmTrapTrigger) == 0x000001, "Wrong alignment on TrapTrigger_DisarmTrapTrigger");
static_assert(sizeof(TrapTrigger_DisarmTrapTrigger) == 0x000001, "Wrong size on TrapTrigger_DisarmTrapTrigger");
static_assert(offsetof(TrapTrigger_DisarmTrapTrigger, bAlertEffectSources) == 0x000000, "Member 'TrapTrigger_DisarmTrapTrigger::bAlertEffectSources' has a wrong offset!");

// Function Indiana.TrapTrigger.OnActivationShapeBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct TrapTrigger_OnActivationShapeBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrapTrigger_OnActivationShapeBeginOverlap) == 0x000008, "Wrong alignment on TrapTrigger_OnActivationShapeBeginOverlap");
static_assert(sizeof(TrapTrigger_OnActivationShapeBeginOverlap) == 0x0000A8, "Wrong size on TrapTrigger_OnActivationShapeBeginOverlap");
static_assert(offsetof(TrapTrigger_OnActivationShapeBeginOverlap, OverlappedComponent) == 0x000000, "Member 'TrapTrigger_OnActivationShapeBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(TrapTrigger_OnActivationShapeBeginOverlap, OtherActor) == 0x000008, "Member 'TrapTrigger_OnActivationShapeBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(TrapTrigger_OnActivationShapeBeginOverlap, OtherComp) == 0x000010, "Member 'TrapTrigger_OnActivationShapeBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(TrapTrigger_OnActivationShapeBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'TrapTrigger_OnActivationShapeBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(TrapTrigger_OnActivationShapeBeginOverlap, bFromSweep) == 0x00001C, "Member 'TrapTrigger_OnActivationShapeBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(TrapTrigger_OnActivationShapeBeginOverlap, SweepResult) == 0x000020, "Member 'TrapTrigger_OnActivationShapeBeginOverlap::SweepResult' has a wrong offset!");

// Function Indiana.TrapTrigger.OnActivationShapeEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct TrapTrigger_OnActivationShapeEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TrapTrigger_OnActivationShapeEndOverlap) == 0x000008, "Wrong alignment on TrapTrigger_OnActivationShapeEndOverlap");
static_assert(sizeof(TrapTrigger_OnActivationShapeEndOverlap) == 0x000020, "Wrong size on TrapTrigger_OnActivationShapeEndOverlap");
static_assert(offsetof(TrapTrigger_OnActivationShapeEndOverlap, OverlappedComponent) == 0x000000, "Member 'TrapTrigger_OnActivationShapeEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(TrapTrigger_OnActivationShapeEndOverlap, OtherActor) == 0x000008, "Member 'TrapTrigger_OnActivationShapeEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(TrapTrigger_OnActivationShapeEndOverlap, OtherComp) == 0x000010, "Member 'TrapTrigger_OnActivationShapeEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(TrapTrigger_OnActivationShapeEndOverlap, OtherBodyIndex) == 0x000018, "Member 'TrapTrigger_OnActivationShapeEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function Indiana.TrapTrigger.OnActivatorTrackingShapeBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct TrapTrigger_OnActivatorTrackingShapeBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrapTrigger_OnActivatorTrackingShapeBeginOverlap) == 0x000008, "Wrong alignment on TrapTrigger_OnActivatorTrackingShapeBeginOverlap");
static_assert(sizeof(TrapTrigger_OnActivatorTrackingShapeBeginOverlap) == 0x0000A8, "Wrong size on TrapTrigger_OnActivatorTrackingShapeBeginOverlap");
static_assert(offsetof(TrapTrigger_OnActivatorTrackingShapeBeginOverlap, OverlappedComponent) == 0x000000, "Member 'TrapTrigger_OnActivatorTrackingShapeBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(TrapTrigger_OnActivatorTrackingShapeBeginOverlap, OtherActor) == 0x000008, "Member 'TrapTrigger_OnActivatorTrackingShapeBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(TrapTrigger_OnActivatorTrackingShapeBeginOverlap, OtherComp) == 0x000010, "Member 'TrapTrigger_OnActivatorTrackingShapeBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(TrapTrigger_OnActivatorTrackingShapeBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'TrapTrigger_OnActivatorTrackingShapeBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(TrapTrigger_OnActivatorTrackingShapeBeginOverlap, bFromSweep) == 0x00001C, "Member 'TrapTrigger_OnActivatorTrackingShapeBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(TrapTrigger_OnActivatorTrackingShapeBeginOverlap, SweepResult) == 0x000020, "Member 'TrapTrigger_OnActivatorTrackingShapeBeginOverlap::SweepResult' has a wrong offset!");

// Function Indiana.TrapTrigger.OnActivatorTrackingShapeEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct TrapTrigger_OnActivatorTrackingShapeEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TrapTrigger_OnActivatorTrackingShapeEndOverlap) == 0x000008, "Wrong alignment on TrapTrigger_OnActivatorTrackingShapeEndOverlap");
static_assert(sizeof(TrapTrigger_OnActivatorTrackingShapeEndOverlap) == 0x000020, "Wrong size on TrapTrigger_OnActivatorTrackingShapeEndOverlap");
static_assert(offsetof(TrapTrigger_OnActivatorTrackingShapeEndOverlap, OverlappedComponent) == 0x000000, "Member 'TrapTrigger_OnActivatorTrackingShapeEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(TrapTrigger_OnActivatorTrackingShapeEndOverlap, OtherActor) == 0x000008, "Member 'TrapTrigger_OnActivatorTrackingShapeEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(TrapTrigger_OnActivatorTrackingShapeEndOverlap, OtherComp) == 0x000010, "Member 'TrapTrigger_OnActivatorTrackingShapeEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(TrapTrigger_OnActivatorTrackingShapeEndOverlap, OtherBodyIndex) == 0x000018, "Member 'TrapTrigger_OnActivatorTrackingShapeEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function Indiana.TrapTrigger.GetCurrentState
// 0x0001 (0x0001 - 0x0000)
struct TrapTrigger_GetCurrentState final
{
public:
	ETrapTriggerState                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrapTrigger_GetCurrentState) == 0x000001, "Wrong alignment on TrapTrigger_GetCurrentState");
static_assert(sizeof(TrapTrigger_GetCurrentState) == 0x000001, "Wrong size on TrapTrigger_GetCurrentState");
static_assert(offsetof(TrapTrigger_GetCurrentState, ReturnValue) == 0x000000, "Member 'TrapTrigger_GetCurrentState::ReturnValue' has a wrong offset!");

// Function Indiana.TrapTrigger.IsDeploymentPending
// 0x0001 (0x0001 - 0x0000)
struct TrapTrigger_IsDeploymentPending final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrapTrigger_IsDeploymentPending) == 0x000001, "Wrong alignment on TrapTrigger_IsDeploymentPending");
static_assert(sizeof(TrapTrigger_IsDeploymentPending) == 0x000001, "Wrong size on TrapTrigger_IsDeploymentPending");
static_assert(offsetof(TrapTrigger_IsDeploymentPending, ReturnValue) == 0x000000, "Member 'TrapTrigger_IsDeploymentPending::ReturnValue' has a wrong offset!");

// Function Indiana.TrapTrigger.IsRearming
// 0x0001 (0x0001 - 0x0000)
struct TrapTrigger_IsRearming final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrapTrigger_IsRearming) == 0x000001, "Wrong alignment on TrapTrigger_IsRearming");
static_assert(sizeof(TrapTrigger_IsRearming) == 0x000001, "Wrong size on TrapTrigger_IsRearming");
static_assert(offsetof(TrapTrigger_IsRearming, ReturnValue) == 0x000000, "Member 'TrapTrigger_IsRearming::ReturnValue' has a wrong offset!");

// Function Indiana.OnAddictionTimerLeavesMaxed.OnAddictionTimerLeavesMaxed
// 0x0008 (0x0008 - 0x0000)
struct OnAddictionTimerLeavesMaxed_OnAddictionTimerLeavesMaxed final
{
public:
	struct FGameplayTag                           TimerTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnAddictionTimerLeavesMaxed_OnAddictionTimerLeavesMaxed) == 0x000004, "Wrong alignment on OnAddictionTimerLeavesMaxed_OnAddictionTimerLeavesMaxed");
static_assert(sizeof(OnAddictionTimerLeavesMaxed_OnAddictionTimerLeavesMaxed) == 0x000008, "Wrong size on OnAddictionTimerLeavesMaxed_OnAddictionTimerLeavesMaxed");
static_assert(offsetof(OnAddictionTimerLeavesMaxed_OnAddictionTimerLeavesMaxed, TimerTag) == 0x000000, "Member 'OnAddictionTimerLeavesMaxed_OnAddictionTimerLeavesMaxed::TimerTag' has a wrong offset!");

// Function Indiana.OnFlawAccepted.OnFlawAccepted
// 0x0010 (0x0010 - 0x0000)
struct OnFlawAccepted_OnFlawAccepted final
{
public:
	TSubclassOf<class UFlaw>                      Flaw;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnFlawAccepted_OnFlawAccepted) == 0x000008, "Wrong alignment on OnFlawAccepted_OnFlawAccepted");
static_assert(sizeof(OnFlawAccepted_OnFlawAccepted) == 0x000010, "Wrong size on OnFlawAccepted_OnFlawAccepted");
static_assert(offsetof(OnFlawAccepted_OnFlawAccepted, Flaw) == 0x000000, "Member 'OnFlawAccepted_OnFlawAccepted::Flaw' has a wrong offset!");
static_assert(offsetof(OnFlawAccepted_OnFlawAccepted, Count) == 0x000008, "Member 'OnFlawAccepted_OnFlawAccepted::Count' has a wrong offset!");

// Function Indiana.OnLevelChangedListener.OnLevelChanged
// 0x0004 (0x0004 - 0x0000)
struct OnLevelChangedListener_OnLevelChanged final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnLevelChangedListener_OnLevelChanged) == 0x000004, "Wrong alignment on OnLevelChangedListener_OnLevelChanged");
static_assert(sizeof(OnLevelChangedListener_OnLevelChanged) == 0x000004, "Wrong size on OnLevelChangedListener_OnLevelChanged");
static_assert(offsetof(OnLevelChangedListener_OnLevelChanged, Level) == 0x000000, "Member 'OnLevelChangedListener_OnLevelChanged::Level' has a wrong offset!");

// Function Indiana.OnWeaponEquipped.OnWeaponEquipped
// 0x0008 (0x0008 - 0x0000)
struct OnWeaponEquipped_OnWeaponEquipped final
{
public:
	class UWeapon*                                Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnWeaponEquipped_OnWeaponEquipped) == 0x000008, "Wrong alignment on OnWeaponEquipped_OnWeaponEquipped");
static_assert(sizeof(OnWeaponEquipped_OnWeaponEquipped) == 0x000008, "Wrong size on OnWeaponEquipped_OnWeaponEquipped");
static_assert(offsetof(OnWeaponEquipped_OnWeaponEquipped, Weapon) == 0x000000, "Member 'OnWeaponEquipped_OnWeaponEquipped::Weapon' has a wrong offset!");

// Function Indiana.OnWeaponUnholstered.OnWeaponUnholstered
// 0x0008 (0x0008 - 0x0000)
struct OnWeaponUnholstered_OnWeaponUnholstered final
{
public:
	class UWeapon*                                Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnWeaponUnholstered_OnWeaponUnholstered) == 0x000008, "Wrong alignment on OnWeaponUnholstered_OnWeaponUnholstered");
static_assert(sizeof(OnWeaponUnholstered_OnWeaponUnholstered) == 0x000008, "Wrong size on OnWeaponUnholstered_OnWeaponUnholstered");
static_assert(offsetof(OnWeaponUnholstered_OnWeaponUnholstered, Weapon) == 0x000000, "Member 'OnWeaponUnholstered_OnWeaponUnholstered::Weapon' has a wrong offset!");

// Function Indiana.OnGlobalVarChanged.OnGlobalVarChanged
// 0x0018 (0x0018 - 0x0000)
struct OnGlobalVarChanged_OnGlobalVarChanged final
{
public:
	class FString                                 VariableName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewValue;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnGlobalVarChanged_OnGlobalVarChanged) == 0x000008, "Wrong alignment on OnGlobalVarChanged_OnGlobalVarChanged");
static_assert(sizeof(OnGlobalVarChanged_OnGlobalVarChanged) == 0x000018, "Wrong size on OnGlobalVarChanged_OnGlobalVarChanged");
static_assert(offsetof(OnGlobalVarChanged_OnGlobalVarChanged, VariableName) == 0x000000, "Member 'OnGlobalVarChanged_OnGlobalVarChanged::VariableName' has a wrong offset!");
static_assert(offsetof(OnGlobalVarChanged_OnGlobalVarChanged, NewValue) == 0x000010, "Member 'OnGlobalVarChanged_OnGlobalVarChanged::NewValue' has a wrong offset!");

// Function Indiana.EvidenceActor.OnActivated
// 0x0001 (0x0001 - 0x0000)
struct EvidenceActor_OnActivated final
{
public:
	bool                                          bActivated;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EvidenceActor_OnActivated) == 0x000001, "Wrong alignment on EvidenceActor_OnActivated");
static_assert(sizeof(EvidenceActor_OnActivated) == 0x000001, "Wrong size on EvidenceActor_OnActivated");
static_assert(offsetof(EvidenceActor_OnActivated, bActivated) == 0x000000, "Member 'EvidenceActor_OnActivated::bActivated' has a wrong offset!");

// Function Indiana.EvidenceActor.OnCombatStateChanged
// 0x0002 (0x0002 - 0x0000)
struct EvidenceActor_OnCombatStateChanged final
{
public:
	bool                                          bCombatIn;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestoring;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EvidenceActor_OnCombatStateChanged) == 0x000001, "Wrong alignment on EvidenceActor_OnCombatStateChanged");
static_assert(sizeof(EvidenceActor_OnCombatStateChanged) == 0x000002, "Wrong size on EvidenceActor_OnCombatStateChanged");
static_assert(offsetof(EvidenceActor_OnCombatStateChanged, bCombatIn) == 0x000000, "Member 'EvidenceActor_OnCombatStateChanged::bCombatIn' has a wrong offset!");
static_assert(offsetof(EvidenceActor_OnCombatStateChanged, bRestoring) == 0x000001, "Member 'EvidenceActor_OnCombatStateChanged::bRestoring' has a wrong offset!");

// Function Indiana.EvidenceActor.OnConversationEnded
// 0x0008 (0x0008 - 0x0000)
struct EvidenceActor_OnConversationEnded final
{
public:
	class UConversationInstance*                  Instance;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EvidenceActor_OnConversationEnded) == 0x000008, "Wrong alignment on EvidenceActor_OnConversationEnded");
static_assert(sizeof(EvidenceActor_OnConversationEnded) == 0x000008, "Wrong size on EvidenceActor_OnConversationEnded");
static_assert(offsetof(EvidenceActor_OnConversationEnded, Instance) == 0x000000, "Member 'EvidenceActor_OnConversationEnded::Instance' has a wrong offset!");

// Function Indiana.EvidenceActor.OnConversationStarted
// 0x0008 (0x0008 - 0x0000)
struct EvidenceActor_OnConversationStarted final
{
public:
	class UConversationInstance*                  Instance;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EvidenceActor_OnConversationStarted) == 0x000008, "Wrong alignment on EvidenceActor_OnConversationStarted");
static_assert(sizeof(EvidenceActor_OnConversationStarted) == 0x000008, "Wrong size on EvidenceActor_OnConversationStarted");
static_assert(offsetof(EvidenceActor_OnConversationStarted, Instance) == 0x000000, "Member 'EvidenceActor_OnConversationStarted::Instance' has a wrong offset!");

// Function Indiana.EvidenceActor.RefreshHasItemEquipped
// 0x0008 (0x0008 - 0x0000)
struct EvidenceActor_RefreshHasItemEquipped final
{
public:
	class UWeapon*                                Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EvidenceActor_RefreshHasItemEquipped) == 0x000008, "Wrong alignment on EvidenceActor_RefreshHasItemEquipped");
static_assert(sizeof(EvidenceActor_RefreshHasItemEquipped) == 0x000008, "Wrong size on EvidenceActor_RefreshHasItemEquipped");
static_assert(offsetof(EvidenceActor_RefreshHasItemEquipped, Weapon) == 0x000000, "Member 'EvidenceActor_RefreshHasItemEquipped::Weapon' has a wrong offset!");

// Function Indiana.EvidenceActor.HasBeenScanned
// 0x0001 (0x0001 - 0x0000)
struct EvidenceActor_HasBeenScanned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EvidenceActor_HasBeenScanned) == 0x000001, "Wrong alignment on EvidenceActor_HasBeenScanned");
static_assert(sizeof(EvidenceActor_HasBeenScanned) == 0x000001, "Wrong size on EvidenceActor_HasBeenScanned");
static_assert(offsetof(EvidenceActor_HasBeenScanned, ReturnValue) == 0x000000, "Member 'EvidenceActor_HasBeenScanned::ReturnValue' has a wrong offset!");

// Function Indiana.EvidenceActor.IsInDAConversation
// 0x0001 (0x0001 - 0x0000)
struct EvidenceActor_IsInDAConversation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EvidenceActor_IsInDAConversation) == 0x000001, "Wrong alignment on EvidenceActor_IsInDAConversation");
static_assert(sizeof(EvidenceActor_IsInDAConversation) == 0x000001, "Wrong size on EvidenceActor_IsInDAConversation");
static_assert(offsetof(EvidenceActor_IsInDAConversation, ReturnValue) == 0x000000, "Member 'EvidenceActor_IsInDAConversation::ReturnValue' has a wrong offset!");

// Function Indiana.EvidenceActor.IsVisible
// 0x0001 (0x0001 - 0x0000)
struct EvidenceActor_IsVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EvidenceActor_IsVisible) == 0x000001, "Wrong alignment on EvidenceActor_IsVisible");
static_assert(sizeof(EvidenceActor_IsVisible) == 0x000001, "Wrong size on EvidenceActor_IsVisible");
static_assert(offsetof(EvidenceActor_IsVisible, ReturnValue) == 0x000000, "Member 'EvidenceActor_IsVisible::ReturnValue' has a wrong offset!");

// Function Indiana.SlideshowWidget.OnCinematicSubtitleSettingChanged
// 0x0001 (0x0001 - 0x0000)
struct SlideshowWidget_OnCinematicSubtitleSettingChanged final
{
public:
	bool                                          bVisibleIn;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlideshowWidget_OnCinematicSubtitleSettingChanged) == 0x000001, "Wrong alignment on SlideshowWidget_OnCinematicSubtitleSettingChanged");
static_assert(sizeof(SlideshowWidget_OnCinematicSubtitleSettingChanged) == 0x000001, "Wrong size on SlideshowWidget_OnCinematicSubtitleSettingChanged");
static_assert(offsetof(SlideshowWidget_OnCinematicSubtitleSettingChanged, bVisibleIn) == 0x000000, "Member 'SlideshowWidget_OnCinematicSubtitleSettingChanged::bVisibleIn' has a wrong offset!");

// Function Indiana.SlideshowWidget.OnSlideshowEnd
// 0x0008 (0x0008 - 0x0000)
struct SlideshowWidget_OnSlideshowEnd final
{
public:
	class UConversationInstance*                  Instance;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlideshowWidget_OnSlideshowEnd) == 0x000008, "Wrong alignment on SlideshowWidget_OnSlideshowEnd");
static_assert(sizeof(SlideshowWidget_OnSlideshowEnd) == 0x000008, "Wrong size on SlideshowWidget_OnSlideshowEnd");
static_assert(offsetof(SlideshowWidget_OnSlideshowEnd, Instance) == 0x000000, "Member 'SlideshowWidget_OnSlideshowEnd::Instance' has a wrong offset!");

// Function Indiana.SlideshowWidget.SetSlideshowImageKey
// 0x0010 (0x0010 - 0x0000)
struct SlideshowWidget_SetSlideshowImageKey final
{
public:
	class FString                                 ImageKey;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlideshowWidget_SetSlideshowImageKey) == 0x000008, "Wrong alignment on SlideshowWidget_SetSlideshowImageKey");
static_assert(sizeof(SlideshowWidget_SetSlideshowImageKey) == 0x000010, "Wrong size on SlideshowWidget_SetSlideshowImageKey");
static_assert(offsetof(SlideshowWidget_SetSlideshowImageKey, ImageKey) == 0x000000, "Member 'SlideshowWidget_SetSlideshowImageKey::ImageKey' has a wrong offset!");

// Function Indiana.SlideshowWidget.SetSlideshowImagesAsset
// 0x0008 (0x0008 - 0x0000)
struct SlideshowWidget_SetSlideshowImagesAsset final
{
public:
	class USlideshowImageSet*                     ImageSet;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlideshowWidget_SetSlideshowImagesAsset) == 0x000008, "Wrong alignment on SlideshowWidget_SetSlideshowImagesAsset");
static_assert(sizeof(SlideshowWidget_SetSlideshowImagesAsset) == 0x000008, "Wrong size on SlideshowWidget_SetSlideshowImagesAsset");
static_assert(offsetof(SlideshowWidget_SetSlideshowImagesAsset, ImageSet) == 0x000000, "Member 'SlideshowWidget_SetSlideshowImagesAsset::ImageSet' has a wrong offset!");

// Function Indiana.ExpandableAreaBase.SetIsExpanded
// 0x0001 (0x0001 - 0x0000)
struct ExpandableAreaBase_SetIsExpanded final
{
public:
	bool                                          IsExpanded;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExpandableAreaBase_SetIsExpanded) == 0x000001, "Wrong alignment on ExpandableAreaBase_SetIsExpanded");
static_assert(sizeof(ExpandableAreaBase_SetIsExpanded) == 0x000001, "Wrong size on ExpandableAreaBase_SetIsExpanded");
static_assert(offsetof(ExpandableAreaBase_SetIsExpanded, IsExpanded) == 0x000000, "Member 'ExpandableAreaBase_SetIsExpanded::IsExpanded' has a wrong offset!");

// Function Indiana.ExpandableAreaBase.SetIsExpanded_Animated
// 0x0001 (0x0001 - 0x0000)
struct ExpandableAreaBase_SetIsExpanded_Animated final
{
public:
	bool                                          IsExpanded;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExpandableAreaBase_SetIsExpanded_Animated) == 0x000001, "Wrong alignment on ExpandableAreaBase_SetIsExpanded_Animated");
static_assert(sizeof(ExpandableAreaBase_SetIsExpanded_Animated) == 0x000001, "Wrong size on ExpandableAreaBase_SetIsExpanded_Animated");
static_assert(offsetof(ExpandableAreaBase_SetIsExpanded_Animated, IsExpanded) == 0x000000, "Member 'ExpandableAreaBase_SetIsExpanded_Animated::IsExpanded' has a wrong offset!");

// Function Indiana.ExpandableAreaBase.GetIsExpanded
// 0x0001 (0x0001 - 0x0000)
struct ExpandableAreaBase_GetIsExpanded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExpandableAreaBase_GetIsExpanded) == 0x000001, "Wrong alignment on ExpandableAreaBase_GetIsExpanded");
static_assert(sizeof(ExpandableAreaBase_GetIsExpanded) == 0x000001, "Wrong size on ExpandableAreaBase_GetIsExpanded");
static_assert(offsetof(ExpandableAreaBase_GetIsExpanded, ReturnValue) == 0x000000, "Member 'ExpandableAreaBase_GetIsExpanded::ReturnValue' has a wrong offset!");

// Function Indiana.FactionManager.AddReputation_BP
// 0x0018 (0x0018 - 0x0000)
struct FactionManager_AddReputation_BP final
{
public:
	TSubclassOf<class UFactionData>               FactionData;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EReputationType                               ReputationType;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EReputationIncrementType                      IncrementType;                                     // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CustomAmount;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EReputationActionType                         ReputationAction;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FactionManager_AddReputation_BP) == 0x000008, "Wrong alignment on FactionManager_AddReputation_BP");
static_assert(sizeof(FactionManager_AddReputation_BP) == 0x000018, "Wrong size on FactionManager_AddReputation_BP");
static_assert(offsetof(FactionManager_AddReputation_BP, FactionData) == 0x000000, "Member 'FactionManager_AddReputation_BP::FactionData' has a wrong offset!");
static_assert(offsetof(FactionManager_AddReputation_BP, ReputationType) == 0x000008, "Member 'FactionManager_AddReputation_BP::ReputationType' has a wrong offset!");
static_assert(offsetof(FactionManager_AddReputation_BP, IncrementType) == 0x000009, "Member 'FactionManager_AddReputation_BP::IncrementType' has a wrong offset!");
static_assert(offsetof(FactionManager_AddReputation_BP, CustomAmount) == 0x00000C, "Member 'FactionManager_AddReputation_BP::CustomAmount' has a wrong offset!");
static_assert(offsetof(FactionManager_AddReputation_BP, ReputationAction) == 0x000010, "Member 'FactionManager_AddReputation_BP::ReputationAction' has a wrong offset!");

// Function Indiana.FactionManager.ClearFactionRecentHostilityToPlayer_BP
// 0x0008 (0x0008 - 0x0000)
struct FactionManager_ClearFactionRecentHostilityToPlayer_BP final
{
public:
	TSubclassOf<class UFactionData>               FactionData;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FactionManager_ClearFactionRecentHostilityToPlayer_BP) == 0x000008, "Wrong alignment on FactionManager_ClearFactionRecentHostilityToPlayer_BP");
static_assert(sizeof(FactionManager_ClearFactionRecentHostilityToPlayer_BP) == 0x000008, "Wrong size on FactionManager_ClearFactionRecentHostilityToPlayer_BP");
static_assert(offsetof(FactionManager_ClearFactionRecentHostilityToPlayer_BP, FactionData) == 0x000000, "Member 'FactionManager_ClearFactionRecentHostilityToPlayer_BP::FactionData' has a wrong offset!");

// Function Indiana.FactionManager.GetReputation_BP
// 0x0010 (0x0010 - 0x0000)
struct FactionManager_GetReputation_BP final
{
public:
	TSubclassOf<class UFactionData>               FactionData;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UReputationData*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FactionManager_GetReputation_BP) == 0x000008, "Wrong alignment on FactionManager_GetReputation_BP");
static_assert(sizeof(FactionManager_GetReputation_BP) == 0x000010, "Wrong size on FactionManager_GetReputation_BP");
static_assert(offsetof(FactionManager_GetReputation_BP, FactionData) == 0x000000, "Member 'FactionManager_GetReputation_BP::FactionData' has a wrong offset!");
static_assert(offsetof(FactionManager_GetReputation_BP, ReturnValue) == 0x000008, "Member 'FactionManager_GetReputation_BP::ReturnValue' has a wrong offset!");

// Function Indiana.FactionManager.IsReputationRank_BP
// 0x0018 (0x0018 - 0x0000)
struct FactionManager_IsReputationRank_BP final
{
public:
	TSubclassOf<class UFactionData>               FactionData;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EReputationRankType                           InRankType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InRank;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComparisonOperator                           Operator;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FactionManager_IsReputationRank_BP) == 0x000008, "Wrong alignment on FactionManager_IsReputationRank_BP");
static_assert(sizeof(FactionManager_IsReputationRank_BP) == 0x000018, "Wrong size on FactionManager_IsReputationRank_BP");
static_assert(offsetof(FactionManager_IsReputationRank_BP, FactionData) == 0x000000, "Member 'FactionManager_IsReputationRank_BP::FactionData' has a wrong offset!");
static_assert(offsetof(FactionManager_IsReputationRank_BP, InRankType) == 0x000008, "Member 'FactionManager_IsReputationRank_BP::InRankType' has a wrong offset!");
static_assert(offsetof(FactionManager_IsReputationRank_BP, InRank) == 0x00000C, "Member 'FactionManager_IsReputationRank_BP::InRank' has a wrong offset!");
static_assert(offsetof(FactionManager_IsReputationRank_BP, Operator) == 0x000010, "Member 'FactionManager_IsReputationRank_BP::Operator' has a wrong offset!");
static_assert(offsetof(FactionManager_IsReputationRank_BP, ReturnValue) == 0x000011, "Member 'FactionManager_IsReputationRank_BP::ReturnValue' has a wrong offset!");

// Function Indiana.FactionManager.IsReputationRankType_BP
// 0x0010 (0x0010 - 0x0000)
struct FactionManager_IsReputationRankType_BP final
{
public:
	TSubclassOf<class UFactionData>               FactionData;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EReputationRankType                           InRankType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComparisonOperator                           Operator;                                          // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FactionManager_IsReputationRankType_BP) == 0x000008, "Wrong alignment on FactionManager_IsReputationRankType_BP");
static_assert(sizeof(FactionManager_IsReputationRankType_BP) == 0x000010, "Wrong size on FactionManager_IsReputationRankType_BP");
static_assert(offsetof(FactionManager_IsReputationRankType_BP, FactionData) == 0x000000, "Member 'FactionManager_IsReputationRankType_BP::FactionData' has a wrong offset!");
static_assert(offsetof(FactionManager_IsReputationRankType_BP, InRankType) == 0x000008, "Member 'FactionManager_IsReputationRankType_BP::InRankType' has a wrong offset!");
static_assert(offsetof(FactionManager_IsReputationRankType_BP, Operator) == 0x000009, "Member 'FactionManager_IsReputationRankType_BP::Operator' has a wrong offset!");
static_assert(offsetof(FactionManager_IsReputationRankType_BP, ReturnValue) == 0x00000A, "Member 'FactionManager_IsReputationRankType_BP::ReturnValue' has a wrong offset!");

// Function Indiana.FactionManager.SetFactionEncountered_BP
// 0x0008 (0x0008 - 0x0000)
struct FactionManager_SetFactionEncountered_BP final
{
public:
	TSubclassOf<class UFactionData>               FactionData;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FactionManager_SetFactionEncountered_BP) == 0x000008, "Wrong alignment on FactionManager_SetFactionEncountered_BP");
static_assert(sizeof(FactionManager_SetFactionEncountered_BP) == 0x000008, "Wrong size on FactionManager_SetFactionEncountered_BP");
static_assert(offsetof(FactionManager_SetFactionEncountered_BP, FactionData) == 0x000000, "Member 'FactionManager_SetFactionEncountered_BP::FactionData' has a wrong offset!");

// Function Indiana.FactionManager.AddNegativeReputation_Debug
// 0x0018 (0x0018 - 0x0000)
struct FactionManager_AddNegativeReputation_Debug final
{
public:
	class FString                                 FactionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FactionManager_AddNegativeReputation_Debug) == 0x000008, "Wrong alignment on FactionManager_AddNegativeReputation_Debug");
static_assert(sizeof(FactionManager_AddNegativeReputation_Debug) == 0x000018, "Wrong size on FactionManager_AddNegativeReputation_Debug");
static_assert(offsetof(FactionManager_AddNegativeReputation_Debug, FactionName) == 0x000000, "Member 'FactionManager_AddNegativeReputation_Debug::FactionName' has a wrong offset!");
static_assert(offsetof(FactionManager_AddNegativeReputation_Debug, Amount) == 0x000010, "Member 'FactionManager_AddNegativeReputation_Debug::Amount' has a wrong offset!");

// Function Indiana.FactionManager.AddPositiveReputation_Debug
// 0x0018 (0x0018 - 0x0000)
struct FactionManager_AddPositiveReputation_Debug final
{
public:
	class FString                                 FactionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FactionManager_AddPositiveReputation_Debug) == 0x000008, "Wrong alignment on FactionManager_AddPositiveReputation_Debug");
static_assert(sizeof(FactionManager_AddPositiveReputation_Debug) == 0x000018, "Wrong size on FactionManager_AddPositiveReputation_Debug");
static_assert(offsetof(FactionManager_AddPositiveReputation_Debug, FactionName) == 0x000000, "Member 'FactionManager_AddPositiveReputation_Debug::FactionName' has a wrong offset!");
static_assert(offsetof(FactionManager_AddPositiveReputation_Debug, Amount) == 0x000010, "Member 'FactionManager_AddPositiveReputation_Debug::Amount' has a wrong offset!");

// Function Indiana.FactionManager.SetNegativeReputation_Debug
// 0x0018 (0x0018 - 0x0000)
struct FactionManager_SetNegativeReputation_Debug final
{
public:
	class FString                                 FactionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FactionManager_SetNegativeReputation_Debug) == 0x000008, "Wrong alignment on FactionManager_SetNegativeReputation_Debug");
static_assert(sizeof(FactionManager_SetNegativeReputation_Debug) == 0x000018, "Wrong size on FactionManager_SetNegativeReputation_Debug");
static_assert(offsetof(FactionManager_SetNegativeReputation_Debug, FactionName) == 0x000000, "Member 'FactionManager_SetNegativeReputation_Debug::FactionName' has a wrong offset!");
static_assert(offsetof(FactionManager_SetNegativeReputation_Debug, Amount) == 0x000010, "Member 'FactionManager_SetNegativeReputation_Debug::Amount' has a wrong offset!");

// Function Indiana.FactionManager.SetPositiveReputation_Debug
// 0x0018 (0x0018 - 0x0000)
struct FactionManager_SetPositiveReputation_Debug final
{
public:
	class FString                                 FactionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FactionManager_SetPositiveReputation_Debug) == 0x000008, "Wrong alignment on FactionManager_SetPositiveReputation_Debug");
static_assert(sizeof(FactionManager_SetPositiveReputation_Debug) == 0x000018, "Wrong size on FactionManager_SetPositiveReputation_Debug");
static_assert(offsetof(FactionManager_SetPositiveReputation_Debug, FactionName) == 0x000000, "Member 'FactionManager_SetPositiveReputation_Debug::FactionName' has a wrong offset!");
static_assert(offsetof(FactionManager_SetPositiveReputation_Debug, Amount) == 0x000010, "Member 'FactionManager_SetPositiveReputation_Debug::Amount' has a wrong offset!");

// Function Indiana.FireMode.OnStatUpdated
// 0x0008 (0x0008 - 0x0000)
struct FireMode_OnStatUpdated final
{
public:
	const class URpgStat*                         Stat;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FireMode_OnStatUpdated) == 0x000008, "Wrong alignment on FireMode_OnStatUpdated");
static_assert(sizeof(FireMode_OnStatUpdated) == 0x000008, "Wrong size on FireMode_OnStatUpdated");
static_assert(offsetof(FireMode_OnStatUpdated, Stat) == 0x000000, "Member 'FireMode_OnStatUpdated::Stat' has a wrong offset!");

// Function Indiana.FireMode.OnTimeDilationUpdated
// 0x0004 (0x0004 - 0x0000)
struct FireMode_OnTimeDilationUpdated final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FireMode_OnTimeDilationUpdated) == 0x000004, "Wrong alignment on FireMode_OnTimeDilationUpdated");
static_assert(sizeof(FireMode_OnTimeDilationUpdated) == 0x000004, "Wrong size on FireMode_OnTimeDilationUpdated");
static_assert(offsetof(FireMode_OnTimeDilationUpdated, Value) == 0x000000, "Member 'FireMode_OnTimeDilationUpdated::Value' has a wrong offset!");

// Function Indiana.FireMode.CanCharge
// 0x0001 (0x0001 - 0x0000)
struct FireMode_CanCharge final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FireMode_CanCharge) == 0x000001, "Wrong alignment on FireMode_CanCharge");
static_assert(sizeof(FireMode_CanCharge) == 0x000001, "Wrong size on FireMode_CanCharge");
static_assert(offsetof(FireMode_CanCharge, ReturnValue) == 0x000000, "Member 'FireMode_CanCharge::ReturnValue' has a wrong offset!");

// Function Indiana.FireMode.GetChargeProgress
// 0x0004 (0x0004 - 0x0000)
struct FireMode_GetChargeProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FireMode_GetChargeProgress) == 0x000004, "Wrong alignment on FireMode_GetChargeProgress");
static_assert(sizeof(FireMode_GetChargeProgress) == 0x000004, "Wrong size on FireMode_GetChargeProgress");
static_assert(offsetof(FireMode_GetChargeProgress, ReturnValue) == 0x000000, "Member 'FireMode_GetChargeProgress::ReturnValue' has a wrong offset!");

// Function Indiana.FireMode.IsBurst
// 0x0001 (0x0001 - 0x0000)
struct FireMode_IsBurst final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FireMode_IsBurst) == 0x000001, "Wrong alignment on FireMode_IsBurst");
static_assert(sizeof(FireMode_IsBurst) == 0x000001, "Wrong size on FireMode_IsBurst");
static_assert(offsetof(FireMode_IsBurst, ReturnValue) == 0x000000, "Member 'FireMode_IsBurst::ReturnValue' has a wrong offset!");

// Function Indiana.FireMode.IsProjectileCharge
// 0x0001 (0x0001 - 0x0000)
struct FireMode_IsProjectileCharge final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FireMode_IsProjectileCharge) == 0x000001, "Wrong alignment on FireMode_IsProjectileCharge");
static_assert(sizeof(FireMode_IsProjectileCharge) == 0x000001, "Wrong size on FireMode_IsProjectileCharge");
static_assert(offsetof(FireMode_IsProjectileCharge, ReturnValue) == 0x000000, "Member 'FireMode_IsProjectileCharge::ReturnValue' has a wrong offset!");

// Function Indiana.FireMode.IsSemiAutomatic
// 0x0001 (0x0001 - 0x0000)
struct FireMode_IsSemiAutomatic final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FireMode_IsSemiAutomatic) == 0x000001, "Wrong alignment on FireMode_IsSemiAutomatic");
static_assert(sizeof(FireMode_IsSemiAutomatic) == 0x000001, "Wrong size on FireMode_IsSemiAutomatic");
static_assert(offsetof(FireMode_IsSemiAutomatic, ReturnValue) == 0x000000, "Member 'FireMode_IsSemiAutomatic::ReturnValue' has a wrong offset!");

// Function Indiana.FireMode.IsSpinUp
// 0x0001 (0x0001 - 0x0000)
struct FireMode_IsSpinUp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FireMode_IsSpinUp) == 0x000001, "Wrong alignment on FireMode_IsSpinUp");
static_assert(sizeof(FireMode_IsSpinUp) == 0x000001, "Wrong size on FireMode_IsSpinUp");
static_assert(offsetof(FireMode_IsSpinUp, ReturnValue) == 0x000000, "Member 'FireMode_IsSpinUp::ReturnValue' has a wrong offset!");

// Function Indiana.FireMode.UsesCharge
// 0x0001 (0x0001 - 0x0000)
struct FireMode_UsesCharge final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FireMode_UsesCharge) == 0x000001, "Wrong alignment on FireMode_UsesCharge");
static_assert(sizeof(FireMode_UsesCharge) == 0x000001, "Wrong size on FireMode_UsesCharge");
static_assert(offsetof(FireMode_UsesCharge, ReturnValue) == 0x000000, "Member 'FireMode_UsesCharge::ReturnValue' has a wrong offset!");

// Function Indiana.SwitchAudioComponent.Play
// 0x0001 (0x0001 - 0x0000)
struct SwitchAudioComponent_Play final
{
public:
	ESwitchEventType                              Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SwitchAudioComponent_Play) == 0x000001, "Wrong alignment on SwitchAudioComponent_Play");
static_assert(sizeof(SwitchAudioComponent_Play) == 0x000001, "Wrong size on SwitchAudioComponent_Play");
static_assert(offsetof(SwitchAudioComponent_Play, Type) == 0x000000, "Member 'SwitchAudioComponent_Play::Type' has a wrong offset!");

// Function Indiana.SwitchAudioComponent.Stop
// 0x0001 (0x0001 - 0x0000)
struct SwitchAudioComponent_Stop final
{
public:
	ESwitchEventType                              Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SwitchAudioComponent_Stop) == 0x000001, "Wrong alignment on SwitchAudioComponent_Stop");
static_assert(sizeof(SwitchAudioComponent_Stop) == 0x000001, "Wrong size on SwitchAudioComponent_Stop");
static_assert(offsetof(SwitchAudioComponent_Stop, Type) == 0x000000, "Member 'SwitchAudioComponent_Stop::Type' has a wrong offset!");

// Function Indiana.ForcedAnimationComponent.OnWeaponEquipped
// 0x0008 (0x0008 - 0x0000)
struct ForcedAnimationComponent_OnWeaponEquipped final
{
public:
	class UWeapon*                                Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ForcedAnimationComponent_OnWeaponEquipped) == 0x000008, "Wrong alignment on ForcedAnimationComponent_OnWeaponEquipped");
static_assert(sizeof(ForcedAnimationComponent_OnWeaponEquipped) == 0x000008, "Wrong size on ForcedAnimationComponent_OnWeaponEquipped");
static_assert(offsetof(ForcedAnimationComponent_OnWeaponEquipped, Weapon) == 0x000000, "Member 'ForcedAnimationComponent_OnWeaponEquipped::Weapon' has a wrong offset!");

// Function Indiana.FPVCameraComponent.OnFieldOfViewSettingChanged
// 0x0004 (0x0004 - 0x0000)
struct FPVCameraComponent_OnFieldOfViewSettingChanged final
{
public:
	float                                         NewFOV;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPVCameraComponent_OnFieldOfViewSettingChanged) == 0x000004, "Wrong alignment on FPVCameraComponent_OnFieldOfViewSettingChanged");
static_assert(sizeof(FPVCameraComponent_OnFieldOfViewSettingChanged) == 0x000004, "Wrong size on FPVCameraComponent_OnFieldOfViewSettingChanged");
static_assert(offsetof(FPVCameraComponent_OnFieldOfViewSettingChanged, NewFOV) == 0x000000, "Member 'FPVCameraComponent_OnFieldOfViewSettingChanged::NewFOV' has a wrong offset!");

// Function Indiana.GameCalendar.K2_AdvanceDays
// 0x0004 (0x0004 - 0x0000)
struct GameCalendar_K2_AdvanceDays final
{
public:
	float                                         Days;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameCalendar_K2_AdvanceDays) == 0x000004, "Wrong alignment on GameCalendar_K2_AdvanceDays");
static_assert(sizeof(GameCalendar_K2_AdvanceDays) == 0x000004, "Wrong size on GameCalendar_K2_AdvanceDays");
static_assert(offsetof(GameCalendar_K2_AdvanceDays, Days) == 0x000000, "Member 'GameCalendar_K2_AdvanceDays::Days' has a wrong offset!");

// Function Indiana.GameCalendar.K2_AdvanceHours
// 0x0004 (0x0004 - 0x0000)
struct GameCalendar_K2_AdvanceHours final
{
public:
	float                                         Hours;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameCalendar_K2_AdvanceHours) == 0x000004, "Wrong alignment on GameCalendar_K2_AdvanceHours");
static_assert(sizeof(GameCalendar_K2_AdvanceHours) == 0x000004, "Wrong size on GameCalendar_K2_AdvanceHours");
static_assert(offsetof(GameCalendar_K2_AdvanceHours, Hours) == 0x000000, "Member 'GameCalendar_K2_AdvanceHours::Hours' has a wrong offset!");

// Function Indiana.GameCalendar.K2_AdvanceMinutes
// 0x0004 (0x0004 - 0x0000)
struct GameCalendar_K2_AdvanceMinutes final
{
public:
	float                                         Minutes;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameCalendar_K2_AdvanceMinutes) == 0x000004, "Wrong alignment on GameCalendar_K2_AdvanceMinutes");
static_assert(sizeof(GameCalendar_K2_AdvanceMinutes) == 0x000004, "Wrong size on GameCalendar_K2_AdvanceMinutes");
static_assert(offsetof(GameCalendar_K2_AdvanceMinutes, Minutes) == 0x000000, "Member 'GameCalendar_K2_AdvanceMinutes::Minutes' has a wrong offset!");

// Function Indiana.GameCalendar.K2_AdvanceSeconds
// 0x0004 (0x0004 - 0x0000)
struct GameCalendar_K2_AdvanceSeconds final
{
public:
	float                                         Seconds;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameCalendar_K2_AdvanceSeconds) == 0x000004, "Wrong alignment on GameCalendar_K2_AdvanceSeconds");
static_assert(sizeof(GameCalendar_K2_AdvanceSeconds) == 0x000004, "Wrong size on GameCalendar_K2_AdvanceSeconds");
static_assert(offsetof(GameCalendar_K2_AdvanceSeconds, Seconds) == 0x000000, "Member 'GameCalendar_K2_AdvanceSeconds::Seconds' has a wrong offset!");

// Function Indiana.GameCalendar.K2_AdvanceTime
// 0x0010 (0x0010 - 0x0000)
struct GameCalendar_K2_AdvanceTime final
{
public:
	float                                         Days;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Hours;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Minutes;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Seconds;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameCalendar_K2_AdvanceTime) == 0x000004, "Wrong alignment on GameCalendar_K2_AdvanceTime");
static_assert(sizeof(GameCalendar_K2_AdvanceTime) == 0x000010, "Wrong size on GameCalendar_K2_AdvanceTime");
static_assert(offsetof(GameCalendar_K2_AdvanceTime, Days) == 0x000000, "Member 'GameCalendar_K2_AdvanceTime::Days' has a wrong offset!");
static_assert(offsetof(GameCalendar_K2_AdvanceTime, Hours) == 0x000004, "Member 'GameCalendar_K2_AdvanceTime::Hours' has a wrong offset!");
static_assert(offsetof(GameCalendar_K2_AdvanceTime, Minutes) == 0x000008, "Member 'GameCalendar_K2_AdvanceTime::Minutes' has a wrong offset!");
static_assert(offsetof(GameCalendar_K2_AdvanceTime, Seconds) == 0x00000C, "Member 'GameCalendar_K2_AdvanceTime::Seconds' has a wrong offset!");

// Function Indiana.GameCalendar.K2_AdvanceToHour
// 0x0004 (0x0004 - 0x0000)
struct GameCalendar_K2_AdvanceToHour final
{
public:
	int32                                         TargetHour;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameCalendar_K2_AdvanceToHour) == 0x000004, "Wrong alignment on GameCalendar_K2_AdvanceToHour");
static_assert(sizeof(GameCalendar_K2_AdvanceToHour) == 0x000004, "Wrong size on GameCalendar_K2_AdvanceToHour");
static_assert(offsetof(GameCalendar_K2_AdvanceToHour, TargetHour) == 0x000000, "Member 'GameCalendar_K2_AdvanceToHour::TargetHour' has a wrong offset!");

// Function Indiana.GameCalendar.K2_ClearNamedTimestamp
// 0x0010 (0x0010 - 0x0000)
struct GameCalendar_K2_ClearNamedTimestamp final
{
public:
	class FString                                 TimestampName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameCalendar_K2_ClearNamedTimestamp) == 0x000008, "Wrong alignment on GameCalendar_K2_ClearNamedTimestamp");
static_assert(sizeof(GameCalendar_K2_ClearNamedTimestamp) == 0x000010, "Wrong size on GameCalendar_K2_ClearNamedTimestamp");
static_assert(offsetof(GameCalendar_K2_ClearNamedTimestamp, TimestampName) == 0x000000, "Member 'GameCalendar_K2_ClearNamedTimestamp::TimestampName' has a wrong offset!");

// Function Indiana.GameCalendar.K2_GetNormalizedTime
// 0x0004 (0x0004 - 0x0000)
struct GameCalendar_K2_GetNormalizedTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameCalendar_K2_GetNormalizedTime) == 0x000004, "Wrong alignment on GameCalendar_K2_GetNormalizedTime");
static_assert(sizeof(GameCalendar_K2_GetNormalizedTime) == 0x000004, "Wrong size on GameCalendar_K2_GetNormalizedTime");
static_assert(offsetof(GameCalendar_K2_GetNormalizedTime, ReturnValue) == 0x000000, "Member 'GameCalendar_K2_GetNormalizedTime::ReturnValue' has a wrong offset!");

// Function Indiana.GameCalendar.K2_GetRawHour
// 0x0004 (0x0004 - 0x0000)
struct GameCalendar_K2_GetRawHour final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameCalendar_K2_GetRawHour) == 0x000004, "Wrong alignment on GameCalendar_K2_GetRawHour");
static_assert(sizeof(GameCalendar_K2_GetRawHour) == 0x000004, "Wrong size on GameCalendar_K2_GetRawHour");
static_assert(offsetof(GameCalendar_K2_GetRawHour, ReturnValue) == 0x000000, "Member 'GameCalendar_K2_GetRawHour::ReturnValue' has a wrong offset!");

// Function Indiana.GameCalendar.K2_HaveDaysElapsedSinceNamedTimestamp
// 0x0018 (0x0018 - 0x0000)
struct GameCalendar_K2_HaveDaysElapsedSinceNamedTimestamp final
{
public:
	class FString                                 TimestampName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Days;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameCalendar_K2_HaveDaysElapsedSinceNamedTimestamp) == 0x000008, "Wrong alignment on GameCalendar_K2_HaveDaysElapsedSinceNamedTimestamp");
static_assert(sizeof(GameCalendar_K2_HaveDaysElapsedSinceNamedTimestamp) == 0x000018, "Wrong size on GameCalendar_K2_HaveDaysElapsedSinceNamedTimestamp");
static_assert(offsetof(GameCalendar_K2_HaveDaysElapsedSinceNamedTimestamp, TimestampName) == 0x000000, "Member 'GameCalendar_K2_HaveDaysElapsedSinceNamedTimestamp::TimestampName' has a wrong offset!");
static_assert(offsetof(GameCalendar_K2_HaveDaysElapsedSinceNamedTimestamp, Days) == 0x000010, "Member 'GameCalendar_K2_HaveDaysElapsedSinceNamedTimestamp::Days' has a wrong offset!");
static_assert(offsetof(GameCalendar_K2_HaveDaysElapsedSinceNamedTimestamp, ReturnValue) == 0x000014, "Member 'GameCalendar_K2_HaveDaysElapsedSinceNamedTimestamp::ReturnValue' has a wrong offset!");

// Function Indiana.GameCalendar.K2_HaveHoursElapsedSinceNamedTimestamp
// 0x0018 (0x0018 - 0x0000)
struct GameCalendar_K2_HaveHoursElapsedSinceNamedTimestamp final
{
public:
	class FString                                 TimestampName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Hours;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameCalendar_K2_HaveHoursElapsedSinceNamedTimestamp) == 0x000008, "Wrong alignment on GameCalendar_K2_HaveHoursElapsedSinceNamedTimestamp");
static_assert(sizeof(GameCalendar_K2_HaveHoursElapsedSinceNamedTimestamp) == 0x000018, "Wrong size on GameCalendar_K2_HaveHoursElapsedSinceNamedTimestamp");
static_assert(offsetof(GameCalendar_K2_HaveHoursElapsedSinceNamedTimestamp, TimestampName) == 0x000000, "Member 'GameCalendar_K2_HaveHoursElapsedSinceNamedTimestamp::TimestampName' has a wrong offset!");
static_assert(offsetof(GameCalendar_K2_HaveHoursElapsedSinceNamedTimestamp, Hours) == 0x000010, "Member 'GameCalendar_K2_HaveHoursElapsedSinceNamedTimestamp::Hours' has a wrong offset!");
static_assert(offsetof(GameCalendar_K2_HaveHoursElapsedSinceNamedTimestamp, ReturnValue) == 0x000014, "Member 'GameCalendar_K2_HaveHoursElapsedSinceNamedTimestamp::ReturnValue' has a wrong offset!");

// Function Indiana.GameCalendar.K2_HaveMinutesElapsedSinceNamedTimestamp
// 0x0018 (0x0018 - 0x0000)
struct GameCalendar_K2_HaveMinutesElapsedSinceNamedTimestamp final
{
public:
	class FString                                 TimestampName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minutes;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameCalendar_K2_HaveMinutesElapsedSinceNamedTimestamp) == 0x000008, "Wrong alignment on GameCalendar_K2_HaveMinutesElapsedSinceNamedTimestamp");
static_assert(sizeof(GameCalendar_K2_HaveMinutesElapsedSinceNamedTimestamp) == 0x000018, "Wrong size on GameCalendar_K2_HaveMinutesElapsedSinceNamedTimestamp");
static_assert(offsetof(GameCalendar_K2_HaveMinutesElapsedSinceNamedTimestamp, TimestampName) == 0x000000, "Member 'GameCalendar_K2_HaveMinutesElapsedSinceNamedTimestamp::TimestampName' has a wrong offset!");
static_assert(offsetof(GameCalendar_K2_HaveMinutesElapsedSinceNamedTimestamp, Minutes) == 0x000010, "Member 'GameCalendar_K2_HaveMinutesElapsedSinceNamedTimestamp::Minutes' has a wrong offset!");
static_assert(offsetof(GameCalendar_K2_HaveMinutesElapsedSinceNamedTimestamp, ReturnValue) == 0x000014, "Member 'GameCalendar_K2_HaveMinutesElapsedSinceNamedTimestamp::ReturnValue' has a wrong offset!");

// Function Indiana.GameCalendar.K2_IsPhaseOfDay
// 0x0002 (0x0002 - 0x0000)
struct GameCalendar_K2_IsPhaseOfDay final
{
public:
	EPhaseOfDay                                   Phase;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameCalendar_K2_IsPhaseOfDay) == 0x000001, "Wrong alignment on GameCalendar_K2_IsPhaseOfDay");
static_assert(sizeof(GameCalendar_K2_IsPhaseOfDay) == 0x000002, "Wrong size on GameCalendar_K2_IsPhaseOfDay");
static_assert(offsetof(GameCalendar_K2_IsPhaseOfDay, Phase) == 0x000000, "Member 'GameCalendar_K2_IsPhaseOfDay::Phase' has a wrong offset!");
static_assert(offsetof(GameCalendar_K2_IsPhaseOfDay, ReturnValue) == 0x000001, "Member 'GameCalendar_K2_IsPhaseOfDay::ReturnValue' has a wrong offset!");

// Function Indiana.GameCalendar.K2_IsTimeSlice
// 0x000C (0x000C - 0x0000)
struct GameCalendar_K2_IsTimeSlice final
{
public:
	int32                                         StartHour;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndHour;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameCalendar_K2_IsTimeSlice) == 0x000004, "Wrong alignment on GameCalendar_K2_IsTimeSlice");
static_assert(sizeof(GameCalendar_K2_IsTimeSlice) == 0x00000C, "Wrong size on GameCalendar_K2_IsTimeSlice");
static_assert(offsetof(GameCalendar_K2_IsTimeSlice, StartHour) == 0x000000, "Member 'GameCalendar_K2_IsTimeSlice::StartHour' has a wrong offset!");
static_assert(offsetof(GameCalendar_K2_IsTimeSlice, EndHour) == 0x000004, "Member 'GameCalendar_K2_IsTimeSlice::EndHour' has a wrong offset!");
static_assert(offsetof(GameCalendar_K2_IsTimeSlice, ReturnValue) == 0x000008, "Member 'GameCalendar_K2_IsTimeSlice::ReturnValue' has a wrong offset!");

// Function Indiana.GameCalendar.K2_RegisterNamedTimestamp
// 0x0010 (0x0010 - 0x0000)
struct GameCalendar_K2_RegisterNamedTimestamp final
{
public:
	class FString                                 TimestampName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameCalendar_K2_RegisterNamedTimestamp) == 0x000008, "Wrong alignment on GameCalendar_K2_RegisterNamedTimestamp");
static_assert(sizeof(GameCalendar_K2_RegisterNamedTimestamp) == 0x000010, "Wrong size on GameCalendar_K2_RegisterNamedTimestamp");
static_assert(offsetof(GameCalendar_K2_RegisterNamedTimestamp, TimestampName) == 0x000000, "Member 'GameCalendar_K2_RegisterNamedTimestamp::TimestampName' has a wrong offset!");

// Function Indiana.GameCalendar.K2_SetupDelayedCallback
// 0x0020 (0x0020 - 0x0000)
struct GameCalendar_K2_SetupDelayedCallback final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             EventToDelay;                                      // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         SecondsToDelay;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameCalendar_K2_SetupDelayedCallback) == 0x000008, "Wrong alignment on GameCalendar_K2_SetupDelayedCallback");
static_assert(sizeof(GameCalendar_K2_SetupDelayedCallback) == 0x000020, "Wrong size on GameCalendar_K2_SetupDelayedCallback");
static_assert(offsetof(GameCalendar_K2_SetupDelayedCallback, WorldContextObject) == 0x000000, "Member 'GameCalendar_K2_SetupDelayedCallback::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GameCalendar_K2_SetupDelayedCallback, EventToDelay) == 0x000008, "Member 'GameCalendar_K2_SetupDelayedCallback::EventToDelay' has a wrong offset!");
static_assert(offsetof(GameCalendar_K2_SetupDelayedCallback, SecondsToDelay) == 0x000018, "Member 'GameCalendar_K2_SetupDelayedCallback::SecondsToDelay' has a wrong offset!");

// Function Indiana.GameCalendar.AdvanceDays
// 0x0004 (0x0004 - 0x0000)
struct GameCalendar_AdvanceDays final
{
public:
	float                                         Days;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameCalendar_AdvanceDays) == 0x000004, "Wrong alignment on GameCalendar_AdvanceDays");
static_assert(sizeof(GameCalendar_AdvanceDays) == 0x000004, "Wrong size on GameCalendar_AdvanceDays");
static_assert(offsetof(GameCalendar_AdvanceDays, Days) == 0x000000, "Member 'GameCalendar_AdvanceDays::Days' has a wrong offset!");

// Function Indiana.GameCalendar.AdvanceHours
// 0x0004 (0x0004 - 0x0000)
struct GameCalendar_AdvanceHours final
{
public:
	float                                         Hours;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameCalendar_AdvanceHours) == 0x000004, "Wrong alignment on GameCalendar_AdvanceHours");
static_assert(sizeof(GameCalendar_AdvanceHours) == 0x000004, "Wrong size on GameCalendar_AdvanceHours");
static_assert(offsetof(GameCalendar_AdvanceHours, Hours) == 0x000000, "Member 'GameCalendar_AdvanceHours::Hours' has a wrong offset!");

// Function Indiana.GameCalendar.AdvanceMinutes
// 0x0004 (0x0004 - 0x0000)
struct GameCalendar_AdvanceMinutes final
{
public:
	float                                         Minutes;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameCalendar_AdvanceMinutes) == 0x000004, "Wrong alignment on GameCalendar_AdvanceMinutes");
static_assert(sizeof(GameCalendar_AdvanceMinutes) == 0x000004, "Wrong size on GameCalendar_AdvanceMinutes");
static_assert(offsetof(GameCalendar_AdvanceMinutes, Minutes) == 0x000000, "Member 'GameCalendar_AdvanceMinutes::Minutes' has a wrong offset!");

// Function Indiana.GameCalendar.AdvanceSeconds
// 0x0004 (0x0004 - 0x0000)
struct GameCalendar_AdvanceSeconds final
{
public:
	float                                         Seconds;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameCalendar_AdvanceSeconds) == 0x000004, "Wrong alignment on GameCalendar_AdvanceSeconds");
static_assert(sizeof(GameCalendar_AdvanceSeconds) == 0x000004, "Wrong size on GameCalendar_AdvanceSeconds");
static_assert(offsetof(GameCalendar_AdvanceSeconds, Seconds) == 0x000000, "Member 'GameCalendar_AdvanceSeconds::Seconds' has a wrong offset!");

// Function Indiana.GameCalendar.AdvanceTime
// 0x0010 (0x0010 - 0x0000)
struct GameCalendar_AdvanceTime final
{
public:
	float                                         Days;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Hours;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Minutes;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Seconds;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameCalendar_AdvanceTime) == 0x000004, "Wrong alignment on GameCalendar_AdvanceTime");
static_assert(sizeof(GameCalendar_AdvanceTime) == 0x000010, "Wrong size on GameCalendar_AdvanceTime");
static_assert(offsetof(GameCalendar_AdvanceTime, Days) == 0x000000, "Member 'GameCalendar_AdvanceTime::Days' has a wrong offset!");
static_assert(offsetof(GameCalendar_AdvanceTime, Hours) == 0x000004, "Member 'GameCalendar_AdvanceTime::Hours' has a wrong offset!");
static_assert(offsetof(GameCalendar_AdvanceTime, Minutes) == 0x000008, "Member 'GameCalendar_AdvanceTime::Minutes' has a wrong offset!");
static_assert(offsetof(GameCalendar_AdvanceTime, Seconds) == 0x00000C, "Member 'GameCalendar_AdvanceTime::Seconds' has a wrong offset!");

// Function Indiana.GameCalendar.AdvanceToHour
// 0x0004 (0x0004 - 0x0000)
struct GameCalendar_AdvanceToHour final
{
public:
	float                                         TargetHour;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameCalendar_AdvanceToHour) == 0x000004, "Wrong alignment on GameCalendar_AdvanceToHour");
static_assert(sizeof(GameCalendar_AdvanceToHour) == 0x000004, "Wrong size on GameCalendar_AdvanceToHour");
static_assert(offsetof(GameCalendar_AdvanceToHour, TargetHour) == 0x000000, "Member 'GameCalendar_AdvanceToHour::TargetHour' has a wrong offset!");

// Function Indiana.GameCalendar.LockCalendar
// 0x0001 (0x0001 - 0x0000)
struct GameCalendar_LockCalendar final
{
public:
	bool                                          Block;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameCalendar_LockCalendar) == 0x000001, "Wrong alignment on GameCalendar_LockCalendar");
static_assert(sizeof(GameCalendar_LockCalendar) == 0x000001, "Wrong size on GameCalendar_LockCalendar");
static_assert(offsetof(GameCalendar_LockCalendar, Block) == 0x000000, "Member 'GameCalendar_LockCalendar::Block' has a wrong offset!");

// Function Indiana.GameCalendar.RequestPauseTime
// 0x0008 (0x0008 - 0x0000)
struct GameCalendar_RequestPauseTime final
{
public:
	class FName                                   RequestContext;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameCalendar_RequestPauseTime) == 0x000004, "Wrong alignment on GameCalendar_RequestPauseTime");
static_assert(sizeof(GameCalendar_RequestPauseTime) == 0x000008, "Wrong size on GameCalendar_RequestPauseTime");
static_assert(offsetof(GameCalendar_RequestPauseTime, RequestContext) == 0x000000, "Member 'GameCalendar_RequestPauseTime::RequestContext' has a wrong offset!");

// Function Indiana.GameCalendar.RequestUnpauseTime
// 0x0008 (0x0008 - 0x0000)
struct GameCalendar_RequestUnpauseTime final
{
public:
	class FName                                   RequestContext;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameCalendar_RequestUnpauseTime) == 0x000004, "Wrong alignment on GameCalendar_RequestUnpauseTime");
static_assert(sizeof(GameCalendar_RequestUnpauseTime) == 0x000008, "Wrong size on GameCalendar_RequestUnpauseTime");
static_assert(offsetof(GameCalendar_RequestUnpauseTime, RequestContext) == 0x000000, "Member 'GameCalendar_RequestUnpauseTime::RequestContext' has a wrong offset!");

// Function Indiana.GammaSelectionWidget.OnGammaChanged
// 0x0038 (0x0038 - 0x0000)
struct GammaSelectionWidget_OnGammaChanged final
{
public:
	struct FSliderEvent                           Event;                                             // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GammaSelectionWidget_OnGammaChanged) == 0x000008, "Wrong alignment on GammaSelectionWidget_OnGammaChanged");
static_assert(sizeof(GammaSelectionWidget_OnGammaChanged) == 0x000038, "Wrong size on GammaSelectionWidget_OnGammaChanged");
static_assert(offsetof(GammaSelectionWidget_OnGammaChanged, Event) == 0x000000, "Member 'GammaSelectionWidget_OnGammaChanged::Event' has a wrong offset!");

// Function Indiana.SpreadManagerComponent.OnAttack
// 0x0004 (0x0004 - 0x0000)
struct SpreadManagerComponent_OnAttack final
{
public:
	float                                         DurationScalar;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpreadManagerComponent_OnAttack) == 0x000004, "Wrong alignment on SpreadManagerComponent_OnAttack");
static_assert(sizeof(SpreadManagerComponent_OnAttack) == 0x000004, "Wrong size on SpreadManagerComponent_OnAttack");
static_assert(offsetof(SpreadManagerComponent_OnAttack, DurationScalar) == 0x000000, "Member 'SpreadManagerComponent_OnAttack::DurationScalar' has a wrong offset!");

// Function Indiana.SpreadManagerComponent.OnCombatStateChange
// 0x0002 (0x0002 - 0x0000)
struct SpreadManagerComponent_OnCombatStateChange final
{
public:
	bool                                          bInCombat;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestoring;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpreadManagerComponent_OnCombatStateChange) == 0x000001, "Wrong alignment on SpreadManagerComponent_OnCombatStateChange");
static_assert(sizeof(SpreadManagerComponent_OnCombatStateChange) == 0x000002, "Wrong size on SpreadManagerComponent_OnCombatStateChange");
static_assert(offsetof(SpreadManagerComponent_OnCombatStateChange, bInCombat) == 0x000000, "Member 'SpreadManagerComponent_OnCombatStateChange::bInCombat' has a wrong offset!");
static_assert(offsetof(SpreadManagerComponent_OnCombatStateChange, bRestoring) == 0x000001, "Member 'SpreadManagerComponent_OnCombatStateChange::bRestoring' has a wrong offset!");

// Function Indiana.GenericNotificationWidget.OnHUDVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct GenericNotificationWidget_OnHUDVisibilityChanged final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GenericNotificationWidget_OnHUDVisibilityChanged) == 0x000001, "Wrong alignment on GenericNotificationWidget_OnHUDVisibilityChanged");
static_assert(sizeof(GenericNotificationWidget_OnHUDVisibilityChanged) == 0x000001, "Wrong size on GenericNotificationWidget_OnHUDVisibilityChanged");
static_assert(offsetof(GenericNotificationWidget_OnHUDVisibilityChanged, bVisible) == 0x000000, "Member 'GenericNotificationWidget_OnHUDVisibilityChanged::bVisible' has a wrong offset!");

// Function Indiana.GenericNotificationWidget.OnNotificationDurationChanged
// 0x0004 (0x0004 - 0x0000)
struct GenericNotificationWidget_OnNotificationDurationChanged final
{
public:
	float                                         NotificationTime;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GenericNotificationWidget_OnNotificationDurationChanged) == 0x000004, "Wrong alignment on GenericNotificationWidget_OnNotificationDurationChanged");
static_assert(sizeof(GenericNotificationWidget_OnNotificationDurationChanged) == 0x000004, "Wrong size on GenericNotificationWidget_OnNotificationDurationChanged");
static_assert(offsetof(GenericNotificationWidget_OnNotificationDurationChanged, NotificationTime) == 0x000000, "Member 'GenericNotificationWidget_OnNotificationDurationChanged::NotificationTime' has a wrong offset!");

// Function Indiana.GenericNotificationWidget.OnSaveGameComplete
// 0x0002 (0x0002 - 0x0000)
struct GenericNotificationWidget_OnSaveGameComplete final
{
public:
	ESaveGameResult                               SaveResult;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESaveGameType                                 SaveGameType;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GenericNotificationWidget_OnSaveGameComplete) == 0x000001, "Wrong alignment on GenericNotificationWidget_OnSaveGameComplete");
static_assert(sizeof(GenericNotificationWidget_OnSaveGameComplete) == 0x000002, "Wrong size on GenericNotificationWidget_OnSaveGameComplete");
static_assert(offsetof(GenericNotificationWidget_OnSaveGameComplete, SaveResult) == 0x000000, "Member 'GenericNotificationWidget_OnSaveGameComplete::SaveResult' has a wrong offset!");
static_assert(offsetof(GenericNotificationWidget_OnSaveGameComplete, SaveGameType) == 0x000001, "Member 'GenericNotificationWidget_OnSaveGameComplete::SaveGameType' has a wrong offset!");

// Function Indiana.GenericNotificationWidget.SetBackingMaterialHeight
// 0x0004 (0x0004 - 0x0000)
struct GenericNotificationWidget_SetBackingMaterialHeight final
{
public:
	float                                         NewHeight;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GenericNotificationWidget_SetBackingMaterialHeight) == 0x000004, "Wrong alignment on GenericNotificationWidget_SetBackingMaterialHeight");
static_assert(sizeof(GenericNotificationWidget_SetBackingMaterialHeight) == 0x000004, "Wrong size on GenericNotificationWidget_SetBackingMaterialHeight");
static_assert(offsetof(GenericNotificationWidget_SetBackingMaterialHeight, NewHeight) == 0x000000, "Member 'GenericNotificationWidget_SetBackingMaterialHeight::NewHeight' has a wrong offset!");

// Function Indiana.TutorialPopupStyleWidget.SetNewBackingMaterialHeight
// 0x0004 (0x0004 - 0x0000)
struct TutorialPopupStyleWidget_SetNewBackingMaterialHeight final
{
public:
	float                                         NewHeight;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialPopupStyleWidget_SetNewBackingMaterialHeight) == 0x000004, "Wrong alignment on TutorialPopupStyleWidget_SetNewBackingMaterialHeight");
static_assert(sizeof(TutorialPopupStyleWidget_SetNewBackingMaterialHeight) == 0x000004, "Wrong size on TutorialPopupStyleWidget_SetNewBackingMaterialHeight");
static_assert(offsetof(TutorialPopupStyleWidget_SetNewBackingMaterialHeight, NewHeight) == 0x000000, "Member 'TutorialPopupStyleWidget_SetNewBackingMaterialHeight::NewHeight' has a wrong offset!");

// Function Indiana.OCLAudioComponent.Play
// 0x0001 (0x0001 - 0x0000)
struct OCLAudioComponent_Play final
{
public:
	EOCLEventType                                 Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OCLAudioComponent_Play) == 0x000001, "Wrong alignment on OCLAudioComponent_Play");
static_assert(sizeof(OCLAudioComponent_Play) == 0x000001, "Wrong size on OCLAudioComponent_Play");
static_assert(offsetof(OCLAudioComponent_Play, Type) == 0x000000, "Member 'OCLAudioComponent_Play::Type' has a wrong offset!");

// Function Indiana.OCLAudioComponent.Stop
// 0x0001 (0x0001 - 0x0000)
struct OCLAudioComponent_Stop final
{
public:
	EOCLEventType                                 Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OCLAudioComponent_Stop) == 0x000001, "Wrong alignment on OCLAudioComponent_Stop");
static_assert(sizeof(OCLAudioComponent_Stop) == 0x000001, "Wrong size on OCLAudioComponent_Stop");
static_assert(offsetof(OCLAudioComponent_Stop, Type) == 0x000000, "Member 'OCLAudioComponent_Stop::Type' has a wrong offset!");

// Function Indiana.GravManger.SetLowGravAmbientAudioEnabled
// 0x0001 (0x0001 - 0x0000)
struct GravManger_SetLowGravAmbientAudioEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GravManger_SetLowGravAmbientAudioEnabled) == 0x000001, "Wrong alignment on GravManger_SetLowGravAmbientAudioEnabled");
static_assert(sizeof(GravManger_SetLowGravAmbientAudioEnabled) == 0x000001, "Wrong size on GravManger_SetLowGravAmbientAudioEnabled");
static_assert(offsetof(GravManger_SetLowGravAmbientAudioEnabled, Enabled) == 0x000000, "Member 'GravManger_SetLowGravAmbientAudioEnabled::Enabled' has a wrong offset!");

// Function Indiana.Hazard.AttemptEnableHazard
// 0x0001 (0x0001 - 0x0000)
struct Hazard_AttemptEnableHazard final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Hazard_AttemptEnableHazard) == 0x000001, "Wrong alignment on Hazard_AttemptEnableHazard");
static_assert(sizeof(Hazard_AttemptEnableHazard) == 0x000001, "Wrong size on Hazard_AttemptEnableHazard");
static_assert(offsetof(Hazard_AttemptEnableHazard, bEnable) == 0x000000, "Member 'Hazard_AttemptEnableHazard::bEnable' has a wrong offset!");

// Function Indiana.Hazard.ForceSetEnabled
// 0x0001 (0x0001 - 0x0000)
struct Hazard_ForceSetEnabled final
{
public:
	bool                                          bNewEnabled;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Hazard_ForceSetEnabled) == 0x000001, "Wrong alignment on Hazard_ForceSetEnabled");
static_assert(sizeof(Hazard_ForceSetEnabled) == 0x000001, "Wrong size on Hazard_ForceSetEnabled");
static_assert(offsetof(Hazard_ForceSetEnabled, bNewEnabled) == 0x000000, "Member 'Hazard_ForceSetEnabled::bNewEnabled' has a wrong offset!");

// Function Indiana.Hazard.OnActorEntered
// 0x00A8 (0x00A8 - 0x0000)
struct Hazard_OnActorEntered final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Hazard_OnActorEntered) == 0x000008, "Wrong alignment on Hazard_OnActorEntered");
static_assert(sizeof(Hazard_OnActorEntered) == 0x0000A8, "Wrong size on Hazard_OnActorEntered");
static_assert(offsetof(Hazard_OnActorEntered, OverlappedComponent) == 0x000000, "Member 'Hazard_OnActorEntered::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Hazard_OnActorEntered, OtherActor) == 0x000008, "Member 'Hazard_OnActorEntered::OtherActor' has a wrong offset!");
static_assert(offsetof(Hazard_OnActorEntered, OtherComp) == 0x000010, "Member 'Hazard_OnActorEntered::OtherComp' has a wrong offset!");
static_assert(offsetof(Hazard_OnActorEntered, OtherBodyIndex) == 0x000018, "Member 'Hazard_OnActorEntered::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Hazard_OnActorEntered, bFromSweep) == 0x00001C, "Member 'Hazard_OnActorEntered::bFromSweep' has a wrong offset!");
static_assert(offsetof(Hazard_OnActorEntered, SweepResult) == 0x000020, "Member 'Hazard_OnActorEntered::SweepResult' has a wrong offset!");

// Function Indiana.Hazard.OnActorExited
// 0x0020 (0x0020 - 0x0000)
struct Hazard_OnActorExited final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Hazard_OnActorExited) == 0x000008, "Wrong alignment on Hazard_OnActorExited");
static_assert(sizeof(Hazard_OnActorExited) == 0x000020, "Wrong size on Hazard_OnActorExited");
static_assert(offsetof(Hazard_OnActorExited, OverlappedComponent) == 0x000000, "Member 'Hazard_OnActorExited::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Hazard_OnActorExited, OtherActor) == 0x000008, "Member 'Hazard_OnActorExited::OtherActor' has a wrong offset!");
static_assert(offsetof(Hazard_OnActorExited, OtherComp) == 0x000010, "Member 'Hazard_OnActorExited::OtherComp' has a wrong offset!");
static_assert(offsetof(Hazard_OnActorExited, OtherBodyIndex) == 0x000018, "Member 'Hazard_OnActorExited::OtherBodyIndex' has a wrong offset!");

// Function Indiana.HeadAndBodyTrackingComponent.OnOccupiedElevatorChange
// 0x0010 (0x0010 - 0x0000)
struct HeadAndBodyTrackingComponent_OnOccupiedElevatorChange final
{
public:
	class AElevator*                              Elevator;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOccupied;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HeadAndBodyTrackingComponent_OnOccupiedElevatorChange) == 0x000008, "Wrong alignment on HeadAndBodyTrackingComponent_OnOccupiedElevatorChange");
static_assert(sizeof(HeadAndBodyTrackingComponent_OnOccupiedElevatorChange) == 0x000010, "Wrong size on HeadAndBodyTrackingComponent_OnOccupiedElevatorChange");
static_assert(offsetof(HeadAndBodyTrackingComponent_OnOccupiedElevatorChange, Elevator) == 0x000000, "Member 'HeadAndBodyTrackingComponent_OnOccupiedElevatorChange::Elevator' has a wrong offset!");
static_assert(offsetof(HeadAndBodyTrackingComponent_OnOccupiedElevatorChange, bOccupied) == 0x000008, "Member 'HeadAndBodyTrackingComponent_OnOccupiedElevatorChange::bOccupied' has a wrong offset!");

// Function Indiana.HealthComponent.KillNPC
// 0x0008 (0x0008 - 0x0000)
struct HealthComponent_KillNPC final
{
public:
	class AIndianaAiCharacter*                    Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponent_KillNPC) == 0x000008, "Wrong alignment on HealthComponent_KillNPC");
static_assert(sizeof(HealthComponent_KillNPC) == 0x000008, "Wrong size on HealthComponent_KillNPC");
static_assert(offsetof(HealthComponent_KillNPC, Character) == 0x000000, "Member 'HealthComponent_KillNPC::Character' has a wrong offset!");

// Function Indiana.HealthComponent.DeathComplete
// 0x0008 (0x0008 - 0x0000)
struct HealthComponent_DeathComplete final
{
public:
	class AActor*                                 DeadActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponent_DeathComplete) == 0x000008, "Wrong alignment on HealthComponent_DeathComplete");
static_assert(sizeof(HealthComponent_DeathComplete) == 0x000008, "Wrong size on HealthComponent_DeathComplete");
static_assert(offsetof(HealthComponent_DeathComplete, DeadActor) == 0x000000, "Member 'HealthComponent_DeathComplete::DeadActor' has a wrong offset!");

// Function Indiana.HealthComponent.GetNormalizedHealth
// 0x0004 (0x0004 - 0x0000)
struct HealthComponent_GetNormalizedHealth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponent_GetNormalizedHealth) == 0x000004, "Wrong alignment on HealthComponent_GetNormalizedHealth");
static_assert(sizeof(HealthComponent_GetNormalizedHealth) == 0x000004, "Wrong size on HealthComponent_GetNormalizedHealth");
static_assert(offsetof(HealthComponent_GetNormalizedHealth, ReturnValue) == 0x000000, "Member 'HealthComponent_GetNormalizedHealth::ReturnValue' has a wrong offset!");

// Function Indiana.HealthComponent.LevelChanged
// 0x0004 (0x0004 - 0x0000)
struct HealthComponent_LevelChanged final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponent_LevelChanged) == 0x000004, "Wrong alignment on HealthComponent_LevelChanged");
static_assert(sizeof(HealthComponent_LevelChanged) == 0x000004, "Wrong size on HealthComponent_LevelChanged");
static_assert(offsetof(HealthComponent_LevelChanged, Level) == 0x000000, "Member 'HealthComponent_LevelChanged::Level' has a wrong offset!");

// Function Indiana.HealthComponent.OnAttributeUpdated
// 0x0008 (0x0008 - 0x0000)
struct HealthComponent_OnAttributeUpdated final
{
public:
	EAttribute                                    Attribute;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NewValue;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponent_OnAttributeUpdated) == 0x000004, "Wrong alignment on HealthComponent_OnAttributeUpdated");
static_assert(sizeof(HealthComponent_OnAttributeUpdated) == 0x000008, "Wrong size on HealthComponent_OnAttributeUpdated");
static_assert(offsetof(HealthComponent_OnAttributeUpdated, Attribute) == 0x000000, "Member 'HealthComponent_OnAttributeUpdated::Attribute' has a wrong offset!");
static_assert(offsetof(HealthComponent_OnAttributeUpdated, NewValue) == 0x000004, "Member 'HealthComponent_OnAttributeUpdated::NewValue' has a wrong offset!");

// Function Indiana.HealthComponent.OnStatUpdated
// 0x0008 (0x0008 - 0x0000)
struct HealthComponent_OnStatUpdated final
{
public:
	const class URpgStat*                         Stat;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponent_OnStatUpdated) == 0x000008, "Wrong alignment on HealthComponent_OnStatUpdated");
static_assert(sizeof(HealthComponent_OnStatUpdated) == 0x000008, "Wrong size on HealthComponent_OnStatUpdated");
static_assert(offsetof(HealthComponent_OnStatUpdated, Stat) == 0x000000, "Member 'HealthComponent_OnStatUpdated::Stat' has a wrong offset!");

// Function Indiana.HealthComponent.SetGod
// 0x0001 (0x0001 - 0x0000)
struct HealthComponent_SetGod final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponent_SetGod) == 0x000001, "Wrong alignment on HealthComponent_SetGod");
static_assert(sizeof(HealthComponent_SetGod) == 0x000001, "Wrong size on HealthComponent_SetGod");
static_assert(offsetof(HealthComponent_SetGod, bEnabled) == 0x000000, "Member 'HealthComponent_SetGod::bEnabled' has a wrong offset!");

// Function Indiana.HealthComponent.SetHealthPercent
// 0x0010 (0x0010 - 0x0000)
struct HealthComponent_SetHealthPercent final
{
public:
	float                                         Percent;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Instigator;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponent_SetHealthPercent) == 0x000008, "Wrong alignment on HealthComponent_SetHealthPercent");
static_assert(sizeof(HealthComponent_SetHealthPercent) == 0x000010, "Wrong size on HealthComponent_SetHealthPercent");
static_assert(offsetof(HealthComponent_SetHealthPercent, Percent) == 0x000000, "Member 'HealthComponent_SetHealthPercent::Percent' has a wrong offset!");
static_assert(offsetof(HealthComponent_SetHealthPercent, Instigator) == 0x000008, "Member 'HealthComponent_SetHealthPercent::Instigator' has a wrong offset!");

// Function Indiana.HealthComponent.SetHealthPercentNPC
// 0x0004 (0x0004 - 0x0000)
struct HealthComponent_SetHealthPercentNPC final
{
public:
	float                                         Percent;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponent_SetHealthPercentNPC) == 0x000004, "Wrong alignment on HealthComponent_SetHealthPercentNPC");
static_assert(sizeof(HealthComponent_SetHealthPercentNPC) == 0x000004, "Wrong size on HealthComponent_SetHealthPercentNPC");
static_assert(offsetof(HealthComponent_SetHealthPercentNPC, Percent) == 0x000000, "Member 'HealthComponent_SetHealthPercentNPC::Percent' has a wrong offset!");

// Function Indiana.HealthComponent.SetPseudoGod
// 0x0001 (0x0001 - 0x0000)
struct HealthComponent_SetPseudoGod final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponent_SetPseudoGod) == 0x000001, "Wrong alignment on HealthComponent_SetPseudoGod");
static_assert(sizeof(HealthComponent_SetPseudoGod) == 0x000001, "Wrong size on HealthComponent_SetPseudoGod");
static_assert(offsetof(HealthComponent_SetPseudoGod, bEnabled) == 0x000000, "Member 'HealthComponent_SetPseudoGod::bEnabled' has a wrong offset!");

// Function Indiana.HealthComponent.GetHealth
// 0x0004 (0x0004 - 0x0000)
struct HealthComponent_GetHealth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponent_GetHealth) == 0x000004, "Wrong alignment on HealthComponent_GetHealth");
static_assert(sizeof(HealthComponent_GetHealth) == 0x000004, "Wrong size on HealthComponent_GetHealth");
static_assert(offsetof(HealthComponent_GetHealth, ReturnValue) == 0x000000, "Member 'HealthComponent_GetHealth::ReturnValue' has a wrong offset!");

// Function Indiana.HealthComponent.GetMaxHealth
// 0x0004 (0x0004 - 0x0000)
struct HealthComponent_GetMaxHealth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponent_GetMaxHealth) == 0x000004, "Wrong alignment on HealthComponent_GetMaxHealth");
static_assert(sizeof(HealthComponent_GetMaxHealth) == 0x000004, "Wrong size on HealthComponent_GetMaxHealth");
static_assert(offsetof(HealthComponent_GetMaxHealth, ReturnValue) == 0x000000, "Member 'HealthComponent_GetMaxHealth::ReturnValue' has a wrong offset!");

// Function Indiana.HealthComponent.GetRegenRate
// 0x0004 (0x0004 - 0x0000)
struct HealthComponent_GetRegenRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponent_GetRegenRate) == 0x000004, "Wrong alignment on HealthComponent_GetRegenRate");
static_assert(sizeof(HealthComponent_GetRegenRate) == 0x000004, "Wrong size on HealthComponent_GetRegenRate");
static_assert(offsetof(HealthComponent_GetRegenRate, ReturnValue) == 0x000000, "Member 'HealthComponent_GetRegenRate::ReturnValue' has a wrong offset!");

// Function Indiana.HealthComponent.GetRegenRatePoints
// 0x0004 (0x0004 - 0x0000)
struct HealthComponent_GetRegenRatePoints final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponent_GetRegenRatePoints) == 0x000004, "Wrong alignment on HealthComponent_GetRegenRatePoints");
static_assert(sizeof(HealthComponent_GetRegenRatePoints) == 0x000004, "Wrong size on HealthComponent_GetRegenRatePoints");
static_assert(offsetof(HealthComponent_GetRegenRatePoints, ReturnValue) == 0x000000, "Member 'HealthComponent_GetRegenRatePoints::ReturnValue' has a wrong offset!");

// Function Indiana.HealthComponent.GetStateOfBeing
// 0x0001 (0x0001 - 0x0000)
struct HealthComponent_GetStateOfBeing final
{
public:
	EStateOfBeing                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponent_GetStateOfBeing) == 0x000001, "Wrong alignment on HealthComponent_GetStateOfBeing");
static_assert(sizeof(HealthComponent_GetStateOfBeing) == 0x000001, "Wrong size on HealthComponent_GetStateOfBeing");
static_assert(offsetof(HealthComponent_GetStateOfBeing, ReturnValue) == 0x000000, "Member 'HealthComponent_GetStateOfBeing::ReturnValue' has a wrong offset!");

// Function Indiana.HitEffectIndicatorComponent.OnHit
// 0x0008 (0x0008 - 0x0000)
struct HitEffectIndicatorComponent_OnHit final
{
public:
	float                                         NormalizedAmount;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IncidentAngleRelativeToCameraDegrees;              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HitEffectIndicatorComponent_OnHit) == 0x000004, "Wrong alignment on HitEffectIndicatorComponent_OnHit");
static_assert(sizeof(HitEffectIndicatorComponent_OnHit) == 0x000008, "Wrong size on HitEffectIndicatorComponent_OnHit");
static_assert(offsetof(HitEffectIndicatorComponent_OnHit, NormalizedAmount) == 0x000000, "Member 'HitEffectIndicatorComponent_OnHit::NormalizedAmount' has a wrong offset!");
static_assert(offsetof(HitEffectIndicatorComponent_OnHit, IncidentAngleRelativeToCameraDegrees) == 0x000004, "Member 'HitEffectIndicatorComponent_OnHit::IncidentAngleRelativeToCameraDegrees' has a wrong offset!");

// Function Indiana.HitEffectIndicatorComponent.OnTakeDamage
// 0x0028 (0x0028 - 0x0000)
struct HitEffectIndicatorComponent_OnTakeDamage final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UDamageType*                      DamageType;                                        // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            InstigatedBy;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HitEffectIndicatorComponent_OnTakeDamage) == 0x000008, "Wrong alignment on HitEffectIndicatorComponent_OnTakeDamage");
static_assert(sizeof(HitEffectIndicatorComponent_OnTakeDamage) == 0x000028, "Wrong size on HitEffectIndicatorComponent_OnTakeDamage");
static_assert(offsetof(HitEffectIndicatorComponent_OnTakeDamage, DamagedActor) == 0x000000, "Member 'HitEffectIndicatorComponent_OnTakeDamage::DamagedActor' has a wrong offset!");
static_assert(offsetof(HitEffectIndicatorComponent_OnTakeDamage, Damage) == 0x000008, "Member 'HitEffectIndicatorComponent_OnTakeDamage::Damage' has a wrong offset!");
static_assert(offsetof(HitEffectIndicatorComponent_OnTakeDamage, DamageType) == 0x000010, "Member 'HitEffectIndicatorComponent_OnTakeDamage::DamageType' has a wrong offset!");
static_assert(offsetof(HitEffectIndicatorComponent_OnTakeDamage, InstigatedBy) == 0x000018, "Member 'HitEffectIndicatorComponent_OnTakeDamage::InstigatedBy' has a wrong offset!");
static_assert(offsetof(HitEffectIndicatorComponent_OnTakeDamage, DamageCauser) == 0x000020, "Member 'HitEffectIndicatorComponent_OnTakeDamage::DamageCauser' has a wrong offset!");

// Function Indiana.HUDWidget.QueueLevelUpNotification
// 0x0004 (0x0004 - 0x0000)
struct HUDWidget_QueueLevelUpNotification final
{
public:
	int32                                         NewLevel;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDWidget_QueueLevelUpNotification) == 0x000004, "Wrong alignment on HUDWidget_QueueLevelUpNotification");
static_assert(sizeof(HUDWidget_QueueLevelUpNotification) == 0x000004, "Wrong size on HUDWidget_QueueLevelUpNotification");
static_assert(offsetof(HUDWidget_QueueLevelUpNotification, NewLevel) == 0x000000, "Member 'HUDWidget_QueueLevelUpNotification::NewLevel' has a wrong offset!");

// Function Indiana.HUDWidget.GetCharacterOverview
// 0x0008 (0x0008 - 0x0000)
struct HUDWidget_GetCharacterOverview final
{
public:
	class UCharacterOverviewWidget*               ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDWidget_GetCharacterOverview) == 0x000008, "Wrong alignment on HUDWidget_GetCharacterOverview");
static_assert(sizeof(HUDWidget_GetCharacterOverview) == 0x000008, "Wrong size on HUDWidget_GetCharacterOverview");
static_assert(offsetof(HUDWidget_GetCharacterOverview, ReturnValue) == 0x000000, "Member 'HUDWidget_GetCharacterOverview::ReturnValue' has a wrong offset!");

// Function Indiana.StatModifierStatusEffect.OnSkillUpdated
// 0x0008 (0x0008 - 0x0000)
struct StatModifierStatusEffect_OnSkillUpdated final
{
public:
	ESkill                                        UpdatedSkill;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NewValue;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatModifierStatusEffect_OnSkillUpdated) == 0x000004, "Wrong alignment on StatModifierStatusEffect_OnSkillUpdated");
static_assert(sizeof(StatModifierStatusEffect_OnSkillUpdated) == 0x000008, "Wrong size on StatModifierStatusEffect_OnSkillUpdated");
static_assert(offsetof(StatModifierStatusEffect_OnSkillUpdated, UpdatedSkill) == 0x000000, "Member 'StatModifierStatusEffect_OnSkillUpdated::UpdatedSkill' has a wrong offset!");
static_assert(offsetof(StatModifierStatusEffect_OnSkillUpdated, NewValue) == 0x000004, "Member 'StatModifierStatusEffect_OnSkillUpdated::NewValue' has a wrong offset!");

// Function Indiana.IndianaAiCharacter.OnActorHiddenChange
// 0x0001 (0x0001 - 0x0000)
struct IndianaAiCharacter_OnActorHiddenChange final
{
public:
	bool                                          bIsHidden;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaAiCharacter_OnActorHiddenChange) == 0x000001, "Wrong alignment on IndianaAiCharacter_OnActorHiddenChange");
static_assert(sizeof(IndianaAiCharacter_OnActorHiddenChange) == 0x000001, "Wrong size on IndianaAiCharacter_OnActorHiddenChange");
static_assert(offsetof(IndianaAiCharacter_OnActorHiddenChange, bIsHidden) == 0x000000, "Member 'IndianaAiCharacter_OnActorHiddenChange::bIsHidden' has a wrong offset!");

// Function Indiana.IndianaAiCharacter.OnAlertStateChange
// 0x0010 (0x0010 - 0x0000)
struct IndianaAiCharacter_OnAlertStateChange final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAlertState                                   PreviousAlertState;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAlertState                                   TargetAlertState;                                  // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestoring;                                        // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaAiCharacter_OnAlertStateChange) == 0x000008, "Wrong alignment on IndianaAiCharacter_OnAlertStateChange");
static_assert(sizeof(IndianaAiCharacter_OnAlertStateChange) == 0x000010, "Wrong size on IndianaAiCharacter_OnAlertStateChange");
static_assert(offsetof(IndianaAiCharacter_OnAlertStateChange, TargetActor) == 0x000000, "Member 'IndianaAiCharacter_OnAlertStateChange::TargetActor' has a wrong offset!");
static_assert(offsetof(IndianaAiCharacter_OnAlertStateChange, PreviousAlertState) == 0x000008, "Member 'IndianaAiCharacter_OnAlertStateChange::PreviousAlertState' has a wrong offset!");
static_assert(offsetof(IndianaAiCharacter_OnAlertStateChange, TargetAlertState) == 0x000009, "Member 'IndianaAiCharacter_OnAlertStateChange::TargetAlertState' has a wrong offset!");
static_assert(offsetof(IndianaAiCharacter_OnAlertStateChange, bRestoring) == 0x00000A, "Member 'IndianaAiCharacter_OnAlertStateChange::bRestoring' has a wrong offset!");

// Function Indiana.IndianaAiCharacter.OnDamageEvent
// 0x0110 (0x0110 - 0x0000)
struct IndianaAiCharacter_OnDamageEvent final
{
public:
	struct FCauseDamageInfo                       CauseDamageInfo;                                   // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaAiCharacter_OnDamageEvent) == 0x000008, "Wrong alignment on IndianaAiCharacter_OnDamageEvent");
static_assert(sizeof(IndianaAiCharacter_OnDamageEvent) == 0x000110, "Wrong size on IndianaAiCharacter_OnDamageEvent");
static_assert(offsetof(IndianaAiCharacter_OnDamageEvent, CauseDamageInfo) == 0x000000, "Member 'IndianaAiCharacter_OnDamageEvent::CauseDamageInfo' has a wrong offset!");

// Function Indiana.IndianaAiCharacter.OnMontageEndDelegate
// 0x0010 (0x0010 - 0x0000)
struct IndianaAiCharacter_OnMontageEndDelegate final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaAiCharacter_OnMontageEndDelegate) == 0x000008, "Wrong alignment on IndianaAiCharacter_OnMontageEndDelegate");
static_assert(sizeof(IndianaAiCharacter_OnMontageEndDelegate) == 0x000010, "Wrong size on IndianaAiCharacter_OnMontageEndDelegate");
static_assert(offsetof(IndianaAiCharacter_OnMontageEndDelegate, Montage) == 0x000000, "Member 'IndianaAiCharacter_OnMontageEndDelegate::Montage' has a wrong offset!");
static_assert(offsetof(IndianaAiCharacter_OnMontageEndDelegate, bInterrupted) == 0x000008, "Member 'IndianaAiCharacter_OnMontageEndDelegate::bInterrupted' has a wrong offset!");

// Function Indiana.IndianaAiCharacter.OnWeaponEndEquip
// 0x0008 (0x0008 - 0x0000)
struct IndianaAiCharacter_OnWeaponEndEquip final
{
public:
	class UWeapon*                                Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaAiCharacter_OnWeaponEndEquip) == 0x000008, "Wrong alignment on IndianaAiCharacter_OnWeaponEndEquip");
static_assert(sizeof(IndianaAiCharacter_OnWeaponEndEquip) == 0x000008, "Wrong size on IndianaAiCharacter_OnWeaponEndEquip");
static_assert(offsetof(IndianaAiCharacter_OnWeaponEndEquip, Weapon) == 0x000000, "Member 'IndianaAiCharacter_OnWeaponEndEquip::Weapon' has a wrong offset!");

// Function Indiana.IndianaAiCharacter.OnWeaponEndUnequip
// 0x0008 (0x0008 - 0x0000)
struct IndianaAiCharacter_OnWeaponEndUnequip final
{
public:
	class UWeapon*                                Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaAiCharacter_OnWeaponEndUnequip) == 0x000008, "Wrong alignment on IndianaAiCharacter_OnWeaponEndUnequip");
static_assert(sizeof(IndianaAiCharacter_OnWeaponEndUnequip) == 0x000008, "Wrong size on IndianaAiCharacter_OnWeaponEndUnequip");
static_assert(offsetof(IndianaAiCharacter_OnWeaponEndUnequip, Weapon) == 0x000000, "Member 'IndianaAiCharacter_OnWeaponEndUnequip::Weapon' has a wrong offset!");

// Function Indiana.IndianaAiCharacter.SetIsInLowGrav
// 0x0001 (0x0001 - 0x0000)
struct IndianaAiCharacter_SetIsInLowGrav final
{
public:
	bool                                          bNewIsInLowGrav;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaAiCharacter_SetIsInLowGrav) == 0x000001, "Wrong alignment on IndianaAiCharacter_SetIsInLowGrav");
static_assert(sizeof(IndianaAiCharacter_SetIsInLowGrav) == 0x000001, "Wrong size on IndianaAiCharacter_SetIsInLowGrav");
static_assert(offsetof(IndianaAiCharacter_SetIsInLowGrav, bNewIsInLowGrav) == 0x000000, "Member 'IndianaAiCharacter_SetIsInLowGrav::bNewIsInLowGrav' has a wrong offset!");

// Function Indiana.IndianaAiCharacter.SetRagdoll
// 0x0002 (0x0002 - 0x0000)
struct IndianaAiCharacter_SetRagdoll final
{
public:
	bool                                          bInIsRagdoll;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInstantFreeze;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaAiCharacter_SetRagdoll) == 0x000001, "Wrong alignment on IndianaAiCharacter_SetRagdoll");
static_assert(sizeof(IndianaAiCharacter_SetRagdoll) == 0x000002, "Wrong size on IndianaAiCharacter_SetRagdoll");
static_assert(offsetof(IndianaAiCharacter_SetRagdoll, bInIsRagdoll) == 0x000000, "Member 'IndianaAiCharacter_SetRagdoll::bInIsRagdoll' has a wrong offset!");
static_assert(offsetof(IndianaAiCharacter_SetRagdoll, bInstantFreeze) == 0x000001, "Member 'IndianaAiCharacter_SetRagdoll::bInstantFreeze' has a wrong offset!");

// Function Indiana.IndianaAiCharacter.GetOwningController
// 0x0008 (0x0008 - 0x0000)
struct IndianaAiCharacter_GetOwningController final
{
public:
	class AIndianaAiController*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaAiCharacter_GetOwningController) == 0x000008, "Wrong alignment on IndianaAiCharacter_GetOwningController");
static_assert(sizeof(IndianaAiCharacter_GetOwningController) == 0x000008, "Wrong size on IndianaAiCharacter_GetOwningController");
static_assert(offsetof(IndianaAiCharacter_GetOwningController, ReturnValue) == 0x000000, "Member 'IndianaAiCharacter_GetOwningController::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaAiCharacter.IsInCombat
// 0x0001 (0x0001 - 0x0000)
struct IndianaAiCharacter_IsInCombat final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaAiCharacter_IsInCombat) == 0x000001, "Wrong alignment on IndianaAiCharacter_IsInCombat");
static_assert(sizeof(IndianaAiCharacter_IsInCombat) == 0x000001, "Wrong size on IndianaAiCharacter_IsInCombat");
static_assert(offsetof(IndianaAiCharacter_IsInCombat, ReturnValue) == 0x000000, "Member 'IndianaAiCharacter_IsInCombat::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaAiController.AIScriptAttack
// 0x0010 (0x0010 - 0x0000)
struct IndianaAiController_AIScriptAttack final
{
public:
	class AIndianaAiCharacter*                    InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AIndianaCharacter*                      InTargetCharacter;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaAiController_AIScriptAttack) == 0x000008, "Wrong alignment on IndianaAiController_AIScriptAttack");
static_assert(sizeof(IndianaAiController_AIScriptAttack) == 0x000010, "Wrong size on IndianaAiController_AIScriptAttack");
static_assert(offsetof(IndianaAiController_AIScriptAttack, InCharacter) == 0x000000, "Member 'IndianaAiController_AIScriptAttack::InCharacter' has a wrong offset!");
static_assert(offsetof(IndianaAiController_AIScriptAttack, InTargetCharacter) == 0x000008, "Member 'IndianaAiController_AIScriptAttack::InTargetCharacter' has a wrong offset!");

// Function Indiana.IndianaAiController.AIScriptAttackEncounter
// 0x0010 (0x0010 - 0x0000)
struct IndianaAiController_AIScriptAttackEncounter final
{
public:
	class AEncounter*                             InEncounter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AIndianaCharacter*                      InTargetCharacter;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaAiController_AIScriptAttackEncounter) == 0x000008, "Wrong alignment on IndianaAiController_AIScriptAttackEncounter");
static_assert(sizeof(IndianaAiController_AIScriptAttackEncounter) == 0x000010, "Wrong size on IndianaAiController_AIScriptAttackEncounter");
static_assert(offsetof(IndianaAiController_AIScriptAttackEncounter, InEncounter) == 0x000000, "Member 'IndianaAiController_AIScriptAttackEncounter::InEncounter' has a wrong offset!");
static_assert(offsetof(IndianaAiController_AIScriptAttackEncounter, InTargetCharacter) == 0x000008, "Member 'IndianaAiController_AIScriptAttackEncounter::InTargetCharacter' has a wrong offset!");

// Function Indiana.IndianaAiController.AIScriptCharactersAttackCharacters
// 0x0020 (0x0020 - 0x0000)
struct IndianaAiController_AIScriptCharactersAttackCharacters final
{
public:
	TArray<class AIndianaAiCharacter*>            InCharacters;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AIndianaAiCharacter*>            InTargetCharacters;                                // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaAiController_AIScriptCharactersAttackCharacters) == 0x000008, "Wrong alignment on IndianaAiController_AIScriptCharactersAttackCharacters");
static_assert(sizeof(IndianaAiController_AIScriptCharactersAttackCharacters) == 0x000020, "Wrong size on IndianaAiController_AIScriptCharactersAttackCharacters");
static_assert(offsetof(IndianaAiController_AIScriptCharactersAttackCharacters, InCharacters) == 0x000000, "Member 'IndianaAiController_AIScriptCharactersAttackCharacters::InCharacters' has a wrong offset!");
static_assert(offsetof(IndianaAiController_AIScriptCharactersAttackCharacters, InTargetCharacters) == 0x000010, "Member 'IndianaAiController_AIScriptCharactersAttackCharacters::InTargetCharacters' has a wrong offset!");

// Function Indiana.IndianaAiController.AIScriptClearScripts
// 0x0008 (0x0008 - 0x0000)
struct IndianaAiController_AIScriptClearScripts final
{
public:
	class AIndianaAiCharacter*                    InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaAiController_AIScriptClearScripts) == 0x000008, "Wrong alignment on IndianaAiController_AIScriptClearScripts");
static_assert(sizeof(IndianaAiController_AIScriptClearScripts) == 0x000008, "Wrong size on IndianaAiController_AIScriptClearScripts");
static_assert(offsetof(IndianaAiController_AIScriptClearScripts, InCharacter) == 0x000000, "Member 'IndianaAiController_AIScriptClearScripts::InCharacter' has a wrong offset!");

// Function Indiana.IndianaAiController.AIScriptEncounterAttack
// 0x0010 (0x0010 - 0x0000)
struct IndianaAiController_AIScriptEncounterAttack final
{
public:
	class AIndianaAiCharacter*                    InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEncounter*                             InTargetEncounter;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaAiController_AIScriptEncounterAttack) == 0x000008, "Wrong alignment on IndianaAiController_AIScriptEncounterAttack");
static_assert(sizeof(IndianaAiController_AIScriptEncounterAttack) == 0x000010, "Wrong size on IndianaAiController_AIScriptEncounterAttack");
static_assert(offsetof(IndianaAiController_AIScriptEncounterAttack, InCharacter) == 0x000000, "Member 'IndianaAiController_AIScriptEncounterAttack::InCharacter' has a wrong offset!");
static_assert(offsetof(IndianaAiController_AIScriptEncounterAttack, InTargetEncounter) == 0x000008, "Member 'IndianaAiController_AIScriptEncounterAttack::InTargetEncounter' has a wrong offset!");

// Function Indiana.IndianaAiController.AIScriptEncounterAttackEncounter
// 0x0010 (0x0010 - 0x0000)
struct IndianaAiController_AIScriptEncounterAttackEncounter final
{
public:
	class AEncounter*                             InEncounter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEncounter*                             InTargetEncounter;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaAiController_AIScriptEncounterAttackEncounter) == 0x000008, "Wrong alignment on IndianaAiController_AIScriptEncounterAttackEncounter");
static_assert(sizeof(IndianaAiController_AIScriptEncounterAttackEncounter) == 0x000010, "Wrong size on IndianaAiController_AIScriptEncounterAttackEncounter");
static_assert(offsetof(IndianaAiController_AIScriptEncounterAttackEncounter, InEncounter) == 0x000000, "Member 'IndianaAiController_AIScriptEncounterAttackEncounter::InEncounter' has a wrong offset!");
static_assert(offsetof(IndianaAiController_AIScriptEncounterAttackEncounter, InTargetEncounter) == 0x000008, "Member 'IndianaAiController_AIScriptEncounterAttackEncounter::InTargetEncounter' has a wrong offset!");

// Function Indiana.IndianaAiController.AIScriptFollowPlayer
// 0x0008 (0x0008 - 0x0000)
struct IndianaAiController_AIScriptFollowPlayer final
{
public:
	class AIndianaAiCharacter*                    InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaAiController_AIScriptFollowPlayer) == 0x000008, "Wrong alignment on IndianaAiController_AIScriptFollowPlayer");
static_assert(sizeof(IndianaAiController_AIScriptFollowPlayer) == 0x000008, "Wrong size on IndianaAiController_AIScriptFollowPlayer");
static_assert(offsetof(IndianaAiController_AIScriptFollowPlayer, InCharacter) == 0x000000, "Member 'IndianaAiController_AIScriptFollowPlayer::InCharacter' has a wrong offset!");

// Function Indiana.IndianaAiController.AIScriptIdle
// 0x0008 (0x0008 - 0x0000)
struct IndianaAiController_AIScriptIdle final
{
public:
	class AIndianaAiCharacter*                    InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaAiController_AIScriptIdle) == 0x000008, "Wrong alignment on IndianaAiController_AIScriptIdle");
static_assert(sizeof(IndianaAiController_AIScriptIdle) == 0x000008, "Wrong size on IndianaAiController_AIScriptIdle");
static_assert(offsetof(IndianaAiController_AIScriptIdle, InCharacter) == 0x000000, "Member 'IndianaAiController_AIScriptIdle::InCharacter' has a wrong offset!");

// Function Indiana.IndianaAiController.AIScriptPatrol
// 0x0010 (0x0010 - 0x0000)
struct IndianaAiController_AIScriptPatrol final
{
public:
	class AIndianaAiCharacter*                    InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APatrolNode*                            InPatrolNode;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaAiController_AIScriptPatrol) == 0x000008, "Wrong alignment on IndianaAiController_AIScriptPatrol");
static_assert(sizeof(IndianaAiController_AIScriptPatrol) == 0x000010, "Wrong size on IndianaAiController_AIScriptPatrol");
static_assert(offsetof(IndianaAiController_AIScriptPatrol, InCharacter) == 0x000000, "Member 'IndianaAiController_AIScriptPatrol::InCharacter' has a wrong offset!");
static_assert(offsetof(IndianaAiController_AIScriptPatrol, InPatrolNode) == 0x000008, "Member 'IndianaAiController_AIScriptPatrol::InPatrolNode' has a wrong offset!");

// Function Indiana.IndianaAiController.AIScriptPatrolInterruptible
// 0x0010 (0x0010 - 0x0000)
struct IndianaAiController_AIScriptPatrolInterruptible final
{
public:
	class AIndianaAiCharacter*                    InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APatrolNode*                            InPatrolNode;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaAiController_AIScriptPatrolInterruptible) == 0x000008, "Wrong alignment on IndianaAiController_AIScriptPatrolInterruptible");
static_assert(sizeof(IndianaAiController_AIScriptPatrolInterruptible) == 0x000010, "Wrong size on IndianaAiController_AIScriptPatrolInterruptible");
static_assert(offsetof(IndianaAiController_AIScriptPatrolInterruptible, InCharacter) == 0x000000, "Member 'IndianaAiController_AIScriptPatrolInterruptible::InCharacter' has a wrong offset!");
static_assert(offsetof(IndianaAiController_AIScriptPatrolInterruptible, InPatrolNode) == 0x000008, "Member 'IndianaAiController_AIScriptPatrolInterruptible::InPatrolNode' has a wrong offset!");

// Function Indiana.IndianaAiController.AIScriptWander
// 0x0008 (0x0008 - 0x0000)
struct IndianaAiController_AIScriptWander final
{
public:
	class AIndianaAiCharacter*                    InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaAiController_AIScriptWander) == 0x000008, "Wrong alignment on IndianaAiController_AIScriptWander");
static_assert(sizeof(IndianaAiController_AIScriptWander) == 0x000008, "Wrong size on IndianaAiController_AIScriptWander");
static_assert(offsetof(IndianaAiController_AIScriptWander, InCharacter) == 0x000000, "Member 'IndianaAiController_AIScriptWander::InCharacter' has a wrong offset!");

// Function Indiana.IndianaAiController.OnBehaviorStateChange
// 0x0010 (0x0010 - 0x0000)
struct IndianaAiController_OnBehaviorStateChange final
{
public:
	const class UBehaviorStateInfo*               OldBehaviorStateInfo;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UBehaviorStateInfo*               NewBehaviorStateInfo;                              // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaAiController_OnBehaviorStateChange) == 0x000008, "Wrong alignment on IndianaAiController_OnBehaviorStateChange");
static_assert(sizeof(IndianaAiController_OnBehaviorStateChange) == 0x000010, "Wrong size on IndianaAiController_OnBehaviorStateChange");
static_assert(offsetof(IndianaAiController_OnBehaviorStateChange, OldBehaviorStateInfo) == 0x000000, "Member 'IndianaAiController_OnBehaviorStateChange::OldBehaviorStateInfo' has a wrong offset!");
static_assert(offsetof(IndianaAiController_OnBehaviorStateChange, NewBehaviorStateInfo) == 0x000008, "Member 'IndianaAiController_OnBehaviorStateChange::NewBehaviorStateInfo' has a wrong offset!");

// Function Indiana.IndianaAiController.OnCombatStateChange
// 0x0002 (0x0002 - 0x0000)
struct IndianaAiController_OnCombatStateChange final
{
public:
	bool                                          bInCombat;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestoring;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaAiController_OnCombatStateChange) == 0x000001, "Wrong alignment on IndianaAiController_OnCombatStateChange");
static_assert(sizeof(IndianaAiController_OnCombatStateChange) == 0x000002, "Wrong size on IndianaAiController_OnCombatStateChange");
static_assert(offsetof(IndianaAiController_OnCombatStateChange, bInCombat) == 0x000000, "Member 'IndianaAiController_OnCombatStateChange::bInCombat' has a wrong offset!");
static_assert(offsetof(IndianaAiController_OnCombatStateChange, bRestoring) == 0x000001, "Member 'IndianaAiController_OnCombatStateChange::bRestoring' has a wrong offset!");

// Function Indiana.IndianaAiController.OnMeleeActionEnd
// 0x0001 (0x0001 - 0x0000)
struct IndianaAiController_OnMeleeActionEnd final
{
public:
	EMeleeAction                                  ActionEnded;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaAiController_OnMeleeActionEnd) == 0x000001, "Wrong alignment on IndianaAiController_OnMeleeActionEnd");
static_assert(sizeof(IndianaAiController_OnMeleeActionEnd) == 0x000001, "Wrong size on IndianaAiController_OnMeleeActionEnd");
static_assert(offsetof(IndianaAiController_OnMeleeActionEnd, ActionEnded) == 0x000000, "Member 'IndianaAiController_OnMeleeActionEnd::ActionEnded' has a wrong offset!");

// Function Indiana.IndianaAiController.OnNewStateOfBeing
// 0x0002 (0x0002 - 0x0000)
struct IndianaAiController_OnNewStateOfBeing final
{
public:
	EStateOfBeing                                 NewStateOfBeing;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStateOfBeing                                 OldStateOfBeing;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaAiController_OnNewStateOfBeing) == 0x000001, "Wrong alignment on IndianaAiController_OnNewStateOfBeing");
static_assert(sizeof(IndianaAiController_OnNewStateOfBeing) == 0x000002, "Wrong size on IndianaAiController_OnNewStateOfBeing");
static_assert(offsetof(IndianaAiController_OnNewStateOfBeing, NewStateOfBeing) == 0x000000, "Member 'IndianaAiController_OnNewStateOfBeing::NewStateOfBeing' has a wrong offset!");
static_assert(offsetof(IndianaAiController_OnNewStateOfBeing, OldStateOfBeing) == 0x000001, "Member 'IndianaAiController_OnNewStateOfBeing::OldStateOfBeing' has a wrong offset!");

// Function Indiana.IndianaAiController.OnRestoredStateOfBeing
// 0x0001 (0x0001 - 0x0000)
struct IndianaAiController_OnRestoredStateOfBeing final
{
public:
	EStateOfBeing                                 RestoredStateOfBeing;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaAiController_OnRestoredStateOfBeing) == 0x000001, "Wrong alignment on IndianaAiController_OnRestoredStateOfBeing");
static_assert(sizeof(IndianaAiController_OnRestoredStateOfBeing) == 0x000001, "Wrong size on IndianaAiController_OnRestoredStateOfBeing");
static_assert(offsetof(IndianaAiController_OnRestoredStateOfBeing, RestoredStateOfBeing) == 0x000000, "Member 'IndianaAiController_OnRestoredStateOfBeing::RestoredStateOfBeing' has a wrong offset!");

// Function Indiana.IndianaAiController.OnSwitchedTarget
// 0x0018 (0x0018 - 0x0000)
struct IndianaAiController_OnSwitchedTarget final
{
public:
	class AActor*                                 OldTarget;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 NewTarget;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestoring;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaAiController_OnSwitchedTarget) == 0x000008, "Wrong alignment on IndianaAiController_OnSwitchedTarget");
static_assert(sizeof(IndianaAiController_OnSwitchedTarget) == 0x000018, "Wrong size on IndianaAiController_OnSwitchedTarget");
static_assert(offsetof(IndianaAiController_OnSwitchedTarget, OldTarget) == 0x000000, "Member 'IndianaAiController_OnSwitchedTarget::OldTarget' has a wrong offset!");
static_assert(offsetof(IndianaAiController_OnSwitchedTarget, NewTarget) == 0x000008, "Member 'IndianaAiController_OnSwitchedTarget::NewTarget' has a wrong offset!");
static_assert(offsetof(IndianaAiController_OnSwitchedTarget, bRestoring) == 0x000010, "Member 'IndianaAiController_OnSwitchedTarget::bRestoring' has a wrong offset!");

// Function Indiana.IndianaAiController.OnTakeDamage
// 0x0110 (0x0110 - 0x0000)
struct IndianaAiController_OnTakeDamage final
{
public:
	struct FCauseDamageInfo                       CauseDamageInfo;                                   // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaAiController_OnTakeDamage) == 0x000008, "Wrong alignment on IndianaAiController_OnTakeDamage");
static_assert(sizeof(IndianaAiController_OnTakeDamage) == 0x000110, "Wrong size on IndianaAiController_OnTakeDamage");
static_assert(offsetof(IndianaAiController_OnTakeDamage, CauseDamageInfo) == 0x000000, "Member 'IndianaAiController_OnTakeDamage::CauseDamageInfo' has a wrong offset!");

// Function Indiana.IndianaAiController.GetCurrentTargetDistance
// 0x0004 (0x0004 - 0x0000)
struct IndianaAiController_GetCurrentTargetDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaAiController_GetCurrentTargetDistance) == 0x000004, "Wrong alignment on IndianaAiController_GetCurrentTargetDistance");
static_assert(sizeof(IndianaAiController_GetCurrentTargetDistance) == 0x000004, "Wrong size on IndianaAiController_GetCurrentTargetDistance");
static_assert(offsetof(IndianaAiController_GetCurrentTargetDistance, ReturnValue) == 0x000000, "Member 'IndianaAiController_GetCurrentTargetDistance::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaAiController.GetFootstepAwarenessIncrease
// 0x0020 (0x0020 - 0x0000)
struct IndianaAiController_GetFootstepAwarenessIncrease final
{
public:
	bool                                          bIsStealthed;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OwnerPerceptionSkill;                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetSneakSkill;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAlertState                                   InAlertState;                                      // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BaseFootstepAwareness;                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SoundRadius;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaAiController_GetFootstepAwarenessIncrease) == 0x000004, "Wrong alignment on IndianaAiController_GetFootstepAwarenessIncrease");
static_assert(sizeof(IndianaAiController_GetFootstepAwarenessIncrease) == 0x000020, "Wrong size on IndianaAiController_GetFootstepAwarenessIncrease");
static_assert(offsetof(IndianaAiController_GetFootstepAwarenessIncrease, bIsStealthed) == 0x000000, "Member 'IndianaAiController_GetFootstepAwarenessIncrease::bIsStealthed' has a wrong offset!");
static_assert(offsetof(IndianaAiController_GetFootstepAwarenessIncrease, OwnerPerceptionSkill) == 0x000004, "Member 'IndianaAiController_GetFootstepAwarenessIncrease::OwnerPerceptionSkill' has a wrong offset!");
static_assert(offsetof(IndianaAiController_GetFootstepAwarenessIncrease, TargetSneakSkill) == 0x000008, "Member 'IndianaAiController_GetFootstepAwarenessIncrease::TargetSneakSkill' has a wrong offset!");
static_assert(offsetof(IndianaAiController_GetFootstepAwarenessIncrease, InAlertState) == 0x00000C, "Member 'IndianaAiController_GetFootstepAwarenessIncrease::InAlertState' has a wrong offset!");
static_assert(offsetof(IndianaAiController_GetFootstepAwarenessIncrease, BaseFootstepAwareness) == 0x000010, "Member 'IndianaAiController_GetFootstepAwarenessIncrease::BaseFootstepAwareness' has a wrong offset!");
static_assert(offsetof(IndianaAiController_GetFootstepAwarenessIncrease, Distance) == 0x000014, "Member 'IndianaAiController_GetFootstepAwarenessIncrease::Distance' has a wrong offset!");
static_assert(offsetof(IndianaAiController_GetFootstepAwarenessIncrease, SoundRadius) == 0x000018, "Member 'IndianaAiController_GetFootstepAwarenessIncrease::SoundRadius' has a wrong offset!");
static_assert(offsetof(IndianaAiController_GetFootstepAwarenessIncrease, ReturnValue) == 0x00001C, "Member 'IndianaAiController_GetFootstepAwarenessIncrease::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaAiController.GetSightAwarenessDecreaseRate
// 0x0014 (0x0014 - 0x0000)
struct IndianaAiController_GetSightAwarenessDecreaseRate final
{
public:
	bool                                          bIsStealthed;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OwnerPerceptionSkill;                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetSneakSkill;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAlertState                                   InAlertState;                                      // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLost;                                             // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeadBodyKiller;                                   // 0x000E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaAiController_GetSightAwarenessDecreaseRate) == 0x000004, "Wrong alignment on IndianaAiController_GetSightAwarenessDecreaseRate");
static_assert(sizeof(IndianaAiController_GetSightAwarenessDecreaseRate) == 0x000014, "Wrong size on IndianaAiController_GetSightAwarenessDecreaseRate");
static_assert(offsetof(IndianaAiController_GetSightAwarenessDecreaseRate, bIsStealthed) == 0x000000, "Member 'IndianaAiController_GetSightAwarenessDecreaseRate::bIsStealthed' has a wrong offset!");
static_assert(offsetof(IndianaAiController_GetSightAwarenessDecreaseRate, OwnerPerceptionSkill) == 0x000004, "Member 'IndianaAiController_GetSightAwarenessDecreaseRate::OwnerPerceptionSkill' has a wrong offset!");
static_assert(offsetof(IndianaAiController_GetSightAwarenessDecreaseRate, TargetSneakSkill) == 0x000008, "Member 'IndianaAiController_GetSightAwarenessDecreaseRate::TargetSneakSkill' has a wrong offset!");
static_assert(offsetof(IndianaAiController_GetSightAwarenessDecreaseRate, InAlertState) == 0x00000C, "Member 'IndianaAiController_GetSightAwarenessDecreaseRate::InAlertState' has a wrong offset!");
static_assert(offsetof(IndianaAiController_GetSightAwarenessDecreaseRate, bLost) == 0x00000D, "Member 'IndianaAiController_GetSightAwarenessDecreaseRate::bLost' has a wrong offset!");
static_assert(offsetof(IndianaAiController_GetSightAwarenessDecreaseRate, bDeadBodyKiller) == 0x00000E, "Member 'IndianaAiController_GetSightAwarenessDecreaseRate::bDeadBodyKiller' has a wrong offset!");
static_assert(offsetof(IndianaAiController_GetSightAwarenessDecreaseRate, ReturnValue) == 0x000010, "Member 'IndianaAiController_GetSightAwarenessDecreaseRate::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaAiController.GetSightAwarenessIncreaseRate
// 0x0020 (0x0020 - 0x0000)
struct IndianaAiController_GetSightAwarenessIncreaseRate final
{
public:
	bool                                          bIsStealthed;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OwnerPerceptionSkill;                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetSneakSkill;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAlertState                                   InAlertState;                                      // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Distance;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SightRadius;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowTargeting;                                   // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaAiController_GetSightAwarenessIncreaseRate) == 0x000004, "Wrong alignment on IndianaAiController_GetSightAwarenessIncreaseRate");
static_assert(sizeof(IndianaAiController_GetSightAwarenessIncreaseRate) == 0x000020, "Wrong size on IndianaAiController_GetSightAwarenessIncreaseRate");
static_assert(offsetof(IndianaAiController_GetSightAwarenessIncreaseRate, bIsStealthed) == 0x000000, "Member 'IndianaAiController_GetSightAwarenessIncreaseRate::bIsStealthed' has a wrong offset!");
static_assert(offsetof(IndianaAiController_GetSightAwarenessIncreaseRate, OwnerPerceptionSkill) == 0x000004, "Member 'IndianaAiController_GetSightAwarenessIncreaseRate::OwnerPerceptionSkill' has a wrong offset!");
static_assert(offsetof(IndianaAiController_GetSightAwarenessIncreaseRate, TargetSneakSkill) == 0x000008, "Member 'IndianaAiController_GetSightAwarenessIncreaseRate::TargetSneakSkill' has a wrong offset!");
static_assert(offsetof(IndianaAiController_GetSightAwarenessIncreaseRate, InAlertState) == 0x00000C, "Member 'IndianaAiController_GetSightAwarenessIncreaseRate::InAlertState' has a wrong offset!");
static_assert(offsetof(IndianaAiController_GetSightAwarenessIncreaseRate, Distance) == 0x000010, "Member 'IndianaAiController_GetSightAwarenessIncreaseRate::Distance' has a wrong offset!");
static_assert(offsetof(IndianaAiController_GetSightAwarenessIncreaseRate, SightRadius) == 0x000014, "Member 'IndianaAiController_GetSightAwarenessIncreaseRate::SightRadius' has a wrong offset!");
static_assert(offsetof(IndianaAiController_GetSightAwarenessIncreaseRate, bAllowTargeting) == 0x000018, "Member 'IndianaAiController_GetSightAwarenessIncreaseRate::bAllowTargeting' has a wrong offset!");
static_assert(offsetof(IndianaAiController_GetSightAwarenessIncreaseRate, ReturnValue) == 0x00001C, "Member 'IndianaAiController_GetSightAwarenessIncreaseRate::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaAIPerceptionComponent.OnCharacterDeath
// 0x0118 (0x0118 - 0x0000)
struct IndianaAIPerceptionComponent_OnCharacterDeath final
{
public:
	class AActor*                                 Instigator;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCauseDamageInfo                       CauseDamageInfo;                                   // 0x0008(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaAIPerceptionComponent_OnCharacterDeath) == 0x000008, "Wrong alignment on IndianaAIPerceptionComponent_OnCharacterDeath");
static_assert(sizeof(IndianaAIPerceptionComponent_OnCharacterDeath) == 0x000118, "Wrong size on IndianaAIPerceptionComponent_OnCharacterDeath");
static_assert(offsetof(IndianaAIPerceptionComponent_OnCharacterDeath, Instigator) == 0x000000, "Member 'IndianaAIPerceptionComponent_OnCharacterDeath::Instigator' has a wrong offset!");
static_assert(offsetof(IndianaAIPerceptionComponent_OnCharacterDeath, CauseDamageInfo) == 0x000008, "Member 'IndianaAIPerceptionComponent_OnCharacterDeath::CauseDamageInfo' has a wrong offset!");

// Function Indiana.IndianaAIPerceptionComponent.OnCombatStateChanged
// 0x0002 (0x0002 - 0x0000)
struct IndianaAIPerceptionComponent_OnCombatStateChanged final
{
public:
	bool                                          bIsInCombat;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestoring;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaAIPerceptionComponent_OnCombatStateChanged) == 0x000001, "Wrong alignment on IndianaAIPerceptionComponent_OnCombatStateChanged");
static_assert(sizeof(IndianaAIPerceptionComponent_OnCombatStateChanged) == 0x000002, "Wrong size on IndianaAIPerceptionComponent_OnCombatStateChanged");
static_assert(offsetof(IndianaAIPerceptionComponent_OnCombatStateChanged, bIsInCombat) == 0x000000, "Member 'IndianaAIPerceptionComponent_OnCombatStateChanged::bIsInCombat' has a wrong offset!");
static_assert(offsetof(IndianaAIPerceptionComponent_OnCombatStateChanged, bRestoring) == 0x000001, "Member 'IndianaAIPerceptionComponent_OnCombatStateChanged::bRestoring' has a wrong offset!");

// Function Indiana.IndianaAIPerceptionComponent.OnGodVisionChanged
// 0x0001 (0x0001 - 0x0000)
struct IndianaAIPerceptionComponent_OnGodVisionChanged final
{
public:
	bool                                          bGodVision;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaAIPerceptionComponent_OnGodVisionChanged) == 0x000001, "Wrong alignment on IndianaAIPerceptionComponent_OnGodVisionChanged");
static_assert(sizeof(IndianaAIPerceptionComponent_OnGodVisionChanged) == 0x000001, "Wrong size on IndianaAIPerceptionComponent_OnGodVisionChanged");
static_assert(offsetof(IndianaAIPerceptionComponent_OnGodVisionChanged, bGodVision) == 0x000000, "Member 'IndianaAIPerceptionComponent_OnGodVisionChanged::bGodVision' has a wrong offset!");

// Function Indiana.IndianaAIPerceptionComponent.OnPerceptionRangeScalarUpdated
// 0x0020 (0x0020 - 0x0000)
struct IndianaAIPerceptionComponent_OnPerceptionRangeScalarUpdated final
{
public:
	struct FGameplayTagContainer                  CreatureType;                                      // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaAIPerceptionComponent_OnPerceptionRangeScalarUpdated) == 0x000008, "Wrong alignment on IndianaAIPerceptionComponent_OnPerceptionRangeScalarUpdated");
static_assert(sizeof(IndianaAIPerceptionComponent_OnPerceptionRangeScalarUpdated) == 0x000020, "Wrong size on IndianaAIPerceptionComponent_OnPerceptionRangeScalarUpdated");
static_assert(offsetof(IndianaAIPerceptionComponent_OnPerceptionRangeScalarUpdated, CreatureType) == 0x000000, "Member 'IndianaAIPerceptionComponent_OnPerceptionRangeScalarUpdated::CreatureType' has a wrong offset!");

// Function Indiana.IndianaAIPerceptionComponent.OnStatUpdated
// 0x0008 (0x0008 - 0x0000)
struct IndianaAIPerceptionComponent_OnStatUpdated final
{
public:
	const class URpgStat*                         Stat;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaAIPerceptionComponent_OnStatUpdated) == 0x000008, "Wrong alignment on IndianaAIPerceptionComponent_OnStatUpdated");
static_assert(sizeof(IndianaAIPerceptionComponent_OnStatUpdated) == 0x000008, "Wrong size on IndianaAIPerceptionComponent_OnStatUpdated");
static_assert(offsetof(IndianaAIPerceptionComponent_OnStatUpdated, Stat) == 0x000000, "Member 'IndianaAIPerceptionComponent_OnStatUpdated::Stat' has a wrong offset!");

// Function Indiana.IndianaBossBar.GetHideAnimation
// 0x0008 (0x0008 - 0x0000)
struct IndianaBossBar_GetHideAnimation final
{
public:
	class UWidgetAnimation*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaBossBar_GetHideAnimation) == 0x000008, "Wrong alignment on IndianaBossBar_GetHideAnimation");
static_assert(sizeof(IndianaBossBar_GetHideAnimation) == 0x000008, "Wrong size on IndianaBossBar_GetHideAnimation");
static_assert(offsetof(IndianaBossBar_GetHideAnimation, ReturnValue) == 0x000000, "Member 'IndianaBossBar_GetHideAnimation::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaBossBar.GetShowAnimation
// 0x0008 (0x0008 - 0x0000)
struct IndianaBossBar_GetShowAnimation final
{
public:
	class UWidgetAnimation*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaBossBar_GetShowAnimation) == 0x000008, "Wrong alignment on IndianaBossBar_GetShowAnimation");
static_assert(sizeof(IndianaBossBar_GetShowAnimation) == 0x000008, "Wrong size on IndianaBossBar_GetShowAnimation");
static_assert(offsetof(IndianaBossBar_GetShowAnimation, ReturnValue) == 0x000000, "Member 'IndianaBossBar_GetShowAnimation::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaBossBar.OnBeginBossFight
// 0x0020 (0x0020 - 0x0000)
struct IndianaBossBar_OnBeginBossFight final
{
public:
	class AIndianaCharacter*                      OwnerCharacter;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BossName;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartingNormalizedHealth;                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaBossBar_OnBeginBossFight) == 0x000008, "Wrong alignment on IndianaBossBar_OnBeginBossFight");
static_assert(sizeof(IndianaBossBar_OnBeginBossFight) == 0x000020, "Wrong size on IndianaBossBar_OnBeginBossFight");
static_assert(offsetof(IndianaBossBar_OnBeginBossFight, OwnerCharacter) == 0x000000, "Member 'IndianaBossBar_OnBeginBossFight::OwnerCharacter' has a wrong offset!");
static_assert(offsetof(IndianaBossBar_OnBeginBossFight, BossName) == 0x000008, "Member 'IndianaBossBar_OnBeginBossFight::BossName' has a wrong offset!");
static_assert(offsetof(IndianaBossBar_OnBeginBossFight, StartingNormalizedHealth) == 0x000018, "Member 'IndianaBossBar_OnBeginBossFight::StartingNormalizedHealth' has a wrong offset!");

// Function Indiana.IndianaBossBar.OnBossHealthChanged
// 0x0004 (0x0004 - 0x0000)
struct IndianaBossBar_OnBossHealthChanged final
{
public:
	float                                         NormalizedHealth;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaBossBar_OnBossHealthChanged) == 0x000004, "Wrong alignment on IndianaBossBar_OnBossHealthChanged");
static_assert(sizeof(IndianaBossBar_OnBossHealthChanged) == 0x000004, "Wrong size on IndianaBossBar_OnBossHealthChanged");
static_assert(offsetof(IndianaBossBar_OnBossHealthChanged, NormalizedHealth) == 0x000000, "Member 'IndianaBossBar_OnBossHealthChanged::NormalizedHealth' has a wrong offset!");

// Function Indiana.IndianaCheatManager.DropAllItemsDebug
// 0x0001 (0x0001 - 0x0000)
struct IndianaCheatManager_DropAllItemsDebug final
{
public:
	bool                                          bSplitStacks;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaCheatManager_DropAllItemsDebug) == 0x000001, "Wrong alignment on IndianaCheatManager_DropAllItemsDebug");
static_assert(sizeof(IndianaCheatManager_DropAllItemsDebug) == 0x000001, "Wrong size on IndianaCheatManager_DropAllItemsDebug");
static_assert(offsetof(IndianaCheatManager_DropAllItemsDebug, bSplitStacks) == 0x000000, "Member 'IndianaCheatManager_DropAllItemsDebug::bSplitStacks' has a wrong offset!");

// Function Indiana.IndianaCheatManager.LootTableDebug
// 0x0018 (0x0018 - 0x0000)
struct IndianaCheatManager_LootTableDebug final
{
public:
	class FString                                 LootTable;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumTimes;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaCheatManager_LootTableDebug) == 0x000008, "Wrong alignment on IndianaCheatManager_LootTableDebug");
static_assert(sizeof(IndianaCheatManager_LootTableDebug) == 0x000018, "Wrong size on IndianaCheatManager_LootTableDebug");
static_assert(offsetof(IndianaCheatManager_LootTableDebug, LootTable) == 0x000000, "Member 'IndianaCheatManager_LootTableDebug::LootTable' has a wrong offset!");
static_assert(offsetof(IndianaCheatManager_LootTableDebug, NumTimes) == 0x000010, "Member 'IndianaCheatManager_LootTableDebug::NumTimes' has a wrong offset!");

// Function Indiana.IndianaCheatManager.SetLevelNPC
// 0x0004 (0x0004 - 0x0000)
struct IndianaCheatManager_SetLevelNPC final
{
public:
	int32                                         NewLevel;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaCheatManager_SetLevelNPC) == 0x000004, "Wrong alignment on IndianaCheatManager_SetLevelNPC");
static_assert(sizeof(IndianaCheatManager_SetLevelNPC) == 0x000004, "Wrong size on IndianaCheatManager_SetLevelNPC");
static_assert(offsetof(IndianaCheatManager_SetLevelNPC, NewLevel) == 0x000000, "Member 'IndianaCheatManager_SetLevelNPC::NewLevel' has a wrong offset!");

// Function Indiana.IndianaDamageType.SetupImpactFx
// 0x0010 (0x0010 - 0x0000)
struct IndianaDamageType_SetupImpactFx final
{
public:
	class UParticleSystemComponent*               ParentEffect;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGraze;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCritical;                                         // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWeakSpot;                                         // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRadial;                                           // 0x000B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaDamageType_SetupImpactFx) == 0x000008, "Wrong alignment on IndianaDamageType_SetupImpactFx");
static_assert(sizeof(IndianaDamageType_SetupImpactFx) == 0x000010, "Wrong size on IndianaDamageType_SetupImpactFx");
static_assert(offsetof(IndianaDamageType_SetupImpactFx, ParentEffect) == 0x000000, "Member 'IndianaDamageType_SetupImpactFx::ParentEffect' has a wrong offset!");
static_assert(offsetof(IndianaDamageType_SetupImpactFx, bGraze) == 0x000008, "Member 'IndianaDamageType_SetupImpactFx::bGraze' has a wrong offset!");
static_assert(offsetof(IndianaDamageType_SetupImpactFx, bCritical) == 0x000009, "Member 'IndianaDamageType_SetupImpactFx::bCritical' has a wrong offset!");
static_assert(offsetof(IndianaDamageType_SetupImpactFx, bWeakSpot) == 0x00000A, "Member 'IndianaDamageType_SetupImpactFx::bWeakSpot' has a wrong offset!");
static_assert(offsetof(IndianaDamageType_SetupImpactFx, bRadial) == 0x00000B, "Member 'IndianaDamageType_SetupImpactFx::bRadial' has a wrong offset!");
static_assert(offsetof(IndianaDamageType_SetupImpactFx, Radius) == 0x00000C, "Member 'IndianaDamageType_SetupImpactFx::Radius' has a wrong offset!");

// Function Indiana.IndianaDamageType.SetupSecondaryImpactFx
// 0x0010 (0x0010 - 0x0000)
struct IndianaDamageType_SetupSecondaryImpactFx final
{
public:
	class UParticleSystemComponent*               ParentEffect;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGraze;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCritical;                                         // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWeakSpot;                                         // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRadial;                                           // 0x000B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaDamageType_SetupSecondaryImpactFx) == 0x000008, "Wrong alignment on IndianaDamageType_SetupSecondaryImpactFx");
static_assert(sizeof(IndianaDamageType_SetupSecondaryImpactFx) == 0x000010, "Wrong size on IndianaDamageType_SetupSecondaryImpactFx");
static_assert(offsetof(IndianaDamageType_SetupSecondaryImpactFx, ParentEffect) == 0x000000, "Member 'IndianaDamageType_SetupSecondaryImpactFx::ParentEffect' has a wrong offset!");
static_assert(offsetof(IndianaDamageType_SetupSecondaryImpactFx, bGraze) == 0x000008, "Member 'IndianaDamageType_SetupSecondaryImpactFx::bGraze' has a wrong offset!");
static_assert(offsetof(IndianaDamageType_SetupSecondaryImpactFx, bCritical) == 0x000009, "Member 'IndianaDamageType_SetupSecondaryImpactFx::bCritical' has a wrong offset!");
static_assert(offsetof(IndianaDamageType_SetupSecondaryImpactFx, bWeakSpot) == 0x00000A, "Member 'IndianaDamageType_SetupSecondaryImpactFx::bWeakSpot' has a wrong offset!");
static_assert(offsetof(IndianaDamageType_SetupSecondaryImpactFx, bRadial) == 0x00000B, "Member 'IndianaDamageType_SetupSecondaryImpactFx::bRadial' has a wrong offset!");
static_assert(offsetof(IndianaDamageType_SetupSecondaryImpactFx, Radius) == 0x00000C, "Member 'IndianaDamageType_SetupSecondaryImpactFx::Radius' has a wrong offset!");

// Function Indiana.IndianaDamageType.TriggerMuzzleFx
// 0x0010 (0x0010 - 0x0000)
struct IndianaDamageType_TriggerMuzzleFx final
{
public:
	class USceneComponent*                        AttachComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFirstPerson;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaDamageType_TriggerMuzzleFx) == 0x000008, "Wrong alignment on IndianaDamageType_TriggerMuzzleFx");
static_assert(sizeof(IndianaDamageType_TriggerMuzzleFx) == 0x000010, "Wrong size on IndianaDamageType_TriggerMuzzleFx");
static_assert(offsetof(IndianaDamageType_TriggerMuzzleFx, AttachComponent) == 0x000000, "Member 'IndianaDamageType_TriggerMuzzleFx::AttachComponent' has a wrong offset!");
static_assert(offsetof(IndianaDamageType_TriggerMuzzleFx, IsFirstPerson) == 0x000008, "Member 'IndianaDamageType_TriggerMuzzleFx::IsFirstPerson' has a wrong offset!");

// Function Indiana.IndianaFormulas.ArmTime
// 0x000C (0x000C - 0x0000)
struct IndianaFormulas_ArmTime final
{
public:
	uint8                                         ExactTrapDifficulty;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerEngineeringSkill;                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaFormulas_ArmTime) == 0x000004, "Wrong alignment on IndianaFormulas_ArmTime");
static_assert(sizeof(IndianaFormulas_ArmTime) == 0x00000C, "Wrong size on IndianaFormulas_ArmTime");
static_assert(offsetof(IndianaFormulas_ArmTime, ExactTrapDifficulty) == 0x000000, "Member 'IndianaFormulas_ArmTime::ExactTrapDifficulty' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_ArmTime, PlayerEngineeringSkill) == 0x000004, "Member 'IndianaFormulas_ArmTime::PlayerEngineeringSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_ArmTime, ReturnValue) == 0x000008, "Member 'IndianaFormulas_ArmTime::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.BaseRepairPartCost
// 0x000C (0x000C - 0x0000)
struct IndianaFormulas_BaseRepairPartCost final
{
public:
	float                                         Durability;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemLevel;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaFormulas_BaseRepairPartCost) == 0x000004, "Wrong alignment on IndianaFormulas_BaseRepairPartCost");
static_assert(sizeof(IndianaFormulas_BaseRepairPartCost) == 0x00000C, "Wrong size on IndianaFormulas_BaseRepairPartCost");
static_assert(offsetof(IndianaFormulas_BaseRepairPartCost, Durability) == 0x000000, "Member 'IndianaFormulas_BaseRepairPartCost::Durability' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BaseRepairPartCost, ItemLevel) == 0x000004, "Member 'IndianaFormulas_BaseRepairPartCost::ItemLevel' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_BaseRepairPartCost, ReturnValue) == 0x000008, "Member 'IndianaFormulas_BaseRepairPartCost::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.CalculateGadgetSlots
// 0x0008 (0x0008 - 0x0000)
struct IndianaFormulas_CalculateGadgetSlots final
{
public:
	int32                                         ScienceSkill;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaFormulas_CalculateGadgetSlots) == 0x000004, "Wrong alignment on IndianaFormulas_CalculateGadgetSlots");
static_assert(sizeof(IndianaFormulas_CalculateGadgetSlots) == 0x000008, "Wrong size on IndianaFormulas_CalculateGadgetSlots");
static_assert(offsetof(IndianaFormulas_CalculateGadgetSlots, ScienceSkill) == 0x000000, "Member 'IndianaFormulas_CalculateGadgetSlots::ScienceSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_CalculateGadgetSlots, ReturnValue) == 0x000004, "Member 'IndianaFormulas_CalculateGadgetSlots::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.CalculateIntialMorale
// 0x0008 (0x0008 - 0x0000)
struct IndianaFormulas_CalculateIntialMorale final
{
public:
	int32                                         TemperamentAttribute;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaFormulas_CalculateIntialMorale) == 0x000004, "Wrong alignment on IndianaFormulas_CalculateIntialMorale");
static_assert(sizeof(IndianaFormulas_CalculateIntialMorale) == 0x000008, "Wrong size on IndianaFormulas_CalculateIntialMorale");
static_assert(offsetof(IndianaFormulas_CalculateIntialMorale, TemperamentAttribute) == 0x000000, "Member 'IndianaFormulas_CalculateIntialMorale::TemperamentAttribute' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_CalculateIntialMorale, ReturnValue) == 0x000004, "Member 'IndianaFormulas_CalculateIntialMorale::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.CalculateItemBasePrice
// 0x0010 (0x0010 - 0x0000)
struct IndianaFormulas_CalculateItemBasePrice final
{
public:
	int32                                         BasePrice;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPristine;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Condition;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaFormulas_CalculateItemBasePrice) == 0x000004, "Wrong alignment on IndianaFormulas_CalculateItemBasePrice");
static_assert(sizeof(IndianaFormulas_CalculateItemBasePrice) == 0x000010, "Wrong size on IndianaFormulas_CalculateItemBasePrice");
static_assert(offsetof(IndianaFormulas_CalculateItemBasePrice, BasePrice) == 0x000000, "Member 'IndianaFormulas_CalculateItemBasePrice::BasePrice' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_CalculateItemBasePrice, bPristine) == 0x000004, "Member 'IndianaFormulas_CalculateItemBasePrice::bPristine' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_CalculateItemBasePrice, Condition) == 0x000008, "Member 'IndianaFormulas_CalculateItemBasePrice::Condition' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_CalculateItemBasePrice, ReturnValue) == 0x00000C, "Member 'IndianaFormulas_CalculateItemBasePrice::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.CalculateItemEffectiveness
// 0x0010 (0x0010 - 0x0000)
struct IndianaFormulas_CalculateItemEffectiveness final
{
public:
	const class UDegradableItem*                  Item;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaFormulas_CalculateItemEffectiveness) == 0x000008, "Wrong alignment on IndianaFormulas_CalculateItemEffectiveness");
static_assert(sizeof(IndianaFormulas_CalculateItemEffectiveness) == 0x000010, "Wrong size on IndianaFormulas_CalculateItemEffectiveness");
static_assert(offsetof(IndianaFormulas_CalculateItemEffectiveness, Item) == 0x000000, "Member 'IndianaFormulas_CalculateItemEffectiveness::Item' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_CalculateItemEffectiveness, ReturnValue) == 0x000008, "Member 'IndianaFormulas_CalculateItemEffectiveness::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.CalculateMerchantSkillDiscount
// 0x0008 (0x0008 - 0x0000)
struct IndianaFormulas_CalculateMerchantSkillDiscount final
{
public:
	int32                                         MerchantSkill;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaFormulas_CalculateMerchantSkillDiscount) == 0x000004, "Wrong alignment on IndianaFormulas_CalculateMerchantSkillDiscount");
static_assert(sizeof(IndianaFormulas_CalculateMerchantSkillDiscount) == 0x000008, "Wrong size on IndianaFormulas_CalculateMerchantSkillDiscount");
static_assert(offsetof(IndianaFormulas_CalculateMerchantSkillDiscount, MerchantSkill) == 0x000000, "Member 'IndianaFormulas_CalculateMerchantSkillDiscount::MerchantSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_CalculateMerchantSkillDiscount, ReturnValue) == 0x000004, "Member 'IndianaFormulas_CalculateMerchantSkillDiscount::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.CalculateMoraleAdjustment
// 0x0010 (0x0010 - 0x0000)
struct IndianaFormulas_CalculateMoraleAdjustment final
{
public:
	float                                         AddedMoral;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharmAttribute;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TemperamentAttribute;                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaFormulas_CalculateMoraleAdjustment) == 0x000004, "Wrong alignment on IndianaFormulas_CalculateMoraleAdjustment");
static_assert(sizeof(IndianaFormulas_CalculateMoraleAdjustment) == 0x000010, "Wrong size on IndianaFormulas_CalculateMoraleAdjustment");
static_assert(offsetof(IndianaFormulas_CalculateMoraleAdjustment, AddedMoral) == 0x000000, "Member 'IndianaFormulas_CalculateMoraleAdjustment::AddedMoral' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_CalculateMoraleAdjustment, CharmAttribute) == 0x000004, "Member 'IndianaFormulas_CalculateMoraleAdjustment::CharmAttribute' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_CalculateMoraleAdjustment, TemperamentAttribute) == 0x000008, "Member 'IndianaFormulas_CalculateMoraleAdjustment::TemperamentAttribute' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_CalculateMoraleAdjustment, ReturnValue) == 0x00000C, "Member 'IndianaFormulas_CalculateMoraleAdjustment::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.CalculatePartsRecoveredOnBreakdown
// 0x0010 (0x0010 - 0x0000)
struct IndianaFormulas_CalculatePartsRecoveredOnBreakdown final
{
public:
	float                                         Durability;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemLevel;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFieldBreakdown;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaFormulas_CalculatePartsRecoveredOnBreakdown) == 0x000004, "Wrong alignment on IndianaFormulas_CalculatePartsRecoveredOnBreakdown");
static_assert(sizeof(IndianaFormulas_CalculatePartsRecoveredOnBreakdown) == 0x000010, "Wrong size on IndianaFormulas_CalculatePartsRecoveredOnBreakdown");
static_assert(offsetof(IndianaFormulas_CalculatePartsRecoveredOnBreakdown, Durability) == 0x000000, "Member 'IndianaFormulas_CalculatePartsRecoveredOnBreakdown::Durability' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_CalculatePartsRecoveredOnBreakdown, ItemLevel) == 0x000004, "Member 'IndianaFormulas_CalculatePartsRecoveredOnBreakdown::ItemLevel' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_CalculatePartsRecoveredOnBreakdown, bFieldBreakdown) == 0x000008, "Member 'IndianaFormulas_CalculatePartsRecoveredOnBreakdown::bFieldBreakdown' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_CalculatePartsRecoveredOnBreakdown, ReturnValue) == 0x00000C, "Member 'IndianaFormulas_CalculatePartsRecoveredOnBreakdown::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.CalculateTier1Count
// 0x0008 (0x0008 - 0x0000)
struct IndianaFormulas_CalculateTier1Count final
{
public:
	int32                                         ScienceSkill;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaFormulas_CalculateTier1Count) == 0x000004, "Wrong alignment on IndianaFormulas_CalculateTier1Count");
static_assert(sizeof(IndianaFormulas_CalculateTier1Count) == 0x000008, "Wrong size on IndianaFormulas_CalculateTier1Count");
static_assert(offsetof(IndianaFormulas_CalculateTier1Count, ScienceSkill) == 0x000000, "Member 'IndianaFormulas_CalculateTier1Count::ScienceSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_CalculateTier1Count, ReturnValue) == 0x000004, "Member 'IndianaFormulas_CalculateTier1Count::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.CalculateTier2Count
// 0x0008 (0x0008 - 0x0000)
struct IndianaFormulas_CalculateTier2Count final
{
public:
	int32                                         ScienceSkill;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaFormulas_CalculateTier2Count) == 0x000004, "Wrong alignment on IndianaFormulas_CalculateTier2Count");
static_assert(sizeof(IndianaFormulas_CalculateTier2Count) == 0x000008, "Wrong size on IndianaFormulas_CalculateTier2Count");
static_assert(offsetof(IndianaFormulas_CalculateTier2Count, ScienceSkill) == 0x000000, "Member 'IndianaFormulas_CalculateTier2Count::ScienceSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_CalculateTier2Count, ReturnValue) == 0x000004, "Member 'IndianaFormulas_CalculateTier2Count::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.CalculateTier3Count
// 0x0008 (0x0008 - 0x0000)
struct IndianaFormulas_CalculateTier3Count final
{
public:
	int32                                         ScienceSkill;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaFormulas_CalculateTier3Count) == 0x000004, "Wrong alignment on IndianaFormulas_CalculateTier3Count");
static_assert(sizeof(IndianaFormulas_CalculateTier3Count) == 0x000008, "Wrong size on IndianaFormulas_CalculateTier3Count");
static_assert(offsetof(IndianaFormulas_CalculateTier3Count, ScienceSkill) == 0x000000, "Member 'IndianaFormulas_CalculateTier3Count::ScienceSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_CalculateTier3Count, ReturnValue) == 0x000004, "Member 'IndianaFormulas_CalculateTier3Count::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.CanArm
// 0x000C (0x000C - 0x0000)
struct IndianaFormulas_CanArm final
{
public:
	uint8                                         ExactTrapDifficulty;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerEngineeringSkill;                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaFormulas_CanArm) == 0x000004, "Wrong alignment on IndianaFormulas_CanArm");
static_assert(sizeof(IndianaFormulas_CanArm) == 0x00000C, "Wrong size on IndianaFormulas_CanArm");
static_assert(offsetof(IndianaFormulas_CanArm, ExactTrapDifficulty) == 0x000000, "Member 'IndianaFormulas_CanArm::ExactTrapDifficulty' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_CanArm, PlayerEngineeringSkill) == 0x000004, "Member 'IndianaFormulas_CanArm::PlayerEngineeringSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_CanArm, ReturnValue) == 0x000008, "Member 'IndianaFormulas_CanArm::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.CanDisarm
// 0x000C (0x000C - 0x0000)
struct IndianaFormulas_CanDisarm final
{
public:
	uint8                                         ExactTrapDifficulty;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerEngineeringSkill;                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaFormulas_CanDisarm) == 0x000004, "Wrong alignment on IndianaFormulas_CanDisarm");
static_assert(sizeof(IndianaFormulas_CanDisarm) == 0x00000C, "Wrong size on IndianaFormulas_CanDisarm");
static_assert(offsetof(IndianaFormulas_CanDisarm, ExactTrapDifficulty) == 0x000000, "Member 'IndianaFormulas_CanDisarm::ExactTrapDifficulty' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_CanDisarm, PlayerEngineeringSkill) == 0x000004, "Member 'IndianaFormulas_CanDisarm::PlayerEngineeringSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_CanDisarm, ReturnValue) == 0x000008, "Member 'IndianaFormulas_CanDisarm::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.CanHack
// 0x000C (0x000C - 0x0000)
struct IndianaFormulas_CanHack final
{
public:
	uint8                                         ExactComputerDifficulty;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerHackSkill;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaFormulas_CanHack) == 0x000004, "Wrong alignment on IndianaFormulas_CanHack");
static_assert(sizeof(IndianaFormulas_CanHack) == 0x00000C, "Wrong size on IndianaFormulas_CanHack");
static_assert(offsetof(IndianaFormulas_CanHack, ExactComputerDifficulty) == 0x000000, "Member 'IndianaFormulas_CanHack::ExactComputerDifficulty' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_CanHack, PlayerHackSkill) == 0x000004, "Member 'IndianaFormulas_CanHack::PlayerHackSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_CanHack, ReturnValue) == 0x000008, "Member 'IndianaFormulas_CanHack::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.CanLockpick
// 0x000C (0x000C - 0x0000)
struct IndianaFormulas_CanLockpick final
{
public:
	uint8                                         ExactLockpickDifficulty;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerLockpickSkill;                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaFormulas_CanLockpick) == 0x000004, "Wrong alignment on IndianaFormulas_CanLockpick");
static_assert(sizeof(IndianaFormulas_CanLockpick) == 0x00000C, "Wrong size on IndianaFormulas_CanLockpick");
static_assert(offsetof(IndianaFormulas_CanLockpick, ExactLockpickDifficulty) == 0x000000, "Member 'IndianaFormulas_CanLockpick::ExactLockpickDifficulty' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_CanLockpick, PlayerLockpickSkill) == 0x000004, "Member 'IndianaFormulas_CanLockpick::PlayerLockpickSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_CanLockpick, ReturnValue) == 0x000008, "Member 'IndianaFormulas_CanLockpick::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.ComputeExactHackDifficulty
// 0x0002 (0x0002 - 0x0000)
struct IndianaFormulas_ComputeExactHackDifficulty final
{
public:
	EOCLDifficulty                                HackDifficulty;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaFormulas_ComputeExactHackDifficulty) == 0x000001, "Wrong alignment on IndianaFormulas_ComputeExactHackDifficulty");
static_assert(sizeof(IndianaFormulas_ComputeExactHackDifficulty) == 0x000002, "Wrong size on IndianaFormulas_ComputeExactHackDifficulty");
static_assert(offsetof(IndianaFormulas_ComputeExactHackDifficulty, HackDifficulty) == 0x000000, "Member 'IndianaFormulas_ComputeExactHackDifficulty::HackDifficulty' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_ComputeExactHackDifficulty, ReturnValue) == 0x000001, "Member 'IndianaFormulas_ComputeExactHackDifficulty::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.ComputeExactLockpickDifficulty
// 0x0002 (0x0002 - 0x0000)
struct IndianaFormulas_ComputeExactLockpickDifficulty final
{
public:
	EOCLDifficulty                                LockpickDifficulty;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaFormulas_ComputeExactLockpickDifficulty) == 0x000001, "Wrong alignment on IndianaFormulas_ComputeExactLockpickDifficulty");
static_assert(sizeof(IndianaFormulas_ComputeExactLockpickDifficulty) == 0x000002, "Wrong size on IndianaFormulas_ComputeExactLockpickDifficulty");
static_assert(offsetof(IndianaFormulas_ComputeExactLockpickDifficulty, LockpickDifficulty) == 0x000000, "Member 'IndianaFormulas_ComputeExactLockpickDifficulty::LockpickDifficulty' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_ComputeExactLockpickDifficulty, ReturnValue) == 0x000001, "Member 'IndianaFormulas_ComputeExactLockpickDifficulty::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.ComputeExactTrapDifficulty
// 0x0002 (0x0002 - 0x0000)
struct IndianaFormulas_ComputeExactTrapDifficulty final
{
public:
	ETrapDifficulty                               TrapDifficulty;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaFormulas_ComputeExactTrapDifficulty) == 0x000001, "Wrong alignment on IndianaFormulas_ComputeExactTrapDifficulty");
static_assert(sizeof(IndianaFormulas_ComputeExactTrapDifficulty) == 0x000002, "Wrong size on IndianaFormulas_ComputeExactTrapDifficulty");
static_assert(offsetof(IndianaFormulas_ComputeExactTrapDifficulty, TrapDifficulty) == 0x000000, "Member 'IndianaFormulas_ComputeExactTrapDifficulty::TrapDifficulty' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_ComputeExactTrapDifficulty, ReturnValue) == 0x000001, "Member 'IndianaFormulas_ComputeExactTrapDifficulty::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.ComputeFallingDamagePercent
// 0x0008 (0x0008 - 0x0000)
struct IndianaFormulas_ComputeFallingDamagePercent final
{
public:
	float                                         DistanceFallen;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaFormulas_ComputeFallingDamagePercent) == 0x000004, "Wrong alignment on IndianaFormulas_ComputeFallingDamagePercent");
static_assert(sizeof(IndianaFormulas_ComputeFallingDamagePercent) == 0x000008, "Wrong size on IndianaFormulas_ComputeFallingDamagePercent");
static_assert(offsetof(IndianaFormulas_ComputeFallingDamagePercent, DistanceFallen) == 0x000000, "Member 'IndianaFormulas_ComputeFallingDamagePercent::DistanceFallen' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_ComputeFallingDamagePercent, ReturnValue) == 0x000004, "Member 'IndianaFormulas_ComputeFallingDamagePercent::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.ComputeSkillPointsForPrimaryAttribute
// 0x0008 (0x0008 - 0x0000)
struct IndianaFormulas_ComputeSkillPointsForPrimaryAttribute final
{
public:
	uint8                                         AttributeRank;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaFormulas_ComputeSkillPointsForPrimaryAttribute) == 0x000004, "Wrong alignment on IndianaFormulas_ComputeSkillPointsForPrimaryAttribute");
static_assert(sizeof(IndianaFormulas_ComputeSkillPointsForPrimaryAttribute) == 0x000008, "Wrong size on IndianaFormulas_ComputeSkillPointsForPrimaryAttribute");
static_assert(offsetof(IndianaFormulas_ComputeSkillPointsForPrimaryAttribute, AttributeRank) == 0x000000, "Member 'IndianaFormulas_ComputeSkillPointsForPrimaryAttribute::AttributeRank' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_ComputeSkillPointsForPrimaryAttribute, ReturnValue) == 0x000004, "Member 'IndianaFormulas_ComputeSkillPointsForPrimaryAttribute::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.ComputeSkillPointsForSecondaryAttribute
// 0x0008 (0x0008 - 0x0000)
struct IndianaFormulas_ComputeSkillPointsForSecondaryAttribute final
{
public:
	uint8                                         AttributeRank;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaFormulas_ComputeSkillPointsForSecondaryAttribute) == 0x000004, "Wrong alignment on IndianaFormulas_ComputeSkillPointsForSecondaryAttribute");
static_assert(sizeof(IndianaFormulas_ComputeSkillPointsForSecondaryAttribute) == 0x000008, "Wrong size on IndianaFormulas_ComputeSkillPointsForSecondaryAttribute");
static_assert(offsetof(IndianaFormulas_ComputeSkillPointsForSecondaryAttribute, AttributeRank) == 0x000000, "Member 'IndianaFormulas_ComputeSkillPointsForSecondaryAttribute::AttributeRank' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_ComputeSkillPointsForSecondaryAttribute, ReturnValue) == 0x000004, "Member 'IndianaFormulas_ComputeSkillPointsForSecondaryAttribute::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.ComputeSkillValueToRange
// 0x0008 (0x0008 - 0x0000)
struct IndianaFormulas_ComputeSkillValueToRange final
{
public:
	int32                                         SkillValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterSkillRange                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaFormulas_ComputeSkillValueToRange) == 0x000004, "Wrong alignment on IndianaFormulas_ComputeSkillValueToRange");
static_assert(sizeof(IndianaFormulas_ComputeSkillValueToRange) == 0x000008, "Wrong size on IndianaFormulas_ComputeSkillValueToRange");
static_assert(offsetof(IndianaFormulas_ComputeSkillValueToRange, SkillValue) == 0x000000, "Member 'IndianaFormulas_ComputeSkillValueToRange::SkillValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_ComputeSkillValueToRange, ReturnValue) == 0x000004, "Member 'IndianaFormulas_ComputeSkillValueToRange::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.ConversationAttributeNearMissThreshold
// 0x0004 (0x0004 - 0x0000)
struct IndianaFormulas_ConversationAttributeNearMissThreshold final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaFormulas_ConversationAttributeNearMissThreshold) == 0x000004, "Wrong alignment on IndianaFormulas_ConversationAttributeNearMissThreshold");
static_assert(sizeof(IndianaFormulas_ConversationAttributeNearMissThreshold) == 0x000004, "Wrong size on IndianaFormulas_ConversationAttributeNearMissThreshold");
static_assert(offsetof(IndianaFormulas_ConversationAttributeNearMissThreshold, ReturnValue) == 0x000000, "Member 'IndianaFormulas_ConversationAttributeNearMissThreshold::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.ConversationNearMissMaxOptions
// 0x0004 (0x0004 - 0x0000)
struct IndianaFormulas_ConversationNearMissMaxOptions final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaFormulas_ConversationNearMissMaxOptions) == 0x000004, "Wrong alignment on IndianaFormulas_ConversationNearMissMaxOptions");
static_assert(sizeof(IndianaFormulas_ConversationNearMissMaxOptions) == 0x000004, "Wrong size on IndianaFormulas_ConversationNearMissMaxOptions");
static_assert(offsetof(IndianaFormulas_ConversationNearMissMaxOptions, ReturnValue) == 0x000000, "Member 'IndianaFormulas_ConversationNearMissMaxOptions::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.ConversationSkillNearMissThreshold
// 0x0004 (0x0004 - 0x0000)
struct IndianaFormulas_ConversationSkillNearMissThreshold final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaFormulas_ConversationSkillNearMissThreshold) == 0x000004, "Wrong alignment on IndianaFormulas_ConversationSkillNearMissThreshold");
static_assert(sizeof(IndianaFormulas_ConversationSkillNearMissThreshold) == 0x000004, "Wrong size on IndianaFormulas_ConversationSkillNearMissThreshold");
static_assert(offsetof(IndianaFormulas_ConversationSkillNearMissThreshold, ReturnValue) == 0x000000, "Member 'IndianaFormulas_ConversationSkillNearMissThreshold::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.DisarmTime
// 0x000C (0x000C - 0x0000)
struct IndianaFormulas_DisarmTime final
{
public:
	uint8                                         ExactTrapDifficulty;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerEngineeringSkill;                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaFormulas_DisarmTime) == 0x000004, "Wrong alignment on IndianaFormulas_DisarmTime");
static_assert(sizeof(IndianaFormulas_DisarmTime) == 0x00000C, "Wrong size on IndianaFormulas_DisarmTime");
static_assert(offsetof(IndianaFormulas_DisarmTime, ExactTrapDifficulty) == 0x000000, "Member 'IndianaFormulas_DisarmTime::ExactTrapDifficulty' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_DisarmTime, PlayerEngineeringSkill) == 0x000004, "Member 'IndianaFormulas_DisarmTime::PlayerEngineeringSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_DisarmTime, ReturnValue) == 0x000008, "Member 'IndianaFormulas_DisarmTime::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.DoesHackSkillUnlockRestrictedStock
// 0x0008 (0x0008 - 0x0000)
struct IndianaFormulas_DoesHackSkillUnlockRestrictedStock final
{
public:
	int32                                         HackSkill;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaFormulas_DoesHackSkillUnlockRestrictedStock) == 0x000004, "Wrong alignment on IndianaFormulas_DoesHackSkillUnlockRestrictedStock");
static_assert(sizeof(IndianaFormulas_DoesHackSkillUnlockRestrictedStock) == 0x000008, "Wrong size on IndianaFormulas_DoesHackSkillUnlockRestrictedStock");
static_assert(offsetof(IndianaFormulas_DoesHackSkillUnlockRestrictedStock, HackSkill) == 0x000000, "Member 'IndianaFormulas_DoesHackSkillUnlockRestrictedStock::HackSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_DoesHackSkillUnlockRestrictedStock, ReturnValue) == 0x000004, "Member 'IndianaFormulas_DoesHackSkillUnlockRestrictedStock::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.FieldRepairPartCost
// 0x0010 (0x0010 - 0x0000)
struct IndianaFormulas_FieldRepairPartCost final
{
public:
	float                                         Durability;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemLevel;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EngineerSkill;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaFormulas_FieldRepairPartCost) == 0x000004, "Wrong alignment on IndianaFormulas_FieldRepairPartCost");
static_assert(sizeof(IndianaFormulas_FieldRepairPartCost) == 0x000010, "Wrong size on IndianaFormulas_FieldRepairPartCost");
static_assert(offsetof(IndianaFormulas_FieldRepairPartCost, Durability) == 0x000000, "Member 'IndianaFormulas_FieldRepairPartCost::Durability' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_FieldRepairPartCost, ItemLevel) == 0x000004, "Member 'IndianaFormulas_FieldRepairPartCost::ItemLevel' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_FieldRepairPartCost, EngineerSkill) == 0x000008, "Member 'IndianaFormulas_FieldRepairPartCost::EngineerSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_FieldRepairPartCost, ReturnValue) == 0x00000C, "Member 'IndianaFormulas_FieldRepairPartCost::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.GetBribeAmount
// 0x0010 (0x0010 - 0x0000)
struct IndianaFormulas_GetBribeAmount final
{
public:
	EBribeDifficulty                              BribeDifficulty;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Level;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MerchantSkill;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaFormulas_GetBribeAmount) == 0x000004, "Wrong alignment on IndianaFormulas_GetBribeAmount");
static_assert(sizeof(IndianaFormulas_GetBribeAmount) == 0x000010, "Wrong size on IndianaFormulas_GetBribeAmount");
static_assert(offsetof(IndianaFormulas_GetBribeAmount, BribeDifficulty) == 0x000000, "Member 'IndianaFormulas_GetBribeAmount::BribeDifficulty' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_GetBribeAmount, Level) == 0x000004, "Member 'IndianaFormulas_GetBribeAmount::Level' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_GetBribeAmount, MerchantSkill) == 0x000008, "Member 'IndianaFormulas_GetBribeAmount::MerchantSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_GetBribeAmount, ReturnValue) == 0x00000C, "Member 'IndianaFormulas_GetBribeAmount::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.GetDisguiseDrainRate
// 0x000C (0x000C - 0x0000)
struct IndianaFormulas_GetDisguiseDrainRate final
{
public:
	int32                                         StealthSkill;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMoving;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSprinting;                                        // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCrouching;                                        // 0x0006(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaFormulas_GetDisguiseDrainRate) == 0x000004, "Wrong alignment on IndianaFormulas_GetDisguiseDrainRate");
static_assert(sizeof(IndianaFormulas_GetDisguiseDrainRate) == 0x00000C, "Wrong size on IndianaFormulas_GetDisguiseDrainRate");
static_assert(offsetof(IndianaFormulas_GetDisguiseDrainRate, StealthSkill) == 0x000000, "Member 'IndianaFormulas_GetDisguiseDrainRate::StealthSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_GetDisguiseDrainRate, bMoving) == 0x000004, "Member 'IndianaFormulas_GetDisguiseDrainRate::bMoving' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_GetDisguiseDrainRate, bSprinting) == 0x000005, "Member 'IndianaFormulas_GetDisguiseDrainRate::bSprinting' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_GetDisguiseDrainRate, bCrouching) == 0x000006, "Member 'IndianaFormulas_GetDisguiseDrainRate::bCrouching' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_GetDisguiseDrainRate, ReturnValue) == 0x000008, "Member 'IndianaFormulas_GetDisguiseDrainRate::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.GetInterrogationBribeAmount
// 0x0018 (0x0018 - 0x0000)
struct IndianaFormulas_GetInterrogationBribeAmount final
{
public:
	ECrimeType                                    CrimeType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestrictedArea;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisguised;                                        // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DisguiseInterrogationsPassed;                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerLevel;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MerchantSkill;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StolenItemsValue;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaFormulas_GetInterrogationBribeAmount) == 0x000004, "Wrong alignment on IndianaFormulas_GetInterrogationBribeAmount");
static_assert(sizeof(IndianaFormulas_GetInterrogationBribeAmount) == 0x000018, "Wrong size on IndianaFormulas_GetInterrogationBribeAmount");
static_assert(offsetof(IndianaFormulas_GetInterrogationBribeAmount, CrimeType) == 0x000000, "Member 'IndianaFormulas_GetInterrogationBribeAmount::CrimeType' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_GetInterrogationBribeAmount, bRestrictedArea) == 0x000001, "Member 'IndianaFormulas_GetInterrogationBribeAmount::bRestrictedArea' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_GetInterrogationBribeAmount, bDisguised) == 0x000002, "Member 'IndianaFormulas_GetInterrogationBribeAmount::bDisguised' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_GetInterrogationBribeAmount, DisguiseInterrogationsPassed) == 0x000004, "Member 'IndianaFormulas_GetInterrogationBribeAmount::DisguiseInterrogationsPassed' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_GetInterrogationBribeAmount, PlayerLevel) == 0x000008, "Member 'IndianaFormulas_GetInterrogationBribeAmount::PlayerLevel' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_GetInterrogationBribeAmount, MerchantSkill) == 0x00000C, "Member 'IndianaFormulas_GetInterrogationBribeAmount::MerchantSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_GetInterrogationBribeAmount, StolenItemsValue) == 0x000010, "Member 'IndianaFormulas_GetInterrogationBribeAmount::StolenItemsValue' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_GetInterrogationBribeAmount, ReturnValue) == 0x000014, "Member 'IndianaFormulas_GetInterrogationBribeAmount::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.GetModifiedItemEffectiveness
// 0x0010 (0x0010 - 0x0000)
struct IndianaFormulas_GetModifiedItemEffectiveness final
{
public:
	const class UDegradableItem*                  Item;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaFormulas_GetModifiedItemEffectiveness) == 0x000008, "Wrong alignment on IndianaFormulas_GetModifiedItemEffectiveness");
static_assert(sizeof(IndianaFormulas_GetModifiedItemEffectiveness) == 0x000010, "Wrong size on IndianaFormulas_GetModifiedItemEffectiveness");
static_assert(offsetof(IndianaFormulas_GetModifiedItemEffectiveness, Item) == 0x000000, "Member 'IndianaFormulas_GetModifiedItemEffectiveness::Item' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_GetModifiedItemEffectiveness, ReturnValue) == 0x000008, "Member 'IndianaFormulas_GetModifiedItemEffectiveness::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.GetRespecCost
// 0x0008 (0x0008 - 0x0000)
struct IndianaFormulas_GetRespecCost final
{
public:
	int32                                         NumRespecs;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaFormulas_GetRespecCost) == 0x000004, "Wrong alignment on IndianaFormulas_GetRespecCost");
static_assert(sizeof(IndianaFormulas_GetRespecCost) == 0x000008, "Wrong size on IndianaFormulas_GetRespecCost");
static_assert(offsetof(IndianaFormulas_GetRespecCost, NumRespecs) == 0x000000, "Member 'IndianaFormulas_GetRespecCost::NumRespecs' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_GetRespecCost, ReturnValue) == 0x000004, "Member 'IndianaFormulas_GetRespecCost::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.HackDifficultyFullRange
// 0x0001 (0x0001 - 0x0000)
struct IndianaFormulas_HackDifficultyFullRange final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaFormulas_HackDifficultyFullRange) == 0x000001, "Wrong alignment on IndianaFormulas_HackDifficultyFullRange");
static_assert(sizeof(IndianaFormulas_HackDifficultyFullRange) == 0x000001, "Wrong size on IndianaFormulas_HackDifficultyFullRange");
static_assert(offsetof(IndianaFormulas_HackDifficultyFullRange, ReturnValue) == 0x000000, "Member 'IndianaFormulas_HackDifficultyFullRange::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.HackDifficultyNumRanges
// 0x0001 (0x0001 - 0x0000)
struct IndianaFormulas_HackDifficultyNumRanges final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaFormulas_HackDifficultyNumRanges) == 0x000001, "Wrong alignment on IndianaFormulas_HackDifficultyNumRanges");
static_assert(sizeof(IndianaFormulas_HackDifficultyNumRanges) == 0x000001, "Wrong size on IndianaFormulas_HackDifficultyNumRanges");
static_assert(offsetof(IndianaFormulas_HackDifficultyNumRanges, ReturnValue) == 0x000000, "Member 'IndianaFormulas_HackDifficultyNumRanges::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.HackDifficultyRange
// 0x0004 (0x0004 - 0x0000)
struct IndianaFormulas_HackDifficultyRange final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaFormulas_HackDifficultyRange) == 0x000004, "Wrong alignment on IndianaFormulas_HackDifficultyRange");
static_assert(sizeof(IndianaFormulas_HackDifficultyRange) == 0x000004, "Wrong size on IndianaFormulas_HackDifficultyRange");
static_assert(offsetof(IndianaFormulas_HackDifficultyRange, ReturnValue) == 0x000000, "Member 'IndianaFormulas_HackDifficultyRange::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.HackNoise
// 0x000C (0x000C - 0x0000)
struct IndianaFormulas_HackNoise final
{
public:
	uint8                                         ExactHackDifficulty;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerHackSkill;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaFormulas_HackNoise) == 0x000004, "Wrong alignment on IndianaFormulas_HackNoise");
static_assert(sizeof(IndianaFormulas_HackNoise) == 0x00000C, "Wrong size on IndianaFormulas_HackNoise");
static_assert(offsetof(IndianaFormulas_HackNoise, ExactHackDifficulty) == 0x000000, "Member 'IndianaFormulas_HackNoise::ExactHackDifficulty' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_HackNoise, PlayerHackSkill) == 0x000004, "Member 'IndianaFormulas_HackNoise::PlayerHackSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_HackNoise, ReturnValue) == 0x000008, "Member 'IndianaFormulas_HackNoise::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.HackNumResources
// 0x000C (0x000C - 0x0000)
struct IndianaFormulas_HackNumResources final
{
public:
	uint8                                         ExactHackDifficulty;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerHackSkill;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaFormulas_HackNumResources) == 0x000004, "Wrong alignment on IndianaFormulas_HackNumResources");
static_assert(sizeof(IndianaFormulas_HackNumResources) == 0x00000C, "Wrong size on IndianaFormulas_HackNumResources");
static_assert(offsetof(IndianaFormulas_HackNumResources, ExactHackDifficulty) == 0x000000, "Member 'IndianaFormulas_HackNumResources::ExactHackDifficulty' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_HackNumResources, PlayerHackSkill) == 0x000004, "Member 'IndianaFormulas_HackNumResources::PlayerHackSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_HackNumResources, ReturnValue) == 0x000008, "Member 'IndianaFormulas_HackNumResources::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.HackRobotTime
// 0x000C (0x000C - 0x0000)
struct IndianaFormulas_HackRobotTime final
{
public:
	uint8                                         ExactHackDifficulty;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerHackSkill;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaFormulas_HackRobotTime) == 0x000004, "Wrong alignment on IndianaFormulas_HackRobotTime");
static_assert(sizeof(IndianaFormulas_HackRobotTime) == 0x00000C, "Wrong size on IndianaFormulas_HackRobotTime");
static_assert(offsetof(IndianaFormulas_HackRobotTime, ExactHackDifficulty) == 0x000000, "Member 'IndianaFormulas_HackRobotTime::ExactHackDifficulty' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_HackRobotTime, PlayerHackSkill) == 0x000004, "Member 'IndianaFormulas_HackRobotTime::PlayerHackSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_HackRobotTime, ReturnValue) == 0x000008, "Member 'IndianaFormulas_HackRobotTime::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.HackTime
// 0x000C (0x000C - 0x0000)
struct IndianaFormulas_HackTime final
{
public:
	uint8                                         ExactHackDifficulty;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerHackSkill;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaFormulas_HackTime) == 0x000004, "Wrong alignment on IndianaFormulas_HackTime");
static_assert(sizeof(IndianaFormulas_HackTime) == 0x00000C, "Wrong size on IndianaFormulas_HackTime");
static_assert(offsetof(IndianaFormulas_HackTime, ExactHackDifficulty) == 0x000000, "Member 'IndianaFormulas_HackTime::ExactHackDifficulty' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_HackTime, PlayerHackSkill) == 0x000004, "Member 'IndianaFormulas_HackTime::PlayerHackSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_HackTime, ReturnValue) == 0x000008, "Member 'IndianaFormulas_HackTime::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.HackToughness
// 0x000C (0x000C - 0x0000)
struct IndianaFormulas_HackToughness final
{
public:
	uint8                                         ExactHackDifficulty;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerHackSkill;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaFormulas_HackToughness) == 0x000004, "Wrong alignment on IndianaFormulas_HackToughness");
static_assert(sizeof(IndianaFormulas_HackToughness) == 0x00000C, "Wrong size on IndianaFormulas_HackToughness");
static_assert(offsetof(IndianaFormulas_HackToughness, ExactHackDifficulty) == 0x000000, "Member 'IndianaFormulas_HackToughness::ExactHackDifficulty' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_HackToughness, PlayerHackSkill) == 0x000004, "Member 'IndianaFormulas_HackToughness::PlayerHackSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_HackToughness, ReturnValue) == 0x000008, "Member 'IndianaFormulas_HackToughness::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.LockpickDifficultyFullRange
// 0x0001 (0x0001 - 0x0000)
struct IndianaFormulas_LockpickDifficultyFullRange final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaFormulas_LockpickDifficultyFullRange) == 0x000001, "Wrong alignment on IndianaFormulas_LockpickDifficultyFullRange");
static_assert(sizeof(IndianaFormulas_LockpickDifficultyFullRange) == 0x000001, "Wrong size on IndianaFormulas_LockpickDifficultyFullRange");
static_assert(offsetof(IndianaFormulas_LockpickDifficultyFullRange, ReturnValue) == 0x000000, "Member 'IndianaFormulas_LockpickDifficultyFullRange::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.LockpickDifficultyNumRanges
// 0x0001 (0x0001 - 0x0000)
struct IndianaFormulas_LockpickDifficultyNumRanges final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaFormulas_LockpickDifficultyNumRanges) == 0x000001, "Wrong alignment on IndianaFormulas_LockpickDifficultyNumRanges");
static_assert(sizeof(IndianaFormulas_LockpickDifficultyNumRanges) == 0x000001, "Wrong size on IndianaFormulas_LockpickDifficultyNumRanges");
static_assert(offsetof(IndianaFormulas_LockpickDifficultyNumRanges, ReturnValue) == 0x000000, "Member 'IndianaFormulas_LockpickDifficultyNumRanges::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.LockpickDifficultyRange
// 0x0004 (0x0004 - 0x0000)
struct IndianaFormulas_LockpickDifficultyRange final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaFormulas_LockpickDifficultyRange) == 0x000004, "Wrong alignment on IndianaFormulas_LockpickDifficultyRange");
static_assert(sizeof(IndianaFormulas_LockpickDifficultyRange) == 0x000004, "Wrong size on IndianaFormulas_LockpickDifficultyRange");
static_assert(offsetof(IndianaFormulas_LockpickDifficultyRange, ReturnValue) == 0x000000, "Member 'IndianaFormulas_LockpickDifficultyRange::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.LockpickNoise
// 0x000C (0x000C - 0x0000)
struct IndianaFormulas_LockpickNoise final
{
public:
	uint8                                         ExactLockpickDifficulty;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerLockpickSkill;                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaFormulas_LockpickNoise) == 0x000004, "Wrong alignment on IndianaFormulas_LockpickNoise");
static_assert(sizeof(IndianaFormulas_LockpickNoise) == 0x00000C, "Wrong size on IndianaFormulas_LockpickNoise");
static_assert(offsetof(IndianaFormulas_LockpickNoise, ExactLockpickDifficulty) == 0x000000, "Member 'IndianaFormulas_LockpickNoise::ExactLockpickDifficulty' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_LockpickNoise, PlayerLockpickSkill) == 0x000004, "Member 'IndianaFormulas_LockpickNoise::PlayerLockpickSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_LockpickNoise, ReturnValue) == 0x000008, "Member 'IndianaFormulas_LockpickNoise::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.LockpickNumResources
// 0x0010 (0x0010 - 0x0000)
struct IndianaFormulas_LockpickNumResources final
{
public:
	uint8                                         ExactLockpickDifficulty;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerLockpickSkill;                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BasePlayerLockpickSkill;                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaFormulas_LockpickNumResources) == 0x000004, "Wrong alignment on IndianaFormulas_LockpickNumResources");
static_assert(sizeof(IndianaFormulas_LockpickNumResources) == 0x000010, "Wrong size on IndianaFormulas_LockpickNumResources");
static_assert(offsetof(IndianaFormulas_LockpickNumResources, ExactLockpickDifficulty) == 0x000000, "Member 'IndianaFormulas_LockpickNumResources::ExactLockpickDifficulty' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_LockpickNumResources, PlayerLockpickSkill) == 0x000004, "Member 'IndianaFormulas_LockpickNumResources::PlayerLockpickSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_LockpickNumResources, BasePlayerLockpickSkill) == 0x000008, "Member 'IndianaFormulas_LockpickNumResources::BasePlayerLockpickSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_LockpickNumResources, ReturnValue) == 0x00000C, "Member 'IndianaFormulas_LockpickNumResources::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.LockpickTime
// 0x0010 (0x0010 - 0x0000)
struct IndianaFormulas_LockpickTime final
{
public:
	uint8                                         ExactLockpickDifficulty;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerLockpickSkill;                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BasePlayerLockpickSkill;                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaFormulas_LockpickTime) == 0x000004, "Wrong alignment on IndianaFormulas_LockpickTime");
static_assert(sizeof(IndianaFormulas_LockpickTime) == 0x000010, "Wrong size on IndianaFormulas_LockpickTime");
static_assert(offsetof(IndianaFormulas_LockpickTime, ExactLockpickDifficulty) == 0x000000, "Member 'IndianaFormulas_LockpickTime::ExactLockpickDifficulty' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_LockpickTime, PlayerLockpickSkill) == 0x000004, "Member 'IndianaFormulas_LockpickTime::PlayerLockpickSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_LockpickTime, BasePlayerLockpickSkill) == 0x000008, "Member 'IndianaFormulas_LockpickTime::BasePlayerLockpickSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_LockpickTime, ReturnValue) == 0x00000C, "Member 'IndianaFormulas_LockpickTime::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.LockpickToughness
// 0x000C (0x000C - 0x0000)
struct IndianaFormulas_LockpickToughness final
{
public:
	uint8                                         ExactLockpickDifficulty;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerLockpickSkill;                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaFormulas_LockpickToughness) == 0x000004, "Wrong alignment on IndianaFormulas_LockpickToughness");
static_assert(sizeof(IndianaFormulas_LockpickToughness) == 0x00000C, "Wrong size on IndianaFormulas_LockpickToughness");
static_assert(offsetof(IndianaFormulas_LockpickToughness, ExactLockpickDifficulty) == 0x000000, "Member 'IndianaFormulas_LockpickToughness::ExactLockpickDifficulty' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_LockpickToughness, PlayerLockpickSkill) == 0x000004, "Member 'IndianaFormulas_LockpickToughness::PlayerLockpickSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_LockpickToughness, ReturnValue) == 0x000008, "Member 'IndianaFormulas_LockpickToughness::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.PickPocketTime
// 0x000C (0x000C - 0x0000)
struct IndianaFormulas_PickPocketTime final
{
public:
	int32                                         LockpickSkill;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetPerception;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaFormulas_PickPocketTime) == 0x000004, "Wrong alignment on IndianaFormulas_PickPocketTime");
static_assert(sizeof(IndianaFormulas_PickPocketTime) == 0x00000C, "Wrong size on IndianaFormulas_PickPocketTime");
static_assert(offsetof(IndianaFormulas_PickPocketTime, LockpickSkill) == 0x000000, "Member 'IndianaFormulas_PickPocketTime::LockpickSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_PickPocketTime, TargetPerception) == 0x000004, "Member 'IndianaFormulas_PickPocketTime::TargetPerception' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_PickPocketTime, ReturnValue) == 0x000008, "Member 'IndianaFormulas_PickPocketTime::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.PlayerSneakEnemyDetectionRage
// 0x000C (0x000C - 0x0000)
struct IndianaFormulas_PlayerSneakEnemyDetectionRage final
{
public:
	bool                                          bInterior;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerSneakSkill;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaFormulas_PlayerSneakEnemyDetectionRage) == 0x000004, "Wrong alignment on IndianaFormulas_PlayerSneakEnemyDetectionRage");
static_assert(sizeof(IndianaFormulas_PlayerSneakEnemyDetectionRage) == 0x00000C, "Wrong size on IndianaFormulas_PlayerSneakEnemyDetectionRage");
static_assert(offsetof(IndianaFormulas_PlayerSneakEnemyDetectionRage, bInterior) == 0x000000, "Member 'IndianaFormulas_PlayerSneakEnemyDetectionRage::bInterior' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_PlayerSneakEnemyDetectionRage, PlayerSneakSkill) == 0x000004, "Member 'IndianaFormulas_PlayerSneakEnemyDetectionRage::PlayerSneakSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_PlayerSneakEnemyDetectionRage, ReturnValue) == 0x000008, "Member 'IndianaFormulas_PlayerSneakEnemyDetectionRage::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.ShouldDrawFireSwitchCompanionTargets
// 0x001C (0x001C - 0x0000)
struct IndianaFormulas_ShouldDrawFireSwitchCompanionTargets final
{
public:
	float                                         OldHealth;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OldDTBody;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OldDTHead;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewHealth;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewDTBody;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewDTHead;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaFormulas_ShouldDrawFireSwitchCompanionTargets) == 0x000004, "Wrong alignment on IndianaFormulas_ShouldDrawFireSwitchCompanionTargets");
static_assert(sizeof(IndianaFormulas_ShouldDrawFireSwitchCompanionTargets) == 0x00001C, "Wrong size on IndianaFormulas_ShouldDrawFireSwitchCompanionTargets");
static_assert(offsetof(IndianaFormulas_ShouldDrawFireSwitchCompanionTargets, OldHealth) == 0x000000, "Member 'IndianaFormulas_ShouldDrawFireSwitchCompanionTargets::OldHealth' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_ShouldDrawFireSwitchCompanionTargets, OldDTBody) == 0x000004, "Member 'IndianaFormulas_ShouldDrawFireSwitchCompanionTargets::OldDTBody' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_ShouldDrawFireSwitchCompanionTargets, OldDTHead) == 0x000008, "Member 'IndianaFormulas_ShouldDrawFireSwitchCompanionTargets::OldDTHead' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_ShouldDrawFireSwitchCompanionTargets, NewHealth) == 0x00000C, "Member 'IndianaFormulas_ShouldDrawFireSwitchCompanionTargets::NewHealth' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_ShouldDrawFireSwitchCompanionTargets, NewDTBody) == 0x000010, "Member 'IndianaFormulas_ShouldDrawFireSwitchCompanionTargets::NewDTBody' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_ShouldDrawFireSwitchCompanionTargets, NewDTHead) == 0x000014, "Member 'IndianaFormulas_ShouldDrawFireSwitchCompanionTargets::NewDTHead' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_ShouldDrawFireSwitchCompanionTargets, ReturnValue) == 0x000018, "Member 'IndianaFormulas_ShouldDrawFireSwitchCompanionTargets::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.TrapArmNoise
// 0x000C (0x000C - 0x0000)
struct IndianaFormulas_TrapArmNoise final
{
public:
	uint8                                         ExactTrapDifficulty;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerEngineeringSkill;                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaFormulas_TrapArmNoise) == 0x000004, "Wrong alignment on IndianaFormulas_TrapArmNoise");
static_assert(sizeof(IndianaFormulas_TrapArmNoise) == 0x00000C, "Wrong size on IndianaFormulas_TrapArmNoise");
static_assert(offsetof(IndianaFormulas_TrapArmNoise, ExactTrapDifficulty) == 0x000000, "Member 'IndianaFormulas_TrapArmNoise::ExactTrapDifficulty' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_TrapArmNoise, PlayerEngineeringSkill) == 0x000004, "Member 'IndianaFormulas_TrapArmNoise::PlayerEngineeringSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_TrapArmNoise, ReturnValue) == 0x000008, "Member 'IndianaFormulas_TrapArmNoise::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.TrapDamagePercent
// 0x0008 (0x0008 - 0x0000)
struct IndianaFormulas_TrapDamagePercent final
{
public:
	ETrapDifficulty                               TrapDifficulty;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaFormulas_TrapDamagePercent) == 0x000004, "Wrong alignment on IndianaFormulas_TrapDamagePercent");
static_assert(sizeof(IndianaFormulas_TrapDamagePercent) == 0x000008, "Wrong size on IndianaFormulas_TrapDamagePercent");
static_assert(offsetof(IndianaFormulas_TrapDamagePercent, TrapDifficulty) == 0x000000, "Member 'IndianaFormulas_TrapDamagePercent::TrapDifficulty' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_TrapDamagePercent, ReturnValue) == 0x000004, "Member 'IndianaFormulas_TrapDamagePercent::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.TrapDifficultyFullRange
// 0x0001 (0x0001 - 0x0000)
struct IndianaFormulas_TrapDifficultyFullRange final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaFormulas_TrapDifficultyFullRange) == 0x000001, "Wrong alignment on IndianaFormulas_TrapDifficultyFullRange");
static_assert(sizeof(IndianaFormulas_TrapDifficultyFullRange) == 0x000001, "Wrong size on IndianaFormulas_TrapDifficultyFullRange");
static_assert(offsetof(IndianaFormulas_TrapDifficultyFullRange, ReturnValue) == 0x000000, "Member 'IndianaFormulas_TrapDifficultyFullRange::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.TrapDifficultyNumRanges
// 0x0001 (0x0001 - 0x0000)
struct IndianaFormulas_TrapDifficultyNumRanges final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaFormulas_TrapDifficultyNumRanges) == 0x000001, "Wrong alignment on IndianaFormulas_TrapDifficultyNumRanges");
static_assert(sizeof(IndianaFormulas_TrapDifficultyNumRanges) == 0x000001, "Wrong size on IndianaFormulas_TrapDifficultyNumRanges");
static_assert(offsetof(IndianaFormulas_TrapDifficultyNumRanges, ReturnValue) == 0x000000, "Member 'IndianaFormulas_TrapDifficultyNumRanges::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.TrapDifficultyRange
// 0x0004 (0x0004 - 0x0000)
struct IndianaFormulas_TrapDifficultyRange final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaFormulas_TrapDifficultyRange) == 0x000004, "Wrong alignment on IndianaFormulas_TrapDifficultyRange");
static_assert(sizeof(IndianaFormulas_TrapDifficultyRange) == 0x000004, "Wrong size on IndianaFormulas_TrapDifficultyRange");
static_assert(offsetof(IndianaFormulas_TrapDifficultyRange, ReturnValue) == 0x000000, "Member 'IndianaFormulas_TrapDifficultyRange::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.TrapDisarmNoise
// 0x000C (0x000C - 0x0000)
struct IndianaFormulas_TrapDisarmNoise final
{
public:
	uint8                                         ExactTrapDifficulty;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerEngineeringSkill;                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaFormulas_TrapDisarmNoise) == 0x000004, "Wrong alignment on IndianaFormulas_TrapDisarmNoise");
static_assert(sizeof(IndianaFormulas_TrapDisarmNoise) == 0x00000C, "Wrong size on IndianaFormulas_TrapDisarmNoise");
static_assert(offsetof(IndianaFormulas_TrapDisarmNoise, ExactTrapDifficulty) == 0x000000, "Member 'IndianaFormulas_TrapDisarmNoise::ExactTrapDifficulty' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_TrapDisarmNoise, PlayerEngineeringSkill) == 0x000004, "Member 'IndianaFormulas_TrapDisarmNoise::PlayerEngineeringSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_TrapDisarmNoise, ReturnValue) == 0x000008, "Member 'IndianaFormulas_TrapDisarmNoise::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.TrapToughness
// 0x000C (0x000C - 0x0000)
struct IndianaFormulas_TrapToughness final
{
public:
	uint8                                         ExactTrapDifficulty;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerEngineeringSkill;                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaFormulas_TrapToughness) == 0x000004, "Wrong alignment on IndianaFormulas_TrapToughness");
static_assert(sizeof(IndianaFormulas_TrapToughness) == 0x00000C, "Wrong size on IndianaFormulas_TrapToughness");
static_assert(offsetof(IndianaFormulas_TrapToughness, ExactTrapDifficulty) == 0x000000, "Member 'IndianaFormulas_TrapToughness::ExactTrapDifficulty' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_TrapToughness, PlayerEngineeringSkill) == 0x000004, "Member 'IndianaFormulas_TrapToughness::PlayerEngineeringSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_TrapToughness, ReturnValue) == 0x000008, "Member 'IndianaFormulas_TrapToughness::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.VendorRepairCurrencyCost
// 0x000C (0x000C - 0x0000)
struct IndianaFormulas_VendorRepairCurrencyCost final
{
public:
	float                                         Durability;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemLevel;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaFormulas_VendorRepairCurrencyCost) == 0x000004, "Wrong alignment on IndianaFormulas_VendorRepairCurrencyCost");
static_assert(sizeof(IndianaFormulas_VendorRepairCurrencyCost) == 0x00000C, "Wrong size on IndianaFormulas_VendorRepairCurrencyCost");
static_assert(offsetof(IndianaFormulas_VendorRepairCurrencyCost, Durability) == 0x000000, "Member 'IndianaFormulas_VendorRepairCurrencyCost::Durability' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_VendorRepairCurrencyCost, ItemLevel) == 0x000004, "Member 'IndianaFormulas_VendorRepairCurrencyCost::ItemLevel' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_VendorRepairCurrencyCost, ReturnValue) == 0x000008, "Member 'IndianaFormulas_VendorRepairCurrencyCost::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaFormulas.WorkbenchRepairPartCost
// 0x0010 (0x0010 - 0x0000)
struct IndianaFormulas_WorkbenchRepairPartCost final
{
public:
	float                                         Durability;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemLevel;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EngineerSkill;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaFormulas_WorkbenchRepairPartCost) == 0x000004, "Wrong alignment on IndianaFormulas_WorkbenchRepairPartCost");
static_assert(sizeof(IndianaFormulas_WorkbenchRepairPartCost) == 0x000010, "Wrong size on IndianaFormulas_WorkbenchRepairPartCost");
static_assert(offsetof(IndianaFormulas_WorkbenchRepairPartCost, Durability) == 0x000000, "Member 'IndianaFormulas_WorkbenchRepairPartCost::Durability' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_WorkbenchRepairPartCost, ItemLevel) == 0x000004, "Member 'IndianaFormulas_WorkbenchRepairPartCost::ItemLevel' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_WorkbenchRepairPartCost, EngineerSkill) == 0x000008, "Member 'IndianaFormulas_WorkbenchRepairPartCost::EngineerSkill' has a wrong offset!");
static_assert(offsetof(IndianaFormulas_WorkbenchRepairPartCost, ReturnValue) == 0x00000C, "Member 'IndianaFormulas_WorkbenchRepairPartCost::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameInstance.IsINX1Installed
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameInstance_IsINX1Installed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameInstance_IsINX1Installed) == 0x000001, "Wrong alignment on IndianaGameInstance_IsINX1Installed");
static_assert(sizeof(IndianaGameInstance_IsINX1Installed) == 0x000001, "Wrong size on IndianaGameInstance_IsINX1Installed");
static_assert(offsetof(IndianaGameInstance_IsINX1Installed, ReturnValue) == 0x000000, "Member 'IndianaGameInstance_IsINX1Installed::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameInstance.IsINX2Installed
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameInstance_IsINX2Installed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameInstance_IsINX2Installed) == 0x000001, "Wrong alignment on IndianaGameInstance_IsINX2Installed");
static_assert(sizeof(IndianaGameInstance_IsINX2Installed) == 0x000001, "Wrong size on IndianaGameInstance_IsINX2Installed");
static_assert(offsetof(IndianaGameInstance_IsINX2Installed, ReturnValue) == 0x000000, "Member 'IndianaGameInstance_IsINX2Installed::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameInstance.IsINX2DLCInstalled
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameInstance_IsINX2DLCInstalled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameInstance_IsINX2DLCInstalled) == 0x000001, "Wrong alignment on IndianaGameInstance_IsINX2DLCInstalled");
static_assert(sizeof(IndianaGameInstance_IsINX2DLCInstalled) == 0x000001, "Wrong size on IndianaGameInstance_IsINX2DLCInstalled");
static_assert(offsetof(IndianaGameInstance_IsINX2DLCInstalled, ReturnValue) == 0x000000, "Member 'IndianaGameInstance_IsINX2DLCInstalled::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameInstance.IsXFHDLCInstalled
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameInstance_IsXFHDLCInstalled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameInstance_IsXFHDLCInstalled) == 0x000001, "Wrong alignment on IndianaGameInstance_IsXFHDLCInstalled");
static_assert(sizeof(IndianaGameInstance_IsXFHDLCInstalled) == 0x000001, "Wrong size on IndianaGameInstance_IsXFHDLCInstalled");
static_assert(offsetof(IndianaGameInstance_IsXFHDLCInstalled, ReturnValue) == 0x000000, "Member 'IndianaGameInstance_IsXFHDLCInstalled::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameInstance.LowMemoryLoad
// 0x0010 (0x0010 - 0x0000)
struct IndianaGameInstance_LowMemoryLoad final
{
public:
	class FString                                 Map;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameInstance_LowMemoryLoad) == 0x000008, "Wrong alignment on IndianaGameInstance_LowMemoryLoad");
static_assert(sizeof(IndianaGameInstance_LowMemoryLoad) == 0x000010, "Wrong size on IndianaGameInstance_LowMemoryLoad");
static_assert(offsetof(IndianaGameInstance_LowMemoryLoad, Map) == 0x000000, "Member 'IndianaGameInstance_LowMemoryLoad::Map' has a wrong offset!");

// Function Indiana.IndianaGameInstance.QueueCredits
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameInstance_QueueCredits final
{
public:
	bool                                          bShouldQueue;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameInstance_QueueCredits) == 0x000001, "Wrong alignment on IndianaGameInstance_QueueCredits");
static_assert(sizeof(IndianaGameInstance_QueueCredits) == 0x000001, "Wrong size on IndianaGameInstance_QueueCredits");
static_assert(offsetof(IndianaGameInstance_QueueCredits, bShouldQueue) == 0x000000, "Member 'IndianaGameInstance_QueueCredits::bShouldQueue' has a wrong offset!");

// Function Indiana.IndianaGameInstance.QueueEndGameLoadingScreen
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameInstance_QueueEndGameLoadingScreen final
{
public:
	EEndGameImageType                             EndGameType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameInstance_QueueEndGameLoadingScreen) == 0x000001, "Wrong alignment on IndianaGameInstance_QueueEndGameLoadingScreen");
static_assert(sizeof(IndianaGameInstance_QueueEndGameLoadingScreen) == 0x000001, "Wrong size on IndianaGameInstance_QueueEndGameLoadingScreen");
static_assert(offsetof(IndianaGameInstance_QueueEndGameLoadingScreen, EndGameType) == 0x000000, "Member 'IndianaGameInstance_QueueEndGameLoadingScreen::EndGameType' has a wrong offset!");

// Function Indiana.IndianaGameInstance.SetOverridePlayerClass
// 0x0008 (0x0008 - 0x0000)
struct IndianaGameInstance_SetOverridePlayerClass final
{
public:
	class UClass*                                 Override;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameInstance_SetOverridePlayerClass) == 0x000008, "Wrong alignment on IndianaGameInstance_SetOverridePlayerClass");
static_assert(sizeof(IndianaGameInstance_SetOverridePlayerClass) == 0x000008, "Wrong size on IndianaGameInstance_SetOverridePlayerClass");
static_assert(offsetof(IndianaGameInstance_SetOverridePlayerClass, Override) == 0x000000, "Member 'IndianaGameInstance_SetOverridePlayerClass::Override' has a wrong offset!");

// Function Indiana.IndianaGameInstance.AreCreditsPlaying
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameInstance_AreCreditsPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameInstance_AreCreditsPlaying) == 0x000001, "Wrong alignment on IndianaGameInstance_AreCreditsPlaying");
static_assert(sizeof(IndianaGameInstance_AreCreditsPlaying) == 0x000001, "Wrong size on IndianaGameInstance_AreCreditsPlaying");
static_assert(offsetof(IndianaGameInstance_AreCreditsPlaying, ReturnValue) == 0x000000, "Member 'IndianaGameInstance_AreCreditsPlaying::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameInstance.AreCreditsQueued
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameInstance_AreCreditsQueued final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameInstance_AreCreditsQueued) == 0x000001, "Wrong alignment on IndianaGameInstance_AreCreditsQueued");
static_assert(sizeof(IndianaGameInstance_AreCreditsQueued) == 0x000001, "Wrong size on IndianaGameInstance_AreCreditsQueued");
static_assert(offsetof(IndianaGameInstance_AreCreditsQueued, ReturnValue) == 0x000000, "Member 'IndianaGameInstance_AreCreditsQueued::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameInstance.HasVisitedMainMenu
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameInstance_HasVisitedMainMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameInstance_HasVisitedMainMenu) == 0x000001, "Wrong alignment on IndianaGameInstance_HasVisitedMainMenu");
static_assert(sizeof(IndianaGameInstance_HasVisitedMainMenu) == 0x000001, "Wrong size on IndianaGameInstance_HasVisitedMainMenu");
static_assert(offsetof(IndianaGameInstance_HasVisitedMainMenu, ReturnValue) == 0x000000, "Member 'IndianaGameInstance_HasVisitedMainMenu::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameplayStatics.ApplyCACVisibilityToActorCollision
// 0x0008 (0x0008 - 0x0000)
struct IndianaGameplayStatics_ApplyCACVisibilityToActorCollision final
{
public:
	class UChildActorComponent*                   CAC;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameplayStatics_ApplyCACVisibilityToActorCollision) == 0x000008, "Wrong alignment on IndianaGameplayStatics_ApplyCACVisibilityToActorCollision");
static_assert(sizeof(IndianaGameplayStatics_ApplyCACVisibilityToActorCollision) == 0x000008, "Wrong size on IndianaGameplayStatics_ApplyCACVisibilityToActorCollision");
static_assert(offsetof(IndianaGameplayStatics_ApplyCACVisibilityToActorCollision, CAC) == 0x000000, "Member 'IndianaGameplayStatics_ApplyCACVisibilityToActorCollision::CAC' has a wrong offset!");

// Function Indiana.IndianaGameplayStatics.ApplyGenericDamage
// 0x00A0 (0x00A0 - 0x0000)
struct IndianaGameplayStatics_ApplyGenericDamage final
{
public:
	class AActor*                                 DamageCauser;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamagedActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseDamage;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UDamageType>                DamageType;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCustomDamageDescription;                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDamageDescription                     CustomDamageDescription;                           // 0x0028(0x0078)(Parm, AdvancedDisplay, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameplayStatics_ApplyGenericDamage) == 0x000008, "Wrong alignment on IndianaGameplayStatics_ApplyGenericDamage");
static_assert(sizeof(IndianaGameplayStatics_ApplyGenericDamage) == 0x0000A0, "Wrong size on IndianaGameplayStatics_ApplyGenericDamage");
static_assert(offsetof(IndianaGameplayStatics_ApplyGenericDamage, DamageCauser) == 0x000000, "Member 'IndianaGameplayStatics_ApplyGenericDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_ApplyGenericDamage, DamagedActor) == 0x000008, "Member 'IndianaGameplayStatics_ApplyGenericDamage::DamagedActor' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_ApplyGenericDamage, BaseDamage) == 0x000010, "Member 'IndianaGameplayStatics_ApplyGenericDamage::BaseDamage' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_ApplyGenericDamage, DamageType) == 0x000018, "Member 'IndianaGameplayStatics_ApplyGenericDamage::DamageType' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_ApplyGenericDamage, bUseCustomDamageDescription) == 0x000020, "Member 'IndianaGameplayStatics_ApplyGenericDamage::bUseCustomDamageDescription' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_ApplyGenericDamage, CustomDamageDescription) == 0x000028, "Member 'IndianaGameplayStatics_ApplyGenericDamage::CustomDamageDescription' has a wrong offset!");

// Function Indiana.IndianaGameplayStatics.CanCharacterUnlockRestrictedStock
// 0x0010 (0x0010 - 0x0000)
struct IndianaGameplayStatics_CanCharacterUnlockRestrictedStock final
{
public:
	class AIndianaCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaGameplayStatics_CanCharacterUnlockRestrictedStock) == 0x000008, "Wrong alignment on IndianaGameplayStatics_CanCharacterUnlockRestrictedStock");
static_assert(sizeof(IndianaGameplayStatics_CanCharacterUnlockRestrictedStock) == 0x000010, "Wrong size on IndianaGameplayStatics_CanCharacterUnlockRestrictedStock");
static_assert(offsetof(IndianaGameplayStatics_CanCharacterUnlockRestrictedStock, Character) == 0x000000, "Member 'IndianaGameplayStatics_CanCharacterUnlockRestrictedStock::Character' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_CanCharacterUnlockRestrictedStock, ReturnValue) == 0x000008, "Member 'IndianaGameplayStatics_CanCharacterUnlockRestrictedStock::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameplayStatics.ConstructComponentByClass
// 0x0020 (0x0020 - 0x0000)
struct IndianaGameplayStatics_ConstructComponentByClass final
{
public:
	ECheckBranches                                Branches;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                InOuter;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 InClass;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActorComponent*                        ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameplayStatics_ConstructComponentByClass) == 0x000008, "Wrong alignment on IndianaGameplayStatics_ConstructComponentByClass");
static_assert(sizeof(IndianaGameplayStatics_ConstructComponentByClass) == 0x000020, "Wrong size on IndianaGameplayStatics_ConstructComponentByClass");
static_assert(offsetof(IndianaGameplayStatics_ConstructComponentByClass, Branches) == 0x000000, "Member 'IndianaGameplayStatics_ConstructComponentByClass::Branches' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_ConstructComponentByClass, InOuter) == 0x000008, "Member 'IndianaGameplayStatics_ConstructComponentByClass::InOuter' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_ConstructComponentByClass, InClass) == 0x000010, "Member 'IndianaGameplayStatics_ConstructComponentByClass::InClass' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_ConstructComponentByClass, ReturnValue) == 0x000018, "Member 'IndianaGameplayStatics_ConstructComponentByClass::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameplayStatics.CreateDialogWidget
// 0x0018 (0x0018 - 0x0000)
struct IndianaGameplayStatics_CreateDialogWidget final
{
public:
	struct FLocString                             BodyLocString;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCancellable;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDialogBoxWidget*                       ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameplayStatics_CreateDialogWidget) == 0x000008, "Wrong alignment on IndianaGameplayStatics_CreateDialogWidget");
static_assert(sizeof(IndianaGameplayStatics_CreateDialogWidget) == 0x000018, "Wrong size on IndianaGameplayStatics_CreateDialogWidget");
static_assert(offsetof(IndianaGameplayStatics_CreateDialogWidget, BodyLocString) == 0x000000, "Member 'IndianaGameplayStatics_CreateDialogWidget::BodyLocString' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_CreateDialogWidget, bCancellable) == 0x000008, "Member 'IndianaGameplayStatics_CreateDialogWidget::bCancellable' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_CreateDialogWidget, ReturnValue) == 0x000010, "Member 'IndianaGameplayStatics_CreateDialogWidget::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameplayStatics.CreateEndGameDialogWidget
// 0x0010 (0x0010 - 0x0000)
struct IndianaGameplayStatics_CreateEndGameDialogWidget final
{
public:
	struct FLocString                             BodyLocString;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDialogBoxWidget*                       ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameplayStatics_CreateEndGameDialogWidget) == 0x000008, "Wrong alignment on IndianaGameplayStatics_CreateEndGameDialogWidget");
static_assert(sizeof(IndianaGameplayStatics_CreateEndGameDialogWidget) == 0x000010, "Wrong size on IndianaGameplayStatics_CreateEndGameDialogWidget");
static_assert(offsetof(IndianaGameplayStatics_CreateEndGameDialogWidget, BodyLocString) == 0x000000, "Member 'IndianaGameplayStatics_CreateEndGameDialogWidget::BodyLocString' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_CreateEndGameDialogWidget, ReturnValue) == 0x000008, "Member 'IndianaGameplayStatics_CreateEndGameDialogWidget::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameplayStatics.DilateTime
// 0x0010 (0x0010 - 0x0000)
struct IndianaGameplayStatics_DilateTime final
{
public:
	class UObject*                                ContextObject;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UndilatedTime;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameplayStatics_DilateTime) == 0x000008, "Wrong alignment on IndianaGameplayStatics_DilateTime");
static_assert(sizeof(IndianaGameplayStatics_DilateTime) == 0x000010, "Wrong size on IndianaGameplayStatics_DilateTime");
static_assert(offsetof(IndianaGameplayStatics_DilateTime, ContextObject) == 0x000000, "Member 'IndianaGameplayStatics_DilateTime::ContextObject' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_DilateTime, UndilatedTime) == 0x000008, "Member 'IndianaGameplayStatics_DilateTime::UndilatedTime' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_DilateTime, ReturnValue) == 0x00000C, "Member 'IndianaGameplayStatics_DilateTime::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameplayStatics.EnableParticleSystemEmitters
// 0x0018 (0x0018 - 0x0000)
struct IndianaGameplayStatics_EnableParticleSystemEmitters final
{
public:
	class UParticleSystemComponent*               ParticleSystem;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           EnabledEmitters;                                   // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameplayStatics_EnableParticleSystemEmitters) == 0x000008, "Wrong alignment on IndianaGameplayStatics_EnableParticleSystemEmitters");
static_assert(sizeof(IndianaGameplayStatics_EnableParticleSystemEmitters) == 0x000018, "Wrong size on IndianaGameplayStatics_EnableParticleSystemEmitters");
static_assert(offsetof(IndianaGameplayStatics_EnableParticleSystemEmitters, ParticleSystem) == 0x000000, "Member 'IndianaGameplayStatics_EnableParticleSystemEmitters::ParticleSystem' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_EnableParticleSystemEmitters, EnabledEmitters) == 0x000008, "Member 'IndianaGameplayStatics_EnableParticleSystemEmitters::EnabledEmitters' has a wrong offset!");

// Function Indiana.IndianaGameplayStatics.FindChildComponentsByTag
// 0x0028 (0x0028 - 0x0000)
struct IndianaGameplayStatics_FindChildComponentsByTag final
{
public:
	class USceneComponent*                        ParentComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USceneComponent*>                ChildComponents;                                   // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaGameplayStatics_FindChildComponentsByTag) == 0x000008, "Wrong alignment on IndianaGameplayStatics_FindChildComponentsByTag");
static_assert(sizeof(IndianaGameplayStatics_FindChildComponentsByTag) == 0x000028, "Wrong size on IndianaGameplayStatics_FindChildComponentsByTag");
static_assert(offsetof(IndianaGameplayStatics_FindChildComponentsByTag, ParentComponent) == 0x000000, "Member 'IndianaGameplayStatics_FindChildComponentsByTag::ParentComponent' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_FindChildComponentsByTag, Tag) == 0x000008, "Member 'IndianaGameplayStatics_FindChildComponentsByTag::Tag' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_FindChildComponentsByTag, ChildComponents) == 0x000010, "Member 'IndianaGameplayStatics_FindChildComponentsByTag::ChildComponents' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_FindChildComponentsByTag, ReturnValue) == 0x000020, "Member 'IndianaGameplayStatics_FindChildComponentsByTag::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameplayStatics.FindFirstChildComponentByTag
// 0x0020 (0x0020 - 0x0000)
struct IndianaGameplayStatics_FindFirstChildComponentByTag final
{
public:
	ECheckBranches                                Branches;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        ParentComponent;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameplayStatics_FindFirstChildComponentByTag) == 0x000008, "Wrong alignment on IndianaGameplayStatics_FindFirstChildComponentByTag");
static_assert(sizeof(IndianaGameplayStatics_FindFirstChildComponentByTag) == 0x000020, "Wrong size on IndianaGameplayStatics_FindFirstChildComponentByTag");
static_assert(offsetof(IndianaGameplayStatics_FindFirstChildComponentByTag, Branches) == 0x000000, "Member 'IndianaGameplayStatics_FindFirstChildComponentByTag::Branches' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_FindFirstChildComponentByTag, ParentComponent) == 0x000008, "Member 'IndianaGameplayStatics_FindFirstChildComponentByTag::ParentComponent' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_FindFirstChildComponentByTag, Tag) == 0x000010, "Member 'IndianaGameplayStatics_FindFirstChildComponentByTag::Tag' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_FindFirstChildComponentByTag, ReturnValue) == 0x000018, "Member 'IndianaGameplayStatics_FindFirstChildComponentByTag::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameplayStatics.GetActorBySpeakerName
// 0x0020 (0x0020 - 0x0000)
struct IndianaGameplayStatics_GetActorBySpeakerName final
{
public:
	ECheckBranches                                Branches;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  SpeakerReference;                                  // 0x0004(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameplayStatics_GetActorBySpeakerName) == 0x000008, "Wrong alignment on IndianaGameplayStatics_GetActorBySpeakerName");
static_assert(sizeof(IndianaGameplayStatics_GetActorBySpeakerName) == 0x000020, "Wrong size on IndianaGameplayStatics_GetActorBySpeakerName");
static_assert(offsetof(IndianaGameplayStatics_GetActorBySpeakerName, Branches) == 0x000000, "Member 'IndianaGameplayStatics_GetActorBySpeakerName::Branches' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_GetActorBySpeakerName, SpeakerReference) == 0x000004, "Member 'IndianaGameplayStatics_GetActorBySpeakerName::SpeakerReference' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_GetActorBySpeakerName, ReturnValue) == 0x000018, "Member 'IndianaGameplayStatics_GetActorBySpeakerName::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameplayStatics.GetAllAppearanceRelatedMeshes
// 0x0020 (0x0020 - 0x0000)
struct IndianaGameplayStatics_GetAllAppearanceRelatedMeshes final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMeshComponent*>                 Meshes;                                            // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bIncludeWeapon;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaGameplayStatics_GetAllAppearanceRelatedMeshes) == 0x000008, "Wrong alignment on IndianaGameplayStatics_GetAllAppearanceRelatedMeshes");
static_assert(sizeof(IndianaGameplayStatics_GetAllAppearanceRelatedMeshes) == 0x000020, "Wrong size on IndianaGameplayStatics_GetAllAppearanceRelatedMeshes");
static_assert(offsetof(IndianaGameplayStatics_GetAllAppearanceRelatedMeshes, Actor) == 0x000000, "Member 'IndianaGameplayStatics_GetAllAppearanceRelatedMeshes::Actor' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_GetAllAppearanceRelatedMeshes, Meshes) == 0x000008, "Member 'IndianaGameplayStatics_GetAllAppearanceRelatedMeshes::Meshes' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_GetAllAppearanceRelatedMeshes, bIncludeWeapon) == 0x000018, "Member 'IndianaGameplayStatics_GetAllAppearanceRelatedMeshes::bIncludeWeapon' has a wrong offset!");

// Function Indiana.IndianaGameplayStatics.GetBlendSpaceLength
// 0x0010 (0x0010 - 0x0000)
struct IndianaGameplayStatics_GetBlendSpaceLength final
{
public:
	const class UBlendSpaceBase*                  BlendSpace;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaGameplayStatics_GetBlendSpaceLength) == 0x000008, "Wrong alignment on IndianaGameplayStatics_GetBlendSpaceLength");
static_assert(sizeof(IndianaGameplayStatics_GetBlendSpaceLength) == 0x000010, "Wrong size on IndianaGameplayStatics_GetBlendSpaceLength");
static_assert(offsetof(IndianaGameplayStatics_GetBlendSpaceLength, BlendSpace) == 0x000000, "Member 'IndianaGameplayStatics_GetBlendSpaceLength::BlendSpace' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_GetBlendSpaceLength, ReturnValue) == 0x000008, "Member 'IndianaGameplayStatics_GetBlendSpaceLength::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameplayStatics.GetEventEffectEnabledEmitters
// 0x0090 (0x0090 - 0x0000)
struct IndianaGameplayStatics_GetEventEffectEnabledEmitters final
{
public:
	struct FEventEffectParams                     Params_0;                                          // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FName>                           ReturnValue;                                       // 0x0080(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameplayStatics_GetEventEffectEnabledEmitters) == 0x000008, "Wrong alignment on IndianaGameplayStatics_GetEventEffectEnabledEmitters");
static_assert(sizeof(IndianaGameplayStatics_GetEventEffectEnabledEmitters) == 0x000090, "Wrong size on IndianaGameplayStatics_GetEventEffectEnabledEmitters");
static_assert(offsetof(IndianaGameplayStatics_GetEventEffectEnabledEmitters, Params_0) == 0x000000, "Member 'IndianaGameplayStatics_GetEventEffectEnabledEmitters::Params_0' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_GetEventEffectEnabledEmitters, ReturnValue) == 0x000080, "Member 'IndianaGameplayStatics_GetEventEffectEnabledEmitters::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameplayStatics.GetEventEffectParam
// 0x0088 (0x0088 - 0x0000)
struct IndianaGameplayStatics_GetEventEffectParam final
{
public:
	struct FEventEffectParams                     Params_0;                                          // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EEventEffectFloatParams                       Param;                                             // 0x0080(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0084(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameplayStatics_GetEventEffectParam) == 0x000008, "Wrong alignment on IndianaGameplayStatics_GetEventEffectParam");
static_assert(sizeof(IndianaGameplayStatics_GetEventEffectParam) == 0x000088, "Wrong size on IndianaGameplayStatics_GetEventEffectParam");
static_assert(offsetof(IndianaGameplayStatics_GetEventEffectParam, Params_0) == 0x000000, "Member 'IndianaGameplayStatics_GetEventEffectParam::Params_0' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_GetEventEffectParam, Param) == 0x000080, "Member 'IndianaGameplayStatics_GetEventEffectParam::Param' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_GetEventEffectParam, ReturnValue) == 0x000084, "Member 'IndianaGameplayStatics_GetEventEffectParam::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameplayStatics.GetEventEffectPhysicalSurface
// 0x0088 (0x0088 - 0x0000)
struct IndianaGameplayStatics_GetEventEffectPhysicalSurface final
{
public:
	struct FEventEffectParams                     Params_0;                                          // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EPhysicalSurface                              ReturnValue;                                       // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaGameplayStatics_GetEventEffectPhysicalSurface) == 0x000008, "Wrong alignment on IndianaGameplayStatics_GetEventEffectPhysicalSurface");
static_assert(sizeof(IndianaGameplayStatics_GetEventEffectPhysicalSurface) == 0x000088, "Wrong size on IndianaGameplayStatics_GetEventEffectPhysicalSurface");
static_assert(offsetof(IndianaGameplayStatics_GetEventEffectPhysicalSurface, Params_0) == 0x000000, "Member 'IndianaGameplayStatics_GetEventEffectPhysicalSurface::Params_0' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_GetEventEffectPhysicalSurface, ReturnValue) == 0x000080, "Member 'IndianaGameplayStatics_GetEventEffectPhysicalSurface::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameplayStatics.GetGameCalendar
// 0x0008 (0x0008 - 0x0000)
struct IndianaGameplayStatics_GetGameCalendar final
{
public:
	class UGameCalendar*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameplayStatics_GetGameCalendar) == 0x000008, "Wrong alignment on IndianaGameplayStatics_GetGameCalendar");
static_assert(sizeof(IndianaGameplayStatics_GetGameCalendar) == 0x000008, "Wrong size on IndianaGameplayStatics_GetGameCalendar");
static_assert(offsetof(IndianaGameplayStatics_GetGameCalendar, ReturnValue) == 0x000000, "Member 'IndianaGameplayStatics_GetGameCalendar::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameplayStatics.GetMeshComponent
// 0x0018 (0x0018 - 0x0000)
struct IndianaGameplayStatics_GetMeshComponent final
{
public:
	const class AActor*                           TargetActor;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMeshTarget                                   MeshType;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMeshComponent*                         ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameplayStatics_GetMeshComponent) == 0x000008, "Wrong alignment on IndianaGameplayStatics_GetMeshComponent");
static_assert(sizeof(IndianaGameplayStatics_GetMeshComponent) == 0x000018, "Wrong size on IndianaGameplayStatics_GetMeshComponent");
static_assert(offsetof(IndianaGameplayStatics_GetMeshComponent, TargetActor) == 0x000000, "Member 'IndianaGameplayStatics_GetMeshComponent::TargetActor' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_GetMeshComponent, MeshType) == 0x000008, "Member 'IndianaGameplayStatics_GetMeshComponent::MeshType' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_GetMeshComponent, ReturnValue) == 0x000010, "Member 'IndianaGameplayStatics_GetMeshComponent::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameplayStatics.GetSkeletalMeshComponent
// 0x0018 (0x0018 - 0x0000)
struct IndianaGameplayStatics_GetSkeletalMeshComponent final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMeshTarget                                   MeshType;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameplayStatics_GetSkeletalMeshComponent) == 0x000008, "Wrong alignment on IndianaGameplayStatics_GetSkeletalMeshComponent");
static_assert(sizeof(IndianaGameplayStatics_GetSkeletalMeshComponent) == 0x000018, "Wrong size on IndianaGameplayStatics_GetSkeletalMeshComponent");
static_assert(offsetof(IndianaGameplayStatics_GetSkeletalMeshComponent, TargetActor) == 0x000000, "Member 'IndianaGameplayStatics_GetSkeletalMeshComponent::TargetActor' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_GetSkeletalMeshComponent, MeshType) == 0x000008, "Member 'IndianaGameplayStatics_GetSkeletalMeshComponent::MeshType' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_GetSkeletalMeshComponent, ReturnValue) == 0x000010, "Member 'IndianaGameplayStatics_GetSkeletalMeshComponent::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameplayStatics.GetWeaponCurrentAmmoGaugeAlpha
// 0x0010 (0x0010 - 0x0000)
struct IndianaGameplayStatics_GetWeaponCurrentAmmoGaugeAlpha final
{
public:
	class UWeapon*                                Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaGameplayStatics_GetWeaponCurrentAmmoGaugeAlpha) == 0x000008, "Wrong alignment on IndianaGameplayStatics_GetWeaponCurrentAmmoGaugeAlpha");
static_assert(sizeof(IndianaGameplayStatics_GetWeaponCurrentAmmoGaugeAlpha) == 0x000010, "Wrong size on IndianaGameplayStatics_GetWeaponCurrentAmmoGaugeAlpha");
static_assert(offsetof(IndianaGameplayStatics_GetWeaponCurrentAmmoGaugeAlpha, Weapon) == 0x000000, "Member 'IndianaGameplayStatics_GetWeaponCurrentAmmoGaugeAlpha::Weapon' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_GetWeaponCurrentAmmoGaugeAlpha, ReturnValue) == 0x000008, "Member 'IndianaGameplayStatics_GetWeaponCurrentAmmoGaugeAlpha::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameplayStatics.GetWeaponCurrentCharge
// 0x0010 (0x0010 - 0x0000)
struct IndianaGameplayStatics_GetWeaponCurrentCharge final
{
public:
	class UWeapon*                                Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaGameplayStatics_GetWeaponCurrentCharge) == 0x000008, "Wrong alignment on IndianaGameplayStatics_GetWeaponCurrentCharge");
static_assert(sizeof(IndianaGameplayStatics_GetWeaponCurrentCharge) == 0x000010, "Wrong size on IndianaGameplayStatics_GetWeaponCurrentCharge");
static_assert(offsetof(IndianaGameplayStatics_GetWeaponCurrentCharge, Weapon) == 0x000000, "Member 'IndianaGameplayStatics_GetWeaponCurrentCharge::Weapon' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_GetWeaponCurrentCharge, ReturnValue) == 0x000008, "Member 'IndianaGameplayStatics_GetWeaponCurrentCharge::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameplayStatics.GetWeaponForceSpin
// 0x0010 (0x0010 - 0x0000)
struct IndianaGameplayStatics_GetWeaponForceSpin final
{
public:
	class UWeapon*                                Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaGameplayStatics_GetWeaponForceSpin) == 0x000008, "Wrong alignment on IndianaGameplayStatics_GetWeaponForceSpin");
static_assert(sizeof(IndianaGameplayStatics_GetWeaponForceSpin) == 0x000010, "Wrong size on IndianaGameplayStatics_GetWeaponForceSpin");
static_assert(offsetof(IndianaGameplayStatics_GetWeaponForceSpin, Weapon) == 0x000000, "Member 'IndianaGameplayStatics_GetWeaponForceSpin::Weapon' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_GetWeaponForceSpin, ReturnValue) == 0x000008, "Member 'IndianaGameplayStatics_GetWeaponForceSpin::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameplayStatics.GetWeaponIsSwinging
// 0x0010 (0x0010 - 0x0000)
struct IndianaGameplayStatics_GetWeaponIsSwinging final
{
public:
	class UWeapon*                                Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaGameplayStatics_GetWeaponIsSwinging) == 0x000008, "Wrong alignment on IndianaGameplayStatics_GetWeaponIsSwinging");
static_assert(sizeof(IndianaGameplayStatics_GetWeaponIsSwinging) == 0x000010, "Wrong size on IndianaGameplayStatics_GetWeaponIsSwinging");
static_assert(offsetof(IndianaGameplayStatics_GetWeaponIsSwinging, Weapon) == 0x000000, "Member 'IndianaGameplayStatics_GetWeaponIsSwinging::Weapon' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_GetWeaponIsSwinging, ReturnValue) == 0x000008, "Member 'IndianaGameplayStatics_GetWeaponIsSwinging::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameplayStatics.GetWeaponProjectileCharge
// 0x0010 (0x0010 - 0x0000)
struct IndianaGameplayStatics_GetWeaponProjectileCharge final
{
public:
	class UWeapon*                                Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaGameplayStatics_GetWeaponProjectileCharge) == 0x000008, "Wrong alignment on IndianaGameplayStatics_GetWeaponProjectileCharge");
static_assert(sizeof(IndianaGameplayStatics_GetWeaponProjectileCharge) == 0x000010, "Wrong size on IndianaGameplayStatics_GetWeaponProjectileCharge");
static_assert(offsetof(IndianaGameplayStatics_GetWeaponProjectileCharge, Weapon) == 0x000000, "Member 'IndianaGameplayStatics_GetWeaponProjectileCharge::Weapon' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_GetWeaponProjectileCharge, ReturnValue) == 0x000008, "Member 'IndianaGameplayStatics_GetWeaponProjectileCharge::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameplayStatics.GetWeaponSpinningUp
// 0x0010 (0x0010 - 0x0000)
struct IndianaGameplayStatics_GetWeaponSpinningUp final
{
public:
	class UWeapon*                                Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaGameplayStatics_GetWeaponSpinningUp) == 0x000008, "Wrong alignment on IndianaGameplayStatics_GetWeaponSpinningUp");
static_assert(sizeof(IndianaGameplayStatics_GetWeaponSpinningUp) == 0x000010, "Wrong size on IndianaGameplayStatics_GetWeaponSpinningUp");
static_assert(offsetof(IndianaGameplayStatics_GetWeaponSpinningUp, Weapon) == 0x000000, "Member 'IndianaGameplayStatics_GetWeaponSpinningUp::Weapon' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_GetWeaponSpinningUp, ReturnValue) == 0x000008, "Member 'IndianaGameplayStatics_GetWeaponSpinningUp::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameplayStatics.GetWeaponSpinProgress
// 0x0010 (0x0010 - 0x0000)
struct IndianaGameplayStatics_GetWeaponSpinProgress final
{
public:
	class UWeapon*                                Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaGameplayStatics_GetWeaponSpinProgress) == 0x000008, "Wrong alignment on IndianaGameplayStatics_GetWeaponSpinProgress");
static_assert(sizeof(IndianaGameplayStatics_GetWeaponSpinProgress) == 0x000010, "Wrong size on IndianaGameplayStatics_GetWeaponSpinProgress");
static_assert(offsetof(IndianaGameplayStatics_GetWeaponSpinProgress, Weapon) == 0x000000, "Member 'IndianaGameplayStatics_GetWeaponSpinProgress::Weapon' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_GetWeaponSpinProgress, ReturnValue) == 0x000008, "Member 'IndianaGameplayStatics_GetWeaponSpinProgress::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameplayStatics.IndianaAsyncLoadAsset
// 0x0040 (0x0040 - 0x0000)
struct IndianaGameplayStatics_IndianaAsyncLoadAsset final
{
public:
	TSoftObjectPtr<class UObject>                 Asset;                                             // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class UObject* LoadedObject)>  Callback;                                          // 0x002C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         HandleOut;                                         // 0x003C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameplayStatics_IndianaAsyncLoadAsset) == 0x000008, "Wrong alignment on IndianaGameplayStatics_IndianaAsyncLoadAsset");
static_assert(sizeof(IndianaGameplayStatics_IndianaAsyncLoadAsset) == 0x000040, "Wrong size on IndianaGameplayStatics_IndianaAsyncLoadAsset");
static_assert(offsetof(IndianaGameplayStatics_IndianaAsyncLoadAsset, Asset) == 0x000000, "Member 'IndianaGameplayStatics_IndianaAsyncLoadAsset::Asset' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_IndianaAsyncLoadAsset, Priority) == 0x000028, "Member 'IndianaGameplayStatics_IndianaAsyncLoadAsset::Priority' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_IndianaAsyncLoadAsset, Callback) == 0x00002C, "Member 'IndianaGameplayStatics_IndianaAsyncLoadAsset::Callback' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_IndianaAsyncLoadAsset, HandleOut) == 0x00003C, "Member 'IndianaGameplayStatics_IndianaAsyncLoadAsset::HandleOut' has a wrong offset!");

// Function Indiana.IndianaGameplayStatics.IndianaCancelAsyncLoadAsset
// 0x0004 (0x0004 - 0x0000)
struct IndianaGameplayStatics_IndianaCancelAsyncLoadAsset final
{
public:
	int32                                         Handle;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameplayStatics_IndianaCancelAsyncLoadAsset) == 0x000004, "Wrong alignment on IndianaGameplayStatics_IndianaCancelAsyncLoadAsset");
static_assert(sizeof(IndianaGameplayStatics_IndianaCancelAsyncLoadAsset) == 0x000004, "Wrong size on IndianaGameplayStatics_IndianaCancelAsyncLoadAsset");
static_assert(offsetof(IndianaGameplayStatics_IndianaCancelAsyncLoadAsset, Handle) == 0x000000, "Member 'IndianaGameplayStatics_IndianaCancelAsyncLoadAsset::Handle' has a wrong offset!");

// Function Indiana.IndianaGameplayStatics.InheritMeshProperties
// 0x0010 (0x0010 - 0x0000)
struct IndianaGameplayStatics_InheritMeshProperties final
{
public:
	class UMeshComponent*                         ParentMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMeshComponent*                         ChildMesh;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameplayStatics_InheritMeshProperties) == 0x000008, "Wrong alignment on IndianaGameplayStatics_InheritMeshProperties");
static_assert(sizeof(IndianaGameplayStatics_InheritMeshProperties) == 0x000010, "Wrong size on IndianaGameplayStatics_InheritMeshProperties");
static_assert(offsetof(IndianaGameplayStatics_InheritMeshProperties, ParentMesh) == 0x000000, "Member 'IndianaGameplayStatics_InheritMeshProperties::ParentMesh' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_InheritMeshProperties, ChildMesh) == 0x000008, "Member 'IndianaGameplayStatics_InheritMeshProperties::ChildMesh' has a wrong offset!");

// Function Indiana.IndianaGameplayStatics.InitiateTravel
// 0x0018 (0x0018 - 0x0000)
struct IndianaGameplayStatics_InitiateTravel final
{
public:
	class AIndianaPlayerCharacter*                PlayerCharacter;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTravelDestinationData*           TravelDest;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTravelFromMapLedger;                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTriggerAutosave;                                  // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaGameplayStatics_InitiateTravel) == 0x000008, "Wrong alignment on IndianaGameplayStatics_InitiateTravel");
static_assert(sizeof(IndianaGameplayStatics_InitiateTravel) == 0x000018, "Wrong size on IndianaGameplayStatics_InitiateTravel");
static_assert(offsetof(IndianaGameplayStatics_InitiateTravel, PlayerCharacter) == 0x000000, "Member 'IndianaGameplayStatics_InitiateTravel::PlayerCharacter' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_InitiateTravel, TravelDest) == 0x000008, "Member 'IndianaGameplayStatics_InitiateTravel::TravelDest' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_InitiateTravel, bTravelFromMapLedger) == 0x000010, "Member 'IndianaGameplayStatics_InitiateTravel::bTravelFromMapLedger' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_InitiateTravel, bTriggerAutosave) == 0x000011, "Member 'IndianaGameplayStatics_InitiateTravel::bTriggerAutosave' has a wrong offset!");

// Function Indiana.IndianaGameplayStatics.IsCharacterInAnyBarkConversation
// 0x0010 (0x0010 - 0x0000)
struct IndianaGameplayStatics_IsCharacterInAnyBarkConversation final
{
public:
	class AIndianaCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaGameplayStatics_IsCharacterInAnyBarkConversation) == 0x000008, "Wrong alignment on IndianaGameplayStatics_IsCharacterInAnyBarkConversation");
static_assert(sizeof(IndianaGameplayStatics_IsCharacterInAnyBarkConversation) == 0x000010, "Wrong size on IndianaGameplayStatics_IsCharacterInAnyBarkConversation");
static_assert(offsetof(IndianaGameplayStatics_IsCharacterInAnyBarkConversation, Character) == 0x000000, "Member 'IndianaGameplayStatics_IsCharacterInAnyBarkConversation::Character' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_IsCharacterInAnyBarkConversation, ReturnValue) == 0x000008, "Member 'IndianaGameplayStatics_IsCharacterInAnyBarkConversation::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameplayStatics.IsGlobalValue
// 0x0020 (0x0020 - 0x0000)
struct IndianaGameplayStatics_IsGlobalValue final
{
public:
	class FString                                 VariableName;                                      // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComparisonOperator                           Operator;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoolResult                                   Result;                                            // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaGameplayStatics_IsGlobalValue) == 0x000008, "Wrong alignment on IndianaGameplayStatics_IsGlobalValue");
static_assert(sizeof(IndianaGameplayStatics_IsGlobalValue) == 0x000020, "Wrong size on IndianaGameplayStatics_IsGlobalValue");
static_assert(offsetof(IndianaGameplayStatics_IsGlobalValue, VariableName) == 0x000000, "Member 'IndianaGameplayStatics_IsGlobalValue::VariableName' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_IsGlobalValue, Operator) == 0x000010, "Member 'IndianaGameplayStatics_IsGlobalValue::Operator' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_IsGlobalValue, Value) == 0x000014, "Member 'IndianaGameplayStatics_IsGlobalValue::Value' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_IsGlobalValue, Result) == 0x000018, "Member 'IndianaGameplayStatics_IsGlobalValue::Result' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_IsGlobalValue, ReturnValue) == 0x000019, "Member 'IndianaGameplayStatics_IsGlobalValue::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameplayStatics.IsGlobalVariableValid
// 0x0018 (0x0018 - 0x0000)
struct IndianaGameplayStatics_IsGlobalVariableValid final
{
public:
	struct FGlobalVariable                        Variable;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EBoolResult                                   Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaGameplayStatics_IsGlobalVariableValid) == 0x000008, "Wrong alignment on IndianaGameplayStatics_IsGlobalVariableValid");
static_assert(sizeof(IndianaGameplayStatics_IsGlobalVariableValid) == 0x000018, "Wrong size on IndianaGameplayStatics_IsGlobalVariableValid");
static_assert(offsetof(IndianaGameplayStatics_IsGlobalVariableValid, Variable) == 0x000000, "Member 'IndianaGameplayStatics_IsGlobalVariableValid::Variable' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_IsGlobalVariableValid, Result) == 0x000010, "Member 'IndianaGameplayStatics_IsGlobalVariableValid::Result' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_IsGlobalVariableValid, ReturnValue) == 0x000011, "Member 'IndianaGameplayStatics_IsGlobalVariableValid::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameplayStatics.IsGlobalVariableValue
// 0x0020 (0x0020 - 0x0000)
struct IndianaGameplayStatics_IsGlobalVariableValue final
{
public:
	struct FGlobalVariable                        Variable;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EComparisonOperator                           Operator;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoolResult                                   Result;                                            // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaGameplayStatics_IsGlobalVariableValue) == 0x000008, "Wrong alignment on IndianaGameplayStatics_IsGlobalVariableValue");
static_assert(sizeof(IndianaGameplayStatics_IsGlobalVariableValue) == 0x000020, "Wrong size on IndianaGameplayStatics_IsGlobalVariableValue");
static_assert(offsetof(IndianaGameplayStatics_IsGlobalVariableValue, Variable) == 0x000000, "Member 'IndianaGameplayStatics_IsGlobalVariableValue::Variable' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_IsGlobalVariableValue, Operator) == 0x000010, "Member 'IndianaGameplayStatics_IsGlobalVariableValue::Operator' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_IsGlobalVariableValue, Value) == 0x000014, "Member 'IndianaGameplayStatics_IsGlobalVariableValue::Value' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_IsGlobalVariableValue, Result) == 0x000018, "Member 'IndianaGameplayStatics_IsGlobalVariableValue::Result' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_IsGlobalVariableValue, ReturnValue) == 0x000019, "Member 'IndianaGameplayStatics_IsGlobalVariableValue::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameplayStatics.IsItemOfClass
// 0x0018 (0x0018 - 0x0000)
struct IndianaGameplayStatics_IsItemOfClass final
{
public:
	const class UItem*                            Item;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UItem>                      ItemType;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaGameplayStatics_IsItemOfClass) == 0x000008, "Wrong alignment on IndianaGameplayStatics_IsItemOfClass");
static_assert(sizeof(IndianaGameplayStatics_IsItemOfClass) == 0x000018, "Wrong size on IndianaGameplayStatics_IsItemOfClass");
static_assert(offsetof(IndianaGameplayStatics_IsItemOfClass, Item) == 0x000000, "Member 'IndianaGameplayStatics_IsItemOfClass::Item' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_IsItemOfClass, ItemType) == 0x000008, "Member 'IndianaGameplayStatics_IsItemOfClass::ItemType' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_IsItemOfClass, ReturnValue) == 0x000010, "Member 'IndianaGameplayStatics_IsItemOfClass::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameplayStatics.IsItemStackOfClass
// 0x0020 (0x0020 - 0x0000)
struct IndianaGameplayStatics_IsItemStackOfClass final
{
public:
	struct FItemStack                             ItemStack;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TSubclassOf<class UItem>                      ItemType;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaGameplayStatics_IsItemStackOfClass) == 0x000008, "Wrong alignment on IndianaGameplayStatics_IsItemStackOfClass");
static_assert(sizeof(IndianaGameplayStatics_IsItemStackOfClass) == 0x000020, "Wrong size on IndianaGameplayStatics_IsItemStackOfClass");
static_assert(offsetof(IndianaGameplayStatics_IsItemStackOfClass, ItemStack) == 0x000000, "Member 'IndianaGameplayStatics_IsItemStackOfClass::ItemStack' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_IsItemStackOfClass, ItemType) == 0x000010, "Member 'IndianaGameplayStatics_IsItemStackOfClass::ItemType' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_IsItemStackOfClass, ReturnValue) == 0x000018, "Member 'IndianaGameplayStatics_IsItemStackOfClass::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameplayStatics.IsQuestActive
// 0x0014 (0x0014 - 0x0000)
struct IndianaGameplayStatics_IsQuestActive final
{
public:
	struct FGuid                                  QuestID;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoolResult                                   Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaGameplayStatics_IsQuestActive) == 0x000004, "Wrong alignment on IndianaGameplayStatics_IsQuestActive");
static_assert(sizeof(IndianaGameplayStatics_IsQuestActive) == 0x000014, "Wrong size on IndianaGameplayStatics_IsQuestActive");
static_assert(offsetof(IndianaGameplayStatics_IsQuestActive, QuestID) == 0x000000, "Member 'IndianaGameplayStatics_IsQuestActive::QuestID' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_IsQuestActive, Result) == 0x000010, "Member 'IndianaGameplayStatics_IsQuestActive::Result' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_IsQuestActive, ReturnValue) == 0x000011, "Member 'IndianaGameplayStatics_IsQuestActive::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameplayStatics.IsRunningAutomationTest
// 0x0002 (0x0002 - 0x0000)
struct IndianaGameplayStatics_IsRunningAutomationTest final
{
public:
	EBoolResult                                   Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameplayStatics_IsRunningAutomationTest) == 0x000001, "Wrong alignment on IndianaGameplayStatics_IsRunningAutomationTest");
static_assert(sizeof(IndianaGameplayStatics_IsRunningAutomationTest) == 0x000002, "Wrong size on IndianaGameplayStatics_IsRunningAutomationTest");
static_assert(offsetof(IndianaGameplayStatics_IsRunningAutomationTest, Result) == 0x000000, "Member 'IndianaGameplayStatics_IsRunningAutomationTest::Result' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_IsRunningAutomationTest, ReturnValue) == 0x000001, "Member 'IndianaGameplayStatics_IsRunningAutomationTest::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameplayStatics.SetFPVCameraFOV
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameplayStatics_SetFPVCameraFOV final
{
public:
	bool                                          bOverrideCustomFOV;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameplayStatics_SetFPVCameraFOV) == 0x000001, "Wrong alignment on IndianaGameplayStatics_SetFPVCameraFOV");
static_assert(sizeof(IndianaGameplayStatics_SetFPVCameraFOV) == 0x000001, "Wrong size on IndianaGameplayStatics_SetFPVCameraFOV");
static_assert(offsetof(IndianaGameplayStatics_SetFPVCameraFOV, bOverrideCustomFOV) == 0x000000, "Member 'IndianaGameplayStatics_SetFPVCameraFOV::bOverrideCustomFOV' has a wrong offset!");

// Function Indiana.IndianaGameplayStatics.SetIndianaActorGod
// 0x0010 (0x0010 - 0x0000)
struct IndianaGameplayStatics_SetIndianaActorGod final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGodMode;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaGameplayStatics_SetIndianaActorGod) == 0x000008, "Wrong alignment on IndianaGameplayStatics_SetIndianaActorGod");
static_assert(sizeof(IndianaGameplayStatics_SetIndianaActorGod) == 0x000010, "Wrong size on IndianaGameplayStatics_SetIndianaActorGod");
static_assert(offsetof(IndianaGameplayStatics_SetIndianaActorGod, Actor) == 0x000000, "Member 'IndianaGameplayStatics_SetIndianaActorGod::Actor' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_SetIndianaActorGod, bGodMode) == 0x000008, "Member 'IndianaGameplayStatics_SetIndianaActorGod::bGodMode' has a wrong offset!");

// Function Indiana.IndianaGameplayStatics.SetIndianaActorInteractable
// 0x0010 (0x0010 - 0x0000)
struct IndianaGameplayStatics_SetIndianaActorInteractable final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInteractable;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaGameplayStatics_SetIndianaActorInteractable) == 0x000008, "Wrong alignment on IndianaGameplayStatics_SetIndianaActorInteractable");
static_assert(sizeof(IndianaGameplayStatics_SetIndianaActorInteractable) == 0x000010, "Wrong size on IndianaGameplayStatics_SetIndianaActorInteractable");
static_assert(offsetof(IndianaGameplayStatics_SetIndianaActorInteractable, Actor) == 0x000000, "Member 'IndianaGameplayStatics_SetIndianaActorInteractable::Actor' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_SetIndianaActorInteractable, bInteractable) == 0x000008, "Member 'IndianaGameplayStatics_SetIndianaActorInteractable::bInteractable' has a wrong offset!");

// Function Indiana.IndianaGameplayStatics.SetIndianaActorPseudoGod
// 0x0010 (0x0010 - 0x0000)
struct IndianaGameplayStatics_SetIndianaActorPseudoGod final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPseudoGodMode;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaGameplayStatics_SetIndianaActorPseudoGod) == 0x000008, "Wrong alignment on IndianaGameplayStatics_SetIndianaActorPseudoGod");
static_assert(sizeof(IndianaGameplayStatics_SetIndianaActorPseudoGod) == 0x000010, "Wrong size on IndianaGameplayStatics_SetIndianaActorPseudoGod");
static_assert(offsetof(IndianaGameplayStatics_SetIndianaActorPseudoGod, Actor) == 0x000000, "Member 'IndianaGameplayStatics_SetIndianaActorPseudoGod::Actor' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_SetIndianaActorPseudoGod, bPseudoGodMode) == 0x000008, "Member 'IndianaGameplayStatics_SetIndianaActorPseudoGod::bPseudoGodMode' has a wrong offset!");

// Function Indiana.IndianaGameplayStatics.SetMoveIgnoreActorCollision
// 0x0018 (0x0018 - 0x0000)
struct IndianaGameplayStatics_SetMoveIgnoreActorCollision final
{
public:
	class AActor*                                 ActorA;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ActorB;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnore;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaGameplayStatics_SetMoveIgnoreActorCollision) == 0x000008, "Wrong alignment on IndianaGameplayStatics_SetMoveIgnoreActorCollision");
static_assert(sizeof(IndianaGameplayStatics_SetMoveIgnoreActorCollision) == 0x000018, "Wrong size on IndianaGameplayStatics_SetMoveIgnoreActorCollision");
static_assert(offsetof(IndianaGameplayStatics_SetMoveIgnoreActorCollision, ActorA) == 0x000000, "Member 'IndianaGameplayStatics_SetMoveIgnoreActorCollision::ActorA' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_SetMoveIgnoreActorCollision, ActorB) == 0x000008, "Member 'IndianaGameplayStatics_SetMoveIgnoreActorCollision::ActorB' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_SetMoveIgnoreActorCollision, bIgnore) == 0x000010, "Member 'IndianaGameplayStatics_SetMoveIgnoreActorCollision::bIgnore' has a wrong offset!");

// Function Indiana.IndianaGameplayStatics.SetMoveIgnoreComponentCollision
// 0x0018 (0x0018 - 0x0000)
struct IndianaGameplayStatics_SetMoveIgnoreComponentCollision final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    ComponentToIgnore;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnore;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaGameplayStatics_SetMoveIgnoreComponentCollision) == 0x000008, "Wrong alignment on IndianaGameplayStatics_SetMoveIgnoreComponentCollision");
static_assert(sizeof(IndianaGameplayStatics_SetMoveIgnoreComponentCollision) == 0x000018, "Wrong size on IndianaGameplayStatics_SetMoveIgnoreComponentCollision");
static_assert(offsetof(IndianaGameplayStatics_SetMoveIgnoreComponentCollision, Actor) == 0x000000, "Member 'IndianaGameplayStatics_SetMoveIgnoreComponentCollision::Actor' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_SetMoveIgnoreComponentCollision, ComponentToIgnore) == 0x000008, "Member 'IndianaGameplayStatics_SetMoveIgnoreComponentCollision::ComponentToIgnore' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_SetMoveIgnoreComponentCollision, bIgnore) == 0x000010, "Member 'IndianaGameplayStatics_SetMoveIgnoreComponentCollision::bIgnore' has a wrong offset!");

// Function Indiana.IndianaGameplayStatics.SetParticleSystemEmittersEnabled
// 0x0020 (0x0020 - 0x0000)
struct IndianaGameplayStatics_SetParticleSystemEmittersEnabled final
{
public:
	class UParticleSystemComponent*               ParticleSystem;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           EnabledEmitters;                                   // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaGameplayStatics_SetParticleSystemEmittersEnabled) == 0x000008, "Wrong alignment on IndianaGameplayStatics_SetParticleSystemEmittersEnabled");
static_assert(sizeof(IndianaGameplayStatics_SetParticleSystemEmittersEnabled) == 0x000020, "Wrong size on IndianaGameplayStatics_SetParticleSystemEmittersEnabled");
static_assert(offsetof(IndianaGameplayStatics_SetParticleSystemEmittersEnabled, ParticleSystem) == 0x000000, "Member 'IndianaGameplayStatics_SetParticleSystemEmittersEnabled::ParticleSystem' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_SetParticleSystemEmittersEnabled, EnabledEmitters) == 0x000008, "Member 'IndianaGameplayStatics_SetParticleSystemEmittersEnabled::EnabledEmitters' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_SetParticleSystemEmittersEnabled, bEnabled) == 0x000018, "Member 'IndianaGameplayStatics_SetParticleSystemEmittersEnabled::bEnabled' has a wrong offset!");

// Function Indiana.IndianaGameplayStatics.SpawnPooledEmitterAtLocation
// 0x0038 (0x0038 - 0x0000)
struct IndianaGameplayStatics_SpawnPooledEmitterAtLocation final
{
public:
	class UParticleSystem*                        EmitterTemplate;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               ReturnValue;                                       // 0x0030(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameplayStatics_SpawnPooledEmitterAtLocation) == 0x000008, "Wrong alignment on IndianaGameplayStatics_SpawnPooledEmitterAtLocation");
static_assert(sizeof(IndianaGameplayStatics_SpawnPooledEmitterAtLocation) == 0x000038, "Wrong size on IndianaGameplayStatics_SpawnPooledEmitterAtLocation");
static_assert(offsetof(IndianaGameplayStatics_SpawnPooledEmitterAtLocation, EmitterTemplate) == 0x000000, "Member 'IndianaGameplayStatics_SpawnPooledEmitterAtLocation::EmitterTemplate' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_SpawnPooledEmitterAtLocation, Location) == 0x000008, "Member 'IndianaGameplayStatics_SpawnPooledEmitterAtLocation::Location' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_SpawnPooledEmitterAtLocation, Rotation) == 0x000014, "Member 'IndianaGameplayStatics_SpawnPooledEmitterAtLocation::Rotation' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_SpawnPooledEmitterAtLocation, Scale) == 0x000020, "Member 'IndianaGameplayStatics_SpawnPooledEmitterAtLocation::Scale' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_SpawnPooledEmitterAtLocation, ReturnValue) == 0x000030, "Member 'IndianaGameplayStatics_SpawnPooledEmitterAtLocation::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameplayStatics.SpawnPooledEmitterAttached
// 0x0048 (0x0048 - 0x0000)
struct IndianaGameplayStatics_SpawnPooledEmitterAttached final
{
public:
	class UParticleSystem*                        EmitterTemplate;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        AttachToComponent;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachPointName;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0024(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0030(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachLocation                               LocationType;                                      // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               ReturnValue;                                       // 0x0040(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameplayStatics_SpawnPooledEmitterAttached) == 0x000008, "Wrong alignment on IndianaGameplayStatics_SpawnPooledEmitterAttached");
static_assert(sizeof(IndianaGameplayStatics_SpawnPooledEmitterAttached) == 0x000048, "Wrong size on IndianaGameplayStatics_SpawnPooledEmitterAttached");
static_assert(offsetof(IndianaGameplayStatics_SpawnPooledEmitterAttached, EmitterTemplate) == 0x000000, "Member 'IndianaGameplayStatics_SpawnPooledEmitterAttached::EmitterTemplate' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_SpawnPooledEmitterAttached, AttachToComponent) == 0x000008, "Member 'IndianaGameplayStatics_SpawnPooledEmitterAttached::AttachToComponent' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_SpawnPooledEmitterAttached, AttachPointName) == 0x000010, "Member 'IndianaGameplayStatics_SpawnPooledEmitterAttached::AttachPointName' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_SpawnPooledEmitterAttached, Location) == 0x000018, "Member 'IndianaGameplayStatics_SpawnPooledEmitterAttached::Location' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_SpawnPooledEmitterAttached, Rotation) == 0x000024, "Member 'IndianaGameplayStatics_SpawnPooledEmitterAttached::Rotation' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_SpawnPooledEmitterAttached, Scale) == 0x000030, "Member 'IndianaGameplayStatics_SpawnPooledEmitterAttached::Scale' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_SpawnPooledEmitterAttached, LocationType) == 0x00003C, "Member 'IndianaGameplayStatics_SpawnPooledEmitterAttached::LocationType' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_SpawnPooledEmitterAttached, ReturnValue) == 0x000040, "Member 'IndianaGameplayStatics_SpawnPooledEmitterAttached::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameplayStatics.SuicideActor
// 0x0010 (0x0010 - 0x0000)
struct IndianaGameplayStatics_SuicideActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaGameplayStatics_SuicideActor) == 0x000008, "Wrong alignment on IndianaGameplayStatics_SuicideActor");
static_assert(sizeof(IndianaGameplayStatics_SuicideActor) == 0x000010, "Wrong size on IndianaGameplayStatics_SuicideActor");
static_assert(offsetof(IndianaGameplayStatics_SuicideActor, Actor) == 0x000000, "Member 'IndianaGameplayStatics_SuicideActor::Actor' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_SuicideActor, ReturnValue) == 0x000008, "Member 'IndianaGameplayStatics_SuicideActor::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameplayStatics.TeleportPlayerToStart
// 0x0008 (0x0008 - 0x0000)
struct IndianaGameplayStatics_TeleportPlayerToStart final
{
public:
	class AIndianaPlayerStart*                    PlayerStart;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameplayStatics_TeleportPlayerToStart) == 0x000008, "Wrong alignment on IndianaGameplayStatics_TeleportPlayerToStart");
static_assert(sizeof(IndianaGameplayStatics_TeleportPlayerToStart) == 0x000008, "Wrong size on IndianaGameplayStatics_TeleportPlayerToStart");
static_assert(offsetof(IndianaGameplayStatics_TeleportPlayerToStart, PlayerStart) == 0x000000, "Member 'IndianaGameplayStatics_TeleportPlayerToStart::PlayerStart' has a wrong offset!");

// Function Indiana.IndianaGameplayStatics.UndilateTime
// 0x0010 (0x0010 - 0x0000)
struct IndianaGameplayStatics_UndilateTime final
{
public:
	class UObject*                                ContextObject;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DilatedTime;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameplayStatics_UndilateTime) == 0x000008, "Wrong alignment on IndianaGameplayStatics_UndilateTime");
static_assert(sizeof(IndianaGameplayStatics_UndilateTime) == 0x000010, "Wrong size on IndianaGameplayStatics_UndilateTime");
static_assert(offsetof(IndianaGameplayStatics_UndilateTime, ContextObject) == 0x000000, "Member 'IndianaGameplayStatics_UndilateTime::ContextObject' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_UndilateTime, DilatedTime) == 0x000008, "Member 'IndianaGameplayStatics_UndilateTime::DilatedTime' has a wrong offset!");
static_assert(offsetof(IndianaGameplayStatics_UndilateTime, ReturnValue) == 0x00000C, "Member 'IndianaGameplayStatics_UndilateTime::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetDefaultSSGIQualityForLevel
// 0x0008 (0x0008 - 0x0000)
struct IndianaGameUserSettings_GetDefaultSSGIQualityForLevel final
{
public:
	int32                                         InQualityLevel;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetDefaultSSGIQualityForLevel) == 0x000004, "Wrong alignment on IndianaGameUserSettings_GetDefaultSSGIQualityForLevel");
static_assert(sizeof(IndianaGameUserSettings_GetDefaultSSGIQualityForLevel) == 0x000008, "Wrong size on IndianaGameUserSettings_GetDefaultSSGIQualityForLevel");
static_assert(offsetof(IndianaGameUserSettings_GetDefaultSSGIQualityForLevel, InQualityLevel) == 0x000000, "Member 'IndianaGameUserSettings_GetDefaultSSGIQualityForLevel::InQualityLevel' has a wrong offset!");
static_assert(offsetof(IndianaGameUserSettings_GetDefaultSSGIQualityForLevel, ReturnValue) == 0x000004, "Member 'IndianaGameUserSettings_GetDefaultSSGIQualityForLevel::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetActionKeyBinds
// 0x0018 (0x0018 - 0x0000)
struct IndianaGameUserSettings_GetActionKeyBinds final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FInputActionKeyMapping>         ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetActionKeyBinds) == 0x000008, "Wrong alignment on IndianaGameUserSettings_GetActionKeyBinds");
static_assert(sizeof(IndianaGameUserSettings_GetActionKeyBinds) == 0x000018, "Wrong size on IndianaGameUserSettings_GetActionKeyBinds");
static_assert(offsetof(IndianaGameUserSettings_GetActionKeyBinds, ActionName) == 0x000000, "Member 'IndianaGameUserSettings_GetActionKeyBinds::ActionName' has a wrong offset!");
static_assert(offsetof(IndianaGameUserSettings_GetActionKeyBinds, ReturnValue) == 0x000008, "Member 'IndianaGameUserSettings_GetActionKeyBinds::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetAxisKeyBinds
// 0x0020 (0x0020 - 0x0000)
struct IndianaGameUserSettings_GetAxisKeyBinds final
{
public:
	class FName                                   AxisName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FInputAxisKeyMapping>           ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetAxisKeyBinds) == 0x000008, "Wrong alignment on IndianaGameUserSettings_GetAxisKeyBinds");
static_assert(sizeof(IndianaGameUserSettings_GetAxisKeyBinds) == 0x000020, "Wrong size on IndianaGameUserSettings_GetAxisKeyBinds");
static_assert(offsetof(IndianaGameUserSettings_GetAxisKeyBinds, AxisName) == 0x000000, "Member 'IndianaGameUserSettings_GetAxisKeyBinds::AxisName' has a wrong offset!");
static_assert(offsetof(IndianaGameUserSettings_GetAxisKeyBinds, Scale) == 0x000008, "Member 'IndianaGameUserSettings_GetAxisKeyBinds::Scale' has a wrong offset!");
static_assert(offsetof(IndianaGameUserSettings_GetAxisKeyBinds, ReturnValue) == 0x000010, "Member 'IndianaGameUserSettings_GetAxisKeyBinds::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetControllerAutoSprintEnabled
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetControllerAutoSprintEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetControllerAutoSprintEnabled) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetControllerAutoSprintEnabled");
static_assert(sizeof(IndianaGameUserSettings_GetControllerAutoSprintEnabled) == 0x000001, "Wrong size on IndianaGameUserSettings_GetControllerAutoSprintEnabled");
static_assert(offsetof(IndianaGameUserSettings_GetControllerAutoSprintEnabled, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetControllerAutoSprintEnabled::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetControllerRumbleEnabled
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetControllerRumbleEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetControllerRumbleEnabled) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetControllerRumbleEnabled");
static_assert(sizeof(IndianaGameUserSettings_GetControllerRumbleEnabled) == 0x000001, "Wrong size on IndianaGameUserSettings_GetControllerRumbleEnabled");
static_assert(offsetof(IndianaGameUserSettings_GetControllerRumbleEnabled, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetControllerRumbleEnabled::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetControllerXAxisInverted
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetControllerXAxisInverted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetControllerXAxisInverted) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetControllerXAxisInverted");
static_assert(sizeof(IndianaGameUserSettings_GetControllerXAxisInverted) == 0x000001, "Wrong size on IndianaGameUserSettings_GetControllerXAxisInverted");
static_assert(offsetof(IndianaGameUserSettings_GetControllerXAxisInverted, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetControllerXAxisInverted::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetControllerYAxisInverted
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetControllerYAxisInverted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetControllerYAxisInverted) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetControllerYAxisInverted");
static_assert(sizeof(IndianaGameUserSettings_GetControllerYAxisInverted) == 0x000001, "Wrong size on IndianaGameUserSettings_GetControllerYAxisInverted");
static_assert(offsetof(IndianaGameUserSettings_GetControllerYAxisInverted, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetControllerYAxisInverted::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetEffectsSoundVolume
// 0x0004 (0x0004 - 0x0000)
struct IndianaGameUserSettings_GetEffectsSoundVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetEffectsSoundVolume) == 0x000004, "Wrong alignment on IndianaGameUserSettings_GetEffectsSoundVolume");
static_assert(sizeof(IndianaGameUserSettings_GetEffectsSoundVolume) == 0x000004, "Wrong size on IndianaGameUserSettings_GetEffectsSoundVolume");
static_assert(offsetof(IndianaGameUserSettings_GetEffectsSoundVolume, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetEffectsSoundVolume::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetGodMode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetGodMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetGodMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetGodMode");
static_assert(sizeof(IndianaGameUserSettings_GetGodMode) == 0x000001, "Wrong size on IndianaGameUserSettings_GetGodMode");
static_assert(offsetof(IndianaGameUserSettings_GetGodMode, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetGodMode::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetInfiniteAmmo
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetInfiniteAmmo final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetInfiniteAmmo) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetInfiniteAmmo");
static_assert(sizeof(IndianaGameUserSettings_GetInfiniteAmmo) == 0x000001, "Wrong size on IndianaGameUserSettings_GetInfiniteAmmo");
static_assert(offsetof(IndianaGameUserSettings_GetInfiniteAmmo, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetInfiniteAmmo::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetMasterSoundVolume
// 0x0004 (0x0004 - 0x0000)
struct IndianaGameUserSettings_GetMasterSoundVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetMasterSoundVolume) == 0x000004, "Wrong alignment on IndianaGameUserSettings_GetMasterSoundVolume");
static_assert(sizeof(IndianaGameUserSettings_GetMasterSoundVolume) == 0x000004, "Wrong size on IndianaGameUserSettings_GetMasterSoundVolume");
static_assert(offsetof(IndianaGameUserSettings_GetMasterSoundVolume, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetMasterSoundVolume::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetMouseSensitivity
// 0x0004 (0x0004 - 0x0000)
struct IndianaGameUserSettings_GetMouseSensitivity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetMouseSensitivity) == 0x000004, "Wrong alignment on IndianaGameUserSettings_GetMouseSensitivity");
static_assert(sizeof(IndianaGameUserSettings_GetMouseSensitivity) == 0x000004, "Wrong size on IndianaGameUserSettings_GetMouseSensitivity");
static_assert(offsetof(IndianaGameUserSettings_GetMouseSensitivity, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetMouseSensitivity::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetMusicSoundVolume
// 0x0004 (0x0004 - 0x0000)
struct IndianaGameUserSettings_GetMusicSoundVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetMusicSoundVolume) == 0x000004, "Wrong alignment on IndianaGameUserSettings_GetMusicSoundVolume");
static_assert(sizeof(IndianaGameUserSettings_GetMusicSoundVolume) == 0x000004, "Wrong size on IndianaGameUserSettings_GetMusicSoundVolume");
static_assert(offsetof(IndianaGameUserSettings_GetMusicSoundVolume, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetMusicSoundVolume::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetPseudoGodMode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetPseudoGodMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetPseudoGodMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetPseudoGodMode");
static_assert(sizeof(IndianaGameUserSettings_GetPseudoGodMode) == 0x000001, "Wrong size on IndianaGameUserSettings_GetPseudoGodMode");
static_assert(offsetof(IndianaGameUserSettings_GetPseudoGodMode, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetPseudoGodMode::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetRadialSensitivity
// 0x0004 (0x0004 - 0x0000)
struct IndianaGameUserSettings_GetRadialSensitivity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetRadialSensitivity) == 0x000004, "Wrong alignment on IndianaGameUserSettings_GetRadialSensitivity");
static_assert(sizeof(IndianaGameUserSettings_GetRadialSensitivity) == 0x000004, "Wrong size on IndianaGameUserSettings_GetRadialSensitivity");
static_assert(offsetof(IndianaGameUserSettings_GetRadialSensitivity, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetRadialSensitivity::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetUISoundVolume
// 0x0004 (0x0004 - 0x0000)
struct IndianaGameUserSettings_GetUISoundVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetUISoundVolume) == 0x000004, "Wrong alignment on IndianaGameUserSettings_GetUISoundVolume");
static_assert(sizeof(IndianaGameUserSettings_GetUISoundVolume) == 0x000004, "Wrong size on IndianaGameUserSettings_GetUISoundVolume");
static_assert(offsetof(IndianaGameUserSettings_GetUISoundVolume, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetUISoundVolume::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetViewBaseStats
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetViewBaseStats final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetViewBaseStats) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetViewBaseStats");
static_assert(sizeof(IndianaGameUserSettings_GetViewBaseStats) == 0x000001, "Wrong size on IndianaGameUserSettings_GetViewBaseStats");
static_assert(offsetof(IndianaGameUserSettings_GetViewBaseStats, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetViewBaseStats::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetVoiceSoundVolume
// 0x0004 (0x0004 - 0x0000)
struct IndianaGameUserSettings_GetVoiceSoundVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetVoiceSoundVolume) == 0x000004, "Wrong alignment on IndianaGameUserSettings_GetVoiceSoundVolume");
static_assert(sizeof(IndianaGameUserSettings_GetVoiceSoundVolume) == 0x000004, "Wrong size on IndianaGameUserSettings_GetVoiceSoundVolume");
static_assert(offsetof(IndianaGameUserSettings_GetVoiceSoundVolume, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetVoiceSoundVolume::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetXAxisInverted
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetXAxisInverted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetXAxisInverted) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetXAxisInverted");
static_assert(sizeof(IndianaGameUserSettings_GetXAxisInverted) == 0x000001, "Wrong size on IndianaGameUserSettings_GetXAxisInverted");
static_assert(offsetof(IndianaGameUserSettings_GetXAxisInverted, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetXAxisInverted::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetYAxisInverted
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetYAxisInverted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetYAxisInverted) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetYAxisInverted");
static_assert(sizeof(IndianaGameUserSettings_GetYAxisInverted) == 0x000001, "Wrong size on IndianaGameUserSettings_GetYAxisInverted");
static_assert(offsetof(IndianaGameUserSettings_GetYAxisInverted, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetYAxisInverted::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.Set3DResolution
// 0x0004 (0x0004 - 0x0000)
struct IndianaGameUserSettings_Set3DResolution final
{
public:
	float                                         ResolutionIn;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_Set3DResolution) == 0x000004, "Wrong alignment on IndianaGameUserSettings_Set3DResolution");
static_assert(sizeof(IndianaGameUserSettings_Set3DResolution) == 0x000004, "Wrong size on IndianaGameUserSettings_Set3DResolution");
static_assert(offsetof(IndianaGameUserSettings_Set3DResolution, ResolutionIn) == 0x000000, "Member 'IndianaGameUserSettings_Set3DResolution::ResolutionIn' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetAbilityControlUIMode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetAbilityControlUIMode final
{
public:
	EAbilityControlMode                           ModeIn;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetAbilityControlUIMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetAbilityControlUIMode");
static_assert(sizeof(IndianaGameUserSettings_SetAbilityControlUIMode) == 0x000001, "Wrong size on IndianaGameUserSettings_SetAbilityControlUIMode");
static_assert(offsetof(IndianaGameUserSettings_SetAbilityControlUIMode, ModeIn) == 0x000000, "Member 'IndianaGameUserSettings_SetAbilityControlUIMode::ModeIn' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetActionKeyBinds
// 0x0020 (0x0020 - 0x0000)
struct IndianaGameUserSettings_SetActionKeyBinds final
{
public:
	TArray<struct FInputActionKeyMapping>         OldValues;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FInputActionKeyMapping>         NewValues;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetActionKeyBinds) == 0x000008, "Wrong alignment on IndianaGameUserSettings_SetActionKeyBinds");
static_assert(sizeof(IndianaGameUserSettings_SetActionKeyBinds) == 0x000020, "Wrong size on IndianaGameUserSettings_SetActionKeyBinds");
static_assert(offsetof(IndianaGameUserSettings_SetActionKeyBinds, OldValues) == 0x000000, "Member 'IndianaGameUserSettings_SetActionKeyBinds::OldValues' has a wrong offset!");
static_assert(offsetof(IndianaGameUserSettings_SetActionKeyBinds, NewValues) == 0x000010, "Member 'IndianaGameUserSettings_SetActionKeyBinds::NewValues' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetAimingReticleMode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetAimingReticleMode final
{
public:
	EReticleMode                                  ModeIn;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetAimingReticleMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetAimingReticleMode");
static_assert(sizeof(IndianaGameUserSettings_SetAimingReticleMode) == 0x000001, "Wrong size on IndianaGameUserSettings_SetAimingReticleMode");
static_assert(offsetof(IndianaGameUserSettings_SetAimingReticleMode, ModeIn) == 0x000000, "Member 'IndianaGameUserSettings_SetAimingReticleMode::ModeIn' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetAntiAliasingMethod
// 0x0004 (0x0004 - 0x0000)
struct IndianaGameUserSettings_SetAntiAliasingMethod final
{
public:
	int32                                         Method;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetAntiAliasingMethod) == 0x000004, "Wrong alignment on IndianaGameUserSettings_SetAntiAliasingMethod");
static_assert(sizeof(IndianaGameUserSettings_SetAntiAliasingMethod) == 0x000004, "Wrong size on IndianaGameUserSettings_SetAntiAliasingMethod");
static_assert(offsetof(IndianaGameUserSettings_SetAntiAliasingMethod, Method) == 0x000000, "Member 'IndianaGameUserSettings_SetAntiAliasingMethod::Method' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetAreaNameMode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetAreaNameMode final
{
public:
	EAreaNameMode                                 AreaModeIn;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetAreaNameMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetAreaNameMode");
static_assert(sizeof(IndianaGameUserSettings_SetAreaNameMode) == 0x000001, "Wrong size on IndianaGameUserSettings_SetAreaNameMode");
static_assert(offsetof(IndianaGameUserSettings_SetAreaNameMode, AreaModeIn) == 0x000000, "Member 'IndianaGameUserSettings_SetAreaNameMode::AreaModeIn' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetAutoCollapseItemViewers
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetAutoCollapseItemViewers final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetAutoCollapseItemViewers) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetAutoCollapseItemViewers");
static_assert(sizeof(IndianaGameUserSettings_SetAutoCollapseItemViewers) == 0x000001, "Wrong size on IndianaGameUserSettings_SetAutoCollapseItemViewers");
static_assert(offsetof(IndianaGameUserSettings_SetAutoCollapseItemViewers, bEnabled) == 0x000000, "Member 'IndianaGameUserSettings_SetAutoCollapseItemViewers::bEnabled' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetAxisKeyBinds
// 0x0020 (0x0020 - 0x0000)
struct IndianaGameUserSettings_SetAxisKeyBinds final
{
public:
	TArray<struct FInputAxisKeyMapping>           OldValues;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FInputAxisKeyMapping>           NewValues;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetAxisKeyBinds) == 0x000008, "Wrong alignment on IndianaGameUserSettings_SetAxisKeyBinds");
static_assert(sizeof(IndianaGameUserSettings_SetAxisKeyBinds) == 0x000020, "Wrong size on IndianaGameUserSettings_SetAxisKeyBinds");
static_assert(offsetof(IndianaGameUserSettings_SetAxisKeyBinds, OldValues) == 0x000000, "Member 'IndianaGameUserSettings_SetAxisKeyBinds::OldValues' has a wrong offset!");
static_assert(offsetof(IndianaGameUserSettings_SetAxisKeyBinds, NewValues) == 0x000010, "Member 'IndianaGameUserSettings_SetAxisKeyBinds::NewValues' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetBarkSubtitleMode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetBarkSubtitleMode final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetBarkSubtitleMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetBarkSubtitleMode");
static_assert(sizeof(IndianaGameUserSettings_SetBarkSubtitleMode) == 0x000001, "Wrong size on IndianaGameUserSettings_SetBarkSubtitleMode");
static_assert(offsetof(IndianaGameUserSettings_SetBarkSubtitleMode, bVisible) == 0x000000, "Member 'IndianaGameUserSettings_SetBarkSubtitleMode::bVisible' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetChromaticAberration
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetChromaticAberration final
{
public:
	bool                                          bUseChromaticAberration;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetChromaticAberration) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetChromaticAberration");
static_assert(sizeof(IndianaGameUserSettings_SetChromaticAberration) == 0x000001, "Wrong size on IndianaGameUserSettings_SetChromaticAberration");
static_assert(offsetof(IndianaGameUserSettings_SetChromaticAberration, bUseChromaticAberration) == 0x000000, "Member 'IndianaGameUserSettings_SetChromaticAberration::bUseChromaticAberration' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetCinematicKillCam
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetCinematicKillCam final
{
public:
	bool                                          bEnabledIn;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetCinematicKillCam) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetCinematicKillCam");
static_assert(sizeof(IndianaGameUserSettings_SetCinematicKillCam) == 0x000001, "Wrong size on IndianaGameUserSettings_SetCinematicKillCam");
static_assert(offsetof(IndianaGameUserSettings_SetCinematicKillCam, bEnabledIn) == 0x000000, "Member 'IndianaGameUserSettings_SetCinematicKillCam::bEnabledIn' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetCinematicSubtitlesVisible
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetCinematicSubtitlesVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetCinematicSubtitlesVisible) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetCinematicSubtitlesVisible");
static_assert(sizeof(IndianaGameUserSettings_SetCinematicSubtitlesVisible) == 0x000001, "Wrong size on IndianaGameUserSettings_SetCinematicSubtitlesVisible");
static_assert(offsetof(IndianaGameUserSettings_SetCinematicSubtitlesVisible, bVisible) == 0x000000, "Member 'IndianaGameUserSettings_SetCinematicSubtitlesVisible::bVisible' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetColorblindModeEnabled
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetColorblindModeEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetColorblindModeEnabled) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetColorblindModeEnabled");
static_assert(sizeof(IndianaGameUserSettings_SetColorblindModeEnabled) == 0x000001, "Wrong size on IndianaGameUserSettings_SetColorblindModeEnabled");
static_assert(offsetof(IndianaGameUserSettings_SetColorblindModeEnabled, bEnabled) == 0x000000, "Member 'IndianaGameUserSettings_SetColorblindModeEnabled::bEnabled' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetCompanionAbilityBindingMode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetCompanionAbilityBindingMode final
{
public:
	ECompanionAbilityBindingMode                  ModeIn;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetCompanionAbilityBindingMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetCompanionAbilityBindingMode");
static_assert(sizeof(IndianaGameUserSettings_SetCompanionAbilityBindingMode) == 0x000001, "Wrong size on IndianaGameUserSettings_SetCompanionAbilityBindingMode");
static_assert(offsetof(IndianaGameUserSettings_SetCompanionAbilityBindingMode, ModeIn) == 0x000000, "Member 'IndianaGameUserSettings_SetCompanionAbilityBindingMode::ModeIn' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetCompanionAbilityUIMode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetCompanionAbilityUIMode final
{
public:
	ECompanionAbilityUIMode                       ModeIn;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetCompanionAbilityUIMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetCompanionAbilityUIMode");
static_assert(sizeof(IndianaGameUserSettings_SetCompanionAbilityUIMode) == 0x000001, "Wrong size on IndianaGameUserSettings_SetCompanionAbilityUIMode");
static_assert(offsetof(IndianaGameUserSettings_SetCompanionAbilityUIMode, ModeIn) == 0x000000, "Member 'IndianaGameUserSettings_SetCompanionAbilityUIMode::ModeIn' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetCompanionOutlineMode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetCompanionOutlineMode final
{
public:
	ECompanionOutlineMode                         Mode;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetCompanionOutlineMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetCompanionOutlineMode");
static_assert(sizeof(IndianaGameUserSettings_SetCompanionOutlineMode) == 0x000001, "Wrong size on IndianaGameUserSettings_SetCompanionOutlineMode");
static_assert(offsetof(IndianaGameUserSettings_SetCompanionOutlineMode, Mode) == 0x000000, "Member 'IndianaGameUserSettings_SetCompanionOutlineMode::Mode' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetCompanionPassiveCDNotificationMode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetCompanionPassiveCDNotificationMode final
{
public:
	ECompanionAbilityPassiveNotificationMode      ModeIn;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetCompanionPassiveCDNotificationMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetCompanionPassiveCDNotificationMode");
static_assert(sizeof(IndianaGameUserSettings_SetCompanionPassiveCDNotificationMode) == 0x000001, "Wrong size on IndianaGameUserSettings_SetCompanionPassiveCDNotificationMode");
static_assert(offsetof(IndianaGameUserSettings_SetCompanionPassiveCDNotificationMode, ModeIn) == 0x000000, "Member 'IndianaGameUserSettings_SetCompanionPassiveCDNotificationMode::ModeIn' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetCompanionStatusUIMode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetCompanionStatusUIMode final
{
public:
	ECompanionStatusMode                          ModeIn;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetCompanionStatusUIMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetCompanionStatusUIMode");
static_assert(sizeof(IndianaGameUserSettings_SetCompanionStatusUIMode) == 0x000001, "Wrong size on IndianaGameUserSettings_SetCompanionStatusUIMode");
static_assert(offsetof(IndianaGameUserSettings_SetCompanionStatusUIMode, ModeIn) == 0x000000, "Member 'IndianaGameUserSettings_SetCompanionStatusUIMode::ModeIn' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetControllerADSSensitivity
// 0x0004 (0x0004 - 0x0000)
struct IndianaGameUserSettings_SetControllerADSSensitivity final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetControllerADSSensitivity) == 0x000004, "Wrong alignment on IndianaGameUserSettings_SetControllerADSSensitivity");
static_assert(sizeof(IndianaGameUserSettings_SetControllerADSSensitivity) == 0x000004, "Wrong size on IndianaGameUserSettings_SetControllerADSSensitivity");
static_assert(offsetof(IndianaGameUserSettings_SetControllerADSSensitivity, Value) == 0x000000, "Member 'IndianaGameUserSettings_SetControllerADSSensitivity::Value' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetControllerAutoSprintEnabled
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetControllerAutoSprintEnabled final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetControllerAutoSprintEnabled) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetControllerAutoSprintEnabled");
static_assert(sizeof(IndianaGameUserSettings_SetControllerAutoSprintEnabled) == 0x000001, "Wrong size on IndianaGameUserSettings_SetControllerAutoSprintEnabled");
static_assert(offsetof(IndianaGameUserSettings_SetControllerAutoSprintEnabled, Value) == 0x000000, "Member 'IndianaGameUserSettings_SetControllerAutoSprintEnabled::Value' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetControllerEnableImpulseTriggers
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetControllerEnableImpulseTriggers final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetControllerEnableImpulseTriggers) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetControllerEnableImpulseTriggers");
static_assert(sizeof(IndianaGameUserSettings_SetControllerEnableImpulseTriggers) == 0x000001, "Wrong size on IndianaGameUserSettings_SetControllerEnableImpulseTriggers");
static_assert(offsetof(IndianaGameUserSettings_SetControllerEnableImpulseTriggers, bEnable) == 0x000000, "Member 'IndianaGameUserSettings_SetControllerEnableImpulseTriggers::bEnable' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetControllerLeftInnerDeadZone
// 0x0004 (0x0004 - 0x0000)
struct IndianaGameUserSettings_SetControllerLeftInnerDeadZone final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetControllerLeftInnerDeadZone) == 0x000004, "Wrong alignment on IndianaGameUserSettings_SetControllerLeftInnerDeadZone");
static_assert(sizeof(IndianaGameUserSettings_SetControllerLeftInnerDeadZone) == 0x000004, "Wrong size on IndianaGameUserSettings_SetControllerLeftInnerDeadZone");
static_assert(offsetof(IndianaGameUserSettings_SetControllerLeftInnerDeadZone, Value) == 0x000000, "Member 'IndianaGameUserSettings_SetControllerLeftInnerDeadZone::Value' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetControllerLeftOuterDeadZone
// 0x0004 (0x0004 - 0x0000)
struct IndianaGameUserSettings_SetControllerLeftOuterDeadZone final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetControllerLeftOuterDeadZone) == 0x000004, "Wrong alignment on IndianaGameUserSettings_SetControllerLeftOuterDeadZone");
static_assert(sizeof(IndianaGameUserSettings_SetControllerLeftOuterDeadZone) == 0x000004, "Wrong size on IndianaGameUserSettings_SetControllerLeftOuterDeadZone");
static_assert(offsetof(IndianaGameUserSettings_SetControllerLeftOuterDeadZone, Value) == 0x000000, "Member 'IndianaGameUserSettings_SetControllerLeftOuterDeadZone::Value' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetControllerRightInnerDeadZone
// 0x0004 (0x0004 - 0x0000)
struct IndianaGameUserSettings_SetControllerRightInnerDeadZone final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetControllerRightInnerDeadZone) == 0x000004, "Wrong alignment on IndianaGameUserSettings_SetControllerRightInnerDeadZone");
static_assert(sizeof(IndianaGameUserSettings_SetControllerRightInnerDeadZone) == 0x000004, "Wrong size on IndianaGameUserSettings_SetControllerRightInnerDeadZone");
static_assert(offsetof(IndianaGameUserSettings_SetControllerRightInnerDeadZone, Value) == 0x000000, "Member 'IndianaGameUserSettings_SetControllerRightInnerDeadZone::Value' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetControllerRightOuterDeadZone
// 0x0004 (0x0004 - 0x0000)
struct IndianaGameUserSettings_SetControllerRightOuterDeadZone final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetControllerRightOuterDeadZone) == 0x000004, "Wrong alignment on IndianaGameUserSettings_SetControllerRightOuterDeadZone");
static_assert(sizeof(IndianaGameUserSettings_SetControllerRightOuterDeadZone) == 0x000004, "Wrong size on IndianaGameUserSettings_SetControllerRightOuterDeadZone");
static_assert(offsetof(IndianaGameUserSettings_SetControllerRightOuterDeadZone, Value) == 0x000000, "Member 'IndianaGameUserSettings_SetControllerRightOuterDeadZone::Value' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetControllerRumbleEnabled
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetControllerRumbleEnabled final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetControllerRumbleEnabled) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetControllerRumbleEnabled");
static_assert(sizeof(IndianaGameUserSettings_SetControllerRumbleEnabled) == 0x000001, "Wrong size on IndianaGameUserSettings_SetControllerRumbleEnabled");
static_assert(offsetof(IndianaGameUserSettings_SetControllerRumbleEnabled, Value) == 0x000000, "Member 'IndianaGameUserSettings_SetControllerRumbleEnabled::Value' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetControllerSensitivity
// 0x0004 (0x0004 - 0x0000)
struct IndianaGameUserSettings_SetControllerSensitivity final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetControllerSensitivity) == 0x000004, "Wrong alignment on IndianaGameUserSettings_SetControllerSensitivity");
static_assert(sizeof(IndianaGameUserSettings_SetControllerSensitivity) == 0x000004, "Wrong size on IndianaGameUserSettings_SetControllerSensitivity");
static_assert(offsetof(IndianaGameUserSettings_SetControllerSensitivity, Value) == 0x000000, "Member 'IndianaGameUserSettings_SetControllerSensitivity::Value' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetControllerXAxisInverted
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetControllerXAxisInverted final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetControllerXAxisInverted) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetControllerXAxisInverted");
static_assert(sizeof(IndianaGameUserSettings_SetControllerXAxisInverted) == 0x000001, "Wrong size on IndianaGameUserSettings_SetControllerXAxisInverted");
static_assert(offsetof(IndianaGameUserSettings_SetControllerXAxisInverted, Value) == 0x000000, "Member 'IndianaGameUserSettings_SetControllerXAxisInverted::Value' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetControllerYAxisInverted
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetControllerYAxisInverted final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetControllerYAxisInverted) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetControllerYAxisInverted");
static_assert(sizeof(IndianaGameUserSettings_SetControllerYAxisInverted) == 0x000001, "Wrong size on IndianaGameUserSettings_SetControllerYAxisInverted");
static_assert(offsetof(IndianaGameUserSettings_SetControllerYAxisInverted, Value) == 0x000000, "Member 'IndianaGameUserSettings_SetControllerYAxisInverted::Value' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetConversationContinueOnVOEnd
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetConversationContinueOnVOEnd final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetConversationContinueOnVOEnd) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetConversationContinueOnVOEnd");
static_assert(sizeof(IndianaGameUserSettings_SetConversationContinueOnVOEnd) == 0x000001, "Wrong size on IndianaGameUserSettings_SetConversationContinueOnVOEnd");
static_assert(offsetof(IndianaGameUserSettings_SetConversationContinueOnVOEnd, Value) == 0x000000, "Member 'IndianaGameUserSettings_SetConversationContinueOnVOEnd::Value' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetConversationResponseVisibleDuringVO
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetConversationResponseVisibleDuringVO final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetConversationResponseVisibleDuringVO) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetConversationResponseVisibleDuringVO");
static_assert(sizeof(IndianaGameUserSettings_SetConversationResponseVisibleDuringVO) == 0x000001, "Wrong size on IndianaGameUserSettings_SetConversationResponseVisibleDuringVO");
static_assert(offsetof(IndianaGameUserSettings_SetConversationResponseVisibleDuringVO, bVisible) == 0x000000, "Member 'IndianaGameUserSettings_SetConversationResponseVisibleDuringVO::bVisible' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetConversationSubtitleMode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetConversationSubtitleMode final
{
public:
	EConversationSubtitleMode                     Mode;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetConversationSubtitleMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetConversationSubtitleMode");
static_assert(sizeof(IndianaGameUserSettings_SetConversationSubtitleMode) == 0x000001, "Wrong size on IndianaGameUserSettings_SetConversationSubtitleMode");
static_assert(offsetof(IndianaGameUserSettings_SetConversationSubtitleMode, Mode) == 0x000000, "Member 'IndianaGameUserSettings_SetConversationSubtitleMode::Mode' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetDialogSkillMode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetDialogSkillMode final
{
public:
	EDialogSkillMode                              ModeIn;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetDialogSkillMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetDialogSkillMode");
static_assert(sizeof(IndianaGameUserSettings_SetDialogSkillMode) == 0x000001, "Wrong size on IndianaGameUserSettings_SetDialogSkillMode");
static_assert(offsetof(IndianaGameUserSettings_SetDialogSkillMode, ModeIn) == 0x000000, "Member 'IndianaGameUserSettings_SetDialogSkillMode::ModeIn' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetDodgeDisplayMode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetDodgeDisplayMode final
{
public:
	EDodgeDisplayMode                             ModeIn;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetDodgeDisplayMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetDodgeDisplayMode");
static_assert(sizeof(IndianaGameUserSettings_SetDodgeDisplayMode) == 0x000001, "Wrong size on IndianaGameUserSettings_SetDodgeDisplayMode");
static_assert(offsetof(IndianaGameUserSettings_SetDodgeDisplayMode, ModeIn) == 0x000000, "Member 'IndianaGameUserSettings_SetDodgeDisplayMode::ModeIn' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetEffectsSoundVolume
// 0x0004 (0x0004 - 0x0000)
struct IndianaGameUserSettings_SetEffectsSoundVolume final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetEffectsSoundVolume) == 0x000004, "Wrong alignment on IndianaGameUserSettings_SetEffectsSoundVolume");
static_assert(sizeof(IndianaGameUserSettings_SetEffectsSoundVolume) == 0x000004, "Wrong size on IndianaGameUserSettings_SetEffectsSoundVolume");
static_assert(offsetof(IndianaGameUserSettings_SetEffectsSoundVolume, Value) == 0x000000, "Member 'IndianaGameUserSettings_SetEffectsSoundVolume::Value' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetFontSizeModifier
// 0x0004 (0x0004 - 0x0000)
struct IndianaGameUserSettings_SetFontSizeModifier final
{
public:
	int32                                         ModifierIn;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetFontSizeModifier) == 0x000004, "Wrong alignment on IndianaGameUserSettings_SetFontSizeModifier");
static_assert(sizeof(IndianaGameUserSettings_SetFontSizeModifier) == 0x000004, "Wrong size on IndianaGameUserSettings_SetFontSizeModifier");
static_assert(offsetof(IndianaGameUserSettings_SetFontSizeModifier, ModifierIn) == 0x000000, "Member 'IndianaGameUserSettings_SetFontSizeModifier::ModifierIn' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetFOV
// 0x0004 (0x0004 - 0x0000)
struct IndianaGameUserSettings_SetFOV final
{
public:
	float                                         FOVIn;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetFOV) == 0x000004, "Wrong alignment on IndianaGameUserSettings_SetFOV");
static_assert(sizeof(IndianaGameUserSettings_SetFOV) == 0x000004, "Wrong size on IndianaGameUserSettings_SetFOV");
static_assert(offsetof(IndianaGameUserSettings_SetFOV, FOVIn) == 0x000000, "Member 'IndianaGameUserSettings_SetFOV::FOVIn' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetFPSIndicatorMode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetFPSIndicatorMode final
{
public:
	EFPSIndicatorMode                             ModeIn;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetFPSIndicatorMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetFPSIndicatorMode");
static_assert(sizeof(IndianaGameUserSettings_SetFPSIndicatorMode) == 0x000001, "Wrong size on IndianaGameUserSettings_SetFPSIndicatorMode");
static_assert(offsetof(IndianaGameUserSettings_SetFPSIndicatorMode, ModeIn) == 0x000000, "Member 'IndianaGameUserSettings_SetFPSIndicatorMode::ModeIn' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetFPSLimit
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetFPSLimit final
{
public:
	EFPSLimit                                     FPSLimitIn;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetFPSLimit) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetFPSLimit");
static_assert(sizeof(IndianaGameUserSettings_SetFPSLimit) == 0x000001, "Wrong size on IndianaGameUserSettings_SetFPSLimit");
static_assert(offsetof(IndianaGameUserSettings_SetFPSLimit, FPSLimitIn) == 0x000000, "Member 'IndianaGameUserSettings_SetFPSLimit::FPSLimitIn' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetFSR2Enabled
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetFSR2Enabled final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetFSR2Enabled) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetFSR2Enabled");
static_assert(sizeof(IndianaGameUserSettings_SetFSR2Enabled) == 0x000001, "Wrong size on IndianaGameUserSettings_SetFSR2Enabled");
static_assert(offsetof(IndianaGameUserSettings_SetFSR2Enabled, Value) == 0x000000, "Member 'IndianaGameUserSettings_SetFSR2Enabled::Value' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetFSR2Mode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetFSR2Mode final
{
public:
	EFSR2Mode                                     Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetFSR2Mode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetFSR2Mode");
static_assert(sizeof(IndianaGameUserSettings_SetFSR2Mode) == 0x000001, "Wrong size on IndianaGameUserSettings_SetFSR2Mode");
static_assert(offsetof(IndianaGameUserSettings_SetFSR2Mode, Value) == 0x000000, "Member 'IndianaGameUserSettings_SetFSR2Mode::Value' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetFullscreenModeThenBroadcast
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetFullscreenModeThenBroadcast final
{
public:
	EWindowMode                                   Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetFullscreenModeThenBroadcast) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetFullscreenModeThenBroadcast");
static_assert(sizeof(IndianaGameUserSettings_SetFullscreenModeThenBroadcast) == 0x000001, "Wrong size on IndianaGameUserSettings_SetFullscreenModeThenBroadcast");
static_assert(offsetof(IndianaGameUserSettings_SetFullscreenModeThenBroadcast, Value) == 0x000000, "Member 'IndianaGameUserSettings_SetFullscreenModeThenBroadcast::Value' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetGammaLevel
// 0x0004 (0x0004 - 0x0000)
struct IndianaGameUserSettings_SetGammaLevel final
{
public:
	float                                         GammaLevelIn;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetGammaLevel) == 0x000004, "Wrong alignment on IndianaGameUserSettings_SetGammaLevel");
static_assert(sizeof(IndianaGameUserSettings_SetGammaLevel) == 0x000004, "Wrong size on IndianaGameUserSettings_SetGammaLevel");
static_assert(offsetof(IndianaGameUserSettings_SetGammaLevel, GammaLevelIn) == 0x000000, "Member 'IndianaGameUserSettings_SetGammaLevel::GammaLevelIn' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetGodMode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetGodMode final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetGodMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetGodMode");
static_assert(sizeof(IndianaGameUserSettings_SetGodMode) == 0x000001, "Wrong size on IndianaGameUserSettings_SetGodMode");
static_assert(offsetof(IndianaGameUserSettings_SetGodMode, Value) == 0x000000, "Member 'IndianaGameUserSettings_SetGodMode::Value' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetGraphicsQuality
// 0x0004 (0x0004 - 0x0000)
struct IndianaGameUserSettings_SetGraphicsQuality final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetGraphicsQuality) == 0x000004, "Wrong alignment on IndianaGameUserSettings_SetGraphicsQuality");
static_assert(sizeof(IndianaGameUserSettings_SetGraphicsQuality) == 0x000004, "Wrong size on IndianaGameUserSettings_SetGraphicsQuality");
static_assert(offsetof(IndianaGameUserSettings_SetGraphicsQuality, Value) == 0x000000, "Member 'IndianaGameUserSettings_SetGraphicsQuality::Value' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetHeadbobbing
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetHeadbobbing final
{
public:
	bool                                          bEnabledIn;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetHeadbobbing) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetHeadbobbing");
static_assert(sizeof(IndianaGameUserSettings_SetHeadbobbing) == 0x000001, "Wrong size on IndianaGameUserSettings_SetHeadbobbing");
static_assert(offsetof(IndianaGameUserSettings_SetHeadbobbing, bEnabledIn) == 0x000000, "Member 'IndianaGameUserSettings_SetHeadbobbing::bEnabledIn' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetHeldWeaponDisplayMode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetHeldWeaponDisplayMode final
{
public:
	EHeldWeaponDisplayMode                        ModeIn;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetHeldWeaponDisplayMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetHeldWeaponDisplayMode");
static_assert(sizeof(IndianaGameUserSettings_SetHeldWeaponDisplayMode) == 0x000001, "Wrong size on IndianaGameUserSettings_SetHeldWeaponDisplayMode");
static_assert(offsetof(IndianaGameUserSettings_SetHeldWeaponDisplayMode, ModeIn) == 0x000000, "Member 'IndianaGameUserSettings_SetHeldWeaponDisplayMode::ModeIn' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetHeldWeaponDisplayTextMode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetHeldWeaponDisplayTextMode final
{
public:
	EHeldWeaponDisplayText                        ModeIn;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetHeldWeaponDisplayTextMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetHeldWeaponDisplayTextMode");
static_assert(sizeof(IndianaGameUserSettings_SetHeldWeaponDisplayTextMode) == 0x000001, "Wrong size on IndianaGameUserSettings_SetHeldWeaponDisplayTextMode");
static_assert(offsetof(IndianaGameUserSettings_SetHeldWeaponDisplayTextMode, ModeIn) == 0x000000, "Member 'IndianaGameUserSettings_SetHeldWeaponDisplayTextMode::ModeIn' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetHUDMode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetHUDMode final
{
public:
	EHUDMode                                      ModeIn;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetHUDMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetHUDMode");
static_assert(sizeof(IndianaGameUserSettings_SetHUDMode) == 0x000001, "Wrong size on IndianaGameUserSettings_SetHUDMode");
static_assert(offsetof(IndianaGameUserSettings_SetHUDMode, ModeIn) == 0x000000, "Member 'IndianaGameUserSettings_SetHUDMode::ModeIn' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetHUDVisibility
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetHUDVisibility final
{
public:
	bool                                          bVisibilityIn;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetHUDVisibility) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetHUDVisibility");
static_assert(sizeof(IndianaGameUserSettings_SetHUDVisibility) == 0x000001, "Wrong size on IndianaGameUserSettings_SetHUDVisibility");
static_assert(offsetof(IndianaGameUserSettings_SetHUDVisibility, bVisibilityIn) == 0x000000, "Member 'IndianaGameUserSettings_SetHUDVisibility::bVisibilityIn' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetImpulseTriggerIntensity
// 0x0004 (0x0004 - 0x0000)
struct IndianaGameUserSettings_SetImpulseTriggerIntensity final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetImpulseTriggerIntensity) == 0x000004, "Wrong alignment on IndianaGameUserSettings_SetImpulseTriggerIntensity");
static_assert(sizeof(IndianaGameUserSettings_SetImpulseTriggerIntensity) == 0x000004, "Wrong size on IndianaGameUserSettings_SetImpulseTriggerIntensity");
static_assert(offsetof(IndianaGameUserSettings_SetImpulseTriggerIntensity, Value) == 0x000000, "Member 'IndianaGameUserSettings_SetImpulseTriggerIntensity::Value' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetInfiniteAmmo
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetInfiniteAmmo final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetInfiniteAmmo) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetInfiniteAmmo");
static_assert(sizeof(IndianaGameUserSettings_SetInfiniteAmmo) == 0x000001, "Wrong size on IndianaGameUserSettings_SetInfiniteAmmo");
static_assert(offsetof(IndianaGameUserSettings_SetInfiniteAmmo, Value) == 0x000000, "Member 'IndianaGameUserSettings_SetInfiniteAmmo::Value' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetIsFreshUserSettings
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetIsFreshUserSettings final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetIsFreshUserSettings) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetIsFreshUserSettings");
static_assert(sizeof(IndianaGameUserSettings_SetIsFreshUserSettings) == 0x000001, "Wrong size on IndianaGameUserSettings_SetIsFreshUserSettings");
static_assert(offsetof(IndianaGameUserSettings_SetIsFreshUserSettings, Value) == 0x000000, "Member 'IndianaGameUserSettings_SetIsFreshUserSettings::Value' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetIsSimplifiedEquipmentRepairWarning
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetIsSimplifiedEquipmentRepairWarning final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetIsSimplifiedEquipmentRepairWarning) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetIsSimplifiedEquipmentRepairWarning");
static_assert(sizeof(IndianaGameUserSettings_SetIsSimplifiedEquipmentRepairWarning) == 0x000001, "Wrong size on IndianaGameUserSettings_SetIsSimplifiedEquipmentRepairWarning");
static_assert(offsetof(IndianaGameUserSettings_SetIsSimplifiedEquipmentRepairWarning, bShow) == 0x000000, "Member 'IndianaGameUserSettings_SetIsSimplifiedEquipmentRepairWarning::bShow' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetIsSimplifiedLockpickHackingMode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetIsSimplifiedLockpickHackingMode final
{
public:
	ESimplifiedLockpickHackingMode                ModeIn;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetIsSimplifiedLockpickHackingMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetIsSimplifiedLockpickHackingMode");
static_assert(sizeof(IndianaGameUserSettings_SetIsSimplifiedLockpickHackingMode) == 0x000001, "Wrong size on IndianaGameUserSettings_SetIsSimplifiedLockpickHackingMode");
static_assert(offsetof(IndianaGameUserSettings_SetIsSimplifiedLockpickHackingMode, ModeIn) == 0x000000, "Member 'IndianaGameUserSettings_SetIsSimplifiedLockpickHackingMode::ModeIn' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetLanguageMode
// 0x0002 (0x0002 - 0x0000)
struct IndianaGameUserSettings_SetLanguageMode final
{
public:
	ELanguageMode                                 LanguageModeIn;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPending;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetLanguageMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetLanguageMode");
static_assert(sizeof(IndianaGameUserSettings_SetLanguageMode) == 0x000002, "Wrong size on IndianaGameUserSettings_SetLanguageMode");
static_assert(offsetof(IndianaGameUserSettings_SetLanguageMode, LanguageModeIn) == 0x000000, "Member 'IndianaGameUserSettings_SetLanguageMode::LanguageModeIn' has a wrong offset!");
static_assert(offsetof(IndianaGameUserSettings_SetLanguageMode, bPending) == 0x000001, "Member 'IndianaGameUserSettings_SetLanguageMode::bPending' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetMasterSoundVolume
// 0x0004 (0x0004 - 0x0000)
struct IndianaGameUserSettings_SetMasterSoundVolume final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetMasterSoundVolume) == 0x000004, "Wrong alignment on IndianaGameUserSettings_SetMasterSoundVolume");
static_assert(sizeof(IndianaGameUserSettings_SetMasterSoundVolume) == 0x000004, "Wrong size on IndianaGameUserSettings_SetMasterSoundVolume");
static_assert(offsetof(IndianaGameUserSettings_SetMasterSoundVolume, Value) == 0x000000, "Member 'IndianaGameUserSettings_SetMasterSoundVolume::Value' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetMedicalInhalerUIMode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetMedicalInhalerUIMode final
{
public:
	EMedicalInhalerMode                           InhalerModeIn;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetMedicalInhalerUIMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetMedicalInhalerUIMode");
static_assert(sizeof(IndianaGameUserSettings_SetMedicalInhalerUIMode) == 0x000001, "Wrong size on IndianaGameUserSettings_SetMedicalInhalerUIMode");
static_assert(offsetof(IndianaGameUserSettings_SetMedicalInhalerUIMode, InhalerModeIn) == 0x000000, "Member 'IndianaGameUserSettings_SetMedicalInhalerUIMode::InhalerModeIn' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetMotionBlurScale
// 0x0004 (0x0004 - 0x0000)
struct IndianaGameUserSettings_SetMotionBlurScale final
{
public:
	float                                         NewMotionBlurScale;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetMotionBlurScale) == 0x000004, "Wrong alignment on IndianaGameUserSettings_SetMotionBlurScale");
static_assert(sizeof(IndianaGameUserSettings_SetMotionBlurScale) == 0x000004, "Wrong size on IndianaGameUserSettings_SetMotionBlurScale");
static_assert(offsetof(IndianaGameUserSettings_SetMotionBlurScale, NewMotionBlurScale) == 0x000000, "Member 'IndianaGameUserSettings_SetMotionBlurScale::NewMotionBlurScale' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetMouseADSSensitivity
// 0x0004 (0x0004 - 0x0000)
struct IndianaGameUserSettings_SetMouseADSSensitivity final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetMouseADSSensitivity) == 0x000004, "Wrong alignment on IndianaGameUserSettings_SetMouseADSSensitivity");
static_assert(sizeof(IndianaGameUserSettings_SetMouseADSSensitivity) == 0x000004, "Wrong size on IndianaGameUserSettings_SetMouseADSSensitivity");
static_assert(offsetof(IndianaGameUserSettings_SetMouseADSSensitivity, Value) == 0x000000, "Member 'IndianaGameUserSettings_SetMouseADSSensitivity::Value' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetMouseSensitivity
// 0x0004 (0x0004 - 0x0000)
struct IndianaGameUserSettings_SetMouseSensitivity final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetMouseSensitivity) == 0x000004, "Wrong alignment on IndianaGameUserSettings_SetMouseSensitivity");
static_assert(sizeof(IndianaGameUserSettings_SetMouseSensitivity) == 0x000004, "Wrong size on IndianaGameUserSettings_SetMouseSensitivity");
static_assert(offsetof(IndianaGameUserSettings_SetMouseSensitivity, Value) == 0x000000, "Member 'IndianaGameUserSettings_SetMouseSensitivity::Value' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetMusicSoundVolume
// 0x0004 (0x0004 - 0x0000)
struct IndianaGameUserSettings_SetMusicSoundVolume final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetMusicSoundVolume) == 0x000004, "Wrong alignment on IndianaGameUserSettings_SetMusicSoundVolume");
static_assert(sizeof(IndianaGameUserSettings_SetMusicSoundVolume) == 0x000004, "Wrong size on IndianaGameUserSettings_SetMusicSoundVolume");
static_assert(offsetof(IndianaGameUserSettings_SetMusicSoundVolume, Value) == 0x000000, "Member 'IndianaGameUserSettings_SetMusicSoundVolume::Value' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetNotificationDuration
// 0x0004 (0x0004 - 0x0000)
struct IndianaGameUserSettings_SetNotificationDuration final
{
public:
	float                                         DurationIn;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetNotificationDuration) == 0x000004, "Wrong alignment on IndianaGameUserSettings_SetNotificationDuration");
static_assert(sizeof(IndianaGameUserSettings_SetNotificationDuration) == 0x000004, "Wrong size on IndianaGameUserSettings_SetNotificationDuration");
static_assert(offsetof(IndianaGameUserSettings_SetNotificationDuration, DurationIn) == 0x000000, "Member 'IndianaGameUserSettings_SetNotificationDuration::DurationIn' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetOffsetReticle
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetOffsetReticle final
{
public:
	bool                                          bUseOffset;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetOffsetReticle) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetOffsetReticle");
static_assert(sizeof(IndianaGameUserSettings_SetOffsetReticle) == 0x000001, "Wrong size on IndianaGameUserSettings_SetOffsetReticle");
static_assert(offsetof(IndianaGameUserSettings_SetOffsetReticle, bUseOffset) == 0x000000, "Member 'IndianaGameUserSettings_SetOffsetReticle::bUseOffset' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetPerformanceMode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetPerformanceMode final
{
public:
	EPerformanceMode                              PerformanceModeIn;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetPerformanceMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetPerformanceMode");
static_assert(sizeof(IndianaGameUserSettings_SetPerformanceMode) == 0x000001, "Wrong size on IndianaGameUserSettings_SetPerformanceMode");
static_assert(offsetof(IndianaGameUserSettings_SetPerformanceMode, PerformanceModeIn) == 0x000000, "Member 'IndianaGameUserSettings_SetPerformanceMode::PerformanceModeIn' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetPlayerStatusBarMode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetPlayerStatusBarMode final
{
public:
	EPlayerStatusBarMode                          ModeIn;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetPlayerStatusBarMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetPlayerStatusBarMode");
static_assert(sizeof(IndianaGameUserSettings_SetPlayerStatusBarMode) == 0x000001, "Wrong size on IndianaGameUserSettings_SetPlayerStatusBarMode");
static_assert(offsetof(IndianaGameUserSettings_SetPlayerStatusBarMode, ModeIn) == 0x000000, "Member 'IndianaGameUserSettings_SetPlayerStatusBarMode::ModeIn' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetPlayerStatusEffectTextMode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetPlayerStatusEffectTextMode final
{
public:
	EPlayerStatusEffectTextMode                   ModeIn;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetPlayerStatusEffectTextMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetPlayerStatusEffectTextMode");
static_assert(sizeof(IndianaGameUserSettings_SetPlayerStatusEffectTextMode) == 0x000001, "Wrong size on IndianaGameUserSettings_SetPlayerStatusEffectTextMode");
static_assert(offsetof(IndianaGameUserSettings_SetPlayerStatusEffectTextMode, ModeIn) == 0x000000, "Member 'IndianaGameUserSettings_SetPlayerStatusEffectTextMode::ModeIn' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetPseudoGodMode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetPseudoGodMode final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetPseudoGodMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetPseudoGodMode");
static_assert(sizeof(IndianaGameUserSettings_SetPseudoGodMode) == 0x000001, "Wrong size on IndianaGameUserSettings_SetPseudoGodMode");
static_assert(offsetof(IndianaGameUserSettings_SetPseudoGodMode, Value) == 0x000000, "Member 'IndianaGameUserSettings_SetPseudoGodMode::Value' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetQuestUpdateMode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetQuestUpdateMode final
{
public:
	EQuestUpdateMode                              bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetQuestUpdateMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetQuestUpdateMode");
static_assert(sizeof(IndianaGameUserSettings_SetQuestUpdateMode) == 0x000001, "Wrong size on IndianaGameUserSettings_SetQuestUpdateMode");
static_assert(offsetof(IndianaGameUserSettings_SetQuestUpdateMode, bShow) == 0x000000, "Member 'IndianaGameUserSettings_SetQuestUpdateMode::bShow' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetRadialSensitivity
// 0x0004 (0x0004 - 0x0000)
struct IndianaGameUserSettings_SetRadialSensitivity final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetRadialSensitivity) == 0x000004, "Wrong alignment on IndianaGameUserSettings_SetRadialSensitivity");
static_assert(sizeof(IndianaGameUserSettings_SetRadialSensitivity) == 0x000004, "Wrong size on IndianaGameUserSettings_SetRadialSensitivity");
static_assert(offsetof(IndianaGameUserSettings_SetRadialSensitivity, Value) == 0x000000, "Member 'IndianaGameUserSettings_SetRadialSensitivity::Value' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetShowCombatIndicator
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetShowCombatIndicator final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetShowCombatIndicator) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetShowCombatIndicator");
static_assert(sizeof(IndianaGameUserSettings_SetShowCombatIndicator) == 0x000001, "Wrong size on IndianaGameUserSettings_SetShowCombatIndicator");
static_assert(offsetof(IndianaGameUserSettings_SetShowCombatIndicator, bShow) == 0x000000, "Member 'IndianaGameUserSettings_SetShowCombatIndicator::bShow' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetShowCompanionHelmets
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetShowCompanionHelmets final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetShowCompanionHelmets) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetShowCompanionHelmets");
static_assert(sizeof(IndianaGameUserSettings_SetShowCompanionHelmets) == 0x000001, "Wrong size on IndianaGameUserSettings_SetShowCompanionHelmets");
static_assert(offsetof(IndianaGameUserSettings_SetShowCompanionHelmets, bShow) == 0x000000, "Member 'IndianaGameUserSettings_SetShowCompanionHelmets::bShow' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetShowCompanionPassiveCD
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetShowCompanionPassiveCD final
{
public:
	ECompanionAbilityPassiveCDMode                ModeIn;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetShowCompanionPassiveCD) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetShowCompanionPassiveCD");
static_assert(sizeof(IndianaGameUserSettings_SetShowCompanionPassiveCD) == 0x000001, "Wrong size on IndianaGameUserSettings_SetShowCompanionPassiveCD");
static_assert(offsetof(IndianaGameUserSettings_SetShowCompanionPassiveCD, ModeIn) == 0x000000, "Member 'IndianaGameUserSettings_SetShowCompanionPassiveCD::ModeIn' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetShowCompass
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetShowCompass final
{
public:
	ECompassVisibilityMode                        ModeIn;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetShowCompass) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetShowCompass");
static_assert(sizeof(IndianaGameUserSettings_SetShowCompass) == 0x000001, "Wrong size on IndianaGameUserSettings_SetShowCompass");
static_assert(offsetof(IndianaGameUserSettings_SetShowCompass, ModeIn) == 0x000000, "Member 'IndianaGameUserSettings_SetShowCompass::ModeIn' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetShowDirectionalDamageIndicators
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetShowDirectionalDamageIndicators final
{
public:
	EDirectionalDamageIndicatorMode               ModeIn;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetShowDirectionalDamageIndicators) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetShowDirectionalDamageIndicators");
static_assert(sizeof(IndianaGameUserSettings_SetShowDirectionalDamageIndicators) == 0x000001, "Wrong size on IndianaGameUserSettings_SetShowDirectionalDamageIndicators");
static_assert(offsetof(IndianaGameUserSettings_SetShowDirectionalDamageIndicators, ModeIn) == 0x000000, "Member 'IndianaGameUserSettings_SetShowDirectionalDamageIndicators::ModeIn' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetShowDisguiseMeter
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetShowDisguiseMeter final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetShowDisguiseMeter) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetShowDisguiseMeter");
static_assert(sizeof(IndianaGameUserSettings_SetShowDisguiseMeter) == 0x000001, "Wrong size on IndianaGameUserSettings_SetShowDisguiseMeter");
static_assert(offsetof(IndianaGameUserSettings_SetShowDisguiseMeter, bShow) == 0x000000, "Member 'IndianaGameUserSettings_SetShowDisguiseMeter::bShow' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetShowEnemyAwarenessMeters
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetShowEnemyAwarenessMeters final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetShowEnemyAwarenessMeters) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetShowEnemyAwarenessMeters");
static_assert(sizeof(IndianaGameUserSettings_SetShowEnemyAwarenessMeters) == 0x000001, "Wrong size on IndianaGameUserSettings_SetShowEnemyAwarenessMeters");
static_assert(offsetof(IndianaGameUserSettings_SetShowEnemyAwarenessMeters, bVisible) == 0x000000, "Member 'IndianaGameUserSettings_SetShowEnemyAwarenessMeters::bVisible' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetShowEnemyHealthBars
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetShowEnemyHealthBars final
{
public:
	EEnemyHealthBarMode                           ModeIn;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetShowEnemyHealthBars) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetShowEnemyHealthBars");
static_assert(sizeof(IndianaGameUserSettings_SetShowEnemyHealthBars) == 0x000001, "Wrong size on IndianaGameUserSettings_SetShowEnemyHealthBars");
static_assert(offsetof(IndianaGameUserSettings_SetShowEnemyHealthBars, ModeIn) == 0x000000, "Member 'IndianaGameUserSettings_SetShowEnemyHealthBars::ModeIn' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetShowEquipmentRepairWarning
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetShowEquipmentRepairWarning final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetShowEquipmentRepairWarning) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetShowEquipmentRepairWarning");
static_assert(sizeof(IndianaGameUserSettings_SetShowEquipmentRepairWarning) == 0x000001, "Wrong size on IndianaGameUserSettings_SetShowEquipmentRepairWarning");
static_assert(offsetof(IndianaGameUserSettings_SetShowEquipmentRepairWarning, bShow) == 0x000000, "Member 'IndianaGameUserSettings_SetShowEquipmentRepairWarning::bShow' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetShowFloatingDamageText
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetShowFloatingDamageText final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetShowFloatingDamageText) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetShowFloatingDamageText");
static_assert(sizeof(IndianaGameUserSettings_SetShowFloatingDamageText) == 0x000001, "Wrong size on IndianaGameUserSettings_SetShowFloatingDamageText");
static_assert(offsetof(IndianaGameUserSettings_SetShowFloatingDamageText, bShow) == 0x000000, "Member 'IndianaGameUserSettings_SetShowFloatingDamageText::bShow' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetShowInteractionControls
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetShowInteractionControls final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetShowInteractionControls) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetShowInteractionControls");
static_assert(sizeof(IndianaGameUserSettings_SetShowInteractionControls) == 0x000001, "Wrong size on IndianaGameUserSettings_SetShowInteractionControls");
static_assert(offsetof(IndianaGameUserSettings_SetShowInteractionControls, bShow) == 0x000000, "Member 'IndianaGameUserSettings_SetShowInteractionControls::bShow' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetShowInteractionOutlines
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetShowInteractionOutlines final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetShowInteractionOutlines) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetShowInteractionOutlines");
static_assert(sizeof(IndianaGameUserSettings_SetShowInteractionOutlines) == 0x000001, "Wrong size on IndianaGameUserSettings_SetShowInteractionOutlines");
static_assert(offsetof(IndianaGameUserSettings_SetShowInteractionOutlines, bShow) == 0x000000, "Member 'IndianaGameUserSettings_SetShowInteractionOutlines::bShow' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetShowLevelUpNotification
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetShowLevelUpNotification final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetShowLevelUpNotification) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetShowLevelUpNotification");
static_assert(sizeof(IndianaGameUserSettings_SetShowLevelUpNotification) == 0x000001, "Wrong size on IndianaGameUserSettings_SetShowLevelUpNotification");
static_assert(offsetof(IndianaGameUserSettings_SetShowLevelUpNotification, bShow) == 0x000000, "Member 'IndianaGameUserSettings_SetShowLevelUpNotification::bShow' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetShowLevelUpReminders
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetShowLevelUpReminders final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetShowLevelUpReminders) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetShowLevelUpReminders");
static_assert(sizeof(IndianaGameUserSettings_SetShowLevelUpReminders) == 0x000001, "Wrong size on IndianaGameUserSettings_SetShowLevelUpReminders");
static_assert(offsetof(IndianaGameUserSettings_SetShowLevelUpReminders, bShow) == 0x000000, "Member 'IndianaGameUserSettings_SetShowLevelUpReminders::bShow' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetShowLootControls
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetShowLootControls final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetShowLootControls) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetShowLootControls");
static_assert(sizeof(IndianaGameUserSettings_SetShowLootControls) == 0x000001, "Wrong size on IndianaGameUserSettings_SetShowLootControls");
static_assert(offsetof(IndianaGameUserSettings_SetShowLootControls, bShow) == 0x000000, "Member 'IndianaGameUserSettings_SetShowLootControls::bShow' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetShowLootTooltips
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetShowLootTooltips final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetShowLootTooltips) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetShowLootTooltips");
static_assert(sizeof(IndianaGameUserSettings_SetShowLootTooltips) == 0x000001, "Wrong size on IndianaGameUserSettings_SetShowLootTooltips");
static_assert(offsetof(IndianaGameUserSettings_SetShowLootTooltips, bShow) == 0x000000, "Member 'IndianaGameUserSettings_SetShowLootTooltips::bShow' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetShowPlayerHelmet
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetShowPlayerHelmet final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetShowPlayerHelmet) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetShowPlayerHelmet");
static_assert(sizeof(IndianaGameUserSettings_SetShowPlayerHelmet) == 0x000001, "Wrong size on IndianaGameUserSettings_SetShowPlayerHelmet");
static_assert(offsetof(IndianaGameUserSettings_SetShowPlayerHelmet, bShow) == 0x000000, "Member 'IndianaGameUserSettings_SetShowPlayerHelmet::bShow' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetShowPlayerStatusEffects
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetShowPlayerStatusEffects final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetShowPlayerStatusEffects) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetShowPlayerStatusEffects");
static_assert(sizeof(IndianaGameUserSettings_SetShowPlayerStatusEffects) == 0x000001, "Wrong size on IndianaGameUserSettings_SetShowPlayerStatusEffects");
static_assert(offsetof(IndianaGameUserSettings_SetShowPlayerStatusEffects, bShow) == 0x000000, "Member 'IndianaGameUserSettings_SetShowPlayerStatusEffects::bShow' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetShowReticleFeedback
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetShowReticleFeedback final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetShowReticleFeedback) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetShowReticleFeedback");
static_assert(sizeof(IndianaGameUserSettings_SetShowReticleFeedback) == 0x000001, "Wrong size on IndianaGameUserSettings_SetShowReticleFeedback");
static_assert(offsetof(IndianaGameUserSettings_SetShowReticleFeedback, bShow) == 0x000000, "Member 'IndianaGameUserSettings_SetShowReticleFeedback::bShow' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetShowTTDReticleMeter
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetShowTTDReticleMeter final
{
public:
	ETTDReticleMeterMode                          ModeIn;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetShowTTDReticleMeter) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetShowTTDReticleMeter");
static_assert(sizeof(IndianaGameUserSettings_SetShowTTDReticleMeter) == 0x000001, "Wrong size on IndianaGameUserSettings_SetShowTTDReticleMeter");
static_assert(offsetof(IndianaGameUserSettings_SetShowTTDReticleMeter, ModeIn) == 0x000000, "Member 'IndianaGameUserSettings_SetShowTTDReticleMeter::ModeIn' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetShowTTDScanner
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetShowTTDScanner final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetShowTTDScanner) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetShowTTDScanner");
static_assert(sizeof(IndianaGameUserSettings_SetShowTTDScanner) == 0x000001, "Wrong size on IndianaGameUserSettings_SetShowTTDScanner");
static_assert(offsetof(IndianaGameUserSettings_SetShowTTDScanner, bShow) == 0x000000, "Member 'IndianaGameUserSettings_SetShowTTDScanner::bShow' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetShowTTDStatusEffectPreview
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetShowTTDStatusEffectPreview final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetShowTTDStatusEffectPreview) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetShowTTDStatusEffectPreview");
static_assert(sizeof(IndianaGameUserSettings_SetShowTTDStatusEffectPreview) == 0x000001, "Wrong size on IndianaGameUserSettings_SetShowTTDStatusEffectPreview");
static_assert(offsetof(IndianaGameUserSettings_SetShowTTDStatusEffectPreview, bShow) == 0x000000, "Member 'IndianaGameUserSettings_SetShowTTDStatusEffectPreview::bShow' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetShowTutorialNotifications
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetShowTutorialNotifications final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetShowTutorialNotifications) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetShowTutorialNotifications");
static_assert(sizeof(IndianaGameUserSettings_SetShowTutorialNotifications) == 0x000001, "Wrong size on IndianaGameUserSettings_SetShowTutorialNotifications");
static_assert(offsetof(IndianaGameUserSettings_SetShowTutorialNotifications, bShow) == 0x000000, "Member 'IndianaGameUserSettings_SetShowTutorialNotifications::bShow' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetShowWaypointMarkers
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetShowWaypointMarkers final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetShowWaypointMarkers) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetShowWaypointMarkers");
static_assert(sizeof(IndianaGameUserSettings_SetShowWaypointMarkers) == 0x000001, "Wrong size on IndianaGameUserSettings_SetShowWaypointMarkers");
static_assert(offsetof(IndianaGameUserSettings_SetShowWaypointMarkers, bShow) == 0x000000, "Member 'IndianaGameUserSettings_SetShowWaypointMarkers::bShow' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetSSGIMode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetSSGIMode final
{
public:
	ESSGIMode                                     Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetSSGIMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetSSGIMode");
static_assert(sizeof(IndianaGameUserSettings_SetSSGIMode) == 0x000001, "Wrong size on IndianaGameUserSettings_SetSSGIMode");
static_assert(offsetof(IndianaGameUserSettings_SetSSGIMode, Value) == 0x000000, "Member 'IndianaGameUserSettings_SetSSGIMode::Value' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetSSGIQuality
// 0x0004 (0x0004 - 0x0000)
struct IndianaGameUserSettings_SetSSGIQuality final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetSSGIQuality) == 0x000004, "Wrong alignment on IndianaGameUserSettings_SetSSGIQuality");
static_assert(sizeof(IndianaGameUserSettings_SetSSGIQuality) == 0x000004, "Wrong size on IndianaGameUserSettings_SetSSGIQuality");
static_assert(offsetof(IndianaGameUserSettings_SetSSGIQuality, Value) == 0x000000, "Member 'IndianaGameUserSettings_SetSSGIQuality::Value' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetSurvivalMeterMode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetSurvivalMeterMode final
{
public:
	bool                                          bVisibleIn;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetSurvivalMeterMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetSurvivalMeterMode");
static_assert(sizeof(IndianaGameUserSettings_SetSurvivalMeterMode) == 0x000001, "Wrong size on IndianaGameUserSettings_SetSurvivalMeterMode");
static_assert(offsetof(IndianaGameUserSettings_SetSurvivalMeterMode, bVisibleIn) == 0x000000, "Member 'IndianaGameUserSettings_SetSurvivalMeterMode::bVisibleIn' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetTooltipDelay
// 0x0004 (0x0004 - 0x0000)
struct IndianaGameUserSettings_SetTooltipDelay final
{
public:
	float                                         Delay;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetTooltipDelay) == 0x000004, "Wrong alignment on IndianaGameUserSettings_SetTooltipDelay");
static_assert(sizeof(IndianaGameUserSettings_SetTooltipDelay) == 0x000004, "Wrong size on IndianaGameUserSettings_SetTooltipDelay");
static_assert(offsetof(IndianaGameUserSettings_SetTooltipDelay, Delay) == 0x000000, "Member 'IndianaGameUserSettings_SetTooltipDelay::Delay' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetTTDDisplayMode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetTTDDisplayMode final
{
public:
	ETTDDisplayMode                               ModeIn;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetTTDDisplayMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetTTDDisplayMode");
static_assert(sizeof(IndianaGameUserSettings_SetTTDDisplayMode) == 0x000001, "Wrong size on IndianaGameUserSettings_SetTTDDisplayMode");
static_assert(offsetof(IndianaGameUserSettings_SetTTDDisplayMode, ModeIn) == 0x000000, "Member 'IndianaGameUserSettings_SetTTDDisplayMode::ModeIn' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetTutorialsEnabled
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetTutorialsEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetTutorialsEnabled) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetTutorialsEnabled");
static_assert(sizeof(IndianaGameUserSettings_SetTutorialsEnabled) == 0x000001, "Wrong size on IndianaGameUserSettings_SetTutorialsEnabled");
static_assert(offsetof(IndianaGameUserSettings_SetTutorialsEnabled, bEnabled) == 0x000000, "Member 'IndianaGameUserSettings_SetTutorialsEnabled::bEnabled' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetUISoundVolume
// 0x0004 (0x0004 - 0x0000)
struct IndianaGameUserSettings_SetUISoundVolume final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetUISoundVolume) == 0x000004, "Wrong alignment on IndianaGameUserSettings_SetUISoundVolume");
static_assert(sizeof(IndianaGameUserSettings_SetUISoundVolume) == 0x000004, "Wrong size on IndianaGameUserSettings_SetUISoundVolume");
static_assert(offsetof(IndianaGameUserSettings_SetUISoundVolume, Value) == 0x000000, "Member 'IndianaGameUserSettings_SetUISoundVolume::Value' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetViewBaseStats
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetViewBaseStats final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetViewBaseStats) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetViewBaseStats");
static_assert(sizeof(IndianaGameUserSettings_SetViewBaseStats) == 0x000001, "Wrong size on IndianaGameUserSettings_SetViewBaseStats");
static_assert(offsetof(IndianaGameUserSettings_SetViewBaseStats, Value) == 0x000000, "Member 'IndianaGameUserSettings_SetViewBaseStats::Value' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetVoiceSoundVolume
// 0x0004 (0x0004 - 0x0000)
struct IndianaGameUserSettings_SetVoiceSoundVolume final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetVoiceSoundVolume) == 0x000004, "Wrong alignment on IndianaGameUserSettings_SetVoiceSoundVolume");
static_assert(sizeof(IndianaGameUserSettings_SetVoiceSoundVolume) == 0x000004, "Wrong size on IndianaGameUserSettings_SetVoiceSoundVolume");
static_assert(offsetof(IndianaGameUserSettings_SetVoiceSoundVolume, Value) == 0x000000, "Member 'IndianaGameUserSettings_SetVoiceSoundVolume::Value' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetVSyncWrapper
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetVSyncWrapper final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetVSyncWrapper) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetVSyncWrapper");
static_assert(sizeof(IndianaGameUserSettings_SetVSyncWrapper) == 0x000001, "Wrong size on IndianaGameUserSettings_SetVSyncWrapper");
static_assert(offsetof(IndianaGameUserSettings_SetVSyncWrapper, bEnabled) == 0x000000, "Member 'IndianaGameUserSettings_SetVSyncWrapper::bEnabled' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetWeaponSelectAxisMode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetWeaponSelectAxisMode final
{
public:
	EWeaponSelectAxisMode                         ModeIn;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetWeaponSelectAxisMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetWeaponSelectAxisMode");
static_assert(sizeof(IndianaGameUserSettings_SetWeaponSelectAxisMode) == 0x000001, "Wrong size on IndianaGameUserSettings_SetWeaponSelectAxisMode");
static_assert(offsetof(IndianaGameUserSettings_SetWeaponSelectAxisMode, ModeIn) == 0x000000, "Member 'IndianaGameUserSettings_SetWeaponSelectAxisMode::ModeIn' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetWeaponSelectMode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetWeaponSelectMode final
{
public:
	EWeaponSelectMode                             ModeIn;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetWeaponSelectMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetWeaponSelectMode");
static_assert(sizeof(IndianaGameUserSettings_SetWeaponSelectMode) == 0x000001, "Wrong size on IndianaGameUserSettings_SetWeaponSelectMode");
static_assert(offsetof(IndianaGameUserSettings_SetWeaponSelectMode, ModeIn) == 0x000000, "Member 'IndianaGameUserSettings_SetWeaponSelectMode::ModeIn' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetWeaponTooltipStatMode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetWeaponTooltipStatMode final
{
public:
	EWeaponTooltipStatMode                        Mode;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetWeaponTooltipStatMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetWeaponTooltipStatMode");
static_assert(sizeof(IndianaGameUserSettings_SetWeaponTooltipStatMode) == 0x000001, "Wrong size on IndianaGameUserSettings_SetWeaponTooltipStatMode");
static_assert(offsetof(IndianaGameUserSettings_SetWeaponTooltipStatMode, Mode) == 0x000000, "Member 'IndianaGameUserSettings_SetWeaponTooltipStatMode::Mode' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetXAxisInverted
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetXAxisInverted final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetXAxisInverted) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetXAxisInverted");
static_assert(sizeof(IndianaGameUserSettings_SetXAxisInverted) == 0x000001, "Wrong size on IndianaGameUserSettings_SetXAxisInverted");
static_assert(offsetof(IndianaGameUserSettings_SetXAxisInverted, Value) == 0x000000, "Member 'IndianaGameUserSettings_SetXAxisInverted::Value' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.SetYAxisInverted
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_SetYAxisInverted final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_SetYAxisInverted) == 0x000001, "Wrong alignment on IndianaGameUserSettings_SetYAxisInverted");
static_assert(sizeof(IndianaGameUserSettings_SetYAxisInverted) == 0x000001, "Wrong size on IndianaGameUserSettings_SetYAxisInverted");
static_assert(offsetof(IndianaGameUserSettings_SetYAxisInverted, Value) == 0x000000, "Member 'IndianaGameUserSettings_SetYAxisInverted::Value' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.Get3DResolution
// 0x0004 (0x0004 - 0x0000)
struct IndianaGameUserSettings_Get3DResolution final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_Get3DResolution) == 0x000004, "Wrong alignment on IndianaGameUserSettings_Get3DResolution");
static_assert(sizeof(IndianaGameUserSettings_Get3DResolution) == 0x000004, "Wrong size on IndianaGameUserSettings_Get3DResolution");
static_assert(offsetof(IndianaGameUserSettings_Get3DResolution, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_Get3DResolution::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetAbilityControlUIMode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetAbilityControlUIMode final
{
public:
	EAbilityControlMode                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetAbilityControlUIMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetAbilityControlUIMode");
static_assert(sizeof(IndianaGameUserSettings_GetAbilityControlUIMode) == 0x000001, "Wrong size on IndianaGameUserSettings_GetAbilityControlUIMode");
static_assert(offsetof(IndianaGameUserSettings_GetAbilityControlUIMode, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetAbilityControlUIMode::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetAimingReticleMode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetAimingReticleMode final
{
public:
	EReticleMode                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetAimingReticleMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetAimingReticleMode");
static_assert(sizeof(IndianaGameUserSettings_GetAimingReticleMode) == 0x000001, "Wrong size on IndianaGameUserSettings_GetAimingReticleMode");
static_assert(offsetof(IndianaGameUserSettings_GetAimingReticleMode, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetAimingReticleMode::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetAntiAliasingMethod
// 0x0004 (0x0004 - 0x0000)
struct IndianaGameUserSettings_GetAntiAliasingMethod final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetAntiAliasingMethod) == 0x000004, "Wrong alignment on IndianaGameUserSettings_GetAntiAliasingMethod");
static_assert(sizeof(IndianaGameUserSettings_GetAntiAliasingMethod) == 0x000004, "Wrong size on IndianaGameUserSettings_GetAntiAliasingMethod");
static_assert(offsetof(IndianaGameUserSettings_GetAntiAliasingMethod, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetAntiAliasingMethod::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetAreaNameMode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetAreaNameMode final
{
public:
	EAreaNameMode                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetAreaNameMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetAreaNameMode");
static_assert(sizeof(IndianaGameUserSettings_GetAreaNameMode) == 0x000001, "Wrong size on IndianaGameUserSettings_GetAreaNameMode");
static_assert(offsetof(IndianaGameUserSettings_GetAreaNameMode, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetAreaNameMode::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetAutoCollapseItemViewers
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetAutoCollapseItemViewers final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetAutoCollapseItemViewers) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetAutoCollapseItemViewers");
static_assert(sizeof(IndianaGameUserSettings_GetAutoCollapseItemViewers) == 0x000001, "Wrong size on IndianaGameUserSettings_GetAutoCollapseItemViewers");
static_assert(offsetof(IndianaGameUserSettings_GetAutoCollapseItemViewers, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetAutoCollapseItemViewers::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetBarkSubtitlesVisible
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetBarkSubtitlesVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetBarkSubtitlesVisible) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetBarkSubtitlesVisible");
static_assert(sizeof(IndianaGameUserSettings_GetBarkSubtitlesVisible) == 0x000001, "Wrong size on IndianaGameUserSettings_GetBarkSubtitlesVisible");
static_assert(offsetof(IndianaGameUserSettings_GetBarkSubtitlesVisible, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetBarkSubtitlesVisible::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetChromaticAberration
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetChromaticAberration final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetChromaticAberration) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetChromaticAberration");
static_assert(sizeof(IndianaGameUserSettings_GetChromaticAberration) == 0x000001, "Wrong size on IndianaGameUserSettings_GetChromaticAberration");
static_assert(offsetof(IndianaGameUserSettings_GetChromaticAberration, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetChromaticAberration::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetCinematicKillCam
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetCinematicKillCam final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetCinematicKillCam) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetCinematicKillCam");
static_assert(sizeof(IndianaGameUserSettings_GetCinematicKillCam) == 0x000001, "Wrong size on IndianaGameUserSettings_GetCinematicKillCam");
static_assert(offsetof(IndianaGameUserSettings_GetCinematicKillCam, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetCinematicKillCam::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetCinematicSubtitlesVisible
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetCinematicSubtitlesVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetCinematicSubtitlesVisible) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetCinematicSubtitlesVisible");
static_assert(sizeof(IndianaGameUserSettings_GetCinematicSubtitlesVisible) == 0x000001, "Wrong size on IndianaGameUserSettings_GetCinematicSubtitlesVisible");
static_assert(offsetof(IndianaGameUserSettings_GetCinematicSubtitlesVisible, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetCinematicSubtitlesVisible::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetColorblindModeEnabled
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetColorblindModeEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetColorblindModeEnabled) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetColorblindModeEnabled");
static_assert(sizeof(IndianaGameUserSettings_GetColorblindModeEnabled) == 0x000001, "Wrong size on IndianaGameUserSettings_GetColorblindModeEnabled");
static_assert(offsetof(IndianaGameUserSettings_GetColorblindModeEnabled, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetColorblindModeEnabled::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetCompanionAbilityBindingMode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetCompanionAbilityBindingMode final
{
public:
	ECompanionAbilityBindingMode                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetCompanionAbilityBindingMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetCompanionAbilityBindingMode");
static_assert(sizeof(IndianaGameUserSettings_GetCompanionAbilityBindingMode) == 0x000001, "Wrong size on IndianaGameUserSettings_GetCompanionAbilityBindingMode");
static_assert(offsetof(IndianaGameUserSettings_GetCompanionAbilityBindingMode, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetCompanionAbilityBindingMode::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetCompanionAbilityUIMode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetCompanionAbilityUIMode final
{
public:
	ECompanionAbilityUIMode                       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetCompanionAbilityUIMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetCompanionAbilityUIMode");
static_assert(sizeof(IndianaGameUserSettings_GetCompanionAbilityUIMode) == 0x000001, "Wrong size on IndianaGameUserSettings_GetCompanionAbilityUIMode");
static_assert(offsetof(IndianaGameUserSettings_GetCompanionAbilityUIMode, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetCompanionAbilityUIMode::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetCompanionOutlineMode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetCompanionOutlineMode final
{
public:
	ECompanionOutlineMode                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetCompanionOutlineMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetCompanionOutlineMode");
static_assert(sizeof(IndianaGameUserSettings_GetCompanionOutlineMode) == 0x000001, "Wrong size on IndianaGameUserSettings_GetCompanionOutlineMode");
static_assert(offsetof(IndianaGameUserSettings_GetCompanionOutlineMode, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetCompanionOutlineMode::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetCompanionPassiveCDNotificationMode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetCompanionPassiveCDNotificationMode final
{
public:
	ECompanionAbilityPassiveNotificationMode      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetCompanionPassiveCDNotificationMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetCompanionPassiveCDNotificationMode");
static_assert(sizeof(IndianaGameUserSettings_GetCompanionPassiveCDNotificationMode) == 0x000001, "Wrong size on IndianaGameUserSettings_GetCompanionPassiveCDNotificationMode");
static_assert(offsetof(IndianaGameUserSettings_GetCompanionPassiveCDNotificationMode, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetCompanionPassiveCDNotificationMode::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetCompanionStatusUIMode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetCompanionStatusUIMode final
{
public:
	ECompanionStatusMode                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetCompanionStatusUIMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetCompanionStatusUIMode");
static_assert(sizeof(IndianaGameUserSettings_GetCompanionStatusUIMode) == 0x000001, "Wrong size on IndianaGameUserSettings_GetCompanionStatusUIMode");
static_assert(offsetof(IndianaGameUserSettings_GetCompanionStatusUIMode, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetCompanionStatusUIMode::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetControllerADSSensitivity
// 0x0004 (0x0004 - 0x0000)
struct IndianaGameUserSettings_GetControllerADSSensitivity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetControllerADSSensitivity) == 0x000004, "Wrong alignment on IndianaGameUserSettings_GetControllerADSSensitivity");
static_assert(sizeof(IndianaGameUserSettings_GetControllerADSSensitivity) == 0x000004, "Wrong size on IndianaGameUserSettings_GetControllerADSSensitivity");
static_assert(offsetof(IndianaGameUserSettings_GetControllerADSSensitivity, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetControllerADSSensitivity::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetControllerEnableImpulseTriggers
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetControllerEnableImpulseTriggers final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetControllerEnableImpulseTriggers) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetControllerEnableImpulseTriggers");
static_assert(sizeof(IndianaGameUserSettings_GetControllerEnableImpulseTriggers) == 0x000001, "Wrong size on IndianaGameUserSettings_GetControllerEnableImpulseTriggers");
static_assert(offsetof(IndianaGameUserSettings_GetControllerEnableImpulseTriggers, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetControllerEnableImpulseTriggers::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetControllerLeftInnerDeadZone
// 0x0004 (0x0004 - 0x0000)
struct IndianaGameUserSettings_GetControllerLeftInnerDeadZone final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetControllerLeftInnerDeadZone) == 0x000004, "Wrong alignment on IndianaGameUserSettings_GetControllerLeftInnerDeadZone");
static_assert(sizeof(IndianaGameUserSettings_GetControllerLeftInnerDeadZone) == 0x000004, "Wrong size on IndianaGameUserSettings_GetControllerLeftInnerDeadZone");
static_assert(offsetof(IndianaGameUserSettings_GetControllerLeftInnerDeadZone, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetControllerLeftInnerDeadZone::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetControllerLeftOuterDeadZone
// 0x0004 (0x0004 - 0x0000)
struct IndianaGameUserSettings_GetControllerLeftOuterDeadZone final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetControllerLeftOuterDeadZone) == 0x000004, "Wrong alignment on IndianaGameUserSettings_GetControllerLeftOuterDeadZone");
static_assert(sizeof(IndianaGameUserSettings_GetControllerLeftOuterDeadZone) == 0x000004, "Wrong size on IndianaGameUserSettings_GetControllerLeftOuterDeadZone");
static_assert(offsetof(IndianaGameUserSettings_GetControllerLeftOuterDeadZone, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetControllerLeftOuterDeadZone::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetControllerRightInnerDeadZone
// 0x0004 (0x0004 - 0x0000)
struct IndianaGameUserSettings_GetControllerRightInnerDeadZone final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetControllerRightInnerDeadZone) == 0x000004, "Wrong alignment on IndianaGameUserSettings_GetControllerRightInnerDeadZone");
static_assert(sizeof(IndianaGameUserSettings_GetControllerRightInnerDeadZone) == 0x000004, "Wrong size on IndianaGameUserSettings_GetControllerRightInnerDeadZone");
static_assert(offsetof(IndianaGameUserSettings_GetControllerRightInnerDeadZone, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetControllerRightInnerDeadZone::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetControllerRightOuterDeadZone
// 0x0004 (0x0004 - 0x0000)
struct IndianaGameUserSettings_GetControllerRightOuterDeadZone final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetControllerRightOuterDeadZone) == 0x000004, "Wrong alignment on IndianaGameUserSettings_GetControllerRightOuterDeadZone");
static_assert(sizeof(IndianaGameUserSettings_GetControllerRightOuterDeadZone) == 0x000004, "Wrong size on IndianaGameUserSettings_GetControllerRightOuterDeadZone");
static_assert(offsetof(IndianaGameUserSettings_GetControllerRightOuterDeadZone, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetControllerRightOuterDeadZone::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetControllerSensitivity
// 0x0004 (0x0004 - 0x0000)
struct IndianaGameUserSettings_GetControllerSensitivity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetControllerSensitivity) == 0x000004, "Wrong alignment on IndianaGameUserSettings_GetControllerSensitivity");
static_assert(sizeof(IndianaGameUserSettings_GetControllerSensitivity) == 0x000004, "Wrong size on IndianaGameUserSettings_GetControllerSensitivity");
static_assert(offsetof(IndianaGameUserSettings_GetControllerSensitivity, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetControllerSensitivity::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetConversationContinueOnVOEnd
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetConversationContinueOnVOEnd final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetConversationContinueOnVOEnd) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetConversationContinueOnVOEnd");
static_assert(sizeof(IndianaGameUserSettings_GetConversationContinueOnVOEnd) == 0x000001, "Wrong size on IndianaGameUserSettings_GetConversationContinueOnVOEnd");
static_assert(offsetof(IndianaGameUserSettings_GetConversationContinueOnVOEnd, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetConversationContinueOnVOEnd::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetConversationSubtitleMode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetConversationSubtitleMode final
{
public:
	EConversationSubtitleMode                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetConversationSubtitleMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetConversationSubtitleMode");
static_assert(sizeof(IndianaGameUserSettings_GetConversationSubtitleMode) == 0x000001, "Wrong size on IndianaGameUserSettings_GetConversationSubtitleMode");
static_assert(offsetof(IndianaGameUserSettings_GetConversationSubtitleMode, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetConversationSubtitleMode::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetDialogSkillMode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetDialogSkillMode final
{
public:
	EDialogSkillMode                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetDialogSkillMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetDialogSkillMode");
static_assert(sizeof(IndianaGameUserSettings_GetDialogSkillMode) == 0x000001, "Wrong size on IndianaGameUserSettings_GetDialogSkillMode");
static_assert(offsetof(IndianaGameUserSettings_GetDialogSkillMode, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetDialogSkillMode::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetDodgeDisplayMode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetDodgeDisplayMode final
{
public:
	EDodgeDisplayMode                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetDodgeDisplayMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetDodgeDisplayMode");
static_assert(sizeof(IndianaGameUserSettings_GetDodgeDisplayMode) == 0x000001, "Wrong size on IndianaGameUserSettings_GetDodgeDisplayMode");
static_assert(offsetof(IndianaGameUserSettings_GetDodgeDisplayMode, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetDodgeDisplayMode::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetFontSizeModifier
// 0x0004 (0x0004 - 0x0000)
struct IndianaGameUserSettings_GetFontSizeModifier final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetFontSizeModifier) == 0x000004, "Wrong alignment on IndianaGameUserSettings_GetFontSizeModifier");
static_assert(sizeof(IndianaGameUserSettings_GetFontSizeModifier) == 0x000004, "Wrong size on IndianaGameUserSettings_GetFontSizeModifier");
static_assert(offsetof(IndianaGameUserSettings_GetFontSizeModifier, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetFontSizeModifier::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetFOV
// 0x0004 (0x0004 - 0x0000)
struct IndianaGameUserSettings_GetFOV final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetFOV) == 0x000004, "Wrong alignment on IndianaGameUserSettings_GetFOV");
static_assert(sizeof(IndianaGameUserSettings_GetFOV) == 0x000004, "Wrong size on IndianaGameUserSettings_GetFOV");
static_assert(offsetof(IndianaGameUserSettings_GetFOV, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetFOV::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetFPSIndicatorMode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetFPSIndicatorMode final
{
public:
	EFPSIndicatorMode                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetFPSIndicatorMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetFPSIndicatorMode");
static_assert(sizeof(IndianaGameUserSettings_GetFPSIndicatorMode) == 0x000001, "Wrong size on IndianaGameUserSettings_GetFPSIndicatorMode");
static_assert(offsetof(IndianaGameUserSettings_GetFPSIndicatorMode, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetFPSIndicatorMode::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetFPSLimit
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetFPSLimit final
{
public:
	EFPSLimit                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetFPSLimit) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetFPSLimit");
static_assert(sizeof(IndianaGameUserSettings_GetFPSLimit) == 0x000001, "Wrong size on IndianaGameUserSettings_GetFPSLimit");
static_assert(offsetof(IndianaGameUserSettings_GetFPSLimit, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetFPSLimit::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetFSR2Enabled
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetFSR2Enabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetFSR2Enabled) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetFSR2Enabled");
static_assert(sizeof(IndianaGameUserSettings_GetFSR2Enabled) == 0x000001, "Wrong size on IndianaGameUserSettings_GetFSR2Enabled");
static_assert(offsetof(IndianaGameUserSettings_GetFSR2Enabled, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetFSR2Enabled::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetFSR2Mode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetFSR2Mode final
{
public:
	EFSR2Mode                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetFSR2Mode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetFSR2Mode");
static_assert(sizeof(IndianaGameUserSettings_GetFSR2Mode) == 0x000001, "Wrong size on IndianaGameUserSettings_GetFSR2Mode");
static_assert(offsetof(IndianaGameUserSettings_GetFSR2Mode, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetFSR2Mode::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetGammaLevel
// 0x0004 (0x0004 - 0x0000)
struct IndianaGameUserSettings_GetGammaLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetGammaLevel) == 0x000004, "Wrong alignment on IndianaGameUserSettings_GetGammaLevel");
static_assert(sizeof(IndianaGameUserSettings_GetGammaLevel) == 0x000004, "Wrong size on IndianaGameUserSettings_GetGammaLevel");
static_assert(offsetof(IndianaGameUserSettings_GetGammaLevel, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetGammaLevel::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetGraphicsQuality
// 0x0004 (0x0004 - 0x0000)
struct IndianaGameUserSettings_GetGraphicsQuality final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetGraphicsQuality) == 0x000004, "Wrong alignment on IndianaGameUserSettings_GetGraphicsQuality");
static_assert(sizeof(IndianaGameUserSettings_GetGraphicsQuality) == 0x000004, "Wrong size on IndianaGameUserSettings_GetGraphicsQuality");
static_assert(offsetof(IndianaGameUserSettings_GetGraphicsQuality, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetGraphicsQuality::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetHeadbobbing
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetHeadbobbing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetHeadbobbing) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetHeadbobbing");
static_assert(sizeof(IndianaGameUserSettings_GetHeadbobbing) == 0x000001, "Wrong size on IndianaGameUserSettings_GetHeadbobbing");
static_assert(offsetof(IndianaGameUserSettings_GetHeadbobbing, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetHeadbobbing::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetHeldWeaponDisplayMode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetHeldWeaponDisplayMode final
{
public:
	EHeldWeaponDisplayMode                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetHeldWeaponDisplayMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetHeldWeaponDisplayMode");
static_assert(sizeof(IndianaGameUserSettings_GetHeldWeaponDisplayMode) == 0x000001, "Wrong size on IndianaGameUserSettings_GetHeldWeaponDisplayMode");
static_assert(offsetof(IndianaGameUserSettings_GetHeldWeaponDisplayMode, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetHeldWeaponDisplayMode::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetHeldWeaponDisplayTextMode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetHeldWeaponDisplayTextMode final
{
public:
	EHeldWeaponDisplayText                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetHeldWeaponDisplayTextMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetHeldWeaponDisplayTextMode");
static_assert(sizeof(IndianaGameUserSettings_GetHeldWeaponDisplayTextMode) == 0x000001, "Wrong size on IndianaGameUserSettings_GetHeldWeaponDisplayTextMode");
static_assert(offsetof(IndianaGameUserSettings_GetHeldWeaponDisplayTextMode, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetHeldWeaponDisplayTextMode::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetHUDMode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetHUDMode final
{
public:
	EHUDMode                                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetHUDMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetHUDMode");
static_assert(sizeof(IndianaGameUserSettings_GetHUDMode) == 0x000001, "Wrong size on IndianaGameUserSettings_GetHUDMode");
static_assert(offsetof(IndianaGameUserSettings_GetHUDMode, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetHUDMode::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetHUDVisibility
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetHUDVisibility final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetHUDVisibility) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetHUDVisibility");
static_assert(sizeof(IndianaGameUserSettings_GetHUDVisibility) == 0x000001, "Wrong size on IndianaGameUserSettings_GetHUDVisibility");
static_assert(offsetof(IndianaGameUserSettings_GetHUDVisibility, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetHUDVisibility::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetImpulseTriggerIntensity
// 0x0004 (0x0004 - 0x0000)
struct IndianaGameUserSettings_GetImpulseTriggerIntensity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetImpulseTriggerIntensity) == 0x000004, "Wrong alignment on IndianaGameUserSettings_GetImpulseTriggerIntensity");
static_assert(sizeof(IndianaGameUserSettings_GetImpulseTriggerIntensity) == 0x000004, "Wrong size on IndianaGameUserSettings_GetImpulseTriggerIntensity");
static_assert(offsetof(IndianaGameUserSettings_GetImpulseTriggerIntensity, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetImpulseTriggerIntensity::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetIsFreshUserSettings
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetIsFreshUserSettings final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetIsFreshUserSettings) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetIsFreshUserSettings");
static_assert(sizeof(IndianaGameUserSettings_GetIsFreshUserSettings) == 0x000001, "Wrong size on IndianaGameUserSettings_GetIsFreshUserSettings");
static_assert(offsetof(IndianaGameUserSettings_GetIsFreshUserSettings, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetIsFreshUserSettings::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetIsSimplifiedEquipmentRepairWarning
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetIsSimplifiedEquipmentRepairWarning final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetIsSimplifiedEquipmentRepairWarning) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetIsSimplifiedEquipmentRepairWarning");
static_assert(sizeof(IndianaGameUserSettings_GetIsSimplifiedEquipmentRepairWarning) == 0x000001, "Wrong size on IndianaGameUserSettings_GetIsSimplifiedEquipmentRepairWarning");
static_assert(offsetof(IndianaGameUserSettings_GetIsSimplifiedEquipmentRepairWarning, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetIsSimplifiedEquipmentRepairWarning::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetIsSimplifiedLockpickHackingMode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetIsSimplifiedLockpickHackingMode final
{
public:
	ESimplifiedLockpickHackingMode                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetIsSimplifiedLockpickHackingMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetIsSimplifiedLockpickHackingMode");
static_assert(sizeof(IndianaGameUserSettings_GetIsSimplifiedLockpickHackingMode) == 0x000001, "Wrong size on IndianaGameUserSettings_GetIsSimplifiedLockpickHackingMode");
static_assert(offsetof(IndianaGameUserSettings_GetIsSimplifiedLockpickHackingMode, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetIsSimplifiedLockpickHackingMode::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetLanguageMode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetLanguageMode final
{
public:
	ELanguageMode                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetLanguageMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetLanguageMode");
static_assert(sizeof(IndianaGameUserSettings_GetLanguageMode) == 0x000001, "Wrong size on IndianaGameUserSettings_GetLanguageMode");
static_assert(offsetof(IndianaGameUserSettings_GetLanguageMode, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetLanguageMode::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetMedicalInhalerUIMode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetMedicalInhalerUIMode final
{
public:
	EMedicalInhalerMode                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetMedicalInhalerUIMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetMedicalInhalerUIMode");
static_assert(sizeof(IndianaGameUserSettings_GetMedicalInhalerUIMode) == 0x000001, "Wrong size on IndianaGameUserSettings_GetMedicalInhalerUIMode");
static_assert(offsetof(IndianaGameUserSettings_GetMedicalInhalerUIMode, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetMedicalInhalerUIMode::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetMotionBlurScale
// 0x0004 (0x0004 - 0x0000)
struct IndianaGameUserSettings_GetMotionBlurScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetMotionBlurScale) == 0x000004, "Wrong alignment on IndianaGameUserSettings_GetMotionBlurScale");
static_assert(sizeof(IndianaGameUserSettings_GetMotionBlurScale) == 0x000004, "Wrong size on IndianaGameUserSettings_GetMotionBlurScale");
static_assert(offsetof(IndianaGameUserSettings_GetMotionBlurScale, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetMotionBlurScale::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetMouseADSSensitivity
// 0x0004 (0x0004 - 0x0000)
struct IndianaGameUserSettings_GetMouseADSSensitivity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetMouseADSSensitivity) == 0x000004, "Wrong alignment on IndianaGameUserSettings_GetMouseADSSensitivity");
static_assert(sizeof(IndianaGameUserSettings_GetMouseADSSensitivity) == 0x000004, "Wrong size on IndianaGameUserSettings_GetMouseADSSensitivity");
static_assert(offsetof(IndianaGameUserSettings_GetMouseADSSensitivity, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetMouseADSSensitivity::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetNotificationDuration
// 0x0004 (0x0004 - 0x0000)
struct IndianaGameUserSettings_GetNotificationDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetNotificationDuration) == 0x000004, "Wrong alignment on IndianaGameUserSettings_GetNotificationDuration");
static_assert(sizeof(IndianaGameUserSettings_GetNotificationDuration) == 0x000004, "Wrong size on IndianaGameUserSettings_GetNotificationDuration");
static_assert(offsetof(IndianaGameUserSettings_GetNotificationDuration, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetNotificationDuration::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetOffsetReticle
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetOffsetReticle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetOffsetReticle) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetOffsetReticle");
static_assert(sizeof(IndianaGameUserSettings_GetOffsetReticle) == 0x000001, "Wrong size on IndianaGameUserSettings_GetOffsetReticle");
static_assert(offsetof(IndianaGameUserSettings_GetOffsetReticle, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetOffsetReticle::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetPerformanceMode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetPerformanceMode final
{
public:
	EPerformanceMode                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetPerformanceMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetPerformanceMode");
static_assert(sizeof(IndianaGameUserSettings_GetPerformanceMode) == 0x000001, "Wrong size on IndianaGameUserSettings_GetPerformanceMode");
static_assert(offsetof(IndianaGameUserSettings_GetPerformanceMode, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetPerformanceMode::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetPlayerStatusBarMode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetPlayerStatusBarMode final
{
public:
	EPlayerStatusBarMode                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetPlayerStatusBarMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetPlayerStatusBarMode");
static_assert(sizeof(IndianaGameUserSettings_GetPlayerStatusBarMode) == 0x000001, "Wrong size on IndianaGameUserSettings_GetPlayerStatusBarMode");
static_assert(offsetof(IndianaGameUserSettings_GetPlayerStatusBarMode, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetPlayerStatusBarMode::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetPlayerStatusEffectTextMode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetPlayerStatusEffectTextMode final
{
public:
	EPlayerStatusEffectTextMode                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetPlayerStatusEffectTextMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetPlayerStatusEffectTextMode");
static_assert(sizeof(IndianaGameUserSettings_GetPlayerStatusEffectTextMode) == 0x000001, "Wrong size on IndianaGameUserSettings_GetPlayerStatusEffectTextMode");
static_assert(offsetof(IndianaGameUserSettings_GetPlayerStatusEffectTextMode, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetPlayerStatusEffectTextMode::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetQuestUpdateMode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetQuestUpdateMode final
{
public:
	EQuestUpdateMode                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetQuestUpdateMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetQuestUpdateMode");
static_assert(sizeof(IndianaGameUserSettings_GetQuestUpdateMode) == 0x000001, "Wrong size on IndianaGameUserSettings_GetQuestUpdateMode");
static_assert(offsetof(IndianaGameUserSettings_GetQuestUpdateMode, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetQuestUpdateMode::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetShowCombatIndicator
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetShowCombatIndicator final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetShowCombatIndicator) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetShowCombatIndicator");
static_assert(sizeof(IndianaGameUserSettings_GetShowCombatIndicator) == 0x000001, "Wrong size on IndianaGameUserSettings_GetShowCombatIndicator");
static_assert(offsetof(IndianaGameUserSettings_GetShowCombatIndicator, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetShowCombatIndicator::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetShowCompanionHelmets
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetShowCompanionHelmets final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetShowCompanionHelmets) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetShowCompanionHelmets");
static_assert(sizeof(IndianaGameUserSettings_GetShowCompanionHelmets) == 0x000001, "Wrong size on IndianaGameUserSettings_GetShowCompanionHelmets");
static_assert(offsetof(IndianaGameUserSettings_GetShowCompanionHelmets, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetShowCompanionHelmets::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetShowCompanionPassiveCD
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetShowCompanionPassiveCD final
{
public:
	ECompanionAbilityPassiveCDMode                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetShowCompanionPassiveCD) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetShowCompanionPassiveCD");
static_assert(sizeof(IndianaGameUserSettings_GetShowCompanionPassiveCD) == 0x000001, "Wrong size on IndianaGameUserSettings_GetShowCompanionPassiveCD");
static_assert(offsetof(IndianaGameUserSettings_GetShowCompanionPassiveCD, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetShowCompanionPassiveCD::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetShowCompass
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetShowCompass final
{
public:
	ECompassVisibilityMode                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetShowCompass) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetShowCompass");
static_assert(sizeof(IndianaGameUserSettings_GetShowCompass) == 0x000001, "Wrong size on IndianaGameUserSettings_GetShowCompass");
static_assert(offsetof(IndianaGameUserSettings_GetShowCompass, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetShowCompass::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetShowDirectionalDamageIndicators
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetShowDirectionalDamageIndicators final
{
public:
	EDirectionalDamageIndicatorMode               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetShowDirectionalDamageIndicators) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetShowDirectionalDamageIndicators");
static_assert(sizeof(IndianaGameUserSettings_GetShowDirectionalDamageIndicators) == 0x000001, "Wrong size on IndianaGameUserSettings_GetShowDirectionalDamageIndicators");
static_assert(offsetof(IndianaGameUserSettings_GetShowDirectionalDamageIndicators, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetShowDirectionalDamageIndicators::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetShowDisguiseMeter
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetShowDisguiseMeter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetShowDisguiseMeter) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetShowDisguiseMeter");
static_assert(sizeof(IndianaGameUserSettings_GetShowDisguiseMeter) == 0x000001, "Wrong size on IndianaGameUserSettings_GetShowDisguiseMeter");
static_assert(offsetof(IndianaGameUserSettings_GetShowDisguiseMeter, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetShowDisguiseMeter::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetShowEnemyAwarenessMeters
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetShowEnemyAwarenessMeters final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetShowEnemyAwarenessMeters) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetShowEnemyAwarenessMeters");
static_assert(sizeof(IndianaGameUserSettings_GetShowEnemyAwarenessMeters) == 0x000001, "Wrong size on IndianaGameUserSettings_GetShowEnemyAwarenessMeters");
static_assert(offsetof(IndianaGameUserSettings_GetShowEnemyAwarenessMeters, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetShowEnemyAwarenessMeters::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetShowEnemyHealthBars
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetShowEnemyHealthBars final
{
public:
	EEnemyHealthBarMode                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetShowEnemyHealthBars) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetShowEnemyHealthBars");
static_assert(sizeof(IndianaGameUserSettings_GetShowEnemyHealthBars) == 0x000001, "Wrong size on IndianaGameUserSettings_GetShowEnemyHealthBars");
static_assert(offsetof(IndianaGameUserSettings_GetShowEnemyHealthBars, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetShowEnemyHealthBars::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetShowEquipmentRepairWarning
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetShowEquipmentRepairWarning final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetShowEquipmentRepairWarning) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetShowEquipmentRepairWarning");
static_assert(sizeof(IndianaGameUserSettings_GetShowEquipmentRepairWarning) == 0x000001, "Wrong size on IndianaGameUserSettings_GetShowEquipmentRepairWarning");
static_assert(offsetof(IndianaGameUserSettings_GetShowEquipmentRepairWarning, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetShowEquipmentRepairWarning::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetShowFloatingDamageText
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetShowFloatingDamageText final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetShowFloatingDamageText) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetShowFloatingDamageText");
static_assert(sizeof(IndianaGameUserSettings_GetShowFloatingDamageText) == 0x000001, "Wrong size on IndianaGameUserSettings_GetShowFloatingDamageText");
static_assert(offsetof(IndianaGameUserSettings_GetShowFloatingDamageText, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetShowFloatingDamageText::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetShowInteractionControls
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetShowInteractionControls final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetShowInteractionControls) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetShowInteractionControls");
static_assert(sizeof(IndianaGameUserSettings_GetShowInteractionControls) == 0x000001, "Wrong size on IndianaGameUserSettings_GetShowInteractionControls");
static_assert(offsetof(IndianaGameUserSettings_GetShowInteractionControls, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetShowInteractionControls::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetShowInteractionOutlines
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetShowInteractionOutlines final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetShowInteractionOutlines) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetShowInteractionOutlines");
static_assert(sizeof(IndianaGameUserSettings_GetShowInteractionOutlines) == 0x000001, "Wrong size on IndianaGameUserSettings_GetShowInteractionOutlines");
static_assert(offsetof(IndianaGameUserSettings_GetShowInteractionOutlines, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetShowInteractionOutlines::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetShowLevelUpNotification
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetShowLevelUpNotification final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetShowLevelUpNotification) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetShowLevelUpNotification");
static_assert(sizeof(IndianaGameUserSettings_GetShowLevelUpNotification) == 0x000001, "Wrong size on IndianaGameUserSettings_GetShowLevelUpNotification");
static_assert(offsetof(IndianaGameUserSettings_GetShowLevelUpNotification, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetShowLevelUpNotification::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetShowLevelUpReminders
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetShowLevelUpReminders final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetShowLevelUpReminders) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetShowLevelUpReminders");
static_assert(sizeof(IndianaGameUserSettings_GetShowLevelUpReminders) == 0x000001, "Wrong size on IndianaGameUserSettings_GetShowLevelUpReminders");
static_assert(offsetof(IndianaGameUserSettings_GetShowLevelUpReminders, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetShowLevelUpReminders::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetShowLootControls
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetShowLootControls final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetShowLootControls) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetShowLootControls");
static_assert(sizeof(IndianaGameUserSettings_GetShowLootControls) == 0x000001, "Wrong size on IndianaGameUserSettings_GetShowLootControls");
static_assert(offsetof(IndianaGameUserSettings_GetShowLootControls, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetShowLootControls::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetShowLootTooltips
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetShowLootTooltips final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetShowLootTooltips) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetShowLootTooltips");
static_assert(sizeof(IndianaGameUserSettings_GetShowLootTooltips) == 0x000001, "Wrong size on IndianaGameUserSettings_GetShowLootTooltips");
static_assert(offsetof(IndianaGameUserSettings_GetShowLootTooltips, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetShowLootTooltips::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetShowPlayerHelmet
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetShowPlayerHelmet final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetShowPlayerHelmet) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetShowPlayerHelmet");
static_assert(sizeof(IndianaGameUserSettings_GetShowPlayerHelmet) == 0x000001, "Wrong size on IndianaGameUserSettings_GetShowPlayerHelmet");
static_assert(offsetof(IndianaGameUserSettings_GetShowPlayerHelmet, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetShowPlayerHelmet::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetShowPlayerStatusEffects
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetShowPlayerStatusEffects final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetShowPlayerStatusEffects) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetShowPlayerStatusEffects");
static_assert(sizeof(IndianaGameUserSettings_GetShowPlayerStatusEffects) == 0x000001, "Wrong size on IndianaGameUserSettings_GetShowPlayerStatusEffects");
static_assert(offsetof(IndianaGameUserSettings_GetShowPlayerStatusEffects, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetShowPlayerStatusEffects::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetShowReticleFeedback
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetShowReticleFeedback final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetShowReticleFeedback) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetShowReticleFeedback");
static_assert(sizeof(IndianaGameUserSettings_GetShowReticleFeedback) == 0x000001, "Wrong size on IndianaGameUserSettings_GetShowReticleFeedback");
static_assert(offsetof(IndianaGameUserSettings_GetShowReticleFeedback, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetShowReticleFeedback::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetShowTTDReticleMeter
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetShowTTDReticleMeter final
{
public:
	ETTDReticleMeterMode                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetShowTTDReticleMeter) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetShowTTDReticleMeter");
static_assert(sizeof(IndianaGameUserSettings_GetShowTTDReticleMeter) == 0x000001, "Wrong size on IndianaGameUserSettings_GetShowTTDReticleMeter");
static_assert(offsetof(IndianaGameUserSettings_GetShowTTDReticleMeter, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetShowTTDReticleMeter::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetShowTTDScanner
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetShowTTDScanner final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetShowTTDScanner) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetShowTTDScanner");
static_assert(sizeof(IndianaGameUserSettings_GetShowTTDScanner) == 0x000001, "Wrong size on IndianaGameUserSettings_GetShowTTDScanner");
static_assert(offsetof(IndianaGameUserSettings_GetShowTTDScanner, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetShowTTDScanner::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetShowTTDStatusEffectPreview
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetShowTTDStatusEffectPreview final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetShowTTDStatusEffectPreview) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetShowTTDStatusEffectPreview");
static_assert(sizeof(IndianaGameUserSettings_GetShowTTDStatusEffectPreview) == 0x000001, "Wrong size on IndianaGameUserSettings_GetShowTTDStatusEffectPreview");
static_assert(offsetof(IndianaGameUserSettings_GetShowTTDStatusEffectPreview, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetShowTTDStatusEffectPreview::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetShowTutorialNotifications
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetShowTutorialNotifications final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetShowTutorialNotifications) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetShowTutorialNotifications");
static_assert(sizeof(IndianaGameUserSettings_GetShowTutorialNotifications) == 0x000001, "Wrong size on IndianaGameUserSettings_GetShowTutorialNotifications");
static_assert(offsetof(IndianaGameUserSettings_GetShowTutorialNotifications, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetShowTutorialNotifications::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetShowWaypointMarkers
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetShowWaypointMarkers final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetShowWaypointMarkers) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetShowWaypointMarkers");
static_assert(sizeof(IndianaGameUserSettings_GetShowWaypointMarkers) == 0x000001, "Wrong size on IndianaGameUserSettings_GetShowWaypointMarkers");
static_assert(offsetof(IndianaGameUserSettings_GetShowWaypointMarkers, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetShowWaypointMarkers::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetSSGIQuality
// 0x0004 (0x0004 - 0x0000)
struct IndianaGameUserSettings_GetSSGIQuality final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetSSGIQuality) == 0x000004, "Wrong alignment on IndianaGameUserSettings_GetSSGIQuality");
static_assert(sizeof(IndianaGameUserSettings_GetSSGIQuality) == 0x000004, "Wrong size on IndianaGameUserSettings_GetSSGIQuality");
static_assert(offsetof(IndianaGameUserSettings_GetSSGIQuality, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetSSGIQuality::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetSurvivalMeterMode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetSurvivalMeterMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetSurvivalMeterMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetSurvivalMeterMode");
static_assert(sizeof(IndianaGameUserSettings_GetSurvivalMeterMode) == 0x000001, "Wrong size on IndianaGameUserSettings_GetSurvivalMeterMode");
static_assert(offsetof(IndianaGameUserSettings_GetSurvivalMeterMode, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetSurvivalMeterMode::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetTooltipDelay
// 0x0004 (0x0004 - 0x0000)
struct IndianaGameUserSettings_GetTooltipDelay final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetTooltipDelay) == 0x000004, "Wrong alignment on IndianaGameUserSettings_GetTooltipDelay");
static_assert(sizeof(IndianaGameUserSettings_GetTooltipDelay) == 0x000004, "Wrong size on IndianaGameUserSettings_GetTooltipDelay");
static_assert(offsetof(IndianaGameUserSettings_GetTooltipDelay, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetTooltipDelay::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetTTDDisplayMode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetTTDDisplayMode final
{
public:
	ETTDDisplayMode                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetTTDDisplayMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetTTDDisplayMode");
static_assert(sizeof(IndianaGameUserSettings_GetTTDDisplayMode) == 0x000001, "Wrong size on IndianaGameUserSettings_GetTTDDisplayMode");
static_assert(offsetof(IndianaGameUserSettings_GetTTDDisplayMode, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetTTDDisplayMode::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetTutorialsEnabled
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetTutorialsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetTutorialsEnabled) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetTutorialsEnabled");
static_assert(sizeof(IndianaGameUserSettings_GetTutorialsEnabled) == 0x000001, "Wrong size on IndianaGameUserSettings_GetTutorialsEnabled");
static_assert(offsetof(IndianaGameUserSettings_GetTutorialsEnabled, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetTutorialsEnabled::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetVSyncWrapper
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetVSyncWrapper final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetVSyncWrapper) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetVSyncWrapper");
static_assert(sizeof(IndianaGameUserSettings_GetVSyncWrapper) == 0x000001, "Wrong size on IndianaGameUserSettings_GetVSyncWrapper");
static_assert(offsetof(IndianaGameUserSettings_GetVSyncWrapper, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetVSyncWrapper::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetWeaponSelectAxisMode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetWeaponSelectAxisMode final
{
public:
	EWeaponSelectAxisMode                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetWeaponSelectAxisMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetWeaponSelectAxisMode");
static_assert(sizeof(IndianaGameUserSettings_GetWeaponSelectAxisMode) == 0x000001, "Wrong size on IndianaGameUserSettings_GetWeaponSelectAxisMode");
static_assert(offsetof(IndianaGameUserSettings_GetWeaponSelectAxisMode, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetWeaponSelectAxisMode::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetWeaponSelectMode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetWeaponSelectMode final
{
public:
	EWeaponSelectMode                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetWeaponSelectMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetWeaponSelectMode");
static_assert(sizeof(IndianaGameUserSettings_GetWeaponSelectMode) == 0x000001, "Wrong size on IndianaGameUserSettings_GetWeaponSelectMode");
static_assert(offsetof(IndianaGameUserSettings_GetWeaponSelectMode, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetWeaponSelectMode::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.GetWeaponTooltipStatMode
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_GetWeaponTooltipStatMode final
{
public:
	EWeaponTooltipStatMode                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_GetWeaponTooltipStatMode) == 0x000001, "Wrong alignment on IndianaGameUserSettings_GetWeaponTooltipStatMode");
static_assert(sizeof(IndianaGameUserSettings_GetWeaponTooltipStatMode) == 0x000001, "Wrong size on IndianaGameUserSettings_GetWeaponTooltipStatMode");
static_assert(offsetof(IndianaGameUserSettings_GetWeaponTooltipStatMode, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_GetWeaponTooltipStatMode::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.IsConversationResponseVisibleDuringVO
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_IsConversationResponseVisibleDuringVO final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_IsConversationResponseVisibleDuringVO) == 0x000001, "Wrong alignment on IndianaGameUserSettings_IsConversationResponseVisibleDuringVO");
static_assert(sizeof(IndianaGameUserSettings_IsConversationResponseVisibleDuringVO) == 0x000001, "Wrong size on IndianaGameUserSettings_IsConversationResponseVisibleDuringVO");
static_assert(offsetof(IndianaGameUserSettings_IsConversationResponseVisibleDuringVO, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_IsConversationResponseVisibleDuringVO::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaGameUserSettings.IsLegalSigned
// 0x0001 (0x0001 - 0x0000)
struct IndianaGameUserSettings_IsLegalSigned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaGameUserSettings_IsLegalSigned) == 0x000001, "Wrong alignment on IndianaGameUserSettings_IsLegalSigned");
static_assert(sizeof(IndianaGameUserSettings_IsLegalSigned) == 0x000001, "Wrong size on IndianaGameUserSettings_IsLegalSigned");
static_assert(offsetof(IndianaGameUserSettings_IsLegalSigned, ReturnValue) == 0x000000, "Member 'IndianaGameUserSettings_IsLegalSigned::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaLoadingScreenManager.DebugShowLoadingScreen
// 0x0008 (0x0008 - 0x0000)
struct IndianaLoadingScreenManager_DebugShowLoadingScreen final
{
public:
	class FName                                   MapName;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaLoadingScreenManager_DebugShowLoadingScreen) == 0x000004, "Wrong alignment on IndianaLoadingScreenManager_DebugShowLoadingScreen");
static_assert(sizeof(IndianaLoadingScreenManager_DebugShowLoadingScreen) == 0x000008, "Wrong size on IndianaLoadingScreenManager_DebugShowLoadingScreen");
static_assert(offsetof(IndianaLoadingScreenManager_DebugShowLoadingScreen, MapName) == 0x000000, "Member 'IndianaLoadingScreenManager_DebugShowLoadingScreen::MapName' has a wrong offset!");

// Function Indiana.IndianaNavigationSystem.RegisterArea
// 0x0030 (0x0030 - 0x0000)
struct IndianaNavigationSystem_RegisterArea final
{
public:
	class AActor*                                 Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOccupationChannel                            Channel;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Extents;                                           // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Transform;                                         // 0x0024(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaNavigationSystem_RegisterArea) == 0x000008, "Wrong alignment on IndianaNavigationSystem_RegisterArea");
static_assert(sizeof(IndianaNavigationSystem_RegisterArea) == 0x000030, "Wrong size on IndianaNavigationSystem_RegisterArea");
static_assert(offsetof(IndianaNavigationSystem_RegisterArea, Source) == 0x000000, "Member 'IndianaNavigationSystem_RegisterArea::Source' has a wrong offset!");
static_assert(offsetof(IndianaNavigationSystem_RegisterArea, Channel) == 0x000008, "Member 'IndianaNavigationSystem_RegisterArea::Channel' has a wrong offset!");
static_assert(offsetof(IndianaNavigationSystem_RegisterArea, Location) == 0x00000C, "Member 'IndianaNavigationSystem_RegisterArea::Location' has a wrong offset!");
static_assert(offsetof(IndianaNavigationSystem_RegisterArea, Extents) == 0x000018, "Member 'IndianaNavigationSystem_RegisterArea::Extents' has a wrong offset!");
static_assert(offsetof(IndianaNavigationSystem_RegisterArea, Transform) == 0x000024, "Member 'IndianaNavigationSystem_RegisterArea::Transform' has a wrong offset!");

// Function Indiana.IndianaNavigationSystem.TraceOccupation
// 0x0028 (0x0028 - 0x0000)
struct IndianaNavigationSystem_TraceOccupation final
{
public:
	class AActor*                                 Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOccupationChannel                            Channel;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Start;                                             // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaNavigationSystem_TraceOccupation) == 0x000008, "Wrong alignment on IndianaNavigationSystem_TraceOccupation");
static_assert(sizeof(IndianaNavigationSystem_TraceOccupation) == 0x000028, "Wrong size on IndianaNavigationSystem_TraceOccupation");
static_assert(offsetof(IndianaNavigationSystem_TraceOccupation, Source) == 0x000000, "Member 'IndianaNavigationSystem_TraceOccupation::Source' has a wrong offset!");
static_assert(offsetof(IndianaNavigationSystem_TraceOccupation, Channel) == 0x000008, "Member 'IndianaNavigationSystem_TraceOccupation::Channel' has a wrong offset!");
static_assert(offsetof(IndianaNavigationSystem_TraceOccupation, Start) == 0x00000C, "Member 'IndianaNavigationSystem_TraceOccupation::Start' has a wrong offset!");
static_assert(offsetof(IndianaNavigationSystem_TraceOccupation, End) == 0x000018, "Member 'IndianaNavigationSystem_TraceOccupation::End' has a wrong offset!");
static_assert(offsetof(IndianaNavigationSystem_TraceOccupation, ReturnValue) == 0x000024, "Member 'IndianaNavigationSystem_TraceOccupation::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaNavigationSystem.UnregisterArea
// 0x0010 (0x0010 - 0x0000)
struct IndianaNavigationSystem_UnregisterArea final
{
public:
	class AActor*                                 Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOccupationChannel                            Channel;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaNavigationSystem_UnregisterArea) == 0x000008, "Wrong alignment on IndianaNavigationSystem_UnregisterArea");
static_assert(sizeof(IndianaNavigationSystem_UnregisterArea) == 0x000010, "Wrong size on IndianaNavigationSystem_UnregisterArea");
static_assert(offsetof(IndianaNavigationSystem_UnregisterArea, Source) == 0x000000, "Member 'IndianaNavigationSystem_UnregisterArea::Source' has a wrong offset!");
static_assert(offsetof(IndianaNavigationSystem_UnregisterArea, Channel) == 0x000008, "Member 'IndianaNavigationSystem_UnregisterArea::Channel' has a wrong offset!");

// Function Indiana.IndianaPlayerAudioComponent.GamePauseChanged
// 0x0001 (0x0001 - 0x0000)
struct IndianaPlayerAudioComponent_GamePauseChanged final
{
public:
	bool                                          bPaused;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerAudioComponent_GamePauseChanged) == 0x000001, "Wrong alignment on IndianaPlayerAudioComponent_GamePauseChanged");
static_assert(sizeof(IndianaPlayerAudioComponent_GamePauseChanged) == 0x000001, "Wrong size on IndianaPlayerAudioComponent_GamePauseChanged");
static_assert(offsetof(IndianaPlayerAudioComponent_GamePauseChanged, bPaused) == 0x000000, "Member 'IndianaPlayerAudioComponent_GamePauseChanged::bPaused' has a wrong offset!");

// Function Indiana.IndianaPlayerAudioComponent.OnCalledShotCameraStep
// 0x0010 (0x0010 - 0x0000)
struct IndianaPlayerAudioComponent_OnCalledShotCameraStep final
{
public:
	class AActor*                                 Attacker;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECalledShotCameraStep                         OldCameraStep;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECalledShotCameraStep                         NewCameraStep;                                     // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCloseRange;                                       // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaPlayerAudioComponent_OnCalledShotCameraStep) == 0x000008, "Wrong alignment on IndianaPlayerAudioComponent_OnCalledShotCameraStep");
static_assert(sizeof(IndianaPlayerAudioComponent_OnCalledShotCameraStep) == 0x000010, "Wrong size on IndianaPlayerAudioComponent_OnCalledShotCameraStep");
static_assert(offsetof(IndianaPlayerAudioComponent_OnCalledShotCameraStep, Attacker) == 0x000000, "Member 'IndianaPlayerAudioComponent_OnCalledShotCameraStep::Attacker' has a wrong offset!");
static_assert(offsetof(IndianaPlayerAudioComponent_OnCalledShotCameraStep, OldCameraStep) == 0x000008, "Member 'IndianaPlayerAudioComponent_OnCalledShotCameraStep::OldCameraStep' has a wrong offset!");
static_assert(offsetof(IndianaPlayerAudioComponent_OnCalledShotCameraStep, NewCameraStep) == 0x000009, "Member 'IndianaPlayerAudioComponent_OnCalledShotCameraStep::NewCameraStep' has a wrong offset!");
static_assert(offsetof(IndianaPlayerAudioComponent_OnCalledShotCameraStep, bCloseRange) == 0x00000A, "Member 'IndianaPlayerAudioComponent_OnCalledShotCameraStep::bCloseRange' has a wrong offset!");

// Function Indiana.IndianaPlayerAudioComponent.OnCombatStateChanged
// 0x0002 (0x0002 - 0x0000)
struct IndianaPlayerAudioComponent_OnCombatStateChanged final
{
public:
	bool                                          bInCombat;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestoring;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerAudioComponent_OnCombatStateChanged) == 0x000001, "Wrong alignment on IndianaPlayerAudioComponent_OnCombatStateChanged");
static_assert(sizeof(IndianaPlayerAudioComponent_OnCombatStateChanged) == 0x000002, "Wrong size on IndianaPlayerAudioComponent_OnCombatStateChanged");
static_assert(offsetof(IndianaPlayerAudioComponent_OnCombatStateChanged, bInCombat) == 0x000000, "Member 'IndianaPlayerAudioComponent_OnCombatStateChanged::bInCombat' has a wrong offset!");
static_assert(offsetof(IndianaPlayerAudioComponent_OnCombatStateChanged, bRestoring) == 0x000001, "Member 'IndianaPlayerAudioComponent_OnCombatStateChanged::bRestoring' has a wrong offset!");

// Function Indiana.IndianaPlayerAudioComponent.OnCompanionCommandCooldownEnd
// 0x0001 (0x0001 - 0x0000)
struct IndianaPlayerAudioComponent_OnCompanionCommandCooldownEnd final
{
public:
	ECompanionCommand                             Command;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerAudioComponent_OnCompanionCommandCooldownEnd) == 0x000001, "Wrong alignment on IndianaPlayerAudioComponent_OnCompanionCommandCooldownEnd");
static_assert(sizeof(IndianaPlayerAudioComponent_OnCompanionCommandCooldownEnd) == 0x000001, "Wrong size on IndianaPlayerAudioComponent_OnCompanionCommandCooldownEnd");
static_assert(offsetof(IndianaPlayerAudioComponent_OnCompanionCommandCooldownEnd, Command) == 0x000000, "Member 'IndianaPlayerAudioComponent_OnCompanionCommandCooldownEnd::Command' has a wrong offset!");

// Function Indiana.IndianaPlayerAudioComponent.OnDetectionChange
// 0x0001 (0x0001 - 0x0000)
struct IndianaPlayerAudioComponent_OnDetectionChange final
{
public:
	EDetectionType                                DetectionType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerAudioComponent_OnDetectionChange) == 0x000001, "Wrong alignment on IndianaPlayerAudioComponent_OnDetectionChange");
static_assert(sizeof(IndianaPlayerAudioComponent_OnDetectionChange) == 0x000001, "Wrong size on IndianaPlayerAudioComponent_OnDetectionChange");
static_assert(offsetof(IndianaPlayerAudioComponent_OnDetectionChange, DetectionType) == 0x000000, "Member 'IndianaPlayerAudioComponent_OnDetectionChange::DetectionType' has a wrong offset!");

// Function Indiana.IndianaPlayerAudioComponent.OnDisguiseEquipped
// 0x0008 (0x0008 - 0x0000)
struct IndianaPlayerAudioComponent_OnDisguiseEquipped final
{
public:
	const class UDisguiseData*                    Disguise;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerAudioComponent_OnDisguiseEquipped) == 0x000008, "Wrong alignment on IndianaPlayerAudioComponent_OnDisguiseEquipped");
static_assert(sizeof(IndianaPlayerAudioComponent_OnDisguiseEquipped) == 0x000008, "Wrong size on IndianaPlayerAudioComponent_OnDisguiseEquipped");
static_assert(offsetof(IndianaPlayerAudioComponent_OnDisguiseEquipped, Disguise) == 0x000000, "Member 'IndianaPlayerAudioComponent_OnDisguiseEquipped::Disguise' has a wrong offset!");

// Function Indiana.IndianaPlayerAudioComponent.OnDisguiseMeterChanged
// 0x0004 (0x0004 - 0x0000)
struct IndianaPlayerAudioComponent_OnDisguiseMeterChanged final
{
public:
	float                                         Meter;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerAudioComponent_OnDisguiseMeterChanged) == 0x000004, "Wrong alignment on IndianaPlayerAudioComponent_OnDisguiseMeterChanged");
static_assert(sizeof(IndianaPlayerAudioComponent_OnDisguiseMeterChanged) == 0x000004, "Wrong size on IndianaPlayerAudioComponent_OnDisguiseMeterChanged");
static_assert(offsetof(IndianaPlayerAudioComponent_OnDisguiseMeterChanged, Meter) == 0x000000, "Member 'IndianaPlayerAudioComponent_OnDisguiseMeterChanged::Meter' has a wrong offset!");

// Function Indiana.IndianaPlayerAudioComponent.OnKillCameraStart
// 0x0008 (0x0008 - 0x0000)
struct IndianaPlayerAudioComponent_OnKillCameraStart final
{
public:
	const class AActor*                           CameraTarget;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerAudioComponent_OnKillCameraStart) == 0x000008, "Wrong alignment on IndianaPlayerAudioComponent_OnKillCameraStart");
static_assert(sizeof(IndianaPlayerAudioComponent_OnKillCameraStart) == 0x000008, "Wrong size on IndianaPlayerAudioComponent_OnKillCameraStart");
static_assert(offsetof(IndianaPlayerAudioComponent_OnKillCameraStart, CameraTarget) == 0x000000, "Member 'IndianaPlayerAudioComponent_OnKillCameraStart::CameraTarget' has a wrong offset!");

// Function Indiana.IndianaPlayerAudioComponent.OnStealthChange
// 0x0001 (0x0001 - 0x0000)
struct IndianaPlayerAudioComponent_OnStealthChange final
{
public:
	bool                                          bStealthed;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerAudioComponent_OnStealthChange) == 0x000001, "Wrong alignment on IndianaPlayerAudioComponent_OnStealthChange");
static_assert(sizeof(IndianaPlayerAudioComponent_OnStealthChange) == 0x000001, "Wrong size on IndianaPlayerAudioComponent_OnStealthChange");
static_assert(offsetof(IndianaPlayerAudioComponent_OnStealthChange, bStealthed) == 0x000000, "Member 'IndianaPlayerAudioComponent_OnStealthChange::bStealthed' has a wrong offset!");

// Function Indiana.IndianaPlayerAudioComponent.TacticalTimeDilationEnd
// 0x0004 (0x0004 - 0x0000)
struct IndianaPlayerAudioComponent_TacticalTimeDilationEnd final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerAudioComponent_TacticalTimeDilationEnd) == 0x000004, "Wrong alignment on IndianaPlayerAudioComponent_TacticalTimeDilationEnd");
static_assert(sizeof(IndianaPlayerAudioComponent_TacticalTimeDilationEnd) == 0x000004, "Wrong size on IndianaPlayerAudioComponent_TacticalTimeDilationEnd");
static_assert(offsetof(IndianaPlayerAudioComponent_TacticalTimeDilationEnd, Duration) == 0x000000, "Member 'IndianaPlayerAudioComponent_TacticalTimeDilationEnd::Duration' has a wrong offset!");

// Function Indiana.IndianaPlayerController.GetIndianaPlayerController
// 0x0008 (0x0008 - 0x0000)
struct IndianaPlayerController_GetIndianaPlayerController final
{
public:
	class AIndianaPlayerController*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerController_GetIndianaPlayerController) == 0x000008, "Wrong alignment on IndianaPlayerController_GetIndianaPlayerController");
static_assert(sizeof(IndianaPlayerController_GetIndianaPlayerController) == 0x000008, "Wrong size on IndianaPlayerController_GetIndianaPlayerController");
static_assert(offsetof(IndianaPlayerController_GetIndianaPlayerController, ReturnValue) == 0x000000, "Member 'IndianaPlayerController_GetIndianaPlayerController::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaPlayerController.AddStickPitchInput
// 0x0004 (0x0004 - 0x0000)
struct IndianaPlayerController_AddStickPitchInput final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerController_AddStickPitchInput) == 0x000004, "Wrong alignment on IndianaPlayerController_AddStickPitchInput");
static_assert(sizeof(IndianaPlayerController_AddStickPitchInput) == 0x000004, "Wrong size on IndianaPlayerController_AddStickPitchInput");
static_assert(offsetof(IndianaPlayerController_AddStickPitchInput, Val) == 0x000000, "Member 'IndianaPlayerController_AddStickPitchInput::Val' has a wrong offset!");

// Function Indiana.IndianaPlayerController.AddStickRollInput
// 0x0004 (0x0004 - 0x0000)
struct IndianaPlayerController_AddStickRollInput final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerController_AddStickRollInput) == 0x000004, "Wrong alignment on IndianaPlayerController_AddStickRollInput");
static_assert(sizeof(IndianaPlayerController_AddStickRollInput) == 0x000004, "Wrong size on IndianaPlayerController_AddStickRollInput");
static_assert(offsetof(IndianaPlayerController_AddStickRollInput, Val) == 0x000000, "Member 'IndianaPlayerController_AddStickRollInput::Val' has a wrong offset!");

// Function Indiana.IndianaPlayerController.AddStickYawInput
// 0x0004 (0x0004 - 0x0000)
struct IndianaPlayerController_AddStickYawInput final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerController_AddStickYawInput) == 0x000004, "Wrong alignment on IndianaPlayerController_AddStickYawInput");
static_assert(sizeof(IndianaPlayerController_AddStickYawInput) == 0x000004, "Wrong size on IndianaPlayerController_AddStickYawInput");
static_assert(offsetof(IndianaPlayerController_AddStickYawInput, Val) == 0x000000, "Member 'IndianaPlayerController_AddStickYawInput::Val' has a wrong offset!");

// Function Indiana.IndianaPlayerController.AsyncSpawnCompanion
// 0x0010 (0x0010 - 0x0000)
struct IndianaPlayerController_AsyncSpawnCompanion final
{
public:
	ESpecialObsidianID                            CompanionID;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AIndianaAiCharacter*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerController_AsyncSpawnCompanion) == 0x000008, "Wrong alignment on IndianaPlayerController_AsyncSpawnCompanion");
static_assert(sizeof(IndianaPlayerController_AsyncSpawnCompanion) == 0x000010, "Wrong size on IndianaPlayerController_AsyncSpawnCompanion");
static_assert(offsetof(IndianaPlayerController_AsyncSpawnCompanion, CompanionID) == 0x000000, "Member 'IndianaPlayerController_AsyncSpawnCompanion::CompanionID' has a wrong offset!");
static_assert(offsetof(IndianaPlayerController_AsyncSpawnCompanion, ReturnValue) == 0x000008, "Member 'IndianaPlayerController_AsyncSpawnCompanion::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaPlayerController.DebugDutchAngleAdjustment
// 0x0004 (0x0004 - 0x0000)
struct IndianaPlayerController_DebugDutchAngleAdjustment final
{
public:
	float                                         Axis;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerController_DebugDutchAngleAdjustment) == 0x000004, "Wrong alignment on IndianaPlayerController_DebugDutchAngleAdjustment");
static_assert(sizeof(IndianaPlayerController_DebugDutchAngleAdjustment) == 0x000004, "Wrong size on IndianaPlayerController_DebugDutchAngleAdjustment");
static_assert(offsetof(IndianaPlayerController_DebugDutchAngleAdjustment, Axis) == 0x000000, "Member 'IndianaPlayerController_DebugDutchAngleAdjustment::Axis' has a wrong offset!");

// Function Indiana.IndianaPlayerController.DebugDynamicallyReplaceCompanion
// 0x0010 (0x0010 - 0x0000)
struct IndianaPlayerController_DebugDynamicallyReplaceCompanion final
{
public:
	class FName                                   OldCompanionName;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NewCompanionName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerController_DebugDynamicallyReplaceCompanion) == 0x000004, "Wrong alignment on IndianaPlayerController_DebugDynamicallyReplaceCompanion");
static_assert(sizeof(IndianaPlayerController_DebugDynamicallyReplaceCompanion) == 0x000010, "Wrong size on IndianaPlayerController_DebugDynamicallyReplaceCompanion");
static_assert(offsetof(IndianaPlayerController_DebugDynamicallyReplaceCompanion, OldCompanionName) == 0x000000, "Member 'IndianaPlayerController_DebugDynamicallyReplaceCompanion::OldCompanionName' has a wrong offset!");
static_assert(offsetof(IndianaPlayerController_DebugDynamicallyReplaceCompanion, NewCompanionName) == 0x000008, "Member 'IndianaPlayerController_DebugDynamicallyReplaceCompanion::NewCompanionName' has a wrong offset!");

// Function Indiana.IndianaPlayerController.DebugRevertDutchAngle
// 0x0004 (0x0004 - 0x0000)
struct IndianaPlayerController_DebugRevertDutchAngle final
{
public:
	float                                         Axis;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerController_DebugRevertDutchAngle) == 0x000004, "Wrong alignment on IndianaPlayerController_DebugRevertDutchAngle");
static_assert(sizeof(IndianaPlayerController_DebugRevertDutchAngle) == 0x000004, "Wrong size on IndianaPlayerController_DebugRevertDutchAngle");
static_assert(offsetof(IndianaPlayerController_DebugRevertDutchAngle, Axis) == 0x000000, "Member 'IndianaPlayerController_DebugRevertDutchAngle::Axis' has a wrong offset!");

// Function Indiana.IndianaPlayerController.DebugSpawnAICharacter
// 0x0010 (0x0010 - 0x0000)
struct IndianaPlayerController_DebugSpawnAICharacter final
{
public:
	class FName                                   AICharacterAssetName;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AIndianaAiCharacter*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerController_DebugSpawnAICharacter) == 0x000008, "Wrong alignment on IndianaPlayerController_DebugSpawnAICharacter");
static_assert(sizeof(IndianaPlayerController_DebugSpawnAICharacter) == 0x000010, "Wrong size on IndianaPlayerController_DebugSpawnAICharacter");
static_assert(offsetof(IndianaPlayerController_DebugSpawnAICharacter, AICharacterAssetName) == 0x000000, "Member 'IndianaPlayerController_DebugSpawnAICharacter::AICharacterAssetName' has a wrong offset!");
static_assert(offsetof(IndianaPlayerController_DebugSpawnAICharacter, ReturnValue) == 0x000008, "Member 'IndianaPlayerController_DebugSpawnAICharacter::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaPlayerController.DebugSpawnCompanion
// 0x0008 (0x0008 - 0x0000)
struct IndianaPlayerController_DebugSpawnCompanion final
{
public:
	class FName                                   CompanionName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerController_DebugSpawnCompanion) == 0x000004, "Wrong alignment on IndianaPlayerController_DebugSpawnCompanion");
static_assert(sizeof(IndianaPlayerController_DebugSpawnCompanion) == 0x000008, "Wrong size on IndianaPlayerController_DebugSpawnCompanion");
static_assert(offsetof(IndianaPlayerController_DebugSpawnCompanion, CompanionName) == 0x000000, "Member 'IndianaPlayerController_DebugSpawnCompanion::CompanionName' has a wrong offset!");

// Function Indiana.IndianaPlayerController.InputAxis
// 0x0028 (0x0028 - 0x0000)
struct IndianaPlayerController_InputAxis final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delta;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumSamples;                                        // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGamepad;                                          // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0025(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaPlayerController_InputAxis) == 0x000008, "Wrong alignment on IndianaPlayerController_InputAxis");
static_assert(sizeof(IndianaPlayerController_InputAxis) == 0x000028, "Wrong size on IndianaPlayerController_InputAxis");
static_assert(offsetof(IndianaPlayerController_InputAxis, Key) == 0x000000, "Member 'IndianaPlayerController_InputAxis::Key' has a wrong offset!");
static_assert(offsetof(IndianaPlayerController_InputAxis, Delta) == 0x000018, "Member 'IndianaPlayerController_InputAxis::Delta' has a wrong offset!");
static_assert(offsetof(IndianaPlayerController_InputAxis, DeltaTime) == 0x00001C, "Member 'IndianaPlayerController_InputAxis::DeltaTime' has a wrong offset!");
static_assert(offsetof(IndianaPlayerController_InputAxis, NumSamples) == 0x000020, "Member 'IndianaPlayerController_InputAxis::NumSamples' has a wrong offset!");
static_assert(offsetof(IndianaPlayerController_InputAxis, bGamepad) == 0x000024, "Member 'IndianaPlayerController_InputAxis::bGamepad' has a wrong offset!");
static_assert(offsetof(IndianaPlayerController_InputAxis, ReturnValue) == 0x000025, "Member 'IndianaPlayerController_InputAxis::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaPlayerController.InputKey
// 0x0028 (0x0028 - 0x0000)
struct IndianaPlayerController_InputKey final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputEvent                                   EventType;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AmountDepressed;                                   // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGamepad;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaPlayerController_InputKey) == 0x000008, "Wrong alignment on IndianaPlayerController_InputKey");
static_assert(sizeof(IndianaPlayerController_InputKey) == 0x000028, "Wrong size on IndianaPlayerController_InputKey");
static_assert(offsetof(IndianaPlayerController_InputKey, Key) == 0x000000, "Member 'IndianaPlayerController_InputKey::Key' has a wrong offset!");
static_assert(offsetof(IndianaPlayerController_InputKey, EventType) == 0x000018, "Member 'IndianaPlayerController_InputKey::EventType' has a wrong offset!");
static_assert(offsetof(IndianaPlayerController_InputKey, AmountDepressed) == 0x00001C, "Member 'IndianaPlayerController_InputKey::AmountDepressed' has a wrong offset!");
static_assert(offsetof(IndianaPlayerController_InputKey, bGamepad) == 0x000020, "Member 'IndianaPlayerController_InputKey::bGamepad' has a wrong offset!");
static_assert(offsetof(IndianaPlayerController_InputKey, ReturnValue) == 0x000021, "Member 'IndianaPlayerController_InputKey::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaPlayerController.OnActionMappingAdded
// 0x0030 (0x0030 - 0x0000)
struct IndianaPlayerController_OnActionMappingAdded final
{
public:
	struct FInputActionKeyMapping                 Value;                                             // 0x0000(0x0030)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerController_OnActionMappingAdded) == 0x000008, "Wrong alignment on IndianaPlayerController_OnActionMappingAdded");
static_assert(sizeof(IndianaPlayerController_OnActionMappingAdded) == 0x000030, "Wrong size on IndianaPlayerController_OnActionMappingAdded");
static_assert(offsetof(IndianaPlayerController_OnActionMappingAdded, Value) == 0x000000, "Member 'IndianaPlayerController_OnActionMappingAdded::Value' has a wrong offset!");

// Function Indiana.IndianaPlayerController.OnActionMappingRemoved
// 0x0030 (0x0030 - 0x0000)
struct IndianaPlayerController_OnActionMappingRemoved final
{
public:
	struct FInputActionKeyMapping                 Value;                                             // 0x0000(0x0030)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerController_OnActionMappingRemoved) == 0x000008, "Wrong alignment on IndianaPlayerController_OnActionMappingRemoved");
static_assert(sizeof(IndianaPlayerController_OnActionMappingRemoved) == 0x000030, "Wrong size on IndianaPlayerController_OnActionMappingRemoved");
static_assert(offsetof(IndianaPlayerController_OnActionMappingRemoved, Value) == 0x000000, "Member 'IndianaPlayerController_OnActionMappingRemoved::Value' has a wrong offset!");

// Function Indiana.IndianaPlayerController.OnAxisMappingAdded
// 0x0028 (0x0028 - 0x0000)
struct IndianaPlayerController_OnAxisMappingAdded final
{
public:
	struct FInputAxisKeyMapping                   Value;                                             // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerController_OnAxisMappingAdded) == 0x000008, "Wrong alignment on IndianaPlayerController_OnAxisMappingAdded");
static_assert(sizeof(IndianaPlayerController_OnAxisMappingAdded) == 0x000028, "Wrong size on IndianaPlayerController_OnAxisMappingAdded");
static_assert(offsetof(IndianaPlayerController_OnAxisMappingAdded, Value) == 0x000000, "Member 'IndianaPlayerController_OnAxisMappingAdded::Value' has a wrong offset!");

// Function Indiana.IndianaPlayerController.OnAxisMappingRemoved
// 0x0028 (0x0028 - 0x0000)
struct IndianaPlayerController_OnAxisMappingRemoved final
{
public:
	struct FInputAxisKeyMapping                   Value;                                             // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerController_OnAxisMappingRemoved) == 0x000008, "Wrong alignment on IndianaPlayerController_OnAxisMappingRemoved");
static_assert(sizeof(IndianaPlayerController_OnAxisMappingRemoved) == 0x000028, "Wrong size on IndianaPlayerController_OnAxisMappingRemoved");
static_assert(offsetof(IndianaPlayerController_OnAxisMappingRemoved, Value) == 0x000000, "Member 'IndianaPlayerController_OnAxisMappingRemoved::Value' has a wrong offset!");

// Function Indiana.IndianaPlayerController.OnRestoredStateOfBeing
// 0x0001 (0x0001 - 0x0000)
struct IndianaPlayerController_OnRestoredStateOfBeing final
{
public:
	EStateOfBeing                                 RestoredStateOfBeing;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerController_OnRestoredStateOfBeing) == 0x000001, "Wrong alignment on IndianaPlayerController_OnRestoredStateOfBeing");
static_assert(sizeof(IndianaPlayerController_OnRestoredStateOfBeing) == 0x000001, "Wrong size on IndianaPlayerController_OnRestoredStateOfBeing");
static_assert(offsetof(IndianaPlayerController_OnRestoredStateOfBeing, RestoredStateOfBeing) == 0x000000, "Member 'IndianaPlayerController_OnRestoredStateOfBeing::RestoredStateOfBeing' has a wrong offset!");

// Function Indiana.IndianaPlayerController.PinGlobalVariable
// 0x0010 (0x0010 - 0x0000)
struct IndianaPlayerController_PinGlobalVariable final
{
public:
	class FString                                 GlobalVariable;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerController_PinGlobalVariable) == 0x000008, "Wrong alignment on IndianaPlayerController_PinGlobalVariable");
static_assert(sizeof(IndianaPlayerController_PinGlobalVariable) == 0x000010, "Wrong size on IndianaPlayerController_PinGlobalVariable");
static_assert(offsetof(IndianaPlayerController_PinGlobalVariable, GlobalVariable) == 0x000000, "Member 'IndianaPlayerController_PinGlobalVariable::GlobalVariable' has a wrong offset!");

// Function Indiana.IndianaPlayerController.PlayChatterOnTarget
// 0x0001 (0x0001 - 0x0000)
struct IndianaPlayerController_PlayChatterOnTarget final
{
public:
	EChatterEventType                             ChatterEvent;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerController_PlayChatterOnTarget) == 0x000001, "Wrong alignment on IndianaPlayerController_PlayChatterOnTarget");
static_assert(sizeof(IndianaPlayerController_PlayChatterOnTarget) == 0x000001, "Wrong size on IndianaPlayerController_PlayChatterOnTarget");
static_assert(offsetof(IndianaPlayerController_PlayChatterOnTarget, ChatterEvent) == 0x000000, "Member 'IndianaPlayerController_PlayChatterOnTarget::ChatterEvent' has a wrong offset!");

// Function Indiana.IndianaPlayerController.SetAutoSprintEnabled
// 0x0001 (0x0001 - 0x0000)
struct IndianaPlayerController_SetAutoSprintEnabled final
{
public:
	bool                                          bIsEnabled;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerController_SetAutoSprintEnabled) == 0x000001, "Wrong alignment on IndianaPlayerController_SetAutoSprintEnabled");
static_assert(sizeof(IndianaPlayerController_SetAutoSprintEnabled) == 0x000001, "Wrong size on IndianaPlayerController_SetAutoSprintEnabled");
static_assert(offsetof(IndianaPlayerController_SetAutoSprintEnabled, bIsEnabled) == 0x000000, "Member 'IndianaPlayerController_SetAutoSprintEnabled::bIsEnabled' has a wrong offset!");

// Function Indiana.IndianaPlayerController.SetControllerEnableImpulseTriggers
// 0x0001 (0x0001 - 0x0000)
struct IndianaPlayerController_SetControllerEnableImpulseTriggers final
{
public:
	bool                                          bIsEnabled;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerController_SetControllerEnableImpulseTriggers) == 0x000001, "Wrong alignment on IndianaPlayerController_SetControllerEnableImpulseTriggers");
static_assert(sizeof(IndianaPlayerController_SetControllerEnableImpulseTriggers) == 0x000001, "Wrong size on IndianaPlayerController_SetControllerEnableImpulseTriggers");
static_assert(offsetof(IndianaPlayerController_SetControllerEnableImpulseTriggers, bIsEnabled) == 0x000000, "Member 'IndianaPlayerController_SetControllerEnableImpulseTriggers::bIsEnabled' has a wrong offset!");

// Function Indiana.IndianaPlayerController.SetControllerXAxisInverted
// 0x0001 (0x0001 - 0x0000)
struct IndianaPlayerController_SetControllerXAxisInverted final
{
public:
	bool                                          bIsInverted;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerController_SetControllerXAxisInverted) == 0x000001, "Wrong alignment on IndianaPlayerController_SetControllerXAxisInverted");
static_assert(sizeof(IndianaPlayerController_SetControllerXAxisInverted) == 0x000001, "Wrong size on IndianaPlayerController_SetControllerXAxisInverted");
static_assert(offsetof(IndianaPlayerController_SetControllerXAxisInverted, bIsInverted) == 0x000000, "Member 'IndianaPlayerController_SetControllerXAxisInverted::bIsInverted' has a wrong offset!");

// Function Indiana.IndianaPlayerController.SetControllerYAxisInverted
// 0x0001 (0x0001 - 0x0000)
struct IndianaPlayerController_SetControllerYAxisInverted final
{
public:
	bool                                          bIsInverted;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerController_SetControllerYAxisInverted) == 0x000001, "Wrong alignment on IndianaPlayerController_SetControllerYAxisInverted");
static_assert(sizeof(IndianaPlayerController_SetControllerYAxisInverted) == 0x000001, "Wrong size on IndianaPlayerController_SetControllerYAxisInverted");
static_assert(offsetof(IndianaPlayerController_SetControllerYAxisInverted, bIsInverted) == 0x000000, "Member 'IndianaPlayerController_SetControllerYAxisInverted::bIsInverted' has a wrong offset!");

// Function Indiana.IndianaPlayerController.SetGlobalVariable
// 0x0018 (0x0018 - 0x0000)
struct IndianaPlayerController_SetGlobalVariable final
{
public:
	class FString                                 GlobalVariable;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaPlayerController_SetGlobalVariable) == 0x000008, "Wrong alignment on IndianaPlayerController_SetGlobalVariable");
static_assert(sizeof(IndianaPlayerController_SetGlobalVariable) == 0x000018, "Wrong size on IndianaPlayerController_SetGlobalVariable");
static_assert(offsetof(IndianaPlayerController_SetGlobalVariable, GlobalVariable) == 0x000000, "Member 'IndianaPlayerController_SetGlobalVariable::GlobalVariable' has a wrong offset!");
static_assert(offsetof(IndianaPlayerController_SetGlobalVariable, Value) == 0x000010, "Member 'IndianaPlayerController_SetGlobalVariable::Value' has a wrong offset!");

// Function Indiana.IndianaPlayerController.SetImpulseTriggerIntensity
// 0x0004 (0x0004 - 0x0000)
struct IndianaPlayerController_SetImpulseTriggerIntensity final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerController_SetImpulseTriggerIntensity) == 0x000004, "Wrong alignment on IndianaPlayerController_SetImpulseTriggerIntensity");
static_assert(sizeof(IndianaPlayerController_SetImpulseTriggerIntensity) == 0x000004, "Wrong size on IndianaPlayerController_SetImpulseTriggerIntensity");
static_assert(offsetof(IndianaPlayerController_SetImpulseTriggerIntensity, Value) == 0x000000, "Member 'IndianaPlayerController_SetImpulseTriggerIntensity::Value' has a wrong offset!");

// Function Indiana.IndianaPlayerController.SetMouseADSSensitivity
// 0x0004 (0x0004 - 0x0000)
struct IndianaPlayerController_SetMouseADSSensitivity final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerController_SetMouseADSSensitivity) == 0x000004, "Wrong alignment on IndianaPlayerController_SetMouseADSSensitivity");
static_assert(sizeof(IndianaPlayerController_SetMouseADSSensitivity) == 0x000004, "Wrong size on IndianaPlayerController_SetMouseADSSensitivity");
static_assert(offsetof(IndianaPlayerController_SetMouseADSSensitivity, Value) == 0x000000, "Member 'IndianaPlayerController_SetMouseADSSensitivity::Value' has a wrong offset!");

// Function Indiana.IndianaPlayerController.SetMouseSensitivity
// 0x0004 (0x0004 - 0x0000)
struct IndianaPlayerController_SetMouseSensitivity final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerController_SetMouseSensitivity) == 0x000004, "Wrong alignment on IndianaPlayerController_SetMouseSensitivity");
static_assert(sizeof(IndianaPlayerController_SetMouseSensitivity) == 0x000004, "Wrong size on IndianaPlayerController_SetMouseSensitivity");
static_assert(offsetof(IndianaPlayerController_SetMouseSensitivity, Value) == 0x000000, "Member 'IndianaPlayerController_SetMouseSensitivity::Value' has a wrong offset!");

// Function Indiana.IndianaPlayerController.SetXAxisInverted
// 0x0001 (0x0001 - 0x0000)
struct IndianaPlayerController_SetXAxisInverted final
{
public:
	bool                                          bIsInverted;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerController_SetXAxisInverted) == 0x000001, "Wrong alignment on IndianaPlayerController_SetXAxisInverted");
static_assert(sizeof(IndianaPlayerController_SetXAxisInverted) == 0x000001, "Wrong size on IndianaPlayerController_SetXAxisInverted");
static_assert(offsetof(IndianaPlayerController_SetXAxisInverted, bIsInverted) == 0x000000, "Member 'IndianaPlayerController_SetXAxisInverted::bIsInverted' has a wrong offset!");

// Function Indiana.IndianaPlayerController.SetYAxisInverted
// 0x0001 (0x0001 - 0x0000)
struct IndianaPlayerController_SetYAxisInverted final
{
public:
	bool                                          bIsInverted;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerController_SetYAxisInverted) == 0x000001, "Wrong alignment on IndianaPlayerController_SetYAxisInverted");
static_assert(sizeof(IndianaPlayerController_SetYAxisInverted) == 0x000001, "Wrong size on IndianaPlayerController_SetYAxisInverted");
static_assert(offsetof(IndianaPlayerController_SetYAxisInverted, bIsInverted) == 0x000000, "Member 'IndianaPlayerController_SetYAxisInverted::bIsInverted' has a wrong offset!");

// Function Indiana.IndianaPlayerController.UnpinGlobalVariable
// 0x0010 (0x0010 - 0x0000)
struct IndianaPlayerController_UnpinGlobalVariable final
{
public:
	class FString                                 GlobalVariable;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerController_UnpinGlobalVariable) == 0x000008, "Wrong alignment on IndianaPlayerController_UnpinGlobalVariable");
static_assert(sizeof(IndianaPlayerController_UnpinGlobalVariable) == 0x000010, "Wrong size on IndianaPlayerController_UnpinGlobalVariable");
static_assert(offsetof(IndianaPlayerController_UnpinGlobalVariable, GlobalVariable) == 0x000000, "Member 'IndianaPlayerController_UnpinGlobalVariable::GlobalVariable' has a wrong offset!");

// Function Indiana.IndianaPlayerController.GetInteractHoldTime
// 0x0004 (0x0004 - 0x0000)
struct IndianaPlayerController_GetInteractHoldTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerController_GetInteractHoldTime) == 0x000004, "Wrong alignment on IndianaPlayerController_GetInteractHoldTime");
static_assert(sizeof(IndianaPlayerController_GetInteractHoldTime) == 0x000004, "Wrong size on IndianaPlayerController_GetInteractHoldTime");
static_assert(offsetof(IndianaPlayerController_GetInteractHoldTime, ReturnValue) == 0x000000, "Member 'IndianaPlayerController_GetInteractHoldTime::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaPlayerController.GetMouseADSSensitivity
// 0x0004 (0x0004 - 0x0000)
struct IndianaPlayerController_GetMouseADSSensitivity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerController_GetMouseADSSensitivity) == 0x000004, "Wrong alignment on IndianaPlayerController_GetMouseADSSensitivity");
static_assert(sizeof(IndianaPlayerController_GetMouseADSSensitivity) == 0x000004, "Wrong size on IndianaPlayerController_GetMouseADSSensitivity");
static_assert(offsetof(IndianaPlayerController_GetMouseADSSensitivity, ReturnValue) == 0x000000, "Member 'IndianaPlayerController_GetMouseADSSensitivity::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaPlayerController.GetMouseSensitivity
// 0x0004 (0x0004 - 0x0000)
struct IndianaPlayerController_GetMouseSensitivity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerController_GetMouseSensitivity) == 0x000004, "Wrong alignment on IndianaPlayerController_GetMouseSensitivity");
static_assert(sizeof(IndianaPlayerController_GetMouseSensitivity) == 0x000004, "Wrong size on IndianaPlayerController_GetMouseSensitivity");
static_assert(offsetof(IndianaPlayerController_GetMouseSensitivity, ReturnValue) == 0x000000, "Member 'IndianaPlayerController_GetMouseSensitivity::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaPlayerController.IsXAxisInverted
// 0x0001 (0x0001 - 0x0000)
struct IndianaPlayerController_IsXAxisInverted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerController_IsXAxisInverted) == 0x000001, "Wrong alignment on IndianaPlayerController_IsXAxisInverted");
static_assert(sizeof(IndianaPlayerController_IsXAxisInverted) == 0x000001, "Wrong size on IndianaPlayerController_IsXAxisInverted");
static_assert(offsetof(IndianaPlayerController_IsXAxisInverted, ReturnValue) == 0x000000, "Member 'IndianaPlayerController_IsXAxisInverted::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaPlayerController.IsYAxisInverted
// 0x0001 (0x0001 - 0x0000)
struct IndianaPlayerController_IsYAxisInverted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerController_IsYAxisInverted) == 0x000001, "Wrong alignment on IndianaPlayerController_IsYAxisInverted");
static_assert(sizeof(IndianaPlayerController_IsYAxisInverted) == 0x000001, "Wrong size on IndianaPlayerController_IsYAxisInverted");
static_assert(offsetof(IndianaPlayerController_IsYAxisInverted, ReturnValue) == 0x000000, "Member 'IndianaPlayerController_IsYAxisInverted::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaPlayerStart.OnPlayerPawnOverlappedAwareness
// 0x00A8 (0x00A8 - 0x0000)
struct IndianaPlayerStart_OnPlayerPawnOverlappedAwareness final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerStart_OnPlayerPawnOverlappedAwareness) == 0x000008, "Wrong alignment on IndianaPlayerStart_OnPlayerPawnOverlappedAwareness");
static_assert(sizeof(IndianaPlayerStart_OnPlayerPawnOverlappedAwareness) == 0x0000A8, "Wrong size on IndianaPlayerStart_OnPlayerPawnOverlappedAwareness");
static_assert(offsetof(IndianaPlayerStart_OnPlayerPawnOverlappedAwareness, OverlappedComponent) == 0x000000, "Member 'IndianaPlayerStart_OnPlayerPawnOverlappedAwareness::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(IndianaPlayerStart_OnPlayerPawnOverlappedAwareness, OtherActor) == 0x000008, "Member 'IndianaPlayerStart_OnPlayerPawnOverlappedAwareness::OtherActor' has a wrong offset!");
static_assert(offsetof(IndianaPlayerStart_OnPlayerPawnOverlappedAwareness, OtherComp) == 0x000010, "Member 'IndianaPlayerStart_OnPlayerPawnOverlappedAwareness::OtherComp' has a wrong offset!");
static_assert(offsetof(IndianaPlayerStart_OnPlayerPawnOverlappedAwareness, OtherBodyIndex) == 0x000018, "Member 'IndianaPlayerStart_OnPlayerPawnOverlappedAwareness::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(IndianaPlayerStart_OnPlayerPawnOverlappedAwareness, bFromSweep) == 0x00001C, "Member 'IndianaPlayerStart_OnPlayerPawnOverlappedAwareness::bFromSweep' has a wrong offset!");
static_assert(offsetof(IndianaPlayerStart_OnPlayerPawnOverlappedAwareness, SweepResult) == 0x000020, "Member 'IndianaPlayerStart_OnPlayerPawnOverlappedAwareness::SweepResult' has a wrong offset!");

// Function Indiana.IndianaPlayerStart.OnPlayerPawnOverlappedVisited
// 0x00A8 (0x00A8 - 0x0000)
struct IndianaPlayerStart_OnPlayerPawnOverlappedVisited final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerStart_OnPlayerPawnOverlappedVisited) == 0x000008, "Wrong alignment on IndianaPlayerStart_OnPlayerPawnOverlappedVisited");
static_assert(sizeof(IndianaPlayerStart_OnPlayerPawnOverlappedVisited) == 0x0000A8, "Wrong size on IndianaPlayerStart_OnPlayerPawnOverlappedVisited");
static_assert(offsetof(IndianaPlayerStart_OnPlayerPawnOverlappedVisited, OverlappedComponent) == 0x000000, "Member 'IndianaPlayerStart_OnPlayerPawnOverlappedVisited::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(IndianaPlayerStart_OnPlayerPawnOverlappedVisited, OtherActor) == 0x000008, "Member 'IndianaPlayerStart_OnPlayerPawnOverlappedVisited::OtherActor' has a wrong offset!");
static_assert(offsetof(IndianaPlayerStart_OnPlayerPawnOverlappedVisited, OtherComp) == 0x000010, "Member 'IndianaPlayerStart_OnPlayerPawnOverlappedVisited::OtherComp' has a wrong offset!");
static_assert(offsetof(IndianaPlayerStart_OnPlayerPawnOverlappedVisited, OtherBodyIndex) == 0x000018, "Member 'IndianaPlayerStart_OnPlayerPawnOverlappedVisited::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(IndianaPlayerStart_OnPlayerPawnOverlappedVisited, bFromSweep) == 0x00001C, "Member 'IndianaPlayerStart_OnPlayerPawnOverlappedVisited::bFromSweep' has a wrong offset!");
static_assert(offsetof(IndianaPlayerStart_OnPlayerPawnOverlappedVisited, SweepResult) == 0x000020, "Member 'IndianaPlayerStart_OnPlayerPawnOverlappedVisited::SweepResult' has a wrong offset!");

// Function Indiana.IndianaPlayerStart.GetCompanionSpawnLocation
// 0x0030 (0x0030 - 0x0000)
struct IndianaPlayerStart_GetCompanionSpawnLocation final
{
public:
	class FString                                 CompanionCapsuleName;                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x001C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bFeetLocation;                                     // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0029(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaPlayerStart_GetCompanionSpawnLocation) == 0x000008, "Wrong alignment on IndianaPlayerStart_GetCompanionSpawnLocation");
static_assert(sizeof(IndianaPlayerStart_GetCompanionSpawnLocation) == 0x000030, "Wrong size on IndianaPlayerStart_GetCompanionSpawnLocation");
static_assert(offsetof(IndianaPlayerStart_GetCompanionSpawnLocation, CompanionCapsuleName) == 0x000000, "Member 'IndianaPlayerStart_GetCompanionSpawnLocation::CompanionCapsuleName' has a wrong offset!");
static_assert(offsetof(IndianaPlayerStart_GetCompanionSpawnLocation, Location) == 0x000010, "Member 'IndianaPlayerStart_GetCompanionSpawnLocation::Location' has a wrong offset!");
static_assert(offsetof(IndianaPlayerStart_GetCompanionSpawnLocation, Rotation) == 0x00001C, "Member 'IndianaPlayerStart_GetCompanionSpawnLocation::Rotation' has a wrong offset!");
static_assert(offsetof(IndianaPlayerStart_GetCompanionSpawnLocation, bFeetLocation) == 0x000028, "Member 'IndianaPlayerStart_GetCompanionSpawnLocation::bFeetLocation' has a wrong offset!");
static_assert(offsetof(IndianaPlayerStart_GetCompanionSpawnLocation, ReturnValue) == 0x000029, "Member 'IndianaPlayerStart_GetCompanionSpawnLocation::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaPlayerStart.GetDebugString
// 0x0010 (0x0010 - 0x0000)
struct IndianaPlayerStart_GetDebugString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaPlayerStart_GetDebugString) == 0x000008, "Wrong alignment on IndianaPlayerStart_GetDebugString");
static_assert(sizeof(IndianaPlayerStart_GetDebugString) == 0x000010, "Wrong size on IndianaPlayerStart_GetDebugString");
static_assert(offsetof(IndianaPlayerStart_GetDebugString, ReturnValue) == 0x000000, "Member 'IndianaPlayerStart_GetDebugString::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaUI.ShowItemOnDisplay
// 0x0008 (0x0008 - 0x0000)
struct IndianaUI_ShowItemOnDisplay final
{
public:
	TSubclassOf<class UItem>                      ItemIn;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaUI_ShowItemOnDisplay) == 0x000008, "Wrong alignment on IndianaUI_ShowItemOnDisplay");
static_assert(sizeof(IndianaUI_ShowItemOnDisplay) == 0x000008, "Wrong size on IndianaUI_ShowItemOnDisplay");
static_assert(offsetof(IndianaUI_ShowItemOnDisplay, ItemIn) == 0x000000, "Member 'IndianaUI_ShowItemOnDisplay::ItemIn' has a wrong offset!");

// Function Indiana.IndianaUI.ColorblindMode
// 0x000C (0x000C - 0x0000)
struct IndianaUI_ColorblindMode final
{
public:
	EColorVisionDeficiency                        Deficiency;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Severity;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCorrection;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCorrectionPreview;                                // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaUI_ColorblindMode) == 0x000004, "Wrong alignment on IndianaUI_ColorblindMode");
static_assert(sizeof(IndianaUI_ColorblindMode) == 0x00000C, "Wrong size on IndianaUI_ColorblindMode");
static_assert(offsetof(IndianaUI_ColorblindMode, Deficiency) == 0x000000, "Member 'IndianaUI_ColorblindMode::Deficiency' has a wrong offset!");
static_assert(offsetof(IndianaUI_ColorblindMode, Severity) == 0x000004, "Member 'IndianaUI_ColorblindMode::Severity' has a wrong offset!");
static_assert(offsetof(IndianaUI_ColorblindMode, bCorrection) == 0x000008, "Member 'IndianaUI_ColorblindMode::bCorrection' has a wrong offset!");
static_assert(offsetof(IndianaUI_ColorblindMode, bCorrectionPreview) == 0x000009, "Member 'IndianaUI_ColorblindMode::bCorrectionPreview' has a wrong offset!");

// Function Indiana.IndianaUI.ConstructUserWidget
// 0x0018 (0x0018 - 0x0000)
struct IndianaUI_ConstructUserWidget final
{
public:
	ECheckBranches                                Branches;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UIndianaInterfaceUserWidget> WidgetClass;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UIndianaInterfaceUserWidget*            ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaUI_ConstructUserWidget) == 0x000008, "Wrong alignment on IndianaUI_ConstructUserWidget");
static_assert(sizeof(IndianaUI_ConstructUserWidget) == 0x000018, "Wrong size on IndianaUI_ConstructUserWidget");
static_assert(offsetof(IndianaUI_ConstructUserWidget, Branches) == 0x000000, "Member 'IndianaUI_ConstructUserWidget::Branches' has a wrong offset!");
static_assert(offsetof(IndianaUI_ConstructUserWidget, WidgetClass) == 0x000008, "Member 'IndianaUI_ConstructUserWidget::WidgetClass' has a wrong offset!");
static_assert(offsetof(IndianaUI_ConstructUserWidget, ReturnValue) == 0x000010, "Member 'IndianaUI_ConstructUserWidget::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaUI.CreateCinematicPlayer
// 0x0008 (0x0008 - 0x0000)
struct IndianaUI_CreateCinematicPlayer final
{
public:
	class UCinematicPlayerWidget*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaUI_CreateCinematicPlayer) == 0x000008, "Wrong alignment on IndianaUI_CreateCinematicPlayer");
static_assert(sizeof(IndianaUI_CreateCinematicPlayer) == 0x000008, "Wrong size on IndianaUI_CreateCinematicPlayer");
static_assert(offsetof(IndianaUI_CreateCinematicPlayer, ReturnValue) == 0x000000, "Member 'IndianaUI_CreateCinematicPlayer::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaUI.CreateExaminable
// 0x0020 (0x0020 - 0x0000)
struct IndianaUI_CreateExaminable final
{
public:
	struct FLocString                             NameString;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLocString                             DescriptionString;                                 // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLocString                             ActionString;                                      // 0x0010(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RemoteEventOnExaminationEnd;                       // 0x0018(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaUI_CreateExaminable) == 0x000004, "Wrong alignment on IndianaUI_CreateExaminable");
static_assert(sizeof(IndianaUI_CreateExaminable) == 0x000020, "Wrong size on IndianaUI_CreateExaminable");
static_assert(offsetof(IndianaUI_CreateExaminable, NameString) == 0x000000, "Member 'IndianaUI_CreateExaminable::NameString' has a wrong offset!");
static_assert(offsetof(IndianaUI_CreateExaminable, DescriptionString) == 0x000008, "Member 'IndianaUI_CreateExaminable::DescriptionString' has a wrong offset!");
static_assert(offsetof(IndianaUI_CreateExaminable, ActionString) == 0x000010, "Member 'IndianaUI_CreateExaminable::ActionString' has a wrong offset!");
static_assert(offsetof(IndianaUI_CreateExaminable, RemoteEventOnExaminationEnd) == 0x000018, "Member 'IndianaUI_CreateExaminable::RemoteEventOnExaminationEnd' has a wrong offset!");

// Function Indiana.IndianaUI.CreateGenericMoviePlayer
// 0x0008 (0x0008 - 0x0000)
struct IndianaUI_CreateGenericMoviePlayer final
{
public:
	class UMoviePlayerWidget*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaUI_CreateGenericMoviePlayer) == 0x000008, "Wrong alignment on IndianaUI_CreateGenericMoviePlayer");
static_assert(sizeof(IndianaUI_CreateGenericMoviePlayer) == 0x000008, "Wrong size on IndianaUI_CreateGenericMoviePlayer");
static_assert(offsetof(IndianaUI_CreateGenericMoviePlayer, ReturnValue) == 0x000000, "Member 'IndianaUI_CreateGenericMoviePlayer::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaUI.CreateSubtitleManagerInstance
// 0x0010 (0x0010 - 0x0000)
struct IndianaUI_CreateSubtitleManagerInstance final
{
public:
	class UMediaPlayer*                           MediaPlayer;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USubtitleManagerWidget*                 ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaUI_CreateSubtitleManagerInstance) == 0x000008, "Wrong alignment on IndianaUI_CreateSubtitleManagerInstance");
static_assert(sizeof(IndianaUI_CreateSubtitleManagerInstance) == 0x000010, "Wrong size on IndianaUI_CreateSubtitleManagerInstance");
static_assert(offsetof(IndianaUI_CreateSubtitleManagerInstance, MediaPlayer) == 0x000000, "Member 'IndianaUI_CreateSubtitleManagerInstance::MediaPlayer' has a wrong offset!");
static_assert(offsetof(IndianaUI_CreateSubtitleManagerInstance, ReturnValue) == 0x000008, "Member 'IndianaUI_CreateSubtitleManagerInstance::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaUI.CreateSubtitleManagerInstanceForMSSP
// 0x0010 (0x0010 - 0x0000)
struct IndianaUI_CreateSubtitleManagerInstanceForMSSP final
{
public:
	class UMovieSceneSequencePlayer*              MovieSceneSequencePlayer;                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USubtitleManagerWidget*                 ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaUI_CreateSubtitleManagerInstanceForMSSP) == 0x000008, "Wrong alignment on IndianaUI_CreateSubtitleManagerInstanceForMSSP");
static_assert(sizeof(IndianaUI_CreateSubtitleManagerInstanceForMSSP) == 0x000010, "Wrong size on IndianaUI_CreateSubtitleManagerInstanceForMSSP");
static_assert(offsetof(IndianaUI_CreateSubtitleManagerInstanceForMSSP, MovieSceneSequencePlayer) == 0x000000, "Member 'IndianaUI_CreateSubtitleManagerInstanceForMSSP::MovieSceneSequencePlayer' has a wrong offset!");
static_assert(offsetof(IndianaUI_CreateSubtitleManagerInstanceForMSSP, ReturnValue) == 0x000008, "Member 'IndianaUI_CreateSubtitleManagerInstanceForMSSP::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaUI.DebugSetFontScaling
// 0x0004 (0x0004 - 0x0000)
struct IndianaUI_DebugSetFontScaling final
{
public:
	int32                                         ModifierIn;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaUI_DebugSetFontScaling) == 0x000004, "Wrong alignment on IndianaUI_DebugSetFontScaling");
static_assert(sizeof(IndianaUI_DebugSetFontScaling) == 0x000004, "Wrong size on IndianaUI_DebugSetFontScaling");
static_assert(offsetof(IndianaUI_DebugSetFontScaling, ModifierIn) == 0x000000, "Member 'IndianaUI_DebugSetFontScaling::ModifierIn' has a wrong offset!");

// Function Indiana.IndianaUI.FontSizeModifierChanged
// 0x0004 (0x0004 - 0x0000)
struct IndianaUI_FontSizeModifierChanged final
{
public:
	int32                                         ModifierIn;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaUI_FontSizeModifierChanged) == 0x000004, "Wrong alignment on IndianaUI_FontSizeModifierChanged");
static_assert(sizeof(IndianaUI_FontSizeModifierChanged) == 0x000004, "Wrong size on IndianaUI_FontSizeModifierChanged");
static_assert(offsetof(IndianaUI_FontSizeModifierChanged, ModifierIn) == 0x000000, "Member 'IndianaUI_FontSizeModifierChanged::ModifierIn' has a wrong offset!");

// Function Indiana.IndianaUI.ForceHUDHidden
// 0x0001 (0x0001 - 0x0000)
struct IndianaUI_ForceHUDHidden final
{
public:
	bool                                          bForceHidden;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaUI_ForceHUDHidden) == 0x000001, "Wrong alignment on IndianaUI_ForceHUDHidden");
static_assert(sizeof(IndianaUI_ForceHUDHidden) == 0x000001, "Wrong size on IndianaUI_ForceHUDHidden");
static_assert(offsetof(IndianaUI_ForceHUDHidden, bForceHidden) == 0x000000, "Member 'IndianaUI_ForceHUDHidden::bForceHidden' has a wrong offset!");

// Function Indiana.IndianaUI.RemoveSubtitleManagerInstance
// 0x0008 (0x0008 - 0x0000)
struct IndianaUI_RemoveSubtitleManagerInstance final
{
public:
	class USubtitleManagerWidget*                 ManagerWidget;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaUI_RemoveSubtitleManagerInstance) == 0x000008, "Wrong alignment on IndianaUI_RemoveSubtitleManagerInstance");
static_assert(sizeof(IndianaUI_RemoveSubtitleManagerInstance) == 0x000008, "Wrong size on IndianaUI_RemoveSubtitleManagerInstance");
static_assert(offsetof(IndianaUI_RemoveSubtitleManagerInstance, ManagerWidget) == 0x000000, "Member 'IndianaUI_RemoveSubtitleManagerInstance::ManagerWidget' has a wrong offset!");

// Function Indiana.IndianaUI.SetHudVisible
// 0x0001 (0x0001 - 0x0000)
struct IndianaUI_SetHudVisible final
{
public:
	bool                                          bNewVisible;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaUI_SetHudVisible) == 0x000001, "Wrong alignment on IndianaUI_SetHudVisible");
static_assert(sizeof(IndianaUI_SetHudVisible) == 0x000001, "Wrong size on IndianaUI_SetHudVisible");
static_assert(offsetof(IndianaUI_SetHudVisible, bNewVisible) == 0x000000, "Member 'IndianaUI_SetHudVisible::bNewVisible' has a wrong offset!");

// Function Indiana.IndianaUI.SetSoundMixVolume
// 0x0010 (0x0010 - 0x0000)
struct IndianaUI_SetSoundMixVolume final
{
public:
	class USoundMix*                              SoundMix;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Volume;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaUI_SetSoundMixVolume) == 0x000008, "Wrong alignment on IndianaUI_SetSoundMixVolume");
static_assert(sizeof(IndianaUI_SetSoundMixVolume) == 0x000010, "Wrong size on IndianaUI_SetSoundMixVolume");
static_assert(offsetof(IndianaUI_SetSoundMixVolume, SoundMix) == 0x000000, "Member 'IndianaUI_SetSoundMixVolume::SoundMix' has a wrong offset!");
static_assert(offsetof(IndianaUI_SetSoundMixVolume, Volume) == 0x000008, "Member 'IndianaUI_SetSoundMixVolume::Volume' has a wrong offset!");

// Function Indiana.IndianaUI.GetHUD
// 0x0008 (0x0008 - 0x0000)
struct IndianaUI_GetHUD final
{
public:
	class UHUDWidget*                             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaUI_GetHUD) == 0x000008, "Wrong alignment on IndianaUI_GetHUD");
static_assert(sizeof(IndianaUI_GetHUD) == 0x000008, "Wrong size on IndianaUI_GetHUD");
static_assert(offsetof(IndianaUI_GetHUD, ReturnValue) == 0x000000, "Member 'IndianaUI_GetHUD::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaUI.GetSlideshowWidget
// 0x0008 (0x0008 - 0x0000)
struct IndianaUI_GetSlideshowWidget final
{
public:
	class USlideshowWidget*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaUI_GetSlideshowWidget) == 0x000008, "Wrong alignment on IndianaUI_GetSlideshowWidget");
static_assert(sizeof(IndianaUI_GetSlideshowWidget) == 0x000008, "Wrong size on IndianaUI_GetSlideshowWidget");
static_assert(offsetof(IndianaUI_GetSlideshowWidget, ReturnValue) == 0x000000, "Member 'IndianaUI_GetSlideshowWidget::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaUI.GetUserWidget
// 0x0018 (0x0018 - 0x0000)
struct IndianaUI_GetUserWidget final
{
public:
	ECheckBranches                                Branches;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UIndianaInterfaceUserWidget> WidgetClass;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UIndianaInterfaceUserWidget*            ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaUI_GetUserWidget) == 0x000008, "Wrong alignment on IndianaUI_GetUserWidget");
static_assert(sizeof(IndianaUI_GetUserWidget) == 0x000018, "Wrong size on IndianaUI_GetUserWidget");
static_assert(offsetof(IndianaUI_GetUserWidget, Branches) == 0x000000, "Member 'IndianaUI_GetUserWidget::Branches' has a wrong offset!");
static_assert(offsetof(IndianaUI_GetUserWidget, WidgetClass) == 0x000008, "Member 'IndianaUI_GetUserWidget::WidgetClass' has a wrong offset!");
static_assert(offsetof(IndianaUI_GetUserWidget, ReturnValue) == 0x000010, "Member 'IndianaUI_GetUserWidget::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaUIFunctionLibrary.GetColorByType
// 0x0014 (0x0014 - 0x0000)
struct IndianaUIFunctionLibrary_GetColorByType final
{
public:
	EIndianaUIColorType                           Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ReturnValue;                                       // 0x0004(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaUIFunctionLibrary_GetColorByType) == 0x000004, "Wrong alignment on IndianaUIFunctionLibrary_GetColorByType");
static_assert(sizeof(IndianaUIFunctionLibrary_GetColorByType) == 0x000014, "Wrong size on IndianaUIFunctionLibrary_GetColorByType");
static_assert(offsetof(IndianaUIFunctionLibrary_GetColorByType, Type) == 0x000000, "Member 'IndianaUIFunctionLibrary_GetColorByType::Type' has a wrong offset!");
static_assert(offsetof(IndianaUIFunctionLibrary_GetColorByType, ReturnValue) == 0x000004, "Member 'IndianaUIFunctionLibrary_GetColorByType::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaUIFunctionLibrary.GetIndianaUI
// 0x0018 (0x0018 - 0x0000)
struct IndianaUIFunctionLibrary_GetIndianaUI final
{
public:
	ECheckBranches                                Branches;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      Controller;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AIndianaUI*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaUIFunctionLibrary_GetIndianaUI) == 0x000008, "Wrong alignment on IndianaUIFunctionLibrary_GetIndianaUI");
static_assert(sizeof(IndianaUIFunctionLibrary_GetIndianaUI) == 0x000018, "Wrong size on IndianaUIFunctionLibrary_GetIndianaUI");
static_assert(offsetof(IndianaUIFunctionLibrary_GetIndianaUI, Branches) == 0x000000, "Member 'IndianaUIFunctionLibrary_GetIndianaUI::Branches' has a wrong offset!");
static_assert(offsetof(IndianaUIFunctionLibrary_GetIndianaUI, Controller) == 0x000008, "Member 'IndianaUIFunctionLibrary_GetIndianaUI::Controller' has a wrong offset!");
static_assert(offsetof(IndianaUIFunctionLibrary_GetIndianaUI, ReturnValue) == 0x000010, "Member 'IndianaUIFunctionLibrary_GetIndianaUI::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaUIFunctionLibrary.GetOpacityForComponentByType
// 0x0008 (0x0008 - 0x0000)
struct IndianaUIFunctionLibrary_GetOpacityForComponentByType final
{
public:
	EIndianaUIOpacityType                         Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndianaUIFunctionLibrary_GetOpacityForComponentByType) == 0x000004, "Wrong alignment on IndianaUIFunctionLibrary_GetOpacityForComponentByType");
static_assert(sizeof(IndianaUIFunctionLibrary_GetOpacityForComponentByType) == 0x000008, "Wrong size on IndianaUIFunctionLibrary_GetOpacityForComponentByType");
static_assert(offsetof(IndianaUIFunctionLibrary_GetOpacityForComponentByType, Type) == 0x000000, "Member 'IndianaUIFunctionLibrary_GetOpacityForComponentByType::Type' has a wrong offset!");
static_assert(offsetof(IndianaUIFunctionLibrary_GetOpacityForComponentByType, ReturnValue) == 0x000004, "Member 'IndianaUIFunctionLibrary_GetOpacityForComponentByType::ReturnValue' has a wrong offset!");

// Function Indiana.IndianaWorldSettings.K2_IsCurrentMap
// 0x0010 (0x0010 - 0x0000)
struct IndianaWorldSettings_K2_IsCurrentMap final
{
public:
	const class UMapInformation*                  MapInfo;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IndianaWorldSettings_K2_IsCurrentMap) == 0x000008, "Wrong alignment on IndianaWorldSettings_K2_IsCurrentMap");
static_assert(sizeof(IndianaWorldSettings_K2_IsCurrentMap) == 0x000010, "Wrong size on IndianaWorldSettings_K2_IsCurrentMap");
static_assert(offsetof(IndianaWorldSettings_K2_IsCurrentMap, MapInfo) == 0x000000, "Member 'IndianaWorldSettings_K2_IsCurrentMap::MapInfo' has a wrong offset!");
static_assert(offsetof(IndianaWorldSettings_K2_IsCurrentMap, ReturnValue) == 0x000008, "Member 'IndianaWorldSettings_K2_IsCurrentMap::ReturnValue' has a wrong offset!");

// Function Indiana.InputGuideWidget.GetContentWidth
// 0x0004 (0x0004 - 0x0000)
struct InputGuideWidget_GetContentWidth final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputGuideWidget_GetContentWidth) == 0x000004, "Wrong alignment on InputGuideWidget_GetContentWidth");
static_assert(sizeof(InputGuideWidget_GetContentWidth) == 0x000004, "Wrong size on InputGuideWidget_GetContentWidth");
static_assert(offsetof(InputGuideWidget_GetContentWidth, ReturnValue) == 0x000000, "Member 'InputGuideWidget_GetContentWidth::ReturnValue' has a wrong offset!");

// Function Indiana.InputGuideWidget.InteractChanged
// 0x0001 (0x0001 - 0x0000)
struct InputGuideWidget_InteractChanged final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputGuideWidget_InteractChanged) == 0x000001, "Wrong alignment on InputGuideWidget_InteractChanged");
static_assert(sizeof(InputGuideWidget_InteractChanged) == 0x000001, "Wrong size on InputGuideWidget_InteractChanged");
static_assert(offsetof(InputGuideWidget_InteractChanged, bVisible) == 0x000000, "Member 'InputGuideWidget_InteractChanged::bVisible' has a wrong offset!");

// Function Indiana.InputGuideWidget.OnInteractionProgressChange
// 0x0004 (0x0004 - 0x0000)
struct InputGuideWidget_OnInteractionProgressChange final
{
public:
	float                                         CurrentProgressRatio;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputGuideWidget_OnInteractionProgressChange) == 0x000004, "Wrong alignment on InputGuideWidget_OnInteractionProgressChange");
static_assert(sizeof(InputGuideWidget_OnInteractionProgressChange) == 0x000004, "Wrong size on InputGuideWidget_OnInteractionProgressChange");
static_assert(offsetof(InputGuideWidget_OnInteractionProgressChange, CurrentProgressRatio) == 0x000000, "Member 'InputGuideWidget_OnInteractionProgressChange::CurrentProgressRatio' has a wrong offset!");

// Function Indiana.InputLabelHoldWidget.SetRadialFill
// 0x0008 (0x0008 - 0x0000)
struct InputLabelHoldWidget_SetRadialFill final
{
public:
	float                                         FillRatio;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Opacity;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputLabelHoldWidget_SetRadialFill) == 0x000004, "Wrong alignment on InputLabelHoldWidget_SetRadialFill");
static_assert(sizeof(InputLabelHoldWidget_SetRadialFill) == 0x000008, "Wrong size on InputLabelHoldWidget_SetRadialFill");
static_assert(offsetof(InputLabelHoldWidget_SetRadialFill, FillRatio) == 0x000000, "Member 'InputLabelHoldWidget_SetRadialFill::FillRatio' has a wrong offset!");
static_assert(offsetof(InputLabelHoldWidget_SetRadialFill, Opacity) == 0x000004, "Member 'InputLabelHoldWidget_SetRadialFill::Opacity' has a wrong offset!");

// Function Indiana.InputLabelHoldWidget.SetWidth
// 0x0004 (0x0004 - 0x0000)
struct InputLabelHoldWidget_SetWidth final
{
public:
	float                                         Width;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputLabelHoldWidget_SetWidth) == 0x000004, "Wrong alignment on InputLabelHoldWidget_SetWidth");
static_assert(sizeof(InputLabelHoldWidget_SetWidth) == 0x000004, "Wrong size on InputLabelHoldWidget_SetWidth");
static_assert(offsetof(InputLabelHoldWidget_SetWidth, Width) == 0x000000, "Member 'InputLabelHoldWidget_SetWidth::Width' has a wrong offset!");

// Function Indiana.InteractionInterface.CanInteract
// 0x0028 (0x0028 - 0x0000)
struct InteractionInterface_CanInteract final
{
public:
	class AIndianaCharacter*                      Initiator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInteractPayload                       Payload;                                           // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionInterface_CanInteract) == 0x000008, "Wrong alignment on InteractionInterface_CanInteract");
static_assert(sizeof(InteractionInterface_CanInteract) == 0x000028, "Wrong size on InteractionInterface_CanInteract");
static_assert(offsetof(InteractionInterface_CanInteract, Initiator) == 0x000000, "Member 'InteractionInterface_CanInteract::Initiator' has a wrong offset!");
static_assert(offsetof(InteractionInterface_CanInteract, Payload) == 0x000008, "Member 'InteractionInterface_CanInteract::Payload' has a wrong offset!");
static_assert(offsetof(InteractionInterface_CanInteract, ReturnValue) == 0x000020, "Member 'InteractionInterface_CanInteract::ReturnValue' has a wrong offset!");

// Function Indiana.InteractionInterface.GetInteraction
// 0x0048 (0x0048 - 0x0000)
struct InteractionInterface_GetInteraction final
{
public:
	struct FInteractionDescription                Description;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FInteractPayload                       Payload;                                           // 0x0028(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         InteractDistance;                                  // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInteractionType                              ReturnValue;                                       // 0x0044(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionInterface_GetInteraction) == 0x000008, "Wrong alignment on InteractionInterface_GetInteraction");
static_assert(sizeof(InteractionInterface_GetInteraction) == 0x000048, "Wrong size on InteractionInterface_GetInteraction");
static_assert(offsetof(InteractionInterface_GetInteraction, Description) == 0x000000, "Member 'InteractionInterface_GetInteraction::Description' has a wrong offset!");
static_assert(offsetof(InteractionInterface_GetInteraction, Payload) == 0x000028, "Member 'InteractionInterface_GetInteraction::Payload' has a wrong offset!");
static_assert(offsetof(InteractionInterface_GetInteraction, InteractDistance) == 0x000040, "Member 'InteractionInterface_GetInteraction::InteractDistance' has a wrong offset!");
static_assert(offsetof(InteractionInterface_GetInteraction, ReturnValue) == 0x000044, "Member 'InteractionInterface_GetInteraction::ReturnValue' has a wrong offset!");

// Function Indiana.InteractionInterface.GetInteractLocString
// 0x0008 (0x0008 - 0x0000)
struct InteractionInterface_GetInteractLocString final
{
public:
	struct FLocString                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionInterface_GetInteractLocString) == 0x000004, "Wrong alignment on InteractionInterface_GetInteractLocString");
static_assert(sizeof(InteractionInterface_GetInteractLocString) == 0x000008, "Wrong size on InteractionInterface_GetInteractLocString");
static_assert(offsetof(InteractionInterface_GetInteractLocString, ReturnValue) == 0x000000, "Member 'InteractionInterface_GetInteractLocString::ReturnValue' has a wrong offset!");

// Function Indiana.InventoryArmorPageWidget.SetEquippedArmorSlot
// 0x0001 (0x0001 - 0x0000)
struct InventoryArmorPageWidget_SetEquippedArmorSlot final
{
public:
	EArmorSlot                                    ArmorSlotIn;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryArmorPageWidget_SetEquippedArmorSlot) == 0x000001, "Wrong alignment on InventoryArmorPageWidget_SetEquippedArmorSlot");
static_assert(sizeof(InventoryArmorPageWidget_SetEquippedArmorSlot) == 0x000001, "Wrong size on InventoryArmorPageWidget_SetEquippedArmorSlot");
static_assert(offsetof(InventoryArmorPageWidget_SetEquippedArmorSlot, ArmorSlotIn) == 0x000000, "Member 'InventoryArmorPageWidget_SetEquippedArmorSlot::ArmorSlotIn' has a wrong offset!");

// Function Indiana.InventoryItemWidget.GetDamageType
// 0x0008 (0x0008 - 0x0000)
struct InventoryItemWidget_GetDamageType final
{
public:
	TSubclassOf<class UIndianaDamageType>         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryItemWidget_GetDamageType) == 0x000008, "Wrong alignment on InventoryItemWidget_GetDamageType");
static_assert(sizeof(InventoryItemWidget_GetDamageType) == 0x000008, "Wrong size on InventoryItemWidget_GetDamageType");
static_assert(offsetof(InventoryItemWidget_GetDamageType, ReturnValue) == 0x000000, "Member 'InventoryItemWidget_GetDamageType::ReturnValue' has a wrong offset!");

// Function Indiana.InventoryWeaponAmmoGroupWidget.OnHighlightChange
// 0x0001 (0x0001 - 0x0000)
struct InventoryWeaponAmmoGroupWidget_OnHighlightChange final
{
public:
	bool                                          bHighlight;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryWeaponAmmoGroupWidget_OnHighlightChange) == 0x000001, "Wrong alignment on InventoryWeaponAmmoGroupWidget_OnHighlightChange");
static_assert(sizeof(InventoryWeaponAmmoGroupWidget_OnHighlightChange) == 0x000001, "Wrong size on InventoryWeaponAmmoGroupWidget_OnHighlightChange");
static_assert(offsetof(InventoryWeaponAmmoGroupWidget_OnHighlightChange, bHighlight) == 0x000000, "Member 'InventoryWeaponAmmoGroupWidget_OnHighlightChange::bHighlight' has a wrong offset!");

// Function Indiana.InventoryWeaponAmmoWidget.SetIcon
// 0x0008 (0x0008 - 0x0000)
struct InventoryWeaponAmmoWidget_SetIcon final
{
public:
	class UTexture2D*                             Icon;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryWeaponAmmoWidget_SetIcon) == 0x000008, "Wrong alignment on InventoryWeaponAmmoWidget_SetIcon");
static_assert(sizeof(InventoryWeaponAmmoWidget_SetIcon) == 0x000008, "Wrong size on InventoryWeaponAmmoWidget_SetIcon");
static_assert(offsetof(InventoryWeaponAmmoWidget_SetIcon, Icon) == 0x000000, "Member 'InventoryWeaponAmmoWidget_SetIcon::Icon' has a wrong offset!");

// Function Indiana.ItemContainerWidget.OnItemAdded
// 0x0010 (0x0010 - 0x0000)
struct ItemContainerWidget_OnItemAdded final
{
public:
	struct FItemStack                             ItemStack;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemContainerWidget_OnItemAdded) == 0x000008, "Wrong alignment on ItemContainerWidget_OnItemAdded");
static_assert(sizeof(ItemContainerWidget_OnItemAdded) == 0x000010, "Wrong size on ItemContainerWidget_OnItemAdded");
static_assert(offsetof(ItemContainerWidget_OnItemAdded, ItemStack) == 0x000000, "Member 'ItemContainerWidget_OnItemAdded::ItemStack' has a wrong offset!");

// Function Indiana.ItemContainerWidget.OnItemCountChanged
// 0x0010 (0x0010 - 0x0000)
struct ItemContainerWidget_OnItemCountChanged final
{
public:
	struct FItemStack                             ItemStack;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemContainerWidget_OnItemCountChanged) == 0x000008, "Wrong alignment on ItemContainerWidget_OnItemCountChanged");
static_assert(sizeof(ItemContainerWidget_OnItemCountChanged) == 0x000010, "Wrong size on ItemContainerWidget_OnItemCountChanged");
static_assert(offsetof(ItemContainerWidget_OnItemCountChanged, ItemStack) == 0x000000, "Member 'ItemContainerWidget_OnItemCountChanged::ItemStack' has a wrong offset!");

// Function Indiana.ItemContainerWidget.OnItemRemoved
// 0x0010 (0x0010 - 0x0000)
struct ItemContainerWidget_OnItemRemoved final
{
public:
	struct FItemStack                             ItemStack;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemContainerWidget_OnItemRemoved) == 0x000008, "Wrong alignment on ItemContainerWidget_OnItemRemoved");
static_assert(sizeof(ItemContainerWidget_OnItemRemoved) == 0x000010, "Wrong size on ItemContainerWidget_OnItemRemoved");
static_assert(offsetof(ItemContainerWidget_OnItemRemoved, ItemStack) == 0x000000, "Member 'ItemContainerWidget_OnItemRemoved::ItemStack' has a wrong offset!");

// Function Indiana.ItemDegradationAlertWidget.BodyArmorDamageStatusChanged
// 0x0001 (0x0001 - 0x0000)
struct ItemDegradationAlertWidget_BodyArmorDamageStatusChanged final
{
public:
	EItemDegradationState                         DegradationState;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemDegradationAlertWidget_BodyArmorDamageStatusChanged) == 0x000001, "Wrong alignment on ItemDegradationAlertWidget_BodyArmorDamageStatusChanged");
static_assert(sizeof(ItemDegradationAlertWidget_BodyArmorDamageStatusChanged) == 0x000001, "Wrong size on ItemDegradationAlertWidget_BodyArmorDamageStatusChanged");
static_assert(offsetof(ItemDegradationAlertWidget_BodyArmorDamageStatusChanged, DegradationState) == 0x000000, "Member 'ItemDegradationAlertWidget_BodyArmorDamageStatusChanged::DegradationState' has a wrong offset!");

// Function Indiana.ItemDegradationAlertWidget.HeadArmorDamageStatusChanged
// 0x0001 (0x0001 - 0x0000)
struct ItemDegradationAlertWidget_HeadArmorDamageStatusChanged final
{
public:
	EItemDegradationState                         DegradationState;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemDegradationAlertWidget_HeadArmorDamageStatusChanged) == 0x000001, "Wrong alignment on ItemDegradationAlertWidget_HeadArmorDamageStatusChanged");
static_assert(sizeof(ItemDegradationAlertWidget_HeadArmorDamageStatusChanged) == 0x000001, "Wrong size on ItemDegradationAlertWidget_HeadArmorDamageStatusChanged");
static_assert(offsetof(ItemDegradationAlertWidget_HeadArmorDamageStatusChanged, DegradationState) == 0x000000, "Member 'ItemDegradationAlertWidget_HeadArmorDamageStatusChanged::DegradationState' has a wrong offset!");

// Function Indiana.ItemDegradationAlertWidget.OnEquipmentRepairVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct ItemDegradationAlertWidget_OnEquipmentRepairVisibilityChanged final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemDegradationAlertWidget_OnEquipmentRepairVisibilityChanged) == 0x000001, "Wrong alignment on ItemDegradationAlertWidget_OnEquipmentRepairVisibilityChanged");
static_assert(sizeof(ItemDegradationAlertWidget_OnEquipmentRepairVisibilityChanged) == 0x000001, "Wrong size on ItemDegradationAlertWidget_OnEquipmentRepairVisibilityChanged");
static_assert(offsetof(ItemDegradationAlertWidget_OnEquipmentRepairVisibilityChanged, bVisible) == 0x000000, "Member 'ItemDegradationAlertWidget_OnEquipmentRepairVisibilityChanged::bVisible' has a wrong offset!");

// Function Indiana.ItemDegradationAlertWidget.OnHUDVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct ItemDegradationAlertWidget_OnHUDVisibilityChanged final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemDegradationAlertWidget_OnHUDVisibilityChanged) == 0x000001, "Wrong alignment on ItemDegradationAlertWidget_OnHUDVisibilityChanged");
static_assert(sizeof(ItemDegradationAlertWidget_OnHUDVisibilityChanged) == 0x000001, "Wrong size on ItemDegradationAlertWidget_OnHUDVisibilityChanged");
static_assert(offsetof(ItemDegradationAlertWidget_OnHUDVisibilityChanged, bVisible) == 0x000000, "Member 'ItemDegradationAlertWidget_OnHUDVisibilityChanged::bVisible' has a wrong offset!");

// Function Indiana.ItemDegradationAlertWidget.OnUnequippedArmor
// 0x0001 (0x0001 - 0x0000)
struct ItemDegradationAlertWidget_OnUnequippedArmor final
{
public:
	EArmorSlot                                    ArmorSlotIn;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemDegradationAlertWidget_OnUnequippedArmor) == 0x000001, "Wrong alignment on ItemDegradationAlertWidget_OnUnequippedArmor");
static_assert(sizeof(ItemDegradationAlertWidget_OnUnequippedArmor) == 0x000001, "Wrong size on ItemDegradationAlertWidget_OnUnequippedArmor");
static_assert(offsetof(ItemDegradationAlertWidget_OnUnequippedArmor, ArmorSlotIn) == 0x000000, "Member 'ItemDegradationAlertWidget_OnUnequippedArmor::ArmorSlotIn' has a wrong offset!");

// Function Indiana.ItemDegradationAlertWidget.WeaponDamageStatusChanged
// 0x0001 (0x0001 - 0x0000)
struct ItemDegradationAlertWidget_WeaponDamageStatusChanged final
{
public:
	EItemDegradationState                         DegradationState;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemDegradationAlertWidget_WeaponDamageStatusChanged) == 0x000001, "Wrong alignment on ItemDegradationAlertWidget_WeaponDamageStatusChanged");
static_assert(sizeof(ItemDegradationAlertWidget_WeaponDamageStatusChanged) == 0x000001, "Wrong size on ItemDegradationAlertWidget_WeaponDamageStatusChanged");
static_assert(offsetof(ItemDegradationAlertWidget_WeaponDamageStatusChanged, DegradationState) == 0x000000, "Member 'ItemDegradationAlertWidget_WeaponDamageStatusChanged::DegradationState' has a wrong offset!");

// Function Indiana.ItemInspectorWidget.GamepadScroll
// 0x0004 (0x0004 - 0x0000)
struct ItemInspectorWidget_GamepadScroll final
{
public:
	float                                         GamepadInput;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemInspectorWidget_GamepadScroll) == 0x000004, "Wrong alignment on ItemInspectorWidget_GamepadScroll");
static_assert(sizeof(ItemInspectorWidget_GamepadScroll) == 0x000004, "Wrong size on ItemInspectorWidget_GamepadScroll");
static_assert(offsetof(ItemInspectorWidget_GamepadScroll, GamepadInput) == 0x000000, "Member 'ItemInspectorWidget_GamepadScroll::GamepadInput' has a wrong offset!");

// Function Indiana.ItemInspectorWidget.MouseScroll
// 0x0004 (0x0004 - 0x0000)
struct ItemInspectorWidget_MouseScroll final
{
public:
	float                                         MouseInput;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemInspectorWidget_MouseScroll) == 0x000004, "Wrong alignment on ItemInspectorWidget_MouseScroll");
static_assert(sizeof(ItemInspectorWidget_MouseScroll) == 0x000004, "Wrong size on ItemInspectorWidget_MouseScroll");
static_assert(offsetof(ItemInspectorWidget_MouseScroll, MouseInput) == 0x000000, "Member 'ItemInspectorWidget_MouseScroll::MouseInput' has a wrong offset!");

// Function Indiana.ItemInspectorWidget.OnZoomToggled
// 0x0001 (0x0001 - 0x0000)
struct ItemInspectorWidget_OnZoomToggled final
{
public:
	bool                                          bFullZoom;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemInspectorWidget_OnZoomToggled) == 0x000001, "Wrong alignment on ItemInspectorWidget_OnZoomToggled");
static_assert(sizeof(ItemInspectorWidget_OnZoomToggled) == 0x000001, "Wrong size on ItemInspectorWidget_OnZoomToggled");
static_assert(offsetof(ItemInspectorWidget_OnZoomToggled, bFullZoom) == 0x000000, "Member 'ItemInspectorWidget_OnZoomToggled::bFullZoom' has a wrong offset!");

// Function Indiana.ItemInspectorWidget.ZoomToggled
// 0x0001 (0x0001 - 0x0000)
struct ItemInspectorWidget_ZoomToggled final
{
public:
	bool                                          bFullZoom;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemInspectorWidget_ZoomToggled) == 0x000001, "Wrong alignment on ItemInspectorWidget_ZoomToggled");
static_assert(sizeof(ItemInspectorWidget_ZoomToggled) == 0x000001, "Wrong size on ItemInspectorWidget_ZoomToggled");
static_assert(offsetof(ItemInspectorWidget_ZoomToggled, bFullZoom) == 0x000000, "Member 'ItemInspectorWidget_ZoomToggled::bFullZoom' has a wrong offset!");

// Function Indiana.ItemToolTipWidget.FontSizeChanged
// 0x0004 (0x0004 - 0x0000)
struct ItemToolTipWidget_FontSizeChanged final
{
public:
	int32                                         NewModifier;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemToolTipWidget_FontSizeChanged) == 0x000004, "Wrong alignment on ItemToolTipWidget_FontSizeChanged");
static_assert(sizeof(ItemToolTipWidget_FontSizeChanged) == 0x000004, "Wrong size on ItemToolTipWidget_FontSizeChanged");
static_assert(offsetof(ItemToolTipWidget_FontSizeChanged, NewModifier) == 0x000000, "Member 'ItemToolTipWidget_FontSizeChanged::NewModifier' has a wrong offset!");

// Function Indiana.ItemTransferWidget.OnInventoryItemAdded
// 0x0010 (0x0010 - 0x0000)
struct ItemTransferWidget_OnInventoryItemAdded final
{
public:
	struct FItemStack                             Item;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemTransferWidget_OnInventoryItemAdded) == 0x000008, "Wrong alignment on ItemTransferWidget_OnInventoryItemAdded");
static_assert(sizeof(ItemTransferWidget_OnInventoryItemAdded) == 0x000010, "Wrong size on ItemTransferWidget_OnInventoryItemAdded");
static_assert(offsetof(ItemTransferWidget_OnInventoryItemAdded, Item) == 0x000000, "Member 'ItemTransferWidget_OnInventoryItemAdded::Item' has a wrong offset!");

// Function Indiana.ItemTransferWidget.OnInventoryItemRemoved
// 0x0010 (0x0010 - 0x0000)
struct ItemTransferWidget_OnInventoryItemRemoved final
{
public:
	struct FItemStack                             Item;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemTransferWidget_OnInventoryItemRemoved) == 0x000008, "Wrong alignment on ItemTransferWidget_OnInventoryItemRemoved");
static_assert(sizeof(ItemTransferWidget_OnInventoryItemRemoved) == 0x000010, "Wrong size on ItemTransferWidget_OnInventoryItemRemoved");
static_assert(offsetof(ItemTransferWidget_OnInventoryItemRemoved, Item) == 0x000000, "Member 'ItemTransferWidget_OnInventoryItemRemoved::Item' has a wrong offset!");

// Function Indiana.ItemTransferWidget.OnItemCountChanged
// 0x0010 (0x0010 - 0x0000)
struct ItemTransferWidget_OnItemCountChanged final
{
public:
	struct FItemStack                             ItemStack;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemTransferWidget_OnItemCountChanged) == 0x000008, "Wrong alignment on ItemTransferWidget_OnItemCountChanged");
static_assert(sizeof(ItemTransferWidget_OnItemCountChanged) == 0x000010, "Wrong size on ItemTransferWidget_OnItemCountChanged");
static_assert(offsetof(ItemTransferWidget_OnItemCountChanged, ItemStack) == 0x000000, "Member 'ItemTransferWidget_OnItemCountChanged::ItemStack' has a wrong offset!");

// Function Indiana.ItemTransferWidget.OnPlayerCountChanged
// 0x0010 (0x0010 - 0x0000)
struct ItemTransferWidget_OnPlayerCountChanged final
{
public:
	struct FItemStack                             ItemStack;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemTransferWidget_OnPlayerCountChanged) == 0x000008, "Wrong alignment on ItemTransferWidget_OnPlayerCountChanged");
static_assert(sizeof(ItemTransferWidget_OnPlayerCountChanged) == 0x000010, "Wrong size on ItemTransferWidget_OnPlayerCountChanged");
static_assert(offsetof(ItemTransferWidget_OnPlayerCountChanged, ItemStack) == 0x000000, "Member 'ItemTransferWidget_OnPlayerCountChanged::ItemStack' has a wrong offset!");

// Function Indiana.ItemTransferWidget.OnPlayerItemAdded
// 0x0010 (0x0010 - 0x0000)
struct ItemTransferWidget_OnPlayerItemAdded final
{
public:
	struct FItemStack                             Item;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemTransferWidget_OnPlayerItemAdded) == 0x000008, "Wrong alignment on ItemTransferWidget_OnPlayerItemAdded");
static_assert(sizeof(ItemTransferWidget_OnPlayerItemAdded) == 0x000010, "Wrong size on ItemTransferWidget_OnPlayerItemAdded");
static_assert(offsetof(ItemTransferWidget_OnPlayerItemAdded, Item) == 0x000000, "Member 'ItemTransferWidget_OnPlayerItemAdded::Item' has a wrong offset!");

// Function Indiana.ItemTransferWidget.OnPlayerItemRemoved
// 0x0010 (0x0010 - 0x0000)
struct ItemTransferWidget_OnPlayerItemRemoved final
{
public:
	struct FItemStack                             Item;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemTransferWidget_OnPlayerItemRemoved) == 0x000008, "Wrong alignment on ItemTransferWidget_OnPlayerItemRemoved");
static_assert(sizeof(ItemTransferWidget_OnPlayerItemRemoved) == 0x000010, "Wrong size on ItemTransferWidget_OnPlayerItemRemoved");
static_assert(offsetof(ItemTransferWidget_OnPlayerItemRemoved, Item) == 0x000000, "Member 'ItemTransferWidget_OnPlayerItemRemoved::Item' has a wrong offset!");

// Function Indiana.LevelUpNotificationWidget.GetGlowballAnimation
// 0x0008 (0x0008 - 0x0000)
struct LevelUpNotificationWidget_GetGlowballAnimation final
{
public:
	class UWidgetAnimation*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelUpNotificationWidget_GetGlowballAnimation) == 0x000008, "Wrong alignment on LevelUpNotificationWidget_GetGlowballAnimation");
static_assert(sizeof(LevelUpNotificationWidget_GetGlowballAnimation) == 0x000008, "Wrong size on LevelUpNotificationWidget_GetGlowballAnimation");
static_assert(offsetof(LevelUpNotificationWidget_GetGlowballAnimation, ReturnValue) == 0x000000, "Member 'LevelUpNotificationWidget_GetGlowballAnimation::ReturnValue' has a wrong offset!");

// Function Indiana.LevelUpNotificationWidget.GetGlowFadeAnimation
// 0x0008 (0x0008 - 0x0000)
struct LevelUpNotificationWidget_GetGlowFadeAnimation final
{
public:
	class UWidgetAnimation*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelUpNotificationWidget_GetGlowFadeAnimation) == 0x000008, "Wrong alignment on LevelUpNotificationWidget_GetGlowFadeAnimation");
static_assert(sizeof(LevelUpNotificationWidget_GetGlowFadeAnimation) == 0x000008, "Wrong size on LevelUpNotificationWidget_GetGlowFadeAnimation");
static_assert(offsetof(LevelUpNotificationWidget_GetGlowFadeAnimation, ReturnValue) == 0x000000, "Member 'LevelUpNotificationWidget_GetGlowFadeAnimation::ReturnValue' has a wrong offset!");

// Function Indiana.LevelUpNotificationWidget.GetGlowGrowAnimation
// 0x0008 (0x0008 - 0x0000)
struct LevelUpNotificationWidget_GetGlowGrowAnimation final
{
public:
	class UWidgetAnimation*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelUpNotificationWidget_GetGlowGrowAnimation) == 0x000008, "Wrong alignment on LevelUpNotificationWidget_GetGlowGrowAnimation");
static_assert(sizeof(LevelUpNotificationWidget_GetGlowGrowAnimation) == 0x000008, "Wrong size on LevelUpNotificationWidget_GetGlowGrowAnimation");
static_assert(offsetof(LevelUpNotificationWidget_GetGlowGrowAnimation, ReturnValue) == 0x000000, "Member 'LevelUpNotificationWidget_GetGlowGrowAnimation::ReturnValue' has a wrong offset!");

// Function Indiana.LevelUpNotificationWidget.GetGlowShrinkAnimation
// 0x0008 (0x0008 - 0x0000)
struct LevelUpNotificationWidget_GetGlowShrinkAnimation final
{
public:
	class UWidgetAnimation*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelUpNotificationWidget_GetGlowShrinkAnimation) == 0x000008, "Wrong alignment on LevelUpNotificationWidget_GetGlowShrinkAnimation");
static_assert(sizeof(LevelUpNotificationWidget_GetGlowShrinkAnimation) == 0x000008, "Wrong size on LevelUpNotificationWidget_GetGlowShrinkAnimation");
static_assert(offsetof(LevelUpNotificationWidget_GetGlowShrinkAnimation, ReturnValue) == 0x000000, "Member 'LevelUpNotificationWidget_GetGlowShrinkAnimation::ReturnValue' has a wrong offset!");

// Function Indiana.LevelUpNotificationWidget.GetLevelUpReminderAnimation
// 0x0008 (0x0008 - 0x0000)
struct LevelUpNotificationWidget_GetLevelUpReminderAnimation final
{
public:
	class UWidgetAnimation*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelUpNotificationWidget_GetLevelUpReminderAnimation) == 0x000008, "Wrong alignment on LevelUpNotificationWidget_GetLevelUpReminderAnimation");
static_assert(sizeof(LevelUpNotificationWidget_GetLevelUpReminderAnimation) == 0x000008, "Wrong size on LevelUpNotificationWidget_GetLevelUpReminderAnimation");
static_assert(offsetof(LevelUpNotificationWidget_GetLevelUpReminderAnimation, ReturnValue) == 0x000000, "Member 'LevelUpNotificationWidget_GetLevelUpReminderAnimation::ReturnValue' has a wrong offset!");

// Function Indiana.LevelUpNotificationWidget.GetPrimaryTextAndSunFadeInAnimation
// 0x0008 (0x0008 - 0x0000)
struct LevelUpNotificationWidget_GetPrimaryTextAndSunFadeInAnimation final
{
public:
	class UWidgetAnimation*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelUpNotificationWidget_GetPrimaryTextAndSunFadeInAnimation) == 0x000008, "Wrong alignment on LevelUpNotificationWidget_GetPrimaryTextAndSunFadeInAnimation");
static_assert(sizeof(LevelUpNotificationWidget_GetPrimaryTextAndSunFadeInAnimation) == 0x000008, "Wrong size on LevelUpNotificationWidget_GetPrimaryTextAndSunFadeInAnimation");
static_assert(offsetof(LevelUpNotificationWidget_GetPrimaryTextAndSunFadeInAnimation, ReturnValue) == 0x000000, "Member 'LevelUpNotificationWidget_GetPrimaryTextAndSunFadeInAnimation::ReturnValue' has a wrong offset!");

// Function Indiana.LevelUpNotificationWidget.GetPrimaryTextGrowAnimation
// 0x0008 (0x0008 - 0x0000)
struct LevelUpNotificationWidget_GetPrimaryTextGrowAnimation final
{
public:
	class UWidgetAnimation*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelUpNotificationWidget_GetPrimaryTextGrowAnimation) == 0x000008, "Wrong alignment on LevelUpNotificationWidget_GetPrimaryTextGrowAnimation");
static_assert(sizeof(LevelUpNotificationWidget_GetPrimaryTextGrowAnimation) == 0x000008, "Wrong size on LevelUpNotificationWidget_GetPrimaryTextGrowAnimation");
static_assert(offsetof(LevelUpNotificationWidget_GetPrimaryTextGrowAnimation, ReturnValue) == 0x000000, "Member 'LevelUpNotificationWidget_GetPrimaryTextGrowAnimation::ReturnValue' has a wrong offset!");

// Function Indiana.LevelUpNotificationWidget.GetSecondaryTextFadeInAnimation
// 0x0008 (0x0008 - 0x0000)
struct LevelUpNotificationWidget_GetSecondaryTextFadeInAnimation final
{
public:
	class UWidgetAnimation*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelUpNotificationWidget_GetSecondaryTextFadeInAnimation) == 0x000008, "Wrong alignment on LevelUpNotificationWidget_GetSecondaryTextFadeInAnimation");
static_assert(sizeof(LevelUpNotificationWidget_GetSecondaryTextFadeInAnimation) == 0x000008, "Wrong size on LevelUpNotificationWidget_GetSecondaryTextFadeInAnimation");
static_assert(offsetof(LevelUpNotificationWidget_GetSecondaryTextFadeInAnimation, ReturnValue) == 0x000000, "Member 'LevelUpNotificationWidget_GetSecondaryTextFadeInAnimation::ReturnValue' has a wrong offset!");

// Function Indiana.LevelUpNotificationWidget.GetSunSpinAnimation
// 0x0008 (0x0008 - 0x0000)
struct LevelUpNotificationWidget_GetSunSpinAnimation final
{
public:
	class UWidgetAnimation*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelUpNotificationWidget_GetSunSpinAnimation) == 0x000008, "Wrong alignment on LevelUpNotificationWidget_GetSunSpinAnimation");
static_assert(sizeof(LevelUpNotificationWidget_GetSunSpinAnimation) == 0x000008, "Wrong size on LevelUpNotificationWidget_GetSunSpinAnimation");
static_assert(offsetof(LevelUpNotificationWidget_GetSunSpinAnimation, ReturnValue) == 0x000000, "Member 'LevelUpNotificationWidget_GetSunSpinAnimation::ReturnValue' has a wrong offset!");

// Function Indiana.LevelUpNotificationWidget.GetTextAndSunFadeOutAnimation
// 0x0008 (0x0008 - 0x0000)
struct LevelUpNotificationWidget_GetTextAndSunFadeOutAnimation final
{
public:
	class UWidgetAnimation*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelUpNotificationWidget_GetTextAndSunFadeOutAnimation) == 0x000008, "Wrong alignment on LevelUpNotificationWidget_GetTextAndSunFadeOutAnimation");
static_assert(sizeof(LevelUpNotificationWidget_GetTextAndSunFadeOutAnimation) == 0x000008, "Wrong size on LevelUpNotificationWidget_GetTextAndSunFadeOutAnimation");
static_assert(offsetof(LevelUpNotificationWidget_GetTextAndSunFadeOutAnimation, ReturnValue) == 0x000000, "Member 'LevelUpNotificationWidget_GetTextAndSunFadeOutAnimation::ReturnValue' has a wrong offset!");

// Function Indiana.LevelUpNotificationWidget.OnHUDVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct LevelUpNotificationWidget_OnHUDVisibilityChanged final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelUpNotificationWidget_OnHUDVisibilityChanged) == 0x000001, "Wrong alignment on LevelUpNotificationWidget_OnHUDVisibilityChanged");
static_assert(sizeof(LevelUpNotificationWidget_OnHUDVisibilityChanged) == 0x000001, "Wrong size on LevelUpNotificationWidget_OnHUDVisibilityChanged");
static_assert(offsetof(LevelUpNotificationWidget_OnHUDVisibilityChanged, bVisible) == 0x000000, "Member 'LevelUpNotificationWidget_OnHUDVisibilityChanged::bVisible' has a wrong offset!");

// Function Indiana.LevelUpNotificationWidget.OnLevelUpNotificationVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct LevelUpNotificationWidget_OnLevelUpNotificationVisibilityChanged final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelUpNotificationWidget_OnLevelUpNotificationVisibilityChanged) == 0x000001, "Wrong alignment on LevelUpNotificationWidget_OnLevelUpNotificationVisibilityChanged");
static_assert(sizeof(LevelUpNotificationWidget_OnLevelUpNotificationVisibilityChanged) == 0x000001, "Wrong size on LevelUpNotificationWidget_OnLevelUpNotificationVisibilityChanged");
static_assert(offsetof(LevelUpNotificationWidget_OnLevelUpNotificationVisibilityChanged, bVisible) == 0x000000, "Member 'LevelUpNotificationWidget_OnLevelUpNotificationVisibilityChanged::bVisible' has a wrong offset!");

// Function Indiana.LevelUpNotificationWidget.OnLevelUpReminderVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct LevelUpNotificationWidget_OnLevelUpReminderVisibilityChanged final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelUpNotificationWidget_OnLevelUpReminderVisibilityChanged) == 0x000001, "Wrong alignment on LevelUpNotificationWidget_OnLevelUpReminderVisibilityChanged");
static_assert(sizeof(LevelUpNotificationWidget_OnLevelUpReminderVisibilityChanged) == 0x000001, "Wrong size on LevelUpNotificationWidget_OnLevelUpReminderVisibilityChanged");
static_assert(offsetof(LevelUpNotificationWidget_OnLevelUpReminderVisibilityChanged, bVisible) == 0x000000, "Member 'LevelUpNotificationWidget_OnLevelUpReminderVisibilityChanged::bVisible' has a wrong offset!");

// Function Indiana.LevelUpNotificationWidget.OnSkillUpdated
// 0x0008 (0x0008 - 0x0000)
struct LevelUpNotificationWidget_OnSkillUpdated final
{
public:
	ESkill                                        Skill;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelUpNotificationWidget_OnSkillUpdated) == 0x000004, "Wrong alignment on LevelUpNotificationWidget_OnSkillUpdated");
static_assert(sizeof(LevelUpNotificationWidget_OnSkillUpdated) == 0x000008, "Wrong size on LevelUpNotificationWidget_OnSkillUpdated");
static_assert(offsetof(LevelUpNotificationWidget_OnSkillUpdated, Skill) == 0x000000, "Member 'LevelUpNotificationWidget_OnSkillUpdated::Skill' has a wrong offset!");
static_assert(offsetof(LevelUpNotificationWidget_OnSkillUpdated, Value) == 0x000004, "Member 'LevelUpNotificationWidget_OnSkillUpdated::Value' has a wrong offset!");

// Function Indiana.LevelUpNotificationWidget.PlayerCombatStateChanged
// 0x0002 (0x0002 - 0x0000)
struct LevelUpNotificationWidget_PlayerCombatStateChanged final
{
public:
	bool                                          bIsInCombat;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestoring;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelUpNotificationWidget_PlayerCombatStateChanged) == 0x000001, "Wrong alignment on LevelUpNotificationWidget_PlayerCombatStateChanged");
static_assert(sizeof(LevelUpNotificationWidget_PlayerCombatStateChanged) == 0x000002, "Wrong size on LevelUpNotificationWidget_PlayerCombatStateChanged");
static_assert(offsetof(LevelUpNotificationWidget_PlayerCombatStateChanged, bIsInCombat) == 0x000000, "Member 'LevelUpNotificationWidget_PlayerCombatStateChanged::bIsInCombat' has a wrong offset!");
static_assert(offsetof(LevelUpNotificationWidget_PlayerCombatStateChanged, bRestoring) == 0x000001, "Member 'LevelUpNotificationWidget_PlayerCombatStateChanged::bRestoring' has a wrong offset!");

// Function Indiana.LogList.AddNewFoundLog
// 0x0010 (0x0010 - 0x0000)
struct LogList_AddNewFoundLog final
{
public:
	struct FLocString                             ExaminableName;                                    // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLocString                             ExaminableDescription;                             // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LogList_AddNewFoundLog) == 0x000004, "Wrong alignment on LogList_AddNewFoundLog");
static_assert(sizeof(LogList_AddNewFoundLog) == 0x000010, "Wrong size on LogList_AddNewFoundLog");
static_assert(offsetof(LogList_AddNewFoundLog, ExaminableName) == 0x000000, "Member 'LogList_AddNewFoundLog::ExaminableName' has a wrong offset!");
static_assert(offsetof(LogList_AddNewFoundLog, ExaminableDescription) == 0x000008, "Member 'LogList_AddNewFoundLog::ExaminableDescription' has a wrong offset!");

// Function Indiana.MainMenuWidget.OnActiveUserChanged
// 0x0001 (0x0001 - 0x0000)
struct MainMenuWidget_OnActiveUserChanged final
{
public:
	EActiveUserChangeType                         ChangeType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuWidget_OnActiveUserChanged) == 0x000001, "Wrong alignment on MainMenuWidget_OnActiveUserChanged");
static_assert(sizeof(MainMenuWidget_OnActiveUserChanged) == 0x000001, "Wrong size on MainMenuWidget_OnActiveUserChanged");
static_assert(offsetof(MainMenuWidget_OnActiveUserChanged, ChangeType) == 0x000000, "Member 'MainMenuWidget_OnActiveUserChanged::ChangeType' has a wrong offset!");

// Function Indiana.MainMenuWidget.OnCreditsInterfaceClosed
// 0x0001 (0x0001 - 0x0000)
struct MainMenuWidget_OnCreditsInterfaceClosed final
{
public:
	bool                                          bForced;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuWidget_OnCreditsInterfaceClosed) == 0x000001, "Wrong alignment on MainMenuWidget_OnCreditsInterfaceClosed");
static_assert(sizeof(MainMenuWidget_OnCreditsInterfaceClosed) == 0x000001, "Wrong size on MainMenuWidget_OnCreditsInterfaceClosed");
static_assert(offsetof(MainMenuWidget_OnCreditsInterfaceClosed, bForced) == 0x000000, "Member 'MainMenuWidget_OnCreditsInterfaceClosed::bForced' has a wrong offset!");

// Function Indiana.MainMenuWidget.OnExternalMenuClosed
// 0x0001 (0x0001 - 0x0000)
struct MainMenuWidget_OnExternalMenuClosed final
{
public:
	bool                                          bForced;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuWidget_OnExternalMenuClosed) == 0x000001, "Wrong alignment on MainMenuWidget_OnExternalMenuClosed");
static_assert(sizeof(MainMenuWidget_OnExternalMenuClosed) == 0x000001, "Wrong size on MainMenuWidget_OnExternalMenuClosed");
static_assert(offsetof(MainMenuWidget_OnExternalMenuClosed, bForced) == 0x000000, "Member 'MainMenuWidget_OnExternalMenuClosed::bForced' has a wrong offset!");

// Function Indiana.MainMenuWidget.OnShowInterface
// 0x0001 (0x0001 - 0x0000)
struct MainMenuWidget_OnShowInterface final
{
public:
	bool                                          bShouldChangeLogo;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuWidget_OnShowInterface) == 0x000001, "Wrong alignment on MainMenuWidget_OnShowInterface");
static_assert(sizeof(MainMenuWidget_OnShowInterface) == 0x000001, "Wrong size on MainMenuWidget_OnShowInterface");
static_assert(offsetof(MainMenuWidget_OnShowInterface, bShouldChangeLogo) == 0x000000, "Member 'MainMenuWidget_OnShowInterface::bShouldChangeLogo' has a wrong offset!");

// Function Indiana.MapTransitionNotification.OnAreaNameModeChanged
// 0x0004 (0x0004 - 0x0000)
struct MapTransitionNotification_OnAreaNameModeChanged final
{
public:
	int32                                         ModeIn;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapTransitionNotification_OnAreaNameModeChanged) == 0x000004, "Wrong alignment on MapTransitionNotification_OnAreaNameModeChanged");
static_assert(sizeof(MapTransitionNotification_OnAreaNameModeChanged) == 0x000004, "Wrong size on MapTransitionNotification_OnAreaNameModeChanged");
static_assert(offsetof(MapTransitionNotification_OnAreaNameModeChanged, ModeIn) == 0x000000, "Member 'MapTransitionNotification_OnAreaNameModeChanged::ModeIn' has a wrong offset!");

// Function Indiana.MapTransitionNotification.OnHUDVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct MapTransitionNotification_OnHUDVisibilityChanged final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapTransitionNotification_OnHUDVisibilityChanged) == 0x000001, "Wrong alignment on MapTransitionNotification_OnHUDVisibilityChanged");
static_assert(sizeof(MapTransitionNotification_OnHUDVisibilityChanged) == 0x000001, "Wrong size on MapTransitionNotification_OnHUDVisibilityChanged");
static_assert(offsetof(MapTransitionNotification_OnHUDVisibilityChanged, bVisible) == 0x000000, "Member 'MapTransitionNotification_OnHUDVisibilityChanged::bVisible' has a wrong offset!");

// Function Indiana.MedKitAbilityWidget.UpdateDrugSlots
// 0x0004 (0x0004 - 0x0000)
struct MedKitAbilityWidget_UpdateDrugSlots final
{
public:
	int32                                         ConsumablesUsed;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MedKitAbilityWidget_UpdateDrugSlots) == 0x000004, "Wrong alignment on MedKitAbilityWidget_UpdateDrugSlots");
static_assert(sizeof(MedKitAbilityWidget_UpdateDrugSlots) == 0x000004, "Wrong size on MedKitAbilityWidget_UpdateDrugSlots");
static_assert(offsetof(MedKitAbilityWidget_UpdateDrugSlots, ConsumablesUsed) == 0x000000, "Member 'MedKitAbilityWidget_UpdateDrugSlots::ConsumablesUsed' has a wrong offset!");

// Function Indiana.VendorWidget.OnItemInspectorClosed
// 0x0008 (0x0008 - 0x0000)
struct VendorWidget_OnItemInspectorClosed final
{
public:
	class UItemInspectorWidget*                   ItemInspectorWidget;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VendorWidget_OnItemInspectorClosed) == 0x000008, "Wrong alignment on VendorWidget_OnItemInspectorClosed");
static_assert(sizeof(VendorWidget_OnItemInspectorClosed) == 0x000008, "Wrong size on VendorWidget_OnItemInspectorClosed");
static_assert(offsetof(VendorWidget_OnItemInspectorClosed, ItemInspectorWidget) == 0x000000, "Member 'VendorWidget_OnItemInspectorClosed::ItemInspectorWidget' has a wrong offset!");

// Function Indiana.VendorWidget.OnPlayerItemAdded
// 0x0010 (0x0010 - 0x0000)
struct VendorWidget_OnPlayerItemAdded final
{
public:
	struct FItemStack                             ItemStack;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VendorWidget_OnPlayerItemAdded) == 0x000008, "Wrong alignment on VendorWidget_OnPlayerItemAdded");
static_assert(sizeof(VendorWidget_OnPlayerItemAdded) == 0x000010, "Wrong size on VendorWidget_OnPlayerItemAdded");
static_assert(offsetof(VendorWidget_OnPlayerItemAdded, ItemStack) == 0x000000, "Member 'VendorWidget_OnPlayerItemAdded::ItemStack' has a wrong offset!");

// Function Indiana.VendorWidget.OnPlayerItemRemoved
// 0x0010 (0x0010 - 0x0000)
struct VendorWidget_OnPlayerItemRemoved final
{
public:
	struct FItemStack                             ItemStack;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VendorWidget_OnPlayerItemRemoved) == 0x000008, "Wrong alignment on VendorWidget_OnPlayerItemRemoved");
static_assert(sizeof(VendorWidget_OnPlayerItemRemoved) == 0x000010, "Wrong size on VendorWidget_OnPlayerItemRemoved");
static_assert(offsetof(VendorWidget_OnPlayerItemRemoved, ItemStack) == 0x000000, "Member 'VendorWidget_OnPlayerItemRemoved::ItemStack' has a wrong offset!");

// Function Indiana.VendorWidget.OnSetCurrentPage
// 0x0002 (0x0002 - 0x0000)
struct VendorWidget_OnSetCurrentPage final
{
public:
	EVendorPages                                  Page;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnimate;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VendorWidget_OnSetCurrentPage) == 0x000001, "Wrong alignment on VendorWidget_OnSetCurrentPage");
static_assert(sizeof(VendorWidget_OnSetCurrentPage) == 0x000002, "Wrong size on VendorWidget_OnSetCurrentPage");
static_assert(offsetof(VendorWidget_OnSetCurrentPage, Page) == 0x000000, "Member 'VendorWidget_OnSetCurrentPage::Page' has a wrong offset!");
static_assert(offsetof(VendorWidget_OnSetCurrentPage, bAnimate) == 0x000001, "Member 'VendorWidget_OnSetCurrentPage::bAnimate' has a wrong offset!");

// Function Indiana.VendorWidget.OnStoreItemAdded
// 0x0010 (0x0010 - 0x0000)
struct VendorWidget_OnStoreItemAdded final
{
public:
	struct FItemStack                             ItemStack;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VendorWidget_OnStoreItemAdded) == 0x000008, "Wrong alignment on VendorWidget_OnStoreItemAdded");
static_assert(sizeof(VendorWidget_OnStoreItemAdded) == 0x000010, "Wrong size on VendorWidget_OnStoreItemAdded");
static_assert(offsetof(VendorWidget_OnStoreItemAdded, ItemStack) == 0x000000, "Member 'VendorWidget_OnStoreItemAdded::ItemStack' has a wrong offset!");

// Function Indiana.VendorWidget.OnStoreItemRemoved
// 0x0010 (0x0010 - 0x0000)
struct VendorWidget_OnStoreItemRemoved final
{
public:
	struct FItemStack                             ItemStack;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VendorWidget_OnStoreItemRemoved) == 0x000008, "Wrong alignment on VendorWidget_OnStoreItemRemoved");
static_assert(sizeof(VendorWidget_OnStoreItemRemoved) == 0x000010, "Wrong size on VendorWidget_OnStoreItemRemoved");
static_assert(offsetof(VendorWidget_OnStoreItemRemoved, ItemStack) == 0x000000, "Member 'VendorWidget_OnStoreItemRemoved::ItemStack' has a wrong offset!");

// Function Indiana.MeleeMode.OnStatUpdated
// 0x0008 (0x0008 - 0x0000)
struct MeleeMode_OnStatUpdated final
{
public:
	const class URpgStat*                         Stat;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeleeMode_OnStatUpdated) == 0x000008, "Wrong alignment on MeleeMode_OnStatUpdated");
static_assert(sizeof(MeleeMode_OnStatUpdated) == 0x000008, "Wrong size on MeleeMode_OnStatUpdated");
static_assert(offsetof(MeleeMode_OnStatUpdated, Stat) == 0x000000, "Member 'MeleeMode_OnStatUpdated::Stat' has a wrong offset!");

// Function Indiana.MeleeSequencer.OnAbilityUnlocked
// 0x0001 (0x0001 - 0x0000)
struct MeleeSequencer_OnAbilityUnlocked final
{
public:
	EUnlockAbility                                Ability;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeleeSequencer_OnAbilityUnlocked) == 0x000001, "Wrong alignment on MeleeSequencer_OnAbilityUnlocked");
static_assert(sizeof(MeleeSequencer_OnAbilityUnlocked) == 0x000001, "Wrong size on MeleeSequencer_OnAbilityUnlocked");
static_assert(offsetof(MeleeSequencer_OnAbilityUnlocked, Ability) == 0x000000, "Member 'MeleeSequencer_OnAbilityUnlocked::Ability' has a wrong offset!");

// Function Indiana.MeleeSequencer.OnStatUpdated
// 0x0008 (0x0008 - 0x0000)
struct MeleeSequencer_OnStatUpdated final
{
public:
	const class URpgStat*                         Stat;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeleeSequencer_OnStatUpdated) == 0x000008, "Wrong alignment on MeleeSequencer_OnStatUpdated");
static_assert(sizeof(MeleeSequencer_OnStatUpdated) == 0x000008, "Wrong size on MeleeSequencer_OnStatUpdated");
static_assert(offsetof(MeleeSequencer_OnStatUpdated, Stat) == 0x000000, "Member 'MeleeSequencer_OnStatUpdated::Stat' has a wrong offset!");

// Function Indiana.TeamManager.BPGetRelationship
// 0x0018 (0x0018 - 0x0000)
struct TeamManager_BPGetRelationship final
{
public:
	TSubclassOf<class UTeamData>                  SourceTeamData;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UTeamData>                  OtherTeamData;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETeamAttitude                                 ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TeamManager_BPGetRelationship) == 0x000008, "Wrong alignment on TeamManager_BPGetRelationship");
static_assert(sizeof(TeamManager_BPGetRelationship) == 0x000018, "Wrong size on TeamManager_BPGetRelationship");
static_assert(offsetof(TeamManager_BPGetRelationship, SourceTeamData) == 0x000000, "Member 'TeamManager_BPGetRelationship::SourceTeamData' has a wrong offset!");
static_assert(offsetof(TeamManager_BPGetRelationship, OtherTeamData) == 0x000008, "Member 'TeamManager_BPGetRelationship::OtherTeamData' has a wrong offset!");
static_assert(offsetof(TeamManager_BPGetRelationship, ReturnValue) == 0x000010, "Member 'TeamManager_BPGetRelationship::ReturnValue' has a wrong offset!");

// Function Indiana.TeamManager.BPSetRelationship
// 0x0018 (0x0018 - 0x0000)
struct TeamManager_BPSetRelationship final
{
public:
	TSubclassOf<class UBaseTeamData>              SourceTeamData;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UBaseTeamData>              OtherTeamData;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETeamAttitude                                 Relationship;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMutual;                                           // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TeamManager_BPSetRelationship) == 0x000008, "Wrong alignment on TeamManager_BPSetRelationship");
static_assert(sizeof(TeamManager_BPSetRelationship) == 0x000018, "Wrong size on TeamManager_BPSetRelationship");
static_assert(offsetof(TeamManager_BPSetRelationship, SourceTeamData) == 0x000000, "Member 'TeamManager_BPSetRelationship::SourceTeamData' has a wrong offset!");
static_assert(offsetof(TeamManager_BPSetRelationship, OtherTeamData) == 0x000008, "Member 'TeamManager_BPSetRelationship::OtherTeamData' has a wrong offset!");
static_assert(offsetof(TeamManager_BPSetRelationship, Relationship) == 0x000010, "Member 'TeamManager_BPSetRelationship::Relationship' has a wrong offset!");
static_assert(offsetof(TeamManager_BPSetRelationship, bMutual) == 0x000011, "Member 'TeamManager_BPSetRelationship::bMutual' has a wrong offset!");

// Function Indiana.MoviePlayerWidget.PlayMovie
// 0x0008 (0x0008 - 0x0000)
struct MoviePlayerWidget_PlayMovie final
{
public:
	class UFileMediaSource*                       Movie;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePlayerWidget_PlayMovie) == 0x000008, "Wrong alignment on MoviePlayerWidget_PlayMovie");
static_assert(sizeof(MoviePlayerWidget_PlayMovie) == 0x000008, "Wrong size on MoviePlayerWidget_PlayMovie");
static_assert(offsetof(MoviePlayerWidget_PlayMovie, Movie) == 0x000000, "Member 'MoviePlayerWidget_PlayMovie::Movie' has a wrong offset!");

// Function Indiana.MoviePlayerWidget.StopMovie
// 0x0001 (0x0001 - 0x0000)
struct MoviePlayerWidget_StopMovie final
{
public:
	bool                                          bWasSkipped;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePlayerWidget_StopMovie) == 0x000001, "Wrong alignment on MoviePlayerWidget_StopMovie");
static_assert(sizeof(MoviePlayerWidget_StopMovie) == 0x000001, "Wrong size on MoviePlayerWidget_StopMovie");
static_assert(offsetof(MoviePlayerWidget_StopMovie, bWasSkipped) == 0x000000, "Member 'MoviePlayerWidget_StopMovie::bWasSkipped' has a wrong offset!");

// Function Indiana.MultiStatusEffect.OnChildCleared
// 0x0008 (0x0008 - 0x0000)
struct MultiStatusEffect_OnChildCleared final
{
public:
	class UStatusEffect*                          ChildEffect;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MultiStatusEffect_OnChildCleared) == 0x000008, "Wrong alignment on MultiStatusEffect_OnChildCleared");
static_assert(sizeof(MultiStatusEffect_OnChildCleared) == 0x000008, "Wrong size on MultiStatusEffect_OnChildCleared");
static_assert(offsetof(MultiStatusEffect_OnChildCleared, ChildEffect) == 0x000000, "Member 'MultiStatusEffect_OnChildCleared::ChildEffect' has a wrong offset!");

// Function Indiana.TravelTriggerComponent.OnInteract
// 0x0028 (0x0028 - 0x0000)
struct TravelTriggerComponent_OnInteract final
{
public:
	struct FInteractionDescription                Description;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TravelTriggerComponent_OnInteract) == 0x000008, "Wrong alignment on TravelTriggerComponent_OnInteract");
static_assert(sizeof(TravelTriggerComponent_OnInteract) == 0x000028, "Wrong size on TravelTriggerComponent_OnInteract");
static_assert(offsetof(TravelTriggerComponent_OnInteract, Description) == 0x000000, "Member 'TravelTriggerComponent_OnInteract::Description' has a wrong offset!");

// Function Indiana.TravelTriggerComponent.OnOpen
// 0x0008 (0x0008 - 0x0000)
struct TravelTriggerComponent_OnOpen final
{
public:
	class AActor*                                 OpeningActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TravelTriggerComponent_OnOpen) == 0x000008, "Wrong alignment on TravelTriggerComponent_OnOpen");
static_assert(sizeof(TravelTriggerComponent_OnOpen) == 0x000008, "Wrong size on TravelTriggerComponent_OnOpen");
static_assert(offsetof(TravelTriggerComponent_OnOpen, OpeningActor) == 0x000000, "Member 'TravelTriggerComponent_OnOpen::OpeningActor' has a wrong offset!");

// Function Indiana.TravelTriggerComponent.OnOverlapActor
// 0x0010 (0x0010 - 0x0000)
struct TravelTriggerComponent_OnOverlapActor final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TravelTriggerComponent_OnOverlapActor) == 0x000008, "Wrong alignment on TravelTriggerComponent_OnOverlapActor");
static_assert(sizeof(TravelTriggerComponent_OnOverlapActor) == 0x000010, "Wrong size on TravelTriggerComponent_OnOverlapActor");
static_assert(offsetof(TravelTriggerComponent_OnOverlapActor, OverlappedActor) == 0x000000, "Member 'TravelTriggerComponent_OnOverlapActor::OverlappedActor' has a wrong offset!");
static_assert(offsetof(TravelTriggerComponent_OnOverlapActor, OtherActor) == 0x000008, "Member 'TravelTriggerComponent_OnOverlapActor::OtherActor' has a wrong offset!");

// Function Indiana.TravelTriggerComponent.GetAreaDescription
// 0x0010 (0x0010 - 0x0000)
struct TravelTriggerComponent_GetAreaDescription final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TravelTriggerComponent_GetAreaDescription) == 0x000008, "Wrong alignment on TravelTriggerComponent_GetAreaDescription");
static_assert(sizeof(TravelTriggerComponent_GetAreaDescription) == 0x000010, "Wrong size on TravelTriggerComponent_GetAreaDescription");
static_assert(offsetof(TravelTriggerComponent_GetAreaDescription, ReturnValue) == 0x000000, "Member 'TravelTriggerComponent_GetAreaDescription::ReturnValue' has a wrong offset!");

// Function Indiana.TravelTriggerComponent.GetAreaName
// 0x0010 (0x0010 - 0x0000)
struct TravelTriggerComponent_GetAreaName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TravelTriggerComponent_GetAreaName) == 0x000008, "Wrong alignment on TravelTriggerComponent_GetAreaName");
static_assert(sizeof(TravelTriggerComponent_GetAreaName) == 0x000010, "Wrong size on TravelTriggerComponent_GetAreaName");
static_assert(offsetof(TravelTriggerComponent_GetAreaName, ReturnValue) == 0x000000, "Member 'TravelTriggerComponent_GetAreaName::ReturnValue' has a wrong offset!");

// Function Indiana.TravelTriggerComponent.GetDebugString
// 0x0010 (0x0010 - 0x0000)
struct TravelTriggerComponent_GetDebugString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TravelTriggerComponent_GetDebugString) == 0x000008, "Wrong alignment on TravelTriggerComponent_GetDebugString");
static_assert(sizeof(TravelTriggerComponent_GetDebugString) == 0x000010, "Wrong size on TravelTriggerComponent_GetDebugString");
static_assert(offsetof(TravelTriggerComponent_GetDebugString, ReturnValue) == 0x000000, "Member 'TravelTriggerComponent_GetDebugString::ReturnValue' has a wrong offset!");

// Function Indiana.OptionSliderWidget.OnSliderValueChanged
// 0x0038 (0x0038 - 0x0000)
struct OptionSliderWidget_OnSliderValueChanged final
{
public:
	struct FSliderEvent                           Event;                                             // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptionSliderWidget_OnSliderValueChanged) == 0x000008, "Wrong alignment on OptionSliderWidget_OnSliderValueChanged");
static_assert(sizeof(OptionSliderWidget_OnSliderValueChanged) == 0x000038, "Wrong size on OptionSliderWidget_OnSliderValueChanged");
static_assert(offsetof(OptionSliderWidget_OnSliderValueChanged, Event) == 0x000000, "Member 'OptionSliderWidget_OnSliderValueChanged::Event' has a wrong offset!");

// Function Indiana.ParticlePool.ParticleFreed
// 0x0008 (0x0008 - 0x0000)
struct ParticlePool_ParticleFreed final
{
public:
	class UParticleSystemComponent*               Particle;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ParticlePool_ParticleFreed) == 0x000008, "Wrong alignment on ParticlePool_ParticleFreed");
static_assert(sizeof(ParticlePool_ParticleFreed) == 0x000008, "Wrong size on ParticlePool_ParticleFreed");
static_assert(offsetof(ParticlePool_ParticleFreed, Particle) == 0x000000, "Member 'ParticlePool_ParticleFreed::Particle' has a wrong offset!");

// Function Indiana.PauseMenuWidget.OnSaveGameComplete
// 0x0002 (0x0002 - 0x0000)
struct PauseMenuWidget_OnSaveGameComplete final
{
public:
	ESaveGameResult                               SaveResult;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESaveGameType                                 SaveType;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PauseMenuWidget_OnSaveGameComplete) == 0x000001, "Wrong alignment on PauseMenuWidget_OnSaveGameComplete");
static_assert(sizeof(PauseMenuWidget_OnSaveGameComplete) == 0x000002, "Wrong size on PauseMenuWidget_OnSaveGameComplete");
static_assert(offsetof(PauseMenuWidget_OnSaveGameComplete, SaveResult) == 0x000000, "Member 'PauseMenuWidget_OnSaveGameComplete::SaveResult' has a wrong offset!");
static_assert(offsetof(PauseMenuWidget_OnSaveGameComplete, SaveType) == 0x000001, "Member 'PauseMenuWidget_OnSaveGameComplete::SaveType' has a wrong offset!");

// Function Indiana.PauseMenuWidget.OnSaveLoadMenuClosed
// 0x0001 (0x0001 - 0x0000)
struct PauseMenuWidget_OnSaveLoadMenuClosed final
{
public:
	bool                                          bForced;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PauseMenuWidget_OnSaveLoadMenuClosed) == 0x000001, "Wrong alignment on PauseMenuWidget_OnSaveLoadMenuClosed");
static_assert(sizeof(PauseMenuWidget_OnSaveLoadMenuClosed) == 0x000001, "Wrong size on PauseMenuWidget_OnSaveLoadMenuClosed");
static_assert(offsetof(PauseMenuWidget_OnSaveLoadMenuClosed, bForced) == 0x000000, "Member 'PauseMenuWidget_OnSaveLoadMenuClosed::bForced' has a wrong offset!");

// Function Indiana.PerksListEntry.UpdateButtonBrush
// 0x0003 (0x0003 - 0x0000)
struct PerksListEntry_UpdateButtonBrush final
{
public:
	bool                                          bPendingPurchase;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActuallyPurchased;                                // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuppressed;                                       // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerksListEntry_UpdateButtonBrush) == 0x000001, "Wrong alignment on PerksListEntry_UpdateButtonBrush");
static_assert(sizeof(PerksListEntry_UpdateButtonBrush) == 0x000003, "Wrong size on PerksListEntry_UpdateButtonBrush");
static_assert(offsetof(PerksListEntry_UpdateButtonBrush, bPendingPurchase) == 0x000000, "Member 'PerksListEntry_UpdateButtonBrush::bPendingPurchase' has a wrong offset!");
static_assert(offsetof(PerksListEntry_UpdateButtonBrush, bActuallyPurchased) == 0x000001, "Member 'PerksListEntry_UpdateButtonBrush::bActuallyPurchased' has a wrong offset!");
static_assert(offsetof(PerksListEntry_UpdateButtonBrush, bSuppressed) == 0x000002, "Member 'PerksListEntry_UpdateButtonBrush::bSuppressed' has a wrong offset!");

// Function Indiana.PerksListEntry.GetPurchasedIcon
// 0x0008 (0x0008 - 0x0000)
struct PerksListEntry_GetPurchasedIcon final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerksListEntry_GetPurchasedIcon) == 0x000008, "Wrong alignment on PerksListEntry_GetPurchasedIcon");
static_assert(sizeof(PerksListEntry_GetPurchasedIcon) == 0x000008, "Wrong size on PerksListEntry_GetPurchasedIcon");
static_assert(offsetof(PerksListEntry_GetPurchasedIcon, ReturnValue) == 0x000000, "Member 'PerksListEntry_GetPurchasedIcon::ReturnValue' has a wrong offset!");

// Function Indiana.PerksListEntry.GetSuppressedIcon
// 0x0008 (0x0008 - 0x0000)
struct PerksListEntry_GetSuppressedIcon final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerksListEntry_GetSuppressedIcon) == 0x000008, "Wrong alignment on PerksListEntry_GetSuppressedIcon");
static_assert(sizeof(PerksListEntry_GetSuppressedIcon) == 0x000008, "Wrong size on PerksListEntry_GetSuppressedIcon");
static_assert(offsetof(PerksListEntry_GetSuppressedIcon, ReturnValue) == 0x000000, "Member 'PerksListEntry_GetSuppressedIcon::ReturnValue' has a wrong offset!");

// Function Indiana.PerksListEntry.GetUnpurchasedIcon
// 0x0008 (0x0008 - 0x0000)
struct PerksListEntry_GetUnpurchasedIcon final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerksListEntry_GetUnpurchasedIcon) == 0x000008, "Wrong alignment on PerksListEntry_GetUnpurchasedIcon");
static_assert(sizeof(PerksListEntry_GetUnpurchasedIcon) == 0x000008, "Wrong size on PerksListEntry_GetUnpurchasedIcon");
static_assert(offsetof(PerksListEntry_GetUnpurchasedIcon, ReturnValue) == 0x000000, "Member 'PerksListEntry_GetUnpurchasedIcon::ReturnValue' has a wrong offset!");

// Function Indiana.WeaponAnimInstance.WeaponCharging
// 0x0001 (0x0001 - 0x0000)
struct WeaponAnimInstance_WeaponCharging final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponAnimInstance_WeaponCharging) == 0x000001, "Wrong alignment on WeaponAnimInstance_WeaponCharging");
static_assert(sizeof(WeaponAnimInstance_WeaponCharging) == 0x000001, "Wrong size on WeaponAnimInstance_WeaponCharging");
static_assert(offsetof(WeaponAnimInstance_WeaponCharging, ReturnValue) == 0x000000, "Member 'WeaponAnimInstance_WeaponCharging::ReturnValue' has a wrong offset!");

// Function Indiana.TimeDilationComponent.SlomoWorld
// 0x0004 (0x0004 - 0x0000)
struct TimeDilationComponent_SlomoWorld final
{
public:
	float                                         Dilation;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeDilationComponent_SlomoWorld) == 0x000004, "Wrong alignment on TimeDilationComponent_SlomoWorld");
static_assert(sizeof(TimeDilationComponent_SlomoWorld) == 0x000004, "Wrong size on TimeDilationComponent_SlomoWorld");
static_assert(offsetof(TimeDilationComponent_SlomoWorld, Dilation) == 0x000000, "Member 'TimeDilationComponent_SlomoWorld::Dilation' has a wrong offset!");

// Function Indiana.TimeDilationComponent.TimeDilatePlayer
// 0x0004 (0x0004 - 0x0000)
struct TimeDilationComponent_TimeDilatePlayer final
{
public:
	float                                         Dilation;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeDilationComponent_TimeDilatePlayer) == 0x000004, "Wrong alignment on TimeDilationComponent_TimeDilatePlayer");
static_assert(sizeof(TimeDilationComponent_TimeDilatePlayer) == 0x000004, "Wrong size on TimeDilationComponent_TimeDilatePlayer");
static_assert(offsetof(TimeDilationComponent_TimeDilatePlayer, Dilation) == 0x000000, "Member 'TimeDilationComponent_TimeDilatePlayer::Dilation' has a wrong offset!");

// Function Indiana.PlayerEnvironmentInteractionComponent.OnCombatStateChange
// 0x0002 (0x0002 - 0x0000)
struct PlayerEnvironmentInteractionComponent_OnCombatStateChange final
{
public:
	bool                                          bIsInCombat;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestoring;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerEnvironmentInteractionComponent_OnCombatStateChange) == 0x000001, "Wrong alignment on PlayerEnvironmentInteractionComponent_OnCombatStateChange");
static_assert(sizeof(PlayerEnvironmentInteractionComponent_OnCombatStateChange) == 0x000002, "Wrong size on PlayerEnvironmentInteractionComponent_OnCombatStateChange");
static_assert(offsetof(PlayerEnvironmentInteractionComponent_OnCombatStateChange, bIsInCombat) == 0x000000, "Member 'PlayerEnvironmentInteractionComponent_OnCombatStateChange::bIsInCombat' has a wrong offset!");
static_assert(offsetof(PlayerEnvironmentInteractionComponent_OnCombatStateChange, bRestoring) == 0x000001, "Member 'PlayerEnvironmentInteractionComponent_OnCombatStateChange::bRestoring' has a wrong offset!");

// Function Indiana.PlayerEnvironmentInteractionComponent.OnOccupiedNavAreaChanged
// 0x0010 (0x0010 - 0x0000)
struct PlayerEnvironmentInteractionComponent_OnOccupiedNavAreaChanged final
{
public:
	const class UClass*                           PrevOccupiedArea;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UClass*                           CurrentOccupiedArea;                               // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerEnvironmentInteractionComponent_OnOccupiedNavAreaChanged) == 0x000008, "Wrong alignment on PlayerEnvironmentInteractionComponent_OnOccupiedNavAreaChanged");
static_assert(sizeof(PlayerEnvironmentInteractionComponent_OnOccupiedNavAreaChanged) == 0x000010, "Wrong size on PlayerEnvironmentInteractionComponent_OnOccupiedNavAreaChanged");
static_assert(offsetof(PlayerEnvironmentInteractionComponent_OnOccupiedNavAreaChanged, PrevOccupiedArea) == 0x000000, "Member 'PlayerEnvironmentInteractionComponent_OnOccupiedNavAreaChanged::PrevOccupiedArea' has a wrong offset!");
static_assert(offsetof(PlayerEnvironmentInteractionComponent_OnOccupiedNavAreaChanged, CurrentOccupiedArea) == 0x000008, "Member 'PlayerEnvironmentInteractionComponent_OnOccupiedNavAreaChanged::CurrentOccupiedArea' has a wrong offset!");

// Function Indiana.PlayerHealthComponent.AddExhaustion
// 0x0004 (0x0004 - 0x0000)
struct PlayerHealthComponent_AddExhaustion final
{
public:
	float                                         Exhaustion;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerHealthComponent_AddExhaustion) == 0x000004, "Wrong alignment on PlayerHealthComponent_AddExhaustion");
static_assert(sizeof(PlayerHealthComponent_AddExhaustion) == 0x000004, "Wrong size on PlayerHealthComponent_AddExhaustion");
static_assert(offsetof(PlayerHealthComponent_AddExhaustion, Exhaustion) == 0x000000, "Member 'PlayerHealthComponent_AddExhaustion::Exhaustion' has a wrong offset!");

// Function Indiana.PlayerHealthComponent.AddHunger
// 0x0004 (0x0004 - 0x0000)
struct PlayerHealthComponent_AddHunger final
{
public:
	float                                         Hunger;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerHealthComponent_AddHunger) == 0x000004, "Wrong alignment on PlayerHealthComponent_AddHunger");
static_assert(sizeof(PlayerHealthComponent_AddHunger) == 0x000004, "Wrong size on PlayerHealthComponent_AddHunger");
static_assert(offsetof(PlayerHealthComponent_AddHunger, Hunger) == 0x000000, "Member 'PlayerHealthComponent_AddHunger::Hunger' has a wrong offset!");

// Function Indiana.PlayerHealthComponent.AddThirst
// 0x0004 (0x0004 - 0x0000)
struct PlayerHealthComponent_AddThirst final
{
public:
	float                                         Thirst;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerHealthComponent_AddThirst) == 0x000004, "Wrong alignment on PlayerHealthComponent_AddThirst");
static_assert(sizeof(PlayerHealthComponent_AddThirst) == 0x000004, "Wrong size on PlayerHealthComponent_AddThirst");
static_assert(offsetof(PlayerHealthComponent_AddThirst, Thirst) == 0x000000, "Member 'PlayerHealthComponent_AddThirst::Thirst' has a wrong offset!");

// Function Indiana.PlayerHealthComponent.AdjustExhaustion
// 0x0008 (0x0008 - 0x0000)
struct PlayerHealthComponent_AdjustExhaustion final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromFastTravel;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTravelFromMapLedger;                              // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerHealthComponent_AdjustExhaustion) == 0x000004, "Wrong alignment on PlayerHealthComponent_AdjustExhaustion");
static_assert(sizeof(PlayerHealthComponent_AdjustExhaustion) == 0x000008, "Wrong size on PlayerHealthComponent_AdjustExhaustion");
static_assert(offsetof(PlayerHealthComponent_AdjustExhaustion, Amount) == 0x000000, "Member 'PlayerHealthComponent_AdjustExhaustion::Amount' has a wrong offset!");
static_assert(offsetof(PlayerHealthComponent_AdjustExhaustion, bFromFastTravel) == 0x000004, "Member 'PlayerHealthComponent_AdjustExhaustion::bFromFastTravel' has a wrong offset!");
static_assert(offsetof(PlayerHealthComponent_AdjustExhaustion, bTravelFromMapLedger) == 0x000005, "Member 'PlayerHealthComponent_AdjustExhaustion::bTravelFromMapLedger' has a wrong offset!");

// Function Indiana.PlayerHealthComponent.AdjustHunger
// 0x0008 (0x0008 - 0x0000)
struct PlayerHealthComponent_AdjustHunger final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromFastTravel;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTravelFromMapLedger;                              // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerHealthComponent_AdjustHunger) == 0x000004, "Wrong alignment on PlayerHealthComponent_AdjustHunger");
static_assert(sizeof(PlayerHealthComponent_AdjustHunger) == 0x000008, "Wrong size on PlayerHealthComponent_AdjustHunger");
static_assert(offsetof(PlayerHealthComponent_AdjustHunger, Amount) == 0x000000, "Member 'PlayerHealthComponent_AdjustHunger::Amount' has a wrong offset!");
static_assert(offsetof(PlayerHealthComponent_AdjustHunger, bFromFastTravel) == 0x000004, "Member 'PlayerHealthComponent_AdjustHunger::bFromFastTravel' has a wrong offset!");
static_assert(offsetof(PlayerHealthComponent_AdjustHunger, bTravelFromMapLedger) == 0x000005, "Member 'PlayerHealthComponent_AdjustHunger::bTravelFromMapLedger' has a wrong offset!");

// Function Indiana.PlayerHealthComponent.AdjustSurvivalStats
// 0x0010 (0x0010 - 0x0000)
struct PlayerHealthComponent_AdjustSurvivalStats final
{
public:
	float                                         HungerGained;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThirstGained;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExhaustionGained;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromFastTravel;                                   // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTravelFromMapLedger;                              // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForced;                                           // 0x000E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerHealthComponent_AdjustSurvivalStats) == 0x000004, "Wrong alignment on PlayerHealthComponent_AdjustSurvivalStats");
static_assert(sizeof(PlayerHealthComponent_AdjustSurvivalStats) == 0x000010, "Wrong size on PlayerHealthComponent_AdjustSurvivalStats");
static_assert(offsetof(PlayerHealthComponent_AdjustSurvivalStats, HungerGained) == 0x000000, "Member 'PlayerHealthComponent_AdjustSurvivalStats::HungerGained' has a wrong offset!");
static_assert(offsetof(PlayerHealthComponent_AdjustSurvivalStats, ThirstGained) == 0x000004, "Member 'PlayerHealthComponent_AdjustSurvivalStats::ThirstGained' has a wrong offset!");
static_assert(offsetof(PlayerHealthComponent_AdjustSurvivalStats, ExhaustionGained) == 0x000008, "Member 'PlayerHealthComponent_AdjustSurvivalStats::ExhaustionGained' has a wrong offset!");
static_assert(offsetof(PlayerHealthComponent_AdjustSurvivalStats, bFromFastTravel) == 0x00000C, "Member 'PlayerHealthComponent_AdjustSurvivalStats::bFromFastTravel' has a wrong offset!");
static_assert(offsetof(PlayerHealthComponent_AdjustSurvivalStats, bTravelFromMapLedger) == 0x00000D, "Member 'PlayerHealthComponent_AdjustSurvivalStats::bTravelFromMapLedger' has a wrong offset!");
static_assert(offsetof(PlayerHealthComponent_AdjustSurvivalStats, bForced) == 0x00000E, "Member 'PlayerHealthComponent_AdjustSurvivalStats::bForced' has a wrong offset!");

// Function Indiana.PlayerHealthComponent.AdjustThirst
// 0x0008 (0x0008 - 0x0000)
struct PlayerHealthComponent_AdjustThirst final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromFastTravel;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTravelFromMapLedger;                              // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerHealthComponent_AdjustThirst) == 0x000004, "Wrong alignment on PlayerHealthComponent_AdjustThirst");
static_assert(sizeof(PlayerHealthComponent_AdjustThirst) == 0x000008, "Wrong size on PlayerHealthComponent_AdjustThirst");
static_assert(offsetof(PlayerHealthComponent_AdjustThirst, Amount) == 0x000000, "Member 'PlayerHealthComponent_AdjustThirst::Amount' has a wrong offset!");
static_assert(offsetof(PlayerHealthComponent_AdjustThirst, bFromFastTravel) == 0x000004, "Member 'PlayerHealthComponent_AdjustThirst::bFromFastTravel' has a wrong offset!");
static_assert(offsetof(PlayerHealthComponent_AdjustThirst, bTravelFromMapLedger) == 0x000005, "Member 'PlayerHealthComponent_AdjustThirst::bTravelFromMapLedger' has a wrong offset!");

// Function Indiana.PlayerHealthComponent.FastTravelInitiated
// 0x0010 (0x0010 - 0x0000)
struct PlayerHealthComponent_FastTravelInitiated final
{
public:
	const class UTravelDestinationData*           TravelData;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimePassed;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTravelFromMapLedger;                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerHealthComponent_FastTravelInitiated) == 0x000008, "Wrong alignment on PlayerHealthComponent_FastTravelInitiated");
static_assert(sizeof(PlayerHealthComponent_FastTravelInitiated) == 0x000010, "Wrong size on PlayerHealthComponent_FastTravelInitiated");
static_assert(offsetof(PlayerHealthComponent_FastTravelInitiated, TravelData) == 0x000000, "Member 'PlayerHealthComponent_FastTravelInitiated::TravelData' has a wrong offset!");
static_assert(offsetof(PlayerHealthComponent_FastTravelInitiated, TimePassed) == 0x000008, "Member 'PlayerHealthComponent_FastTravelInitiated::TimePassed' has a wrong offset!");
static_assert(offsetof(PlayerHealthComponent_FastTravelInitiated, bTravelFromMapLedger) == 0x00000C, "Member 'PlayerHealthComponent_FastTravelInitiated::bTravelFromMapLedger' has a wrong offset!");

// Function Indiana.PlayerHealthComponent.PlayerWaitInitiated
// 0x0008 (0x0008 - 0x0000)
struct PlayerHealthComponent_PlayerWaitInitiated final
{
public:
	float                                         SecondsPassed;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERestType                                     RestType;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerHealthComponent_PlayerWaitInitiated) == 0x000004, "Wrong alignment on PlayerHealthComponent_PlayerWaitInitiated");
static_assert(sizeof(PlayerHealthComponent_PlayerWaitInitiated) == 0x000008, "Wrong size on PlayerHealthComponent_PlayerWaitInitiated");
static_assert(offsetof(PlayerHealthComponent_PlayerWaitInitiated, SecondsPassed) == 0x000000, "Member 'PlayerHealthComponent_PlayerWaitInitiated::SecondsPassed' has a wrong offset!");
static_assert(offsetof(PlayerHealthComponent_PlayerWaitInitiated, RestType) == 0x000004, "Member 'PlayerHealthComponent_PlayerWaitInitiated::RestType' has a wrong offset!");

// Function Indiana.PlayerHealthComponent.SurvivalModeUpdated
// 0x0001 (0x0001 - 0x0000)
struct PlayerHealthComponent_SurvivalModeUpdated final
{
public:
	bool                                          bSurvivalMode;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerHealthComponent_SurvivalModeUpdated) == 0x000001, "Wrong alignment on PlayerHealthComponent_SurvivalModeUpdated");
static_assert(sizeof(PlayerHealthComponent_SurvivalModeUpdated) == 0x000001, "Wrong size on PlayerHealthComponent_SurvivalModeUpdated");
static_assert(offsetof(PlayerHealthComponent_SurvivalModeUpdated, bSurvivalMode) == 0x000000, "Member 'PlayerHealthComponent_SurvivalModeUpdated::bSurvivalMode' has a wrong offset!");

// Function Indiana.PlayerHealthComponent.GetExhaustion
// 0x0004 (0x0004 - 0x0000)
struct PlayerHealthComponent_GetExhaustion final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerHealthComponent_GetExhaustion) == 0x000004, "Wrong alignment on PlayerHealthComponent_GetExhaustion");
static_assert(sizeof(PlayerHealthComponent_GetExhaustion) == 0x000004, "Wrong size on PlayerHealthComponent_GetExhaustion");
static_assert(offsetof(PlayerHealthComponent_GetExhaustion, ReturnValue) == 0x000000, "Member 'PlayerHealthComponent_GetExhaustion::ReturnValue' has a wrong offset!");

// Function Indiana.PlayerHealthComponent.GetHunger
// 0x0004 (0x0004 - 0x0000)
struct PlayerHealthComponent_GetHunger final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerHealthComponent_GetHunger) == 0x000004, "Wrong alignment on PlayerHealthComponent_GetHunger");
static_assert(sizeof(PlayerHealthComponent_GetHunger) == 0x000004, "Wrong size on PlayerHealthComponent_GetHunger");
static_assert(offsetof(PlayerHealthComponent_GetHunger, ReturnValue) == 0x000000, "Member 'PlayerHealthComponent_GetHunger::ReturnValue' has a wrong offset!");

// Function Indiana.PlayerHealthComponent.GetLethalExhaustion
// 0x0004 (0x0004 - 0x0000)
struct PlayerHealthComponent_GetLethalExhaustion final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerHealthComponent_GetLethalExhaustion) == 0x000004, "Wrong alignment on PlayerHealthComponent_GetLethalExhaustion");
static_assert(sizeof(PlayerHealthComponent_GetLethalExhaustion) == 0x000004, "Wrong size on PlayerHealthComponent_GetLethalExhaustion");
static_assert(offsetof(PlayerHealthComponent_GetLethalExhaustion, ReturnValue) == 0x000000, "Member 'PlayerHealthComponent_GetLethalExhaustion::ReturnValue' has a wrong offset!");

// Function Indiana.PlayerHealthComponent.GetLethalHunger
// 0x0004 (0x0004 - 0x0000)
struct PlayerHealthComponent_GetLethalHunger final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerHealthComponent_GetLethalHunger) == 0x000004, "Wrong alignment on PlayerHealthComponent_GetLethalHunger");
static_assert(sizeof(PlayerHealthComponent_GetLethalHunger) == 0x000004, "Wrong size on PlayerHealthComponent_GetLethalHunger");
static_assert(offsetof(PlayerHealthComponent_GetLethalHunger, ReturnValue) == 0x000000, "Member 'PlayerHealthComponent_GetLethalHunger::ReturnValue' has a wrong offset!");

// Function Indiana.PlayerHealthComponent.GetLethalThirst
// 0x0004 (0x0004 - 0x0000)
struct PlayerHealthComponent_GetLethalThirst final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerHealthComponent_GetLethalThirst) == 0x000004, "Wrong alignment on PlayerHealthComponent_GetLethalThirst");
static_assert(sizeof(PlayerHealthComponent_GetLethalThirst) == 0x000004, "Wrong size on PlayerHealthComponent_GetLethalThirst");
static_assert(offsetof(PlayerHealthComponent_GetLethalThirst, ReturnValue) == 0x000000, "Member 'PlayerHealthComponent_GetLethalThirst::ReturnValue' has a wrong offset!");

// Function Indiana.PlayerHealthComponent.GetMaxFastTravelExhaustion
// 0x0004 (0x0004 - 0x0000)
struct PlayerHealthComponent_GetMaxFastTravelExhaustion final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerHealthComponent_GetMaxFastTravelExhaustion) == 0x000004, "Wrong alignment on PlayerHealthComponent_GetMaxFastTravelExhaustion");
static_assert(sizeof(PlayerHealthComponent_GetMaxFastTravelExhaustion) == 0x000004, "Wrong size on PlayerHealthComponent_GetMaxFastTravelExhaustion");
static_assert(offsetof(PlayerHealthComponent_GetMaxFastTravelExhaustion, ReturnValue) == 0x000000, "Member 'PlayerHealthComponent_GetMaxFastTravelExhaustion::ReturnValue' has a wrong offset!");

// Function Indiana.PlayerHealthComponent.GetMaxFastTravelHunger
// 0x0004 (0x0004 - 0x0000)
struct PlayerHealthComponent_GetMaxFastTravelHunger final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerHealthComponent_GetMaxFastTravelHunger) == 0x000004, "Wrong alignment on PlayerHealthComponent_GetMaxFastTravelHunger");
static_assert(sizeof(PlayerHealthComponent_GetMaxFastTravelHunger) == 0x000004, "Wrong size on PlayerHealthComponent_GetMaxFastTravelHunger");
static_assert(offsetof(PlayerHealthComponent_GetMaxFastTravelHunger, ReturnValue) == 0x000000, "Member 'PlayerHealthComponent_GetMaxFastTravelHunger::ReturnValue' has a wrong offset!");

// Function Indiana.PlayerHealthComponent.GetMaxFastTravelThirst
// 0x0004 (0x0004 - 0x0000)
struct PlayerHealthComponent_GetMaxFastTravelThirst final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerHealthComponent_GetMaxFastTravelThirst) == 0x000004, "Wrong alignment on PlayerHealthComponent_GetMaxFastTravelThirst");
static_assert(sizeof(PlayerHealthComponent_GetMaxFastTravelThirst) == 0x000004, "Wrong size on PlayerHealthComponent_GetMaxFastTravelThirst");
static_assert(offsetof(PlayerHealthComponent_GetMaxFastTravelThirst, ReturnValue) == 0x000000, "Member 'PlayerHealthComponent_GetMaxFastTravelThirst::ReturnValue' has a wrong offset!");

// Function Indiana.PlayerHealthComponent.GetThirst
// 0x0004 (0x0004 - 0x0000)
struct PlayerHealthComponent_GetThirst final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerHealthComponent_GetThirst) == 0x000004, "Wrong alignment on PlayerHealthComponent_GetThirst");
static_assert(sizeof(PlayerHealthComponent_GetThirst) == 0x000004, "Wrong size on PlayerHealthComponent_GetThirst");
static_assert(offsetof(PlayerHealthComponent_GetThirst, ReturnValue) == 0x000000, "Member 'PlayerHealthComponent_GetThirst::ReturnValue' has a wrong offset!");

// Function Indiana.PlayerInfoComponent.AddAudioLog
// 0x0010 (0x0010 - 0x0000)
struct PlayerInfoComponent_AddAudioLog final
{
public:
	struct FAudioLogDefinition                    AudioLogDefinition;                                // 0x0000(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoComponent_AddAudioLog) == 0x000008, "Wrong alignment on PlayerInfoComponent_AddAudioLog");
static_assert(sizeof(PlayerInfoComponent_AddAudioLog) == 0x000010, "Wrong size on PlayerInfoComponent_AddAudioLog");
static_assert(offsetof(PlayerInfoComponent_AddAudioLog, AudioLogDefinition) == 0x000000, "Member 'PlayerInfoComponent_AddAudioLog::AudioLogDefinition' has a wrong offset!");

// Function Indiana.PlayerInfoComponent.AddXPDebug
// 0x0004 (0x0004 - 0x0000)
struct PlayerInfoComponent_AddXPDebug final
{
public:
	int32                                         XP;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoComponent_AddXPDebug) == 0x000004, "Wrong alignment on PlayerInfoComponent_AddXPDebug");
static_assert(sizeof(PlayerInfoComponent_AddXPDebug) == 0x000004, "Wrong size on PlayerInfoComponent_AddXPDebug");
static_assert(offsetof(PlayerInfoComponent_AddXPDebug, XP) == 0x000000, "Member 'PlayerInfoComponent_AddXPDebug::XP' has a wrong offset!");

// Function Indiana.PlayerInfoComponent.FlawAddDebug
// 0x0010 (0x0010 - 0x0000)
struct PlayerInfoComponent_FlawAddDebug final
{
public:
	class FString                                 FlawName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoComponent_FlawAddDebug) == 0x000008, "Wrong alignment on PlayerInfoComponent_FlawAddDebug");
static_assert(sizeof(PlayerInfoComponent_FlawAddDebug) == 0x000010, "Wrong size on PlayerInfoComponent_FlawAddDebug");
static_assert(offsetof(PlayerInfoComponent_FlawAddDebug, FlawName) == 0x000000, "Member 'PlayerInfoComponent_FlawAddDebug::FlawName' has a wrong offset!");

// Function Indiana.PlayerInfoComponent.FlawClearDebug
// 0x0010 (0x0010 - 0x0000)
struct PlayerInfoComponent_FlawClearDebug final
{
public:
	class FString                                 FlawName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoComponent_FlawClearDebug) == 0x000008, "Wrong alignment on PlayerInfoComponent_FlawClearDebug");
static_assert(sizeof(PlayerInfoComponent_FlawClearDebug) == 0x000010, "Wrong size on PlayerInfoComponent_FlawClearDebug");
static_assert(offsetof(PlayerInfoComponent_FlawClearDebug, FlawName) == 0x000000, "Member 'PlayerInfoComponent_FlawClearDebug::FlawName' has a wrong offset!");

// Function Indiana.PlayerInfoComponent.FlawOfferDebug
// 0x0010 (0x0010 - 0x0000)
struct PlayerInfoComponent_FlawOfferDebug final
{
public:
	class FString                                 FlawName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoComponent_FlawOfferDebug) == 0x000008, "Wrong alignment on PlayerInfoComponent_FlawOfferDebug");
static_assert(sizeof(PlayerInfoComponent_FlawOfferDebug) == 0x000010, "Wrong size on PlayerInfoComponent_FlawOfferDebug");
static_assert(offsetof(PlayerInfoComponent_FlawOfferDebug, FlawName) == 0x000000, "Member 'PlayerInfoComponent_FlawOfferDebug::FlawName' has a wrong offset!");

// Function Indiana.PlayerInfoComponent.OnCombatStateChanged
// 0x0002 (0x0002 - 0x0000)
struct PlayerInfoComponent_OnCombatStateChanged final
{
public:
	bool                                          bInCombat;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestoring;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoComponent_OnCombatStateChanged) == 0x000001, "Wrong alignment on PlayerInfoComponent_OnCombatStateChanged");
static_assert(sizeof(PlayerInfoComponent_OnCombatStateChanged) == 0x000002, "Wrong size on PlayerInfoComponent_OnCombatStateChanged");
static_assert(offsetof(PlayerInfoComponent_OnCombatStateChanged, bInCombat) == 0x000000, "Member 'PlayerInfoComponent_OnCombatStateChanged::bInCombat' has a wrong offset!");
static_assert(offsetof(PlayerInfoComponent_OnCombatStateChanged, bRestoring) == 0x000001, "Member 'PlayerInfoComponent_OnCombatStateChanged::bRestoring' has a wrong offset!");

// Function Indiana.PlayerInfoComponent.PlayAudioLog
// 0x0004 (0x0004 - 0x0000)
struct PlayerInfoComponent_PlayAudioLog final
{
public:
	int32                                         AudioLogIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoComponent_PlayAudioLog) == 0x000004, "Wrong alignment on PlayerInfoComponent_PlayAudioLog");
static_assert(sizeof(PlayerInfoComponent_PlayAudioLog) == 0x000004, "Wrong size on PlayerInfoComponent_PlayAudioLog");
static_assert(offsetof(PlayerInfoComponent_PlayAudioLog, AudioLogIndex) == 0x000000, "Member 'PlayerInfoComponent_PlayAudioLog::AudioLogIndex' has a wrong offset!");

// Function Indiana.PlayerInfoComponent.QuestComplete
// 0x0010 (0x0010 - 0x0000)
struct PlayerInfoComponent_QuestComplete final
{
public:
	class FString                                 QuestName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoComponent_QuestComplete) == 0x000008, "Wrong alignment on PlayerInfoComponent_QuestComplete");
static_assert(sizeof(PlayerInfoComponent_QuestComplete) == 0x000010, "Wrong size on PlayerInfoComponent_QuestComplete");
static_assert(offsetof(PlayerInfoComponent_QuestComplete, QuestName) == 0x000000, "Member 'PlayerInfoComponent_QuestComplete::QuestName' has a wrong offset!");

// Function Indiana.PlayerInfoComponent.QuestFail
// 0x0010 (0x0010 - 0x0000)
struct PlayerInfoComponent_QuestFail final
{
public:
	class FString                                 QuestName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoComponent_QuestFail) == 0x000008, "Wrong alignment on PlayerInfoComponent_QuestFail");
static_assert(sizeof(PlayerInfoComponent_QuestFail) == 0x000010, "Wrong size on PlayerInfoComponent_QuestFail");
static_assert(offsetof(PlayerInfoComponent_QuestFail, QuestName) == 0x000000, "Member 'PlayerInfoComponent_QuestFail::QuestName' has a wrong offset!");

// Function Indiana.PlayerInfoComponent.QuestStart
// 0x0010 (0x0010 - 0x0000)
struct PlayerInfoComponent_QuestStart final
{
public:
	class FString                                 QuestName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoComponent_QuestStart) == 0x000008, "Wrong alignment on PlayerInfoComponent_QuestStart");
static_assert(sizeof(PlayerInfoComponent_QuestStart) == 0x000010, "Wrong size on PlayerInfoComponent_QuestStart");
static_assert(offsetof(PlayerInfoComponent_QuestStart, QuestName) == 0x000000, "Member 'PlayerInfoComponent_QuestStart::QuestName' has a wrong offset!");

// Function Indiana.PlayerInfoComponent.QuestTriggerAddendum
// 0x0018 (0x0018 - 0x0000)
struct PlayerInfoComponent_QuestTriggerAddendum final
{
public:
	class FString                                 QuestName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddendumNode;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerInfoComponent_QuestTriggerAddendum) == 0x000008, "Wrong alignment on PlayerInfoComponent_QuestTriggerAddendum");
static_assert(sizeof(PlayerInfoComponent_QuestTriggerAddendum) == 0x000018, "Wrong size on PlayerInfoComponent_QuestTriggerAddendum");
static_assert(offsetof(PlayerInfoComponent_QuestTriggerAddendum, QuestName) == 0x000000, "Member 'PlayerInfoComponent_QuestTriggerAddendum::QuestName' has a wrong offset!");
static_assert(offsetof(PlayerInfoComponent_QuestTriggerAddendum, AddendumNode) == 0x000010, "Member 'PlayerInfoComponent_QuestTriggerAddendum::AddendumNode' has a wrong offset!");

// Function Indiana.PlayerInfoComponent.ResetQuest
// 0x0020 (0x0020 - 0x0000)
struct PlayerInfoComponent_ResetQuest final
{
public:
	class FString                                 QuestName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ResetEventIDs;                                     // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoComponent_ResetQuest) == 0x000008, "Wrong alignment on PlayerInfoComponent_ResetQuest");
static_assert(sizeof(PlayerInfoComponent_ResetQuest) == 0x000020, "Wrong size on PlayerInfoComponent_ResetQuest");
static_assert(offsetof(PlayerInfoComponent_ResetQuest, QuestName) == 0x000000, "Member 'PlayerInfoComponent_ResetQuest::QuestName' has a wrong offset!");
static_assert(offsetof(PlayerInfoComponent_ResetQuest, ResetEventIDs) == 0x000010, "Member 'PlayerInfoComponent_ResetQuest::ResetEventIDs' has a wrong offset!");

// Function Indiana.PlayerInfoComponent.RespecPerks
// 0x0001 (0x0001 - 0x0000)
struct PlayerInfoComponent_RespecPerks final
{
public:
	bool                                          bNoCost;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoComponent_RespecPerks) == 0x000001, "Wrong alignment on PlayerInfoComponent_RespecPerks");
static_assert(sizeof(PlayerInfoComponent_RespecPerks) == 0x000001, "Wrong size on PlayerInfoComponent_RespecPerks");
static_assert(offsetof(PlayerInfoComponent_RespecPerks, bNoCost) == 0x000000, "Member 'PlayerInfoComponent_RespecPerks::bNoCost' has a wrong offset!");

// Function Indiana.PlayerInfoComponent.SetAptitudeDebug
// 0x0010 (0x0010 - 0x0000)
struct PlayerInfoComponent_SetAptitudeDebug final
{
public:
	class FString                                 AptitudeName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoComponent_SetAptitudeDebug) == 0x000008, "Wrong alignment on PlayerInfoComponent_SetAptitudeDebug");
static_assert(sizeof(PlayerInfoComponent_SetAptitudeDebug) == 0x000010, "Wrong size on PlayerInfoComponent_SetAptitudeDebug");
static_assert(offsetof(PlayerInfoComponent_SetAptitudeDebug, AptitudeName) == 0x000000, "Member 'PlayerInfoComponent_SetAptitudeDebug::AptitudeName' has a wrong offset!");

// Function Indiana.PlayerInfoComponent.SetFlawAsOfferable
// 0x0010 (0x0010 - 0x0000)
struct PlayerInfoComponent_SetFlawAsOfferable final
{
public:
	TSubclassOf<class UFlaw>                      Flaw;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OfferChance;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreTimer;                                      // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerInfoComponent_SetFlawAsOfferable) == 0x000008, "Wrong alignment on PlayerInfoComponent_SetFlawAsOfferable");
static_assert(sizeof(PlayerInfoComponent_SetFlawAsOfferable) == 0x000010, "Wrong size on PlayerInfoComponent_SetFlawAsOfferable");
static_assert(offsetof(PlayerInfoComponent_SetFlawAsOfferable, Flaw) == 0x000000, "Member 'PlayerInfoComponent_SetFlawAsOfferable::Flaw' has a wrong offset!");
static_assert(offsetof(PlayerInfoComponent_SetFlawAsOfferable, OfferChance) == 0x000008, "Member 'PlayerInfoComponent_SetFlawAsOfferable::OfferChance' has a wrong offset!");
static_assert(offsetof(PlayerInfoComponent_SetFlawAsOfferable, bIgnoreTimer) == 0x00000C, "Member 'PlayerInfoComponent_SetFlawAsOfferable::bIgnoreTimer' has a wrong offset!");

// Function Indiana.PlayerInfoComponent.SetGenderDebug
// 0x0001 (0x0001 - 0x0000)
struct PlayerInfoComponent_SetGenderDebug final
{
public:
	EGender                                       GenderIn;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoComponent_SetGenderDebug) == 0x000001, "Wrong alignment on PlayerInfoComponent_SetGenderDebug");
static_assert(sizeof(PlayerInfoComponent_SetGenderDebug) == 0x000001, "Wrong size on PlayerInfoComponent_SetGenderDebug");
static_assert(offsetof(PlayerInfoComponent_SetGenderDebug, GenderIn) == 0x000000, "Member 'PlayerInfoComponent_SetGenderDebug::GenderIn' has a wrong offset!");

// Function Indiana.PlayerInfoComponent.IsPlayingAudioLog
// 0x0001 (0x0001 - 0x0000)
struct PlayerInfoComponent_IsPlayingAudioLog final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoComponent_IsPlayingAudioLog) == 0x000001, "Wrong alignment on PlayerInfoComponent_IsPlayingAudioLog");
static_assert(sizeof(PlayerInfoComponent_IsPlayingAudioLog) == 0x000001, "Wrong size on PlayerInfoComponent_IsPlayingAudioLog");
static_assert(offsetof(PlayerInfoComponent_IsPlayingAudioLog, ReturnValue) == 0x000000, "Member 'PlayerInfoComponent_IsPlayingAudioLog::ReturnValue' has a wrong offset!");

// Function Indiana.TrapAudioComponent.Play
// 0x0001 (0x0001 - 0x0000)
struct TrapAudioComponent_Play final
{
public:
	ETrapEventType                                Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrapAudioComponent_Play) == 0x000001, "Wrong alignment on TrapAudioComponent_Play");
static_assert(sizeof(TrapAudioComponent_Play) == 0x000001, "Wrong size on TrapAudioComponent_Play");
static_assert(offsetof(TrapAudioComponent_Play, Type) == 0x000000, "Member 'TrapAudioComponent_Play::Type' has a wrong offset!");

// Function Indiana.TrapAudioComponent.Stop
// 0x0001 (0x0001 - 0x0000)
struct TrapAudioComponent_Stop final
{
public:
	ETrapEventType                                Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrapAudioComponent_Stop) == 0x000001, "Wrong alignment on TrapAudioComponent_Stop");
static_assert(sizeof(TrapAudioComponent_Stop) == 0x000001, "Wrong size on TrapAudioComponent_Stop");
static_assert(offsetof(TrapAudioComponent_Stop, Type) == 0x000000, "Member 'TrapAudioComponent_Stop::Type' has a wrong offset!");

// Function Indiana.PlayerMovementComponent.AcrophobiaEnableDebug
// 0x0001 (0x0001 - 0x0000)
struct PlayerMovementComponent_AcrophobiaEnableDebug final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerMovementComponent_AcrophobiaEnableDebug) == 0x000001, "Wrong alignment on PlayerMovementComponent_AcrophobiaEnableDebug");
static_assert(sizeof(PlayerMovementComponent_AcrophobiaEnableDebug) == 0x000001, "Wrong size on PlayerMovementComponent_AcrophobiaEnableDebug");
static_assert(offsetof(PlayerMovementComponent_AcrophobiaEnableDebug, bEnable) == 0x000000, "Member 'PlayerMovementComponent_AcrophobiaEnableDebug::bEnable' has a wrong offset!");

// Function Indiana.PlayerMovementComponent.ControllerADSSensitivityUpdated
// 0x0004 (0x0004 - 0x0000)
struct PlayerMovementComponent_ControllerADSSensitivityUpdated final
{
public:
	float                                         SensititivityIn;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerMovementComponent_ControllerADSSensitivityUpdated) == 0x000004, "Wrong alignment on PlayerMovementComponent_ControllerADSSensitivityUpdated");
static_assert(sizeof(PlayerMovementComponent_ControllerADSSensitivityUpdated) == 0x000004, "Wrong size on PlayerMovementComponent_ControllerADSSensitivityUpdated");
static_assert(offsetof(PlayerMovementComponent_ControllerADSSensitivityUpdated, SensititivityIn) == 0x000000, "Member 'PlayerMovementComponent_ControllerADSSensitivityUpdated::SensititivityIn' has a wrong offset!");

// Function Indiana.PlayerMovementComponent.ControllerSensitivityUpdated
// 0x0004 (0x0004 - 0x0000)
struct PlayerMovementComponent_ControllerSensitivityUpdated final
{
public:
	float                                         SensitivityIn;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerMovementComponent_ControllerSensitivityUpdated) == 0x000004, "Wrong alignment on PlayerMovementComponent_ControllerSensitivityUpdated");
static_assert(sizeof(PlayerMovementComponent_ControllerSensitivityUpdated) == 0x000004, "Wrong size on PlayerMovementComponent_ControllerSensitivityUpdated");
static_assert(offsetof(PlayerMovementComponent_ControllerSensitivityUpdated, SensitivityIn) == 0x000000, "Member 'PlayerMovementComponent_ControllerSensitivityUpdated::SensitivityIn' has a wrong offset!");

// Function Indiana.PlayerMovementComponent.OnTakeFallingDamage
// 0x0004 (0x0004 - 0x0000)
struct PlayerMovementComponent_OnTakeFallingDamage final
{
public:
	float                                         FallingDamage;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerMovementComponent_OnTakeFallingDamage) == 0x000004, "Wrong alignment on PlayerMovementComponent_OnTakeFallingDamage");
static_assert(sizeof(PlayerMovementComponent_OnTakeFallingDamage) == 0x000004, "Wrong size on PlayerMovementComponent_OnTakeFallingDamage");
static_assert(offsetof(PlayerMovementComponent_OnTakeFallingDamage, FallingDamage) == 0x000000, "Member 'PlayerMovementComponent_OnTakeFallingDamage::FallingDamage' has a wrong offset!");

// Function Indiana.PlayerMovementComponent.OnUnlockAbilityChanged
// 0x0001 (0x0001 - 0x0000)
struct PlayerMovementComponent_OnUnlockAbilityChanged final
{
public:
	EUnlockAbility                                Ability;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerMovementComponent_OnUnlockAbilityChanged) == 0x000001, "Wrong alignment on PlayerMovementComponent_OnUnlockAbilityChanged");
static_assert(sizeof(PlayerMovementComponent_OnUnlockAbilityChanged) == 0x000001, "Wrong size on PlayerMovementComponent_OnUnlockAbilityChanged");
static_assert(offsetof(PlayerMovementComponent_OnUnlockAbilityChanged, Ability) == 0x000000, "Member 'PlayerMovementComponent_OnUnlockAbilityChanged::Ability' has a wrong offset!");

// Function Indiana.PlayerShoutComponent.OnCombatStateChange
// 0x0002 (0x0002 - 0x0000)
struct PlayerShoutComponent_OnCombatStateChange final
{
public:
	bool                                          bIsInCombat;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestoring;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerShoutComponent_OnCombatStateChange) == 0x000001, "Wrong alignment on PlayerShoutComponent_OnCombatStateChange");
static_assert(sizeof(PlayerShoutComponent_OnCombatStateChange) == 0x000002, "Wrong size on PlayerShoutComponent_OnCombatStateChange");
static_assert(offsetof(PlayerShoutComponent_OnCombatStateChange, bIsInCombat) == 0x000000, "Member 'PlayerShoutComponent_OnCombatStateChange::bIsInCombat' has a wrong offset!");
static_assert(offsetof(PlayerShoutComponent_OnCombatStateChange, bRestoring) == 0x000001, "Member 'PlayerShoutComponent_OnCombatStateChange::bRestoring' has a wrong offset!");

// Function Indiana.PlayerStatsWidget.OnItemEquipped
// 0x0008 (0x0008 - 0x0000)
struct PlayerStatsWidget_OnItemEquipped final
{
public:
	class UItem*                                  ItemEquipped;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStatsWidget_OnItemEquipped) == 0x000008, "Wrong alignment on PlayerStatsWidget_OnItemEquipped");
static_assert(sizeof(PlayerStatsWidget_OnItemEquipped) == 0x000008, "Wrong size on PlayerStatsWidget_OnItemEquipped");
static_assert(offsetof(PlayerStatsWidget_OnItemEquipped, ItemEquipped) == 0x000000, "Member 'PlayerStatsWidget_OnItemEquipped::ItemEquipped' has a wrong offset!");

// Function Indiana.PlayerStatsWidget.OnItemPartsChanged
// 0x0008 (0x0008 - 0x0000)
struct PlayerStatsWidget_OnItemPartsChanged final
{
public:
	int32                                         WeaponParts;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ArmorParts;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStatsWidget_OnItemPartsChanged) == 0x000004, "Wrong alignment on PlayerStatsWidget_OnItemPartsChanged");
static_assert(sizeof(PlayerStatsWidget_OnItemPartsChanged) == 0x000008, "Wrong size on PlayerStatsWidget_OnItemPartsChanged");
static_assert(offsetof(PlayerStatsWidget_OnItemPartsChanged, WeaponParts) == 0x000000, "Member 'PlayerStatsWidget_OnItemPartsChanged::WeaponParts' has a wrong offset!");
static_assert(offsetof(PlayerStatsWidget_OnItemPartsChanged, ArmorParts) == 0x000004, "Member 'PlayerStatsWidget_OnItemPartsChanged::ArmorParts' has a wrong offset!");

// Function Indiana.PlayerStatsWidget.OnLevelChanged
// 0x0004 (0x0004 - 0x0000)
struct PlayerStatsWidget_OnLevelChanged final
{
public:
	int32                                         NewLevel;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStatsWidget_OnLevelChanged) == 0x000004, "Wrong alignment on PlayerStatsWidget_OnLevelChanged");
static_assert(sizeof(PlayerStatsWidget_OnLevelChanged) == 0x000004, "Wrong size on PlayerStatsWidget_OnLevelChanged");
static_assert(offsetof(PlayerStatsWidget_OnLevelChanged, NewLevel) == 0x000000, "Member 'PlayerStatsWidget_OnLevelChanged::NewLevel' has a wrong offset!");

// Function Indiana.PlayerStatsWidget.SetXPRatio
// 0x0004 (0x0004 - 0x0000)
struct PlayerStatsWidget_SetXPRatio final
{
public:
	float                                         XPRatio;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStatsWidget_SetXPRatio) == 0x000004, "Wrong alignment on PlayerStatsWidget_SetXPRatio");
static_assert(sizeof(PlayerStatsWidget_SetXPRatio) == 0x000004, "Wrong size on PlayerStatsWidget_SetXPRatio");
static_assert(offsetof(PlayerStatsWidget_SetXPRatio, XPRatio) == 0x000000, "Member 'PlayerStatsWidget_SetXPRatio::XPRatio' has a wrong offset!");

// Function Indiana.PlayerTargetingComponent.DrawPlayerTargetingTrace
// 0x0004 (0x0004 - 0x0000)
struct PlayerTargetingComponent_DrawPlayerTargetingTrace final
{
public:
	float                                         PersistTime;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerTargetingComponent_DrawPlayerTargetingTrace) == 0x000004, "Wrong alignment on PlayerTargetingComponent_DrawPlayerTargetingTrace");
static_assert(sizeof(PlayerTargetingComponent_DrawPlayerTargetingTrace) == 0x000004, "Wrong size on PlayerTargetingComponent_DrawPlayerTargetingTrace");
static_assert(offsetof(PlayerTargetingComponent_DrawPlayerTargetingTrace, PersistTime) == 0x000000, "Member 'PlayerTargetingComponent_DrawPlayerTargetingTrace::PersistTime' has a wrong offset!");

// Function Indiana.PreviewCharacterAnimInstance.SetSelectionState
// 0x0001 (0x0001 - 0x0000)
struct PreviewCharacterAnimInstance_SetSelectionState final
{
public:
	EUISelectionState                             InSelectionState;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PreviewCharacterAnimInstance_SetSelectionState) == 0x000001, "Wrong alignment on PreviewCharacterAnimInstance_SetSelectionState");
static_assert(sizeof(PreviewCharacterAnimInstance_SetSelectionState) == 0x000001, "Wrong size on PreviewCharacterAnimInstance_SetSelectionState");
static_assert(offsetof(PreviewCharacterAnimInstance_SetSelectionState, InSelectionState) == 0x000000, "Member 'PreviewCharacterAnimInstance_SetSelectionState::InSelectionState' has a wrong offset!");

// Function Indiana.Projectile.OnBounce
// 0x0094 (0x0094 - 0x0000)
struct Projectile_OnBounce final
{
public:
	struct FHitResult                             ImpactResult;                                      // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                ImpactVelocity;                                    // 0x0088(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Projectile_OnBounce) == 0x000004, "Wrong alignment on Projectile_OnBounce");
static_assert(sizeof(Projectile_OnBounce) == 0x000094, "Wrong size on Projectile_OnBounce");
static_assert(offsetof(Projectile_OnBounce, ImpactResult) == 0x000000, "Member 'Projectile_OnBounce::ImpactResult' has a wrong offset!");
static_assert(offsetof(Projectile_OnBounce, ImpactVelocity) == 0x000088, "Member 'Projectile_OnBounce::ImpactVelocity' has a wrong offset!");

// Function Indiana.Projectile.OnDamageBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct Projectile_OnDamageBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Projectile_OnDamageBeginOverlap) == 0x000008, "Wrong alignment on Projectile_OnDamageBeginOverlap");
static_assert(sizeof(Projectile_OnDamageBeginOverlap) == 0x0000A8, "Wrong size on Projectile_OnDamageBeginOverlap");
static_assert(offsetof(Projectile_OnDamageBeginOverlap, OverlappedComponent) == 0x000000, "Member 'Projectile_OnDamageBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Projectile_OnDamageBeginOverlap, OtherActor) == 0x000008, "Member 'Projectile_OnDamageBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(Projectile_OnDamageBeginOverlap, OtherComp) == 0x000010, "Member 'Projectile_OnDamageBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(Projectile_OnDamageBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'Projectile_OnDamageBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Projectile_OnDamageBeginOverlap, bFromSweep) == 0x00001C, "Member 'Projectile_OnDamageBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(Projectile_OnDamageBeginOverlap, SweepResult) == 0x000020, "Member 'Projectile_OnDamageBeginOverlap::SweepResult' has a wrong offset!");

// Function Indiana.Projectile.OnDamageEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct Projectile_OnDamageEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Projectile_OnDamageEndOverlap) == 0x000008, "Wrong alignment on Projectile_OnDamageEndOverlap");
static_assert(sizeof(Projectile_OnDamageEndOverlap) == 0x000020, "Wrong size on Projectile_OnDamageEndOverlap");
static_assert(offsetof(Projectile_OnDamageEndOverlap, OverlappedComponent) == 0x000000, "Member 'Projectile_OnDamageEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Projectile_OnDamageEndOverlap, OtherActor) == 0x000008, "Member 'Projectile_OnDamageEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(Projectile_OnDamageEndOverlap, OtherComp) == 0x000010, "Member 'Projectile_OnDamageEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(Projectile_OnDamageEndOverlap, OtherBodyIndex) == 0x000018, "Member 'Projectile_OnDamageEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function Indiana.Projectile.OnHit
// 0x00B0 (0x00B0 - 0x0000)
struct Projectile_OnHit final
{
public:
	class UPrimitiveComponent*                    HitComp;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0024(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Projectile_OnHit) == 0x000008, "Wrong alignment on Projectile_OnHit");
static_assert(sizeof(Projectile_OnHit) == 0x0000B0, "Wrong size on Projectile_OnHit");
static_assert(offsetof(Projectile_OnHit, HitComp) == 0x000000, "Member 'Projectile_OnHit::HitComp' has a wrong offset!");
static_assert(offsetof(Projectile_OnHit, OtherActor) == 0x000008, "Member 'Projectile_OnHit::OtherActor' has a wrong offset!");
static_assert(offsetof(Projectile_OnHit, OtherComp) == 0x000010, "Member 'Projectile_OnHit::OtherComp' has a wrong offset!");
static_assert(offsetof(Projectile_OnHit, NormalImpulse) == 0x000018, "Member 'Projectile_OnHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(Projectile_OnHit, Hit) == 0x000024, "Member 'Projectile_OnHit::Hit' has a wrong offset!");

// Function Indiana.Projectile.GetChargeAmount
// 0x0004 (0x0004 - 0x0000)
struct Projectile_GetChargeAmount final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Projectile_GetChargeAmount) == 0x000004, "Wrong alignment on Projectile_GetChargeAmount");
static_assert(sizeof(Projectile_GetChargeAmount) == 0x000004, "Wrong size on Projectile_GetChargeAmount");
static_assert(offsetof(Projectile_GetChargeAmount, ReturnValue) == 0x000000, "Member 'Projectile_GetChargeAmount::ReturnValue' has a wrong offset!");

// Function Indiana.Projectile.GetCollisionSize
// 0x0004 (0x0004 - 0x0000)
struct Projectile_GetCollisionSize final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Projectile_GetCollisionSize) == 0x000004, "Wrong alignment on Projectile_GetCollisionSize");
static_assert(sizeof(Projectile_GetCollisionSize) == 0x000004, "Wrong size on Projectile_GetCollisionSize");
static_assert(offsetof(Projectile_GetCollisionSize, ReturnValue) == 0x000000, "Member 'Projectile_GetCollisionSize::ReturnValue' has a wrong offset!");

// Function Indiana.Projectile.GetOverlapCollisionSize
// 0x0004 (0x0004 - 0x0000)
struct Projectile_GetOverlapCollisionSize final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Projectile_GetOverlapCollisionSize) == 0x000004, "Wrong alignment on Projectile_GetOverlapCollisionSize");
static_assert(sizeof(Projectile_GetOverlapCollisionSize) == 0x000004, "Wrong size on Projectile_GetOverlapCollisionSize");
static_assert(offsetof(Projectile_GetOverlapCollisionSize, ReturnValue) == 0x000000, "Member 'Projectile_GetOverlapCollisionSize::ReturnValue' has a wrong offset!");

// Function Indiana.PS5ActivityManager.OnLoadComplete
// 0x0018 (0x0018 - 0x0000)
struct PS5ActivityManager_OnLoadComplete final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoadGameResult                               Result;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PS5ActivityManager_OnLoadComplete) == 0x000008, "Wrong alignment on PS5ActivityManager_OnLoadComplete");
static_assert(sizeof(PS5ActivityManager_OnLoadComplete) == 0x000018, "Wrong size on PS5ActivityManager_OnLoadComplete");
static_assert(offsetof(PS5ActivityManager_OnLoadComplete, Filename) == 0x000000, "Member 'PS5ActivityManager_OnLoadComplete::Filename' has a wrong offset!");
static_assert(offsetof(PS5ActivityManager_OnLoadComplete, Result) == 0x000010, "Member 'PS5ActivityManager_OnLoadComplete::Result' has a wrong offset!");

// Function Indiana.PS5ActivityManager.OnPreLoadMap
// 0x0010 (0x0010 - 0x0000)
struct PS5ActivityManager_OnPreLoadMap final
{
public:
	class FString                                 MapName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PS5ActivityManager_OnPreLoadMap) == 0x000008, "Wrong alignment on PS5ActivityManager_OnPreLoadMap");
static_assert(sizeof(PS5ActivityManager_OnPreLoadMap) == 0x000010, "Wrong size on PS5ActivityManager_OnPreLoadMap");
static_assert(offsetof(PS5ActivityManager_OnPreLoadMap, MapName) == 0x000000, "Member 'PS5ActivityManager_OnPreLoadMap::MapName' has a wrong offset!");

// Function Indiana.PS5ActivityManager.OnQueryLatestSaveFinished
// 0x0018 (0x0018 - 0x0000)
struct PS5ActivityManager_OnQueryLatestSaveFinished final
{
public:
	class FString                                 LatestSaveName;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasSaves;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PS5ActivityManager_OnQueryLatestSaveFinished) == 0x000008, "Wrong alignment on PS5ActivityManager_OnQueryLatestSaveFinished");
static_assert(sizeof(PS5ActivityManager_OnQueryLatestSaveFinished) == 0x000018, "Wrong size on PS5ActivityManager_OnQueryLatestSaveFinished");
static_assert(offsetof(PS5ActivityManager_OnQueryLatestSaveFinished, LatestSaveName) == 0x000000, "Member 'PS5ActivityManager_OnQueryLatestSaveFinished::LatestSaveName' has a wrong offset!");
static_assert(offsetof(PS5ActivityManager_OnQueryLatestSaveFinished, bHasSaves) == 0x000010, "Member 'PS5ActivityManager_OnQueryLatestSaveFinished::bHasSaves' has a wrong offset!");

// Function Indiana.QuestAddendumWidget.OnObjectiveStatusChange
// 0x0001 (0x0001 - 0x0000)
struct QuestAddendumWidget_OnObjectiveStatusChange final
{
public:
	ECompletionStatus                             ObjectiveCompletion;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestAddendumWidget_OnObjectiveStatusChange) == 0x000001, "Wrong alignment on QuestAddendumWidget_OnObjectiveStatusChange");
static_assert(sizeof(QuestAddendumWidget_OnObjectiveStatusChange) == 0x000001, "Wrong size on QuestAddendumWidget_OnObjectiveStatusChange");
static_assert(offsetof(QuestAddendumWidget_OnObjectiveStatusChange, ObjectiveCompletion) == 0x000000, "Member 'QuestAddendumWidget_OnObjectiveStatusChange::ObjectiveCompletion' has a wrong offset!");

// Function Indiana.QuestListEntryWidget.SetActiveQuest
// 0x0001 (0x0001 - 0x0000)
struct QuestListEntryWidget_SetActiveQuest final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestListEntryWidget_SetActiveQuest) == 0x000001, "Wrong alignment on QuestListEntryWidget_SetActiveQuest");
static_assert(sizeof(QuestListEntryWidget_SetActiveQuest) == 0x000001, "Wrong size on QuestListEntryWidget_SetActiveQuest");
static_assert(offsetof(QuestListEntryWidget_SetActiveQuest, bActive) == 0x000000, "Member 'QuestListEntryWidget_SetActiveQuest::bActive' has a wrong offset!");

// Function Indiana.QuestListEntryWidget.SetQuestCompletionStatus
// 0x0001 (0x0001 - 0x0000)
struct QuestListEntryWidget_SetQuestCompletionStatus final
{
public:
	EQuestState                                   QuestState;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestListEntryWidget_SetQuestCompletionStatus) == 0x000001, "Wrong alignment on QuestListEntryWidget_SetQuestCompletionStatus");
static_assert(sizeof(QuestListEntryWidget_SetQuestCompletionStatus) == 0x000001, "Wrong size on QuestListEntryWidget_SetQuestCompletionStatus");
static_assert(offsetof(QuestListEntryWidget_SetQuestCompletionStatus, QuestState) == 0x000000, "Member 'QuestListEntryWidget_SetQuestCompletionStatus::QuestState' has a wrong offset!");

// Function Indiana.QuestLogComboBoxWidget.OnValueChanged
// 0x0018 (0x0018 - 0x0000)
struct QuestLogComboBoxWidget_OnValueChanged final
{
public:
	class FString                                 SelectedItem;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESelectInfo                                   SelectionType;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuestLogComboBoxWidget_OnValueChanged) == 0x000008, "Wrong alignment on QuestLogComboBoxWidget_OnValueChanged");
static_assert(sizeof(QuestLogComboBoxWidget_OnValueChanged) == 0x000018, "Wrong size on QuestLogComboBoxWidget_OnValueChanged");
static_assert(offsetof(QuestLogComboBoxWidget_OnValueChanged, SelectedItem) == 0x000000, "Member 'QuestLogComboBoxWidget_OnValueChanged::SelectedItem' has a wrong offset!");
static_assert(offsetof(QuestLogComboBoxWidget_OnValueChanged, SelectionType) == 0x000010, "Member 'QuestLogComboBoxWidget_OnValueChanged::SelectionType' has a wrong offset!");

// Function Indiana.QuestLogWidget.OnHUDVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct QuestLogWidget_OnHUDVisibilityChanged final
{
public:
	bool                                          bVisibleIn;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestLogWidget_OnHUDVisibilityChanged) == 0x000001, "Wrong alignment on QuestLogWidget_OnHUDVisibilityChanged");
static_assert(sizeof(QuestLogWidget_OnHUDVisibilityChanged) == 0x000001, "Wrong size on QuestLogWidget_OnHUDVisibilityChanged");
static_assert(offsetof(QuestLogWidget_OnHUDVisibilityChanged, bVisibleIn) == 0x000000, "Member 'QuestLogWidget_OnHUDVisibilityChanged::bVisibleIn' has a wrong offset!");

// Function Indiana.QuestLogWidget.OnQuestUpdateModeChanged
// 0x0004 (0x0004 - 0x0000)
struct QuestLogWidget_OnQuestUpdateModeChanged final
{
public:
	int32                                         ModeIn;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestLogWidget_OnQuestUpdateModeChanged) == 0x000004, "Wrong alignment on QuestLogWidget_OnQuestUpdateModeChanged");
static_assert(sizeof(QuestLogWidget_OnQuestUpdateModeChanged) == 0x000004, "Wrong size on QuestLogWidget_OnQuestUpdateModeChanged");
static_assert(offsetof(QuestLogWidget_OnQuestUpdateModeChanged, ModeIn) == 0x000000, "Member 'QuestLogWidget_OnQuestUpdateModeChanged::ModeIn' has a wrong offset!");

// Function Indiana.QuestObjectiveTitleWidget.OnObjectiveStatusChange
// 0x0001 (0x0001 - 0x0000)
struct QuestObjectiveTitleWidget_OnObjectiveStatusChange final
{
public:
	ECompletionStatus                             ObjectiveStatus;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestObjectiveTitleWidget_OnObjectiveStatusChange) == 0x000001, "Wrong alignment on QuestObjectiveTitleWidget_OnObjectiveStatusChange");
static_assert(sizeof(QuestObjectiveTitleWidget_OnObjectiveStatusChange) == 0x000001, "Wrong size on QuestObjectiveTitleWidget_OnObjectiveStatusChange");
static_assert(offsetof(QuestObjectiveTitleWidget_OnObjectiveStatusChange, ObjectiveStatus) == 0x000000, "Member 'QuestObjectiveTitleWidget_OnObjectiveStatusChange::ObjectiveStatus' has a wrong offset!");

// Function Indiana.QuestObjectiveWidget.OnObjectiveStatusChange
// 0x0001 (0x0001 - 0x0000)
struct QuestObjectiveWidget_OnObjectiveStatusChange final
{
public:
	ECompletionStatus                             ObjectiveStatus;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestObjectiveWidget_OnObjectiveStatusChange) == 0x000001, "Wrong alignment on QuestObjectiveWidget_OnObjectiveStatusChange");
static_assert(sizeof(QuestObjectiveWidget_OnObjectiveStatusChange) == 0x000001, "Wrong size on QuestObjectiveWidget_OnObjectiveStatusChange");
static_assert(offsetof(QuestObjectiveWidget_OnObjectiveStatusChange, ObjectiveStatus) == 0x000000, "Member 'QuestObjectiveWidget_OnObjectiveStatusChange::ObjectiveStatus' has a wrong offset!");

// Function Indiana.RadialContextMenuWidget.OnRadialMenuSelection
// 0x0004 (0x0004 - 0x0000)
struct RadialContextMenuWidget_OnRadialMenuSelection final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RadialContextMenuWidget_OnRadialMenuSelection) == 0x000004, "Wrong alignment on RadialContextMenuWidget_OnRadialMenuSelection");
static_assert(sizeof(RadialContextMenuWidget_OnRadialMenuSelection) == 0x000004, "Wrong size on RadialContextMenuWidget_OnRadialMenuSelection");
static_assert(offsetof(RadialContextMenuWidget_OnRadialMenuSelection, Index_0) == 0x000000, "Member 'RadialContextMenuWidget_OnRadialMenuSelection::Index_0' has a wrong offset!");

// Function Indiana.ReactionComponent.OnTakeDamage
// 0x0110 (0x0110 - 0x0000)
struct ReactionComponent_OnTakeDamage final
{
public:
	struct FCauseDamageInfo                       CDI;                                               // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReactionComponent_OnTakeDamage) == 0x000008, "Wrong alignment on ReactionComponent_OnTakeDamage");
static_assert(sizeof(ReactionComponent_OnTakeDamage) == 0x000110, "Wrong size on ReactionComponent_OnTakeDamage");
static_assert(offsetof(ReactionComponent_OnTakeDamage, CDI) == 0x000000, "Member 'ReactionComponent_OnTakeDamage::CDI' has a wrong offset!");

// Function Indiana.ReactionComponent.TriggerDebugCameraShake
// 0x000C (0x000C - 0x0000)
struct ReactionComponent_TriggerDebugCameraShake final
{
public:
	float                                         Strength;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         X;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReactionComponent_TriggerDebugCameraShake) == 0x000004, "Wrong alignment on ReactionComponent_TriggerDebugCameraShake");
static_assert(sizeof(ReactionComponent_TriggerDebugCameraShake) == 0x00000C, "Wrong size on ReactionComponent_TriggerDebugCameraShake");
static_assert(offsetof(ReactionComponent_TriggerDebugCameraShake, Strength) == 0x000000, "Member 'ReactionComponent_TriggerDebugCameraShake::Strength' has a wrong offset!");
static_assert(offsetof(ReactionComponent_TriggerDebugCameraShake, X) == 0x000004, "Member 'ReactionComponent_TriggerDebugCameraShake::X' has a wrong offset!");
static_assert(offsetof(ReactionComponent_TriggerDebugCameraShake, Y) == 0x000008, "Member 'ReactionComponent_TriggerDebugCameraShake::Y' has a wrong offset!");

// Function Indiana.SaveGameManager.DisableSaves
// 0x0001 (0x0001 - 0x0000)
struct SaveGameManager_DisableSaves final
{
public:
	bool                                          bDisable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SaveGameManager_DisableSaves) == 0x000001, "Wrong alignment on SaveGameManager_DisableSaves");
static_assert(sizeof(SaveGameManager_DisableSaves) == 0x000001, "Wrong size on SaveGameManager_DisableSaves");
static_assert(offsetof(SaveGameManager_DisableSaves, bDisable) == 0x000000, "Member 'SaveGameManager_DisableSaves::bDisable' has a wrong offset!");

// Function Indiana.SaveGameManager.RequestAutosave
// 0x0001 (0x0001 - 0x0000)
struct SaveGameManager_RequestAutosave final
{
public:
	bool                                          bAllowOnSuperNova;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SaveGameManager_RequestAutosave) == 0x000001, "Wrong alignment on SaveGameManager_RequestAutosave");
static_assert(sizeof(SaveGameManager_RequestAutosave) == 0x000001, "Wrong size on SaveGameManager_RequestAutosave");
static_assert(offsetof(SaveGameManager_RequestAutosave, bAllowOnSuperNova) == 0x000000, "Member 'SaveGameManager_RequestAutosave::bAllowOnSuperNova' has a wrong offset!");

// Function Indiana.SaveGameManager.Autosave
// 0x0003 (0x0003 - 0x0000)
struct SaveGameManager_Autosave final
{
public:
	EAutoSaveType                                 AutoSaveType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreSuperNova;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SaveGameManager_Autosave) == 0x000001, "Wrong alignment on SaveGameManager_Autosave");
static_assert(sizeof(SaveGameManager_Autosave) == 0x000003, "Wrong size on SaveGameManager_Autosave");
static_assert(offsetof(SaveGameManager_Autosave, AutoSaveType) == 0x000000, "Member 'SaveGameManager_Autosave::AutoSaveType' has a wrong offset!");
static_assert(offsetof(SaveGameManager_Autosave, bIgnoreSuperNova) == 0x000001, "Member 'SaveGameManager_Autosave::bIgnoreSuperNova' has a wrong offset!");
static_assert(offsetof(SaveGameManager_Autosave, ReturnValue) == 0x000002, "Member 'SaveGameManager_Autosave::ReturnValue' has a wrong offset!");

// Function Indiana.SaveGameManager.DeleteGame
// 0x0018 (0x0018 - 0x0000)
struct SaveGameManager_DeleteGame final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDeleteGameResult                             ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SaveGameManager_DeleteGame) == 0x000008, "Wrong alignment on SaveGameManager_DeleteGame");
static_assert(sizeof(SaveGameManager_DeleteGame) == 0x000018, "Wrong size on SaveGameManager_DeleteGame");
static_assert(offsetof(SaveGameManager_DeleteGame, Filename) == 0x000000, "Member 'SaveGameManager_DeleteGame::Filename' has a wrong offset!");
static_assert(offsetof(SaveGameManager_DeleteGame, ReturnValue) == 0x000010, "Member 'SaveGameManager_DeleteGame::ReturnValue' has a wrong offset!");

// Function Indiana.SaveGameManager.EnsureSignIn
// 0x0001 (0x0001 - 0x0000)
struct SaveGameManager_EnsureSignIn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SaveGameManager_EnsureSignIn) == 0x000001, "Wrong alignment on SaveGameManager_EnsureSignIn");
static_assert(sizeof(SaveGameManager_EnsureSignIn) == 0x000001, "Wrong size on SaveGameManager_EnsureSignIn");
static_assert(offsetof(SaveGameManager_EnsureSignIn, ReturnValue) == 0x000000, "Member 'SaveGameManager_EnsureSignIn::ReturnValue' has a wrong offset!");

// Function Indiana.SaveGameManager.LoadGame
// 0x0018 (0x0018 - 0x0000)
struct SaveGameManager_LoadGame final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreValidateMetadata;                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoadGameResult                               ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SaveGameManager_LoadGame) == 0x000008, "Wrong alignment on SaveGameManager_LoadGame");
static_assert(sizeof(SaveGameManager_LoadGame) == 0x000018, "Wrong size on SaveGameManager_LoadGame");
static_assert(offsetof(SaveGameManager_LoadGame, Filename) == 0x000000, "Member 'SaveGameManager_LoadGame::Filename' has a wrong offset!");
static_assert(offsetof(SaveGameManager_LoadGame, bPreValidateMetadata) == 0x000010, "Member 'SaveGameManager_LoadGame::bPreValidateMetadata' has a wrong offset!");
static_assert(offsetof(SaveGameManager_LoadGame, ReturnValue) == 0x000011, "Member 'SaveGameManager_LoadGame::ReturnValue' has a wrong offset!");

// Function Indiana.SaveGameManager.OnActorDestroyed
// 0x0008 (0x0008 - 0x0000)
struct SaveGameManager_OnActorDestroyed final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SaveGameManager_OnActorDestroyed) == 0x000008, "Wrong alignment on SaveGameManager_OnActorDestroyed");
static_assert(sizeof(SaveGameManager_OnActorDestroyed) == 0x000008, "Wrong size on SaveGameManager_OnActorDestroyed");
static_assert(offsetof(SaveGameManager_OnActorDestroyed, Actor) == 0x000000, "Member 'SaveGameManager_OnActorDestroyed::Actor' has a wrong offset!");

// Function Indiana.SaveGameManager.OnPromptedSaveSaveMenuClosed
// 0x0001 (0x0001 - 0x0000)
struct SaveGameManager_OnPromptedSaveSaveMenuClosed final
{
public:
	bool                                          bForced;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SaveGameManager_OnPromptedSaveSaveMenuClosed) == 0x000001, "Wrong alignment on SaveGameManager_OnPromptedSaveSaveMenuClosed");
static_assert(sizeof(SaveGameManager_OnPromptedSaveSaveMenuClosed) == 0x000001, "Wrong size on SaveGameManager_OnPromptedSaveSaveMenuClosed");
static_assert(offsetof(SaveGameManager_OnPromptedSaveSaveMenuClosed, bForced) == 0x000000, "Member 'SaveGameManager_OnPromptedSaveSaveMenuClosed::bForced' has a wrong offset!");

// Function Indiana.SaveGameManager.Quickload
// 0x0001 (0x0001 - 0x0000)
struct SaveGameManager_Quickload final
{
public:
	ELoadGameResult                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SaveGameManager_Quickload) == 0x000001, "Wrong alignment on SaveGameManager_Quickload");
static_assert(sizeof(SaveGameManager_Quickload) == 0x000001, "Wrong size on SaveGameManager_Quickload");
static_assert(offsetof(SaveGameManager_Quickload, ReturnValue) == 0x000000, "Member 'SaveGameManager_Quickload::ReturnValue' has a wrong offset!");

// Function Indiana.SaveGameManager.Quicksave
// 0x0001 (0x0001 - 0x0000)
struct SaveGameManager_Quicksave final
{
public:
	ESaveGameResult                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SaveGameManager_Quicksave) == 0x000001, "Wrong alignment on SaveGameManager_Quicksave");
static_assert(sizeof(SaveGameManager_Quicksave) == 0x000001, "Wrong size on SaveGameManager_Quicksave");
static_assert(offsetof(SaveGameManager_Quicksave, ReturnValue) == 0x000000, "Member 'SaveGameManager_Quicksave::ReturnValue' has a wrong offset!");

// Function Indiana.SaveGameManager.SaveGame
// 0x0018 (0x0018 - 0x0000)
struct SaveGameManager_SaveGame final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreSuperNova;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESaveGameType                                 SaveGameType;                                      // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESaveGameResult                               ReturnValue;                                       // 0x0012(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SaveGameManager_SaveGame) == 0x000008, "Wrong alignment on SaveGameManager_SaveGame");
static_assert(sizeof(SaveGameManager_SaveGame) == 0x000018, "Wrong size on SaveGameManager_SaveGame");
static_assert(offsetof(SaveGameManager_SaveGame, Filename) == 0x000000, "Member 'SaveGameManager_SaveGame::Filename' has a wrong offset!");
static_assert(offsetof(SaveGameManager_SaveGame, bIgnoreSuperNova) == 0x000010, "Member 'SaveGameManager_SaveGame::bIgnoreSuperNova' has a wrong offset!");
static_assert(offsetof(SaveGameManager_SaveGame, SaveGameType) == 0x000011, "Member 'SaveGameManager_SaveGame::SaveGameType' has a wrong offset!");
static_assert(offsetof(SaveGameManager_SaveGame, ReturnValue) == 0x000012, "Member 'SaveGameManager_SaveGame::ReturnValue' has a wrong offset!");

// Function Indiana.SaveGameManager.SaveUserGameSettings
// 0x0001 (0x0001 - 0x0000)
struct SaveGameManager_SaveUserGameSettings final
{
public:
	bool                                          bSettingsPotentiallyChanged;                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SaveGameManager_SaveUserGameSettings) == 0x000001, "Wrong alignment on SaveGameManager_SaveUserGameSettings");
static_assert(sizeof(SaveGameManager_SaveUserGameSettings) == 0x000001, "Wrong size on SaveGameManager_SaveUserGameSettings");
static_assert(offsetof(SaveGameManager_SaveUserGameSettings, bSettingsPotentiallyChanged) == 0x000000, "Member 'SaveGameManager_SaveUserGameSettings::bSettingsPotentiallyChanged' has a wrong offset!");

// Function Indiana.StaminaComponent.OnCauseDamage
// 0x0110 (0x0110 - 0x0000)
struct StaminaComponent_OnCauseDamage final
{
public:
	struct FCauseDamageInfo                       CauseDamageInfo;                                   // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaminaComponent_OnCauseDamage) == 0x000008, "Wrong alignment on StaminaComponent_OnCauseDamage");
static_assert(sizeof(StaminaComponent_OnCauseDamage) == 0x000110, "Wrong size on StaminaComponent_OnCauseDamage");
static_assert(offsetof(StaminaComponent_OnCauseDamage, CauseDamageInfo) == 0x000000, "Member 'StaminaComponent_OnCauseDamage::CauseDamageInfo' has a wrong offset!");

// Function Indiana.StaminaComponent.StaminaConsume
// 0x0004 (0x0004 - 0x0000)
struct StaminaComponent_StaminaConsume final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaminaComponent_StaminaConsume) == 0x000004, "Wrong alignment on StaminaComponent_StaminaConsume");
static_assert(sizeof(StaminaComponent_StaminaConsume) == 0x000004, "Wrong size on StaminaComponent_StaminaConsume");
static_assert(offsetof(StaminaComponent_StaminaConsume, Amount) == 0x000000, "Member 'StaminaComponent_StaminaConsume::Amount' has a wrong offset!");

// Function Indiana.StaminaComponent.StaminaReplenish
// 0x0004 (0x0004 - 0x0000)
struct StaminaComponent_StaminaReplenish final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaminaComponent_StaminaReplenish) == 0x000004, "Wrong alignment on StaminaComponent_StaminaReplenish");
static_assert(sizeof(StaminaComponent_StaminaReplenish) == 0x000004, "Wrong size on StaminaComponent_StaminaReplenish");
static_assert(offsetof(StaminaComponent_StaminaReplenish, Amount) == 0x000000, "Member 'StaminaComponent_StaminaReplenish::Amount' has a wrong offset!");

// Function Indiana.StaminaComponent.GetMaxValue
// 0x0004 (0x0004 - 0x0000)
struct StaminaComponent_GetMaxValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaminaComponent_GetMaxValue) == 0x000004, "Wrong alignment on StaminaComponent_GetMaxValue");
static_assert(sizeof(StaminaComponent_GetMaxValue) == 0x000004, "Wrong size on StaminaComponent_GetMaxValue");
static_assert(offsetof(StaminaComponent_GetMaxValue, ReturnValue) == 0x000000, "Member 'StaminaComponent_GetMaxValue::ReturnValue' has a wrong offset!");

// Function Indiana.StaminaComponent.GetNormalizedValue
// 0x0004 (0x0004 - 0x0000)
struct StaminaComponent_GetNormalizedValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaminaComponent_GetNormalizedValue) == 0x000004, "Wrong alignment on StaminaComponent_GetNormalizedValue");
static_assert(sizeof(StaminaComponent_GetNormalizedValue) == 0x000004, "Wrong size on StaminaComponent_GetNormalizedValue");
static_assert(offsetof(StaminaComponent_GetNormalizedValue, ReturnValue) == 0x000000, "Member 'StaminaComponent_GetNormalizedValue::ReturnValue' has a wrong offset!");

// Function Indiana.StaminaComponent.GetValue
// 0x0004 (0x0004 - 0x0000)
struct StaminaComponent_GetValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaminaComponent_GetValue) == 0x000004, "Wrong alignment on StaminaComponent_GetValue");
static_assert(sizeof(StaminaComponent_GetValue) == 0x000004, "Wrong size on StaminaComponent_GetValue");
static_assert(offsetof(StaminaComponent_GetValue, ReturnValue) == 0x000000, "Member 'StaminaComponent_GetValue::ReturnValue' has a wrong offset!");

// Function Indiana.ShipLocation.OnShipLocationChanged
// 0x0008 (0x0008 - 0x0000)
struct ShipLocation_OnShipLocationChanged final
{
public:
	const class UShipDestinationData*             NewLocation;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShipLocation_OnShipLocationChanged) == 0x000008, "Wrong alignment on ShipLocation_OnShipLocationChanged");
static_assert(sizeof(ShipLocation_OnShipLocationChanged) == 0x000008, "Wrong size on ShipLocation_OnShipLocationChanged");
static_assert(offsetof(ShipLocation_OnShipLocationChanged, NewLocation) == 0x000000, "Member 'ShipLocation_OnShipLocationChanged::NewLocation' has a wrong offset!");

// Function Indiana.ReputationSummaryWidget.OnFactionReputationChanged
// 0x0020 (0x0020 - 0x0000)
struct ReputationSummaryWidget_OnFactionReputationChanged final
{
public:
	const class UFactionData*                     FactionData;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EReputationType                               ReputationType;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Amount;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UReputationData*                  ReputationBefore;                                  // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UReputationData*                  ReputationAfter;                                   // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReputationSummaryWidget_OnFactionReputationChanged) == 0x000008, "Wrong alignment on ReputationSummaryWidget_OnFactionReputationChanged");
static_assert(sizeof(ReputationSummaryWidget_OnFactionReputationChanged) == 0x000020, "Wrong size on ReputationSummaryWidget_OnFactionReputationChanged");
static_assert(offsetof(ReputationSummaryWidget_OnFactionReputationChanged, FactionData) == 0x000000, "Member 'ReputationSummaryWidget_OnFactionReputationChanged::FactionData' has a wrong offset!");
static_assert(offsetof(ReputationSummaryWidget_OnFactionReputationChanged, ReputationType) == 0x000008, "Member 'ReputationSummaryWidget_OnFactionReputationChanged::ReputationType' has a wrong offset!");
static_assert(offsetof(ReputationSummaryWidget_OnFactionReputationChanged, Amount) == 0x00000C, "Member 'ReputationSummaryWidget_OnFactionReputationChanged::Amount' has a wrong offset!");
static_assert(offsetof(ReputationSummaryWidget_OnFactionReputationChanged, ReputationBefore) == 0x000010, "Member 'ReputationSummaryWidget_OnFactionReputationChanged::ReputationBefore' has a wrong offset!");
static_assert(offsetof(ReputationSummaryWidget_OnFactionReputationChanged, ReputationAfter) == 0x000018, "Member 'ReputationSummaryWidget_OnFactionReputationChanged::ReputationAfter' has a wrong offset!");

// Function Indiana.RestrictedArea.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct RestrictedArea_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RestrictedArea_IsEnabled) == 0x000001, "Wrong alignment on RestrictedArea_IsEnabled");
static_assert(sizeof(RestrictedArea_IsEnabled) == 0x000001, "Wrong size on RestrictedArea_IsEnabled");
static_assert(offsetof(RestrictedArea_IsEnabled, ReturnValue) == 0x000000, "Member 'RestrictedArea_IsEnabled::ReturnValue' has a wrong offset!");

// Function Indiana.SkillStatusEffect.OnSpawnedEffectCleared
// 0x0008 (0x0008 - 0x0000)
struct SkillStatusEffect_OnSpawnedEffectCleared final
{
public:
	class UStatusEffect*                          SpawnedEffect;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkillStatusEffect_OnSpawnedEffectCleared) == 0x000008, "Wrong alignment on SkillStatusEffect_OnSpawnedEffectCleared");
static_assert(sizeof(SkillStatusEffect_OnSpawnedEffectCleared) == 0x000008, "Wrong size on SkillStatusEffect_OnSpawnedEffectCleared");
static_assert(offsetof(SkillStatusEffect_OnSpawnedEffectCleared, SpawnedEffect) == 0x000000, "Member 'SkillStatusEffect_OnSpawnedEffectCleared::SpawnedEffect' has a wrong offset!");

// Function Indiana.ReticleWidget.OnCombatStateChanged
// 0x0002 (0x0002 - 0x0000)
struct ReticleWidget_OnCombatStateChanged final
{
public:
	bool                                          bCombatIn;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestoring;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReticleWidget_OnCombatStateChanged) == 0x000001, "Wrong alignment on ReticleWidget_OnCombatStateChanged");
static_assert(sizeof(ReticleWidget_OnCombatStateChanged) == 0x000002, "Wrong size on ReticleWidget_OnCombatStateChanged");
static_assert(offsetof(ReticleWidget_OnCombatStateChanged, bCombatIn) == 0x000000, "Member 'ReticleWidget_OnCombatStateChanged::bCombatIn' has a wrong offset!");
static_assert(offsetof(ReticleWidget_OnCombatStateChanged, bRestoring) == 0x000001, "Member 'ReticleWidget_OnCombatStateChanged::bRestoring' has a wrong offset!");

// Function Indiana.ReticleWidget.OnHUDVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct ReticleWidget_OnHUDVisibilityChanged final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReticleWidget_OnHUDVisibilityChanged) == 0x000001, "Wrong alignment on ReticleWidget_OnHUDVisibilityChanged");
static_assert(sizeof(ReticleWidget_OnHUDVisibilityChanged) == 0x000001, "Wrong size on ReticleWidget_OnHUDVisibilityChanged");
static_assert(offsetof(ReticleWidget_OnHUDVisibilityChanged, bVisible) == 0x000000, "Member 'ReticleWidget_OnHUDVisibilityChanged::bVisible' has a wrong offset!");

// Function Indiana.ReticleWidget.OnReticleModeChanged
// 0x0004 (0x0004 - 0x0000)
struct ReticleWidget_OnReticleModeChanged final
{
public:
	int32                                         ModeIn;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReticleWidget_OnReticleModeChanged) == 0x000004, "Wrong alignment on ReticleWidget_OnReticleModeChanged");
static_assert(sizeof(ReticleWidget_OnReticleModeChanged) == 0x000004, "Wrong size on ReticleWidget_OnReticleModeChanged");
static_assert(offsetof(ReticleWidget_OnReticleModeChanged, ModeIn) == 0x000000, "Member 'ReticleWidget_OnReticleModeChanged::ModeIn' has a wrong offset!");

// Function Indiana.ReticleWidget.OnTTDReticleMeterModeChanged
// 0x0004 (0x0004 - 0x0000)
struct ReticleWidget_OnTTDReticleMeterModeChanged final
{
public:
	int32                                         bVisible;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReticleWidget_OnTTDReticleMeterModeChanged) == 0x000004, "Wrong alignment on ReticleWidget_OnTTDReticleMeterModeChanged");
static_assert(sizeof(ReticleWidget_OnTTDReticleMeterModeChanged) == 0x000004, "Wrong size on ReticleWidget_OnTTDReticleMeterModeChanged");
static_assert(offsetof(ReticleWidget_OnTTDReticleMeterModeChanged, bVisible) == 0x000000, "Member 'ReticleWidget_OnTTDReticleMeterModeChanged::bVisible' has a wrong offset!");

// Function Indiana.ReticleWidget.SetTTDProgressRatio
// 0x0004 (0x0004 - 0x0000)
struct ReticleWidget_SetTTDProgressRatio final
{
public:
	float                                         NewTTDRatio;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReticleWidget_SetTTDProgressRatio) == 0x000004, "Wrong alignment on ReticleWidget_SetTTDProgressRatio");
static_assert(sizeof(ReticleWidget_SetTTDProgressRatio) == 0x000004, "Wrong size on ReticleWidget_SetTTDProgressRatio");
static_assert(offsetof(ReticleWidget_SetTTDProgressRatio, NewTTDRatio) == 0x000000, "Member 'ReticleWidget_SetTTDProgressRatio::NewTTDRatio' has a wrong offset!");

// Function Indiana.RockFoliageTool.MoveBigScaleInstanceToFoliageType
// 0x0020 (0x0020 - 0x0000)
struct RockFoliageTool_MoveBigScaleInstanceToFoliageType final
{
public:
	class AInstancedFoliageActor*                 IFA;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFoliageType*                           OldType;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFoliageType*                           NewType;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InstanceScale;                                     // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RockFoliageTool_MoveBigScaleInstanceToFoliageType) == 0x000008, "Wrong alignment on RockFoliageTool_MoveBigScaleInstanceToFoliageType");
static_assert(sizeof(RockFoliageTool_MoveBigScaleInstanceToFoliageType) == 0x000020, "Wrong size on RockFoliageTool_MoveBigScaleInstanceToFoliageType");
static_assert(offsetof(RockFoliageTool_MoveBigScaleInstanceToFoliageType, IFA) == 0x000000, "Member 'RockFoliageTool_MoveBigScaleInstanceToFoliageType::IFA' has a wrong offset!");
static_assert(offsetof(RockFoliageTool_MoveBigScaleInstanceToFoliageType, OldType) == 0x000008, "Member 'RockFoliageTool_MoveBigScaleInstanceToFoliageType::OldType' has a wrong offset!");
static_assert(offsetof(RockFoliageTool_MoveBigScaleInstanceToFoliageType, NewType) == 0x000010, "Member 'RockFoliageTool_MoveBigScaleInstanceToFoliageType::NewType' has a wrong offset!");
static_assert(offsetof(RockFoliageTool_MoveBigScaleInstanceToFoliageType, InstanceScale) == 0x000018, "Member 'RockFoliageTool_MoveBigScaleInstanceToFoliageType::InstanceScale' has a wrong offset!");

// Function Indiana.StatusEffectTagWidget.OnStatusEffectAdded
// 0x0010 (0x0010 - 0x0000)
struct StatusEffectTagWidget_OnStatusEffectAdded final
{
public:
	class UStatusEffectManagerComponent*          Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStatusEffect*                          StatusEffect;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffectTagWidget_OnStatusEffectAdded) == 0x000008, "Wrong alignment on StatusEffectTagWidget_OnStatusEffectAdded");
static_assert(sizeof(StatusEffectTagWidget_OnStatusEffectAdded) == 0x000010, "Wrong size on StatusEffectTagWidget_OnStatusEffectAdded");
static_assert(offsetof(StatusEffectTagWidget_OnStatusEffectAdded, Sender) == 0x000000, "Member 'StatusEffectTagWidget_OnStatusEffectAdded::Sender' has a wrong offset!");
static_assert(offsetof(StatusEffectTagWidget_OnStatusEffectAdded, StatusEffect) == 0x000008, "Member 'StatusEffectTagWidget_OnStatusEffectAdded::StatusEffect' has a wrong offset!");

// Function Indiana.StatusEffectTagWidget.OnStatusEffectRemoved
// 0x0010 (0x0010 - 0x0000)
struct StatusEffectTagWidget_OnStatusEffectRemoved final
{
public:
	class UStatusEffectManagerComponent*          Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStatusEffect*                          StatusEffect;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffectTagWidget_OnStatusEffectRemoved) == 0x000008, "Wrong alignment on StatusEffectTagWidget_OnStatusEffectRemoved");
static_assert(sizeof(StatusEffectTagWidget_OnStatusEffectRemoved) == 0x000010, "Wrong size on StatusEffectTagWidget_OnStatusEffectRemoved");
static_assert(offsetof(StatusEffectTagWidget_OnStatusEffectRemoved, Sender) == 0x000000, "Member 'StatusEffectTagWidget_OnStatusEffectRemoved::Sender' has a wrong offset!");
static_assert(offsetof(StatusEffectTagWidget_OnStatusEffectRemoved, StatusEffect) == 0x000008, "Member 'StatusEffectTagWidget_OnStatusEffectRemoved::StatusEffect' has a wrong offset!");

// Function Indiana.RpgStatComponent.OnCollectionStatUpdated
// 0x0008 (0x0008 - 0x0000)
struct RpgStatComponent_OnCollectionStatUpdated final
{
public:
	const class URpgStat*                         Stat;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RpgStatComponent_OnCollectionStatUpdated) == 0x000008, "Wrong alignment on RpgStatComponent_OnCollectionStatUpdated");
static_assert(sizeof(RpgStatComponent_OnCollectionStatUpdated) == 0x000008, "Wrong size on RpgStatComponent_OnCollectionStatUpdated");
static_assert(offsetof(RpgStatComponent_OnCollectionStatUpdated, Stat) == 0x000000, "Member 'RpgStatComponent_OnCollectionStatUpdated::Stat' has a wrong offset!");

// Function Indiana.RpgStatComponent.RemoveModifier
// 0x0028 (0x0028 - 0x0000)
struct RpgStatComponent_RemoveModifier final
{
public:
	const class UObject*                          SourceObject;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SourceId;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStatModifierDescription               StatModifier;                                      // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RpgStatComponent_RemoveModifier) == 0x000008, "Wrong alignment on RpgStatComponent_RemoveModifier");
static_assert(sizeof(RpgStatComponent_RemoveModifier) == 0x000028, "Wrong size on RpgStatComponent_RemoveModifier");
static_assert(offsetof(RpgStatComponent_RemoveModifier, SourceObject) == 0x000000, "Member 'RpgStatComponent_RemoveModifier::SourceObject' has a wrong offset!");
static_assert(offsetof(RpgStatComponent_RemoveModifier, SourceId) == 0x000008, "Member 'RpgStatComponent_RemoveModifier::SourceId' has a wrong offset!");
static_assert(offsetof(RpgStatComponent_RemoveModifier, StatModifier) == 0x000010, "Member 'RpgStatComponent_RemoveModifier::StatModifier' has a wrong offset!");

// Function Indiana.RpgStatComponent.RpgStatAddModifierDebug
// 0x000C (0x000C - 0x0000)
struct RpgStatComponent_RpgStatAddModifierDebug final
{
public:
	class FName                                   Stat;                                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RpgStatComponent_RpgStatAddModifierDebug) == 0x000004, "Wrong alignment on RpgStatComponent_RpgStatAddModifierDebug");
static_assert(sizeof(RpgStatComponent_RpgStatAddModifierDebug) == 0x00000C, "Wrong size on RpgStatComponent_RpgStatAddModifierDebug");
static_assert(offsetof(RpgStatComponent_RpgStatAddModifierDebug, Stat) == 0x000000, "Member 'RpgStatComponent_RpgStatAddModifierDebug::Stat' has a wrong offset!");
static_assert(offsetof(RpgStatComponent_RpgStatAddModifierDebug, Value) == 0x000008, "Member 'RpgStatComponent_RpgStatAddModifierDebug::Value' has a wrong offset!");

// Function Indiana.RpgStatComponent.RpgStatRemoveModifierDebug
// 0x0008 (0x0008 - 0x0000)
struct RpgStatComponent_RpgStatRemoveModifierDebug final
{
public:
	class FName                                   Stat;                                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RpgStatComponent_RpgStatRemoveModifierDebug) == 0x000004, "Wrong alignment on RpgStatComponent_RpgStatRemoveModifierDebug");
static_assert(sizeof(RpgStatComponent_RpgStatRemoveModifierDebug) == 0x000008, "Wrong size on RpgStatComponent_RpgStatRemoveModifierDebug");
static_assert(offsetof(RpgStatComponent_RpgStatRemoveModifierDebug, Stat) == 0x000000, "Member 'RpgStatComponent_RpgStatRemoveModifierDebug::Stat' has a wrong offset!");

// Function Indiana.RpgStatComponent.SetModifier
// 0x0028 (0x0028 - 0x0000)
struct RpgStatComponent_SetModifier final
{
public:
	const class UObject*                          SourceObject;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SourceId;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStatModifierDescription               StatModifier;                                      // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RpgStatComponent_SetModifier) == 0x000008, "Wrong alignment on RpgStatComponent_SetModifier");
static_assert(sizeof(RpgStatComponent_SetModifier) == 0x000028, "Wrong size on RpgStatComponent_SetModifier");
static_assert(offsetof(RpgStatComponent_SetModifier, SourceObject) == 0x000000, "Member 'RpgStatComponent_SetModifier::SourceObject' has a wrong offset!");
static_assert(offsetof(RpgStatComponent_SetModifier, SourceId) == 0x000008, "Member 'RpgStatComponent_SetModifier::SourceId' has a wrong offset!");
static_assert(offsetof(RpgStatComponent_SetModifier, StatModifier) == 0x000010, "Member 'RpgStatComponent_SetModifier::StatModifier' has a wrong offset!");

// Function Indiana.RpgStatComponent.GetValue
// 0x0018 (0x0018 - 0x0000)
struct RpgStatComponent_GetValue final
{
public:
	const class URpgStat*                         Stat;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERpgStatGroupMask                             StatGroupMask;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InputValue;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RpgStatComponent_GetValue) == 0x000008, "Wrong alignment on RpgStatComponent_GetValue");
static_assert(sizeof(RpgStatComponent_GetValue) == 0x000018, "Wrong size on RpgStatComponent_GetValue");
static_assert(offsetof(RpgStatComponent_GetValue, Stat) == 0x000000, "Member 'RpgStatComponent_GetValue::Stat' has a wrong offset!");
static_assert(offsetof(RpgStatComponent_GetValue, StatGroupMask) == 0x000008, "Member 'RpgStatComponent_GetValue::StatGroupMask' has a wrong offset!");
static_assert(offsetof(RpgStatComponent_GetValue, InputValue) == 0x00000C, "Member 'RpgStatComponent_GetValue::InputValue' has a wrong offset!");
static_assert(offsetof(RpgStatComponent_GetValue, ReturnValue) == 0x000010, "Member 'RpgStatComponent_GetValue::ReturnValue' has a wrong offset!");

// Function Indiana.RpgStatComponent.RpgStatShowStat
// 0x0010 (0x0010 - 0x0000)
struct RpgStatComponent_RpgStatShowStat final
{
public:
	class FString                                 Stat;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RpgStatComponent_RpgStatShowStat) == 0x000008, "Wrong alignment on RpgStatComponent_RpgStatShowStat");
static_assert(sizeof(RpgStatComponent_RpgStatShowStat) == 0x000010, "Wrong size on RpgStatComponent_RpgStatShowStat");
static_assert(offsetof(RpgStatComponent_RpgStatShowStat, Stat) == 0x000000, "Member 'RpgStatComponent_RpgStatShowStat::Stat' has a wrong offset!");

// Function Indiana.StatusTagAwarenessWidget.SetTalkImage
// 0x0008 (0x0008 - 0x0000)
struct StatusTagAwarenessWidget_SetTalkImage final
{
public:
	class UTexture2D*                             TalkTexture;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusTagAwarenessWidget_SetTalkImage) == 0x000008, "Wrong alignment on StatusTagAwarenessWidget_SetTalkImage");
static_assert(sizeof(StatusTagAwarenessWidget_SetTalkImage) == 0x000008, "Wrong size on StatusTagAwarenessWidget_SetTalkImage");
static_assert(offsetof(StatusTagAwarenessWidget_SetTalkImage, TalkTexture) == 0x000000, "Member 'StatusTagAwarenessWidget_SetTalkImage::TalkTexture' has a wrong offset!");

// Function Indiana.StatusTagAwarenessWidget.SetTextures
// 0x0010 (0x0010 - 0x0000)
struct StatusTagAwarenessWidget_SetTextures final
{
public:
	class UTexture2D*                             BackingTexture;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             FillTexture;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusTagAwarenessWidget_SetTextures) == 0x000008, "Wrong alignment on StatusTagAwarenessWidget_SetTextures");
static_assert(sizeof(StatusTagAwarenessWidget_SetTextures) == 0x000010, "Wrong size on StatusTagAwarenessWidget_SetTextures");
static_assert(offsetof(StatusTagAwarenessWidget_SetTextures, BackingTexture) == 0x000000, "Member 'StatusTagAwarenessWidget_SetTextures::BackingTexture' has a wrong offset!");
static_assert(offsetof(StatusTagAwarenessWidget_SetTextures, FillTexture) == 0x000008, "Member 'StatusTagAwarenessWidget_SetTextures::FillTexture' has a wrong offset!");

// Function Indiana.SaveLoadMenuWidget.OnActiveUserChanged
// 0x0001 (0x0001 - 0x0000)
struct SaveLoadMenuWidget_OnActiveUserChanged final
{
public:
	EActiveUserChangeType                         ChangeType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SaveLoadMenuWidget_OnActiveUserChanged) == 0x000001, "Wrong alignment on SaveLoadMenuWidget_OnActiveUserChanged");
static_assert(sizeof(SaveLoadMenuWidget_OnActiveUserChanged) == 0x000001, "Wrong size on SaveLoadMenuWidget_OnActiveUserChanged");
static_assert(offsetof(SaveLoadMenuWidget_OnActiveUserChanged, ChangeType) == 0x000000, "Member 'SaveLoadMenuWidget_OnActiveUserChanged::ChangeType' has a wrong offset!");

// Function Indiana.SaveLoadMenuWidget.OnLoadComplete
// 0x0018 (0x0018 - 0x0000)
struct SaveLoadMenuWidget_OnLoadComplete final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoadGameResult                               Result;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SaveLoadMenuWidget_OnLoadComplete) == 0x000008, "Wrong alignment on SaveLoadMenuWidget_OnLoadComplete");
static_assert(sizeof(SaveLoadMenuWidget_OnLoadComplete) == 0x000018, "Wrong size on SaveLoadMenuWidget_OnLoadComplete");
static_assert(offsetof(SaveLoadMenuWidget_OnLoadComplete, Filename) == 0x000000, "Member 'SaveLoadMenuWidget_OnLoadComplete::Filename' has a wrong offset!");
static_assert(offsetof(SaveLoadMenuWidget_OnLoadComplete, Result) == 0x000010, "Member 'SaveLoadMenuWidget_OnLoadComplete::Result' has a wrong offset!");

// Function Indiana.SaveLoadMenuWidget.OnPS4LoadInturrupted
// 0x0010 (0x0010 - 0x0000)
struct SaveLoadMenuWidget_OnPS4LoadInturrupted final
{
public:
	class FString                                 SaveName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SaveLoadMenuWidget_OnPS4LoadInturrupted) == 0x000008, "Wrong alignment on SaveLoadMenuWidget_OnPS4LoadInturrupted");
static_assert(sizeof(SaveLoadMenuWidget_OnPS4LoadInturrupted) == 0x000010, "Wrong size on SaveLoadMenuWidget_OnPS4LoadInturrupted");
static_assert(offsetof(SaveLoadMenuWidget_OnPS4LoadInturrupted, SaveName) == 0x000000, "Member 'SaveLoadMenuWidget_OnPS4LoadInturrupted::SaveName' has a wrong offset!");

// Function Indiana.StealthComponent.OnBumped
// 0x00A8 (0x00A8 - 0x0000)
struct StealthComponent_OnBumped final
{
public:
	class AActor*                                 SelfActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x001C(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StealthComponent_OnBumped) == 0x000008, "Wrong alignment on StealthComponent_OnBumped");
static_assert(sizeof(StealthComponent_OnBumped) == 0x0000A8, "Wrong size on StealthComponent_OnBumped");
static_assert(offsetof(StealthComponent_OnBumped, SelfActor) == 0x000000, "Member 'StealthComponent_OnBumped::SelfActor' has a wrong offset!");
static_assert(offsetof(StealthComponent_OnBumped, OtherActor) == 0x000008, "Member 'StealthComponent_OnBumped::OtherActor' has a wrong offset!");
static_assert(offsetof(StealthComponent_OnBumped, NormalImpulse) == 0x000010, "Member 'StealthComponent_OnBumped::NormalImpulse' has a wrong offset!");
static_assert(offsetof(StealthComponent_OnBumped, Hit) == 0x00001C, "Member 'StealthComponent_OnBumped::Hit' has a wrong offset!");

// Function Indiana.StealthComponent.OnPickpocketDetectionChange
// 0x0010 (0x0010 - 0x0000)
struct StealthComponent_OnPickpocketDetectionChange final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAlertState                                   PreviousAlertState;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAlertState                                   TargetAlertState;                                  // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestoring;                                        // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StealthComponent_OnPickpocketDetectionChange) == 0x000008, "Wrong alignment on StealthComponent_OnPickpocketDetectionChange");
static_assert(sizeof(StealthComponent_OnPickpocketDetectionChange) == 0x000010, "Wrong size on StealthComponent_OnPickpocketDetectionChange");
static_assert(offsetof(StealthComponent_OnPickpocketDetectionChange, TargetActor) == 0x000000, "Member 'StealthComponent_OnPickpocketDetectionChange::TargetActor' has a wrong offset!");
static_assert(offsetof(StealthComponent_OnPickpocketDetectionChange, PreviousAlertState) == 0x000008, "Member 'StealthComponent_OnPickpocketDetectionChange::PreviousAlertState' has a wrong offset!");
static_assert(offsetof(StealthComponent_OnPickpocketDetectionChange, TargetAlertState) == 0x000009, "Member 'StealthComponent_OnPickpocketDetectionChange::TargetAlertState' has a wrong offset!");
static_assert(offsetof(StealthComponent_OnPickpocketDetectionChange, bRestoring) == 0x00000A, "Member 'StealthComponent_OnPickpocketDetectionChange::bRestoring' has a wrong offset!");

// Function Indiana.TTDEnemyScanner.OnHUDVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct TTDEnemyScanner_OnHUDVisibilityChanged final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TTDEnemyScanner_OnHUDVisibilityChanged) == 0x000001, "Wrong alignment on TTDEnemyScanner_OnHUDVisibilityChanged");
static_assert(sizeof(TTDEnemyScanner_OnHUDVisibilityChanged) == 0x000001, "Wrong size on TTDEnemyScanner_OnHUDVisibilityChanged");
static_assert(offsetof(TTDEnemyScanner_OnHUDVisibilityChanged, bVisible) == 0x000000, "Member 'TTDEnemyScanner_OnHUDVisibilityChanged::bVisible' has a wrong offset!");

// Function Indiana.TTDEnemyScanner.OnTTDScannerVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct TTDEnemyScanner_OnTTDScannerVisibilityChanged final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TTDEnemyScanner_OnTTDScannerVisibilityChanged) == 0x000001, "Wrong alignment on TTDEnemyScanner_OnTTDScannerVisibilityChanged");
static_assert(sizeof(TTDEnemyScanner_OnTTDScannerVisibilityChanged) == 0x000001, "Wrong size on TTDEnemyScanner_OnTTDScannerVisibilityChanged");
static_assert(offsetof(TTDEnemyScanner_OnTTDScannerVisibilityChanged, bVisible) == 0x000000, "Member 'TTDEnemyScanner_OnTTDScannerVisibilityChanged::bVisible' has a wrong offset!");

// Function Indiana.TutorialList.AddNewCompletedTutorial
// 0x0001 (0x0001 - 0x0000)
struct TutorialList_AddNewCompletedTutorial final
{
public:
	ETutorialEvent                                TutorialEvent;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialList_AddNewCompletedTutorial) == 0x000001, "Wrong alignment on TutorialList_AddNewCompletedTutorial");
static_assert(sizeof(TutorialList_AddNewCompletedTutorial) == 0x000001, "Wrong size on TutorialList_AddNewCompletedTutorial");
static_assert(offsetof(TutorialList_AddNewCompletedTutorial, TutorialEvent) == 0x000000, "Member 'TutorialList_AddNewCompletedTutorial::TutorialEvent' has a wrong offset!");

// Function Indiana.Scripts.AchievementCompleted
// 0x0008 (0x0008 - 0x0000)
struct Scripts_AchievementCompleted final
{
public:
	class FName                                   AchievementName;                                   // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_AchievementCompleted) == 0x000004, "Wrong alignment on Scripts_AchievementCompleted");
static_assert(sizeof(Scripts_AchievementCompleted) == 0x000008, "Wrong size on Scripts_AchievementCompleted");
static_assert(offsetof(Scripts_AchievementCompleted, AchievementName) == 0x000000, "Member 'Scripts_AchievementCompleted::AchievementName' has a wrong offset!");

// Function Indiana.Scripts.AchievementIncrement
// 0x000C (0x000C - 0x0000)
struct Scripts_AchievementIncrement final
{
public:
	class FName                                   AchievementName;                                   // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_AchievementIncrement) == 0x000004, "Wrong alignment on Scripts_AchievementIncrement");
static_assert(sizeof(Scripts_AchievementIncrement) == 0x00000C, "Wrong size on Scripts_AchievementIncrement");
static_assert(offsetof(Scripts_AchievementIncrement, AchievementName) == 0x000000, "Member 'Scripts_AchievementIncrement::AchievementName' has a wrong offset!");
static_assert(offsetof(Scripts_AchievementIncrement, Count) == 0x000008, "Member 'Scripts_AchievementIncrement::Count' has a wrong offset!");

// Function Indiana.Scripts.AddAudioLog
// 0x0018 (0x0018 - 0x0000)
struct Scripts_AddAudioLog final
{
public:
	class FString                                 Audiolog;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayOnPickup;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Scripts_AddAudioLog) == 0x000008, "Wrong alignment on Scripts_AddAudioLog");
static_assert(sizeof(Scripts_AddAudioLog) == 0x000018, "Wrong size on Scripts_AddAudioLog");
static_assert(offsetof(Scripts_AddAudioLog, Audiolog) == 0x000000, "Member 'Scripts_AddAudioLog::Audiolog' has a wrong offset!");
static_assert(offsetof(Scripts_AddAudioLog, bPlayOnPickup) == 0x000010, "Member 'Scripts_AddAudioLog::bPlayOnPickup' has a wrong offset!");

// Function Indiana.Scripts.AddAudioLogBP
// 0x0010 (0x0010 - 0x0000)
struct Scripts_AddAudioLogBP final
{
public:
	class UAudioLogDataAsset*                     Audiolog;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayOnPickup;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Scripts_AddAudioLogBP) == 0x000008, "Wrong alignment on Scripts_AddAudioLogBP");
static_assert(sizeof(Scripts_AddAudioLogBP) == 0x000010, "Wrong size on Scripts_AddAudioLogBP");
static_assert(offsetof(Scripts_AddAudioLogBP, Audiolog) == 0x000000, "Member 'Scripts_AddAudioLogBP::Audiolog' has a wrong offset!");
static_assert(offsetof(Scripts_AddAudioLogBP, bPlayOnPickup) == 0x000008, "Member 'Scripts_AddAudioLogBP::bPlayOnPickup' has a wrong offset!");

// Function Indiana.Scripts.AddCompanionToParty
// 0x0010 (0x0010 - 0x0000)
struct Scripts_AddCompanionToParty final
{
public:
	struct FGuid                                  CompanionID;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_AddCompanionToParty) == 0x000004, "Wrong alignment on Scripts_AddCompanionToParty");
static_assert(sizeof(Scripts_AddCompanionToParty) == 0x000010, "Wrong size on Scripts_AddCompanionToParty");
static_assert(offsetof(Scripts_AddCompanionToParty, CompanionID) == 0x000000, "Member 'Scripts_AddCompanionToParty::CompanionID' has a wrong offset!");

// Function Indiana.Scripts.AdjustCompanionMoral
// 0x000C (0x000C - 0x0000)
struct Scripts_AdjustCompanionMoral final
{
public:
	ESpecialObsidianID                            CompanionID;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPositiveMoralAdjustment;                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMoraleContribution                           Contribution;                                      // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CustomAmount;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyActivePartyMembers;                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Scripts_AdjustCompanionMoral) == 0x000004, "Wrong alignment on Scripts_AdjustCompanionMoral");
static_assert(sizeof(Scripts_AdjustCompanionMoral) == 0x00000C, "Wrong size on Scripts_AdjustCompanionMoral");
static_assert(offsetof(Scripts_AdjustCompanionMoral, CompanionID) == 0x000000, "Member 'Scripts_AdjustCompanionMoral::CompanionID' has a wrong offset!");
static_assert(offsetof(Scripts_AdjustCompanionMoral, bPositiveMoralAdjustment) == 0x000001, "Member 'Scripts_AdjustCompanionMoral::bPositiveMoralAdjustment' has a wrong offset!");
static_assert(offsetof(Scripts_AdjustCompanionMoral, Contribution) == 0x000002, "Member 'Scripts_AdjustCompanionMoral::Contribution' has a wrong offset!");
static_assert(offsetof(Scripts_AdjustCompanionMoral, CustomAmount) == 0x000004, "Member 'Scripts_AdjustCompanionMoral::CustomAmount' has a wrong offset!");
static_assert(offsetof(Scripts_AdjustCompanionMoral, bOnlyActivePartyMembers) == 0x000008, "Member 'Scripts_AdjustCompanionMoral::bOnlyActivePartyMembers' has a wrong offset!");

// Function Indiana.Scripts.AdjustFactionReputation
// 0x0018 (0x0018 - 0x0000)
struct Scripts_AdjustFactionReputation final
{
public:
	class FString                                 Faction;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EReputationType                               ReputationType;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EReputationIncrementType                      IncrementType;                                     // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CustomAmount;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_AdjustFactionReputation) == 0x000008, "Wrong alignment on Scripts_AdjustFactionReputation");
static_assert(sizeof(Scripts_AdjustFactionReputation) == 0x000018, "Wrong size on Scripts_AdjustFactionReputation");
static_assert(offsetof(Scripts_AdjustFactionReputation, Faction) == 0x000000, "Member 'Scripts_AdjustFactionReputation::Faction' has a wrong offset!");
static_assert(offsetof(Scripts_AdjustFactionReputation, ReputationType) == 0x000010, "Member 'Scripts_AdjustFactionReputation::ReputationType' has a wrong offset!");
static_assert(offsetof(Scripts_AdjustFactionReputation, IncrementType) == 0x000011, "Member 'Scripts_AdjustFactionReputation::IncrementType' has a wrong offset!");
static_assert(offsetof(Scripts_AdjustFactionReputation, CustomAmount) == 0x000014, "Member 'Scripts_AdjustFactionReputation::CustomAmount' has a wrong offset!");

// Function Indiana.Scripts.AdvanceDays
// 0x0004 (0x0004 - 0x0000)
struct Scripts_AdvanceDays final
{
public:
	float                                         Days;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_AdvanceDays) == 0x000004, "Wrong alignment on Scripts_AdvanceDays");
static_assert(sizeof(Scripts_AdvanceDays) == 0x000004, "Wrong size on Scripts_AdvanceDays");
static_assert(offsetof(Scripts_AdvanceDays, Days) == 0x000000, "Member 'Scripts_AdvanceDays::Days' has a wrong offset!");

// Function Indiana.Scripts.AdvanceHours
// 0x0004 (0x0004 - 0x0000)
struct Scripts_AdvanceHours final
{
public:
	float                                         Hours;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_AdvanceHours) == 0x000004, "Wrong alignment on Scripts_AdvanceHours");
static_assert(sizeof(Scripts_AdvanceHours) == 0x000004, "Wrong size on Scripts_AdvanceHours");
static_assert(offsetof(Scripts_AdvanceHours, Hours) == 0x000000, "Member 'Scripts_AdvanceHours::Hours' has a wrong offset!");

// Function Indiana.Scripts.AdvanceMinutes
// 0x0004 (0x0004 - 0x0000)
struct Scripts_AdvanceMinutes final
{
public:
	float                                         Minutes;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_AdvanceMinutes) == 0x000004, "Wrong alignment on Scripts_AdvanceMinutes");
static_assert(sizeof(Scripts_AdvanceMinutes) == 0x000004, "Wrong size on Scripts_AdvanceMinutes");
static_assert(offsetof(Scripts_AdvanceMinutes, Minutes) == 0x000000, "Member 'Scripts_AdvanceMinutes::Minutes' has a wrong offset!");

// Function Indiana.Scripts.AdvanceQuest
// 0x0010 (0x0010 - 0x0000)
struct Scripts_AdvanceQuest final
{
public:
	struct FGuid                                  QuestID;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_AdvanceQuest) == 0x000004, "Wrong alignment on Scripts_AdvanceQuest");
static_assert(sizeof(Scripts_AdvanceQuest) == 0x000010, "Wrong size on Scripts_AdvanceQuest");
static_assert(offsetof(Scripts_AdvanceQuest, QuestID) == 0x000000, "Member 'Scripts_AdvanceQuest::QuestID' has a wrong offset!");

// Function Indiana.Scripts.AdvanceSeconds
// 0x0004 (0x0004 - 0x0000)
struct Scripts_AdvanceSeconds final
{
public:
	float                                         Seconds;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_AdvanceSeconds) == 0x000004, "Wrong alignment on Scripts_AdvanceSeconds");
static_assert(sizeof(Scripts_AdvanceSeconds) == 0x000004, "Wrong size on Scripts_AdvanceSeconds");
static_assert(offsetof(Scripts_AdvanceSeconds, Seconds) == 0x000000, "Member 'Scripts_AdvanceSeconds::Seconds' has a wrong offset!");

// Function Indiana.Scripts.AdvanceTime
// 0x0010 (0x0010 - 0x0000)
struct Scripts_AdvanceTime final
{
public:
	float                                         Days;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Hours;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Minutes;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Seconds;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_AdvanceTime) == 0x000004, "Wrong alignment on Scripts_AdvanceTime");
static_assert(sizeof(Scripts_AdvanceTime) == 0x000010, "Wrong size on Scripts_AdvanceTime");
static_assert(offsetof(Scripts_AdvanceTime, Days) == 0x000000, "Member 'Scripts_AdvanceTime::Days' has a wrong offset!");
static_assert(offsetof(Scripts_AdvanceTime, Hours) == 0x000004, "Member 'Scripts_AdvanceTime::Hours' has a wrong offset!");
static_assert(offsetof(Scripts_AdvanceTime, Minutes) == 0x000008, "Member 'Scripts_AdvanceTime::Minutes' has a wrong offset!");
static_assert(offsetof(Scripts_AdvanceTime, Seconds) == 0x00000C, "Member 'Scripts_AdvanceTime::Seconds' has a wrong offset!");

// Function Indiana.Scripts.AdvanceToHour
// 0x0004 (0x0004 - 0x0000)
struct Scripts_AdvanceToHour final
{
public:
	int32                                         TargetHour;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_AdvanceToHour) == 0x000004, "Wrong alignment on Scripts_AdvanceToHour");
static_assert(sizeof(Scripts_AdvanceToHour) == 0x000004, "Wrong size on Scripts_AdvanceToHour");
static_assert(offsetof(Scripts_AdvanceToHour, TargetHour) == 0x000000, "Member 'Scripts_AdvanceToHour::TargetHour' has a wrong offset!");

// Function Indiana.Scripts.ArmTrap
// 0x0010 (0x0010 - 0x0000)
struct Scripts_ArmTrap final
{
public:
	struct FGuid                                  TrapObjectID;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_ArmTrap) == 0x000004, "Wrong alignment on Scripts_ArmTrap");
static_assert(sizeof(Scripts_ArmTrap) == 0x000010, "Wrong size on Scripts_ArmTrap");
static_assert(offsetof(Scripts_ArmTrap, TrapObjectID) == 0x000000, "Member 'Scripts_ArmTrap::TrapObjectID' has a wrong offset!");

// Function Indiana.Scripts.AttemptEnableHazard
// 0x0014 (0x0014 - 0x0000)
struct Scripts_AttemptEnableHazard final
{
public:
	struct FGuid                                  HazardActorID;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Scripts_AttemptEnableHazard) == 0x000004, "Wrong alignment on Scripts_AttemptEnableHazard");
static_assert(sizeof(Scripts_AttemptEnableHazard) == 0x000014, "Wrong size on Scripts_AttemptEnableHazard");
static_assert(offsetof(Scripts_AttemptEnableHazard, HazardActorID) == 0x000000, "Member 'Scripts_AttemptEnableHazard::HazardActorID' has a wrong offset!");
static_assert(offsetof(Scripts_AttemptEnableHazard, bEnable) == 0x000010, "Member 'Scripts_AttemptEnableHazard::bEnable' has a wrong offset!");

// Function Indiana.Scripts.BarOCL
// 0x0010 (0x0010 - 0x0000)
struct Scripts_BarOCL final
{
public:
	struct FGuid                                  OCLObjectID;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_BarOCL) == 0x000004, "Wrong alignment on Scripts_BarOCL");
static_assert(sizeof(Scripts_BarOCL) == 0x000010, "Wrong size on Scripts_BarOCL");
static_assert(offsetof(Scripts_BarOCL, OCLObjectID) == 0x000000, "Member 'Scripts_BarOCL::OCLObjectID' has a wrong offset!");

// Function Indiana.Scripts.Bribe
// 0x0010 (0x0010 - 0x0000)
struct Scripts_Bribe final
{
public:
	class FString                                 VariableName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_Bribe) == 0x000008, "Wrong alignment on Scripts_Bribe");
static_assert(sizeof(Scripts_Bribe) == 0x000010, "Wrong size on Scripts_Bribe");
static_assert(offsetof(Scripts_Bribe, VariableName) == 0x000000, "Member 'Scripts_Bribe::VariableName' has a wrong offset!");

// Function Indiana.Scripts.CallGlobalScript
// 0x0010 (0x0010 - 0x0000)
struct Scripts_CallGlobalScript final
{
public:
	struct FGuid                                  GlobalScriptID;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_CallGlobalScript) == 0x000004, "Wrong alignment on Scripts_CallGlobalScript");
static_assert(sizeof(Scripts_CallGlobalScript) == 0x000010, "Wrong size on Scripts_CallGlobalScript");
static_assert(offsetof(Scripts_CallGlobalScript, GlobalScriptID) == 0x000000, "Member 'Scripts_CallGlobalScript::GlobalScriptID' has a wrong offset!");

// Function Indiana.Scripts.ClearConversationBodyTargetActor
// 0x0014 (0x0014 - 0x0000)
struct Scripts_ClearConversationBodyTargetActor final
{
public:
	struct FGuid                                  Actor;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStickyTarget;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Scripts_ClearConversationBodyTargetActor) == 0x000004, "Wrong alignment on Scripts_ClearConversationBodyTargetActor");
static_assert(sizeof(Scripts_ClearConversationBodyTargetActor) == 0x000014, "Wrong size on Scripts_ClearConversationBodyTargetActor");
static_assert(offsetof(Scripts_ClearConversationBodyTargetActor, Actor) == 0x000000, "Member 'Scripts_ClearConversationBodyTargetActor::Actor' has a wrong offset!");
static_assert(offsetof(Scripts_ClearConversationBodyTargetActor, bStickyTarget) == 0x000010, "Member 'Scripts_ClearConversationBodyTargetActor::bStickyTarget' has a wrong offset!");

// Function Indiana.Scripts.ClearConversationEyesTargetActor
// 0x0014 (0x0014 - 0x0000)
struct Scripts_ClearConversationEyesTargetActor final
{
public:
	struct FGuid                                  Actor;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStickyTarget;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Scripts_ClearConversationEyesTargetActor) == 0x000004, "Wrong alignment on Scripts_ClearConversationEyesTargetActor");
static_assert(sizeof(Scripts_ClearConversationEyesTargetActor) == 0x000014, "Wrong size on Scripts_ClearConversationEyesTargetActor");
static_assert(offsetof(Scripts_ClearConversationEyesTargetActor, Actor) == 0x000000, "Member 'Scripts_ClearConversationEyesTargetActor::Actor' has a wrong offset!");
static_assert(offsetof(Scripts_ClearConversationEyesTargetActor, bStickyTarget) == 0x000010, "Member 'Scripts_ClearConversationEyesTargetActor::bStickyTarget' has a wrong offset!");

// Function Indiana.Scripts.ClearConversationHeadTargetActor
// 0x0014 (0x0014 - 0x0000)
struct Scripts_ClearConversationHeadTargetActor final
{
public:
	struct FGuid                                  Actor;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStickyTarget;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Scripts_ClearConversationHeadTargetActor) == 0x000004, "Wrong alignment on Scripts_ClearConversationHeadTargetActor");
static_assert(sizeof(Scripts_ClearConversationHeadTargetActor) == 0x000014, "Wrong size on Scripts_ClearConversationHeadTargetActor");
static_assert(offsetof(Scripts_ClearConversationHeadTargetActor, Actor) == 0x000000, "Member 'Scripts_ClearConversationHeadTargetActor::Actor' has a wrong offset!");
static_assert(offsetof(Scripts_ClearConversationHeadTargetActor, bStickyTarget) == 0x000010, "Member 'Scripts_ClearConversationHeadTargetActor::bStickyTarget' has a wrong offset!");

// Function Indiana.Scripts.ClearConversationNodeAsRead
// 0x0014 (0x0014 - 0x0000)
struct Scripts_ClearConversationNodeAsRead final
{
public:
	struct FGuid                                  ConversationID;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NodeID;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_ClearConversationNodeAsRead) == 0x000004, "Wrong alignment on Scripts_ClearConversationNodeAsRead");
static_assert(sizeof(Scripts_ClearConversationNodeAsRead) == 0x000014, "Wrong size on Scripts_ClearConversationNodeAsRead");
static_assert(offsetof(Scripts_ClearConversationNodeAsRead, ConversationID) == 0x000000, "Member 'Scripts_ClearConversationNodeAsRead::ConversationID' has a wrong offset!");
static_assert(offsetof(Scripts_ClearConversationNodeAsRead, NodeID) == 0x000010, "Member 'Scripts_ClearConversationNodeAsRead::NodeID' has a wrong offset!");

// Function Indiana.Scripts.ClearConversationTargetActor
// 0x0014 (0x0014 - 0x0000)
struct Scripts_ClearConversationTargetActor final
{
public:
	struct FGuid                                  Actor;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStickyTarget;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Scripts_ClearConversationTargetActor) == 0x000004, "Wrong alignment on Scripts_ClearConversationTargetActor");
static_assert(sizeof(Scripts_ClearConversationTargetActor) == 0x000014, "Wrong size on Scripts_ClearConversationTargetActor");
static_assert(offsetof(Scripts_ClearConversationTargetActor, Actor) == 0x000000, "Member 'Scripts_ClearConversationTargetActor::Actor' has a wrong offset!");
static_assert(offsetof(Scripts_ClearConversationTargetActor, bStickyTarget) == 0x000010, "Member 'Scripts_ClearConversationTargetActor::bStickyTarget' has a wrong offset!");

// Function Indiana.Scripts.ClearDefaultEmotion
// 0x0010 (0x0010 - 0x0000)
struct Scripts_ClearDefaultEmotion final
{
public:
	struct FGuid                                  Actor;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_ClearDefaultEmotion) == 0x000004, "Wrong alignment on Scripts_ClearDefaultEmotion");
static_assert(sizeof(Scripts_ClearDefaultEmotion) == 0x000010, "Wrong size on Scripts_ClearDefaultEmotion");
static_assert(offsetof(Scripts_ClearDefaultEmotion, Actor) == 0x000000, "Member 'Scripts_ClearDefaultEmotion::Actor' has a wrong offset!");

// Function Indiana.Scripts.ClearEmotion
// 0x0010 (0x0010 - 0x0000)
struct Scripts_ClearEmotion final
{
public:
	struct FGuid                                  Actor;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_ClearEmotion) == 0x000004, "Wrong alignment on Scripts_ClearEmotion");
static_assert(sizeof(Scripts_ClearEmotion) == 0x000010, "Wrong size on Scripts_ClearEmotion");
static_assert(offsetof(Scripts_ClearEmotion, Actor) == 0x000000, "Member 'Scripts_ClearEmotion::Actor' has a wrong offset!");

// Function Indiana.Scripts.ClearFactionRecentHostilityToPlayer
// 0x0010 (0x0010 - 0x0000)
struct Scripts_ClearFactionRecentHostilityToPlayer final
{
public:
	class FString                                 Faction;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_ClearFactionRecentHostilityToPlayer) == 0x000008, "Wrong alignment on Scripts_ClearFactionRecentHostilityToPlayer");
static_assert(sizeof(Scripts_ClearFactionRecentHostilityToPlayer) == 0x000010, "Wrong size on Scripts_ClearFactionRecentHostilityToPlayer");
static_assert(offsetof(Scripts_ClearFactionRecentHostilityToPlayer, Faction) == 0x000000, "Member 'Scripts_ClearFactionRecentHostilityToPlayer::Faction' has a wrong offset!");

// Function Indiana.Scripts.ClearNamedTimestamp
// 0x0010 (0x0010 - 0x0000)
struct Scripts_ClearNamedTimestamp final
{
public:
	class FString                                 TimestampName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_ClearNamedTimestamp) == 0x000008, "Wrong alignment on Scripts_ClearNamedTimestamp");
static_assert(sizeof(Scripts_ClearNamedTimestamp) == 0x000010, "Wrong size on Scripts_ClearNamedTimestamp");
static_assert(offsetof(Scripts_ClearNamedTimestamp, TimestampName) == 0x000000, "Member 'Scripts_ClearNamedTimestamp::TimestampName' has a wrong offset!");

// Function Indiana.Scripts.ClearOwnershipsOfItemsInContainer
// 0x0014 (0x0014 - 0x0000)
struct Scripts_ClearOwnershipsOfItemsInContainer final
{
public:
	struct FGuid                                  ContainerID;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClearPlayerOwnership;                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClearNonPlayerOwnership;                          // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Scripts_ClearOwnershipsOfItemsInContainer) == 0x000004, "Wrong alignment on Scripts_ClearOwnershipsOfItemsInContainer");
static_assert(sizeof(Scripts_ClearOwnershipsOfItemsInContainer) == 0x000014, "Wrong size on Scripts_ClearOwnershipsOfItemsInContainer");
static_assert(offsetof(Scripts_ClearOwnershipsOfItemsInContainer, ContainerID) == 0x000000, "Member 'Scripts_ClearOwnershipsOfItemsInContainer::ContainerID' has a wrong offset!");
static_assert(offsetof(Scripts_ClearOwnershipsOfItemsInContainer, bClearPlayerOwnership) == 0x000010, "Member 'Scripts_ClearOwnershipsOfItemsInContainer::bClearPlayerOwnership' has a wrong offset!");
static_assert(offsetof(Scripts_ClearOwnershipsOfItemsInContainer, bClearNonPlayerOwnership) == 0x000011, "Member 'Scripts_ClearOwnershipsOfItemsInContainer::bClearNonPlayerOwnership' has a wrong offset!");

// Function Indiana.Scripts.ClearOwnershipsOfItemTypeInContainer
// 0x0028 (0x0028 - 0x0000)
struct Scripts_ClearOwnershipsOfItemTypeInContainer final
{
public:
	struct FGuid                                  ContainerID;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Item;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClearPlayerOwnership;                             // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClearNonPlayerOwnership;                          // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Scripts_ClearOwnershipsOfItemTypeInContainer) == 0x000008, "Wrong alignment on Scripts_ClearOwnershipsOfItemTypeInContainer");
static_assert(sizeof(Scripts_ClearOwnershipsOfItemTypeInContainer) == 0x000028, "Wrong size on Scripts_ClearOwnershipsOfItemTypeInContainer");
static_assert(offsetof(Scripts_ClearOwnershipsOfItemTypeInContainer, ContainerID) == 0x000000, "Member 'Scripts_ClearOwnershipsOfItemTypeInContainer::ContainerID' has a wrong offset!");
static_assert(offsetof(Scripts_ClearOwnershipsOfItemTypeInContainer, Item) == 0x000010, "Member 'Scripts_ClearOwnershipsOfItemTypeInContainer::Item' has a wrong offset!");
static_assert(offsetof(Scripts_ClearOwnershipsOfItemTypeInContainer, bClearPlayerOwnership) == 0x000020, "Member 'Scripts_ClearOwnershipsOfItemTypeInContainer::bClearPlayerOwnership' has a wrong offset!");
static_assert(offsetof(Scripts_ClearOwnershipsOfItemTypeInContainer, bClearNonPlayerOwnership) == 0x000021, "Member 'Scripts_ClearOwnershipsOfItemTypeInContainer::bClearNonPlayerOwnership' has a wrong offset!");

// Function Indiana.Scripts.ClearPickupOwnerships
// 0x0014 (0x0014 - 0x0000)
struct Scripts_ClearPickupOwnerships final
{
public:
	struct FGuid                                  PickupID;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClearPlayerOwnership;                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClearNonPlayerOwnership;                          // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Scripts_ClearPickupOwnerships) == 0x000004, "Wrong alignment on Scripts_ClearPickupOwnerships");
static_assert(sizeof(Scripts_ClearPickupOwnerships) == 0x000014, "Wrong size on Scripts_ClearPickupOwnerships");
static_assert(offsetof(Scripts_ClearPickupOwnerships, PickupID) == 0x000000, "Member 'Scripts_ClearPickupOwnerships::PickupID' has a wrong offset!");
static_assert(offsetof(Scripts_ClearPickupOwnerships, bClearPlayerOwnership) == 0x000010, "Member 'Scripts_ClearPickupOwnerships::bClearPlayerOwnership' has a wrong offset!");
static_assert(offsetof(Scripts_ClearPickupOwnerships, bClearNonPlayerOwnership) == 0x000011, "Member 'Scripts_ClearPickupOwnerships::bClearNonPlayerOwnership' has a wrong offset!");

// Function Indiana.Scripts.ClearSpeakersTalkIdleOverride
// 0x000C (0x000C - 0x0000)
struct Scripts_ClearSpeakersTalkIdleOverride final
{
public:
	EEmotion                                      Emotion;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Persist;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Scripts_ClearSpeakersTalkIdleOverride) == 0x000004, "Wrong alignment on Scripts_ClearSpeakersTalkIdleOverride");
static_assert(sizeof(Scripts_ClearSpeakersTalkIdleOverride) == 0x00000C, "Wrong size on Scripts_ClearSpeakersTalkIdleOverride");
static_assert(offsetof(Scripts_ClearSpeakersTalkIdleOverride, Emotion) == 0x000000, "Member 'Scripts_ClearSpeakersTalkIdleOverride::Emotion' has a wrong offset!");
static_assert(offsetof(Scripts_ClearSpeakersTalkIdleOverride, Duration) == 0x000004, "Member 'Scripts_ClearSpeakersTalkIdleOverride::Duration' has a wrong offset!");
static_assert(offsetof(Scripts_ClearSpeakersTalkIdleOverride, Persist) == 0x000008, "Member 'Scripts_ClearSpeakersTalkIdleOverride::Persist' has a wrong offset!");

// Function Indiana.Scripts.ClearTalkIdleOverride
// 0x001C (0x001C - 0x0000)
struct Scripts_ClearTalkIdleOverride final
{
public:
	struct FGuid                                  Actor;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEmotion                                      Emotion;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Persist;                                           // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Scripts_ClearTalkIdleOverride) == 0x000004, "Wrong alignment on Scripts_ClearTalkIdleOverride");
static_assert(sizeof(Scripts_ClearTalkIdleOverride) == 0x00001C, "Wrong size on Scripts_ClearTalkIdleOverride");
static_assert(offsetof(Scripts_ClearTalkIdleOverride, Actor) == 0x000000, "Member 'Scripts_ClearTalkIdleOverride::Actor' has a wrong offset!");
static_assert(offsetof(Scripts_ClearTalkIdleOverride, Emotion) == 0x000010, "Member 'Scripts_ClearTalkIdleOverride::Emotion' has a wrong offset!");
static_assert(offsetof(Scripts_ClearTalkIdleOverride, Duration) == 0x000014, "Member 'Scripts_ClearTalkIdleOverride::Duration' has a wrong offset!");
static_assert(offsetof(Scripts_ClearTalkIdleOverride, Persist) == 0x000018, "Member 'Scripts_ClearTalkIdleOverride::Persist' has a wrong offset!");

// Function Indiana.Scripts.ClearTalkIdleOverrideOnNextEmotionChange
// 0x0010 (0x0010 - 0x0000)
struct Scripts_ClearTalkIdleOverrideOnNextEmotionChange final
{
public:
	struct FGuid                                  Actor;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_ClearTalkIdleOverrideOnNextEmotionChange) == 0x000004, "Wrong alignment on Scripts_ClearTalkIdleOverrideOnNextEmotionChange");
static_assert(sizeof(Scripts_ClearTalkIdleOverrideOnNextEmotionChange) == 0x000010, "Wrong size on Scripts_ClearTalkIdleOverrideOnNextEmotionChange");
static_assert(offsetof(Scripts_ClearTalkIdleOverrideOnNextEmotionChange, Actor) == 0x000000, "Member 'Scripts_ClearTalkIdleOverrideOnNextEmotionChange::Actor' has a wrong offset!");

// Function Indiana.Scripts.CloseOCL
// 0x0014 (0x0014 - 0x0000)
struct Scripts_CloseOCL final
{
public:
	struct FGuid                                  OCLObjectID;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Block;                                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSeal;                                             // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Scripts_CloseOCL) == 0x000004, "Wrong alignment on Scripts_CloseOCL");
static_assert(sizeof(Scripts_CloseOCL) == 0x000014, "Wrong size on Scripts_CloseOCL");
static_assert(offsetof(Scripts_CloseOCL, OCLObjectID) == 0x000000, "Member 'Scripts_CloseOCL::OCLObjectID' has a wrong offset!");
static_assert(offsetof(Scripts_CloseOCL, Block) == 0x000010, "Member 'Scripts_CloseOCL::Block' has a wrong offset!");
static_assert(offsetof(Scripts_CloseOCL, bSeal) == 0x000011, "Member 'Scripts_CloseOCL::bSeal' has a wrong offset!");

// Function Indiana.Scripts.DebugAdvanceQuest
// 0x0010 (0x0010 - 0x0000)
struct Scripts_DebugAdvanceQuest final
{
public:
	struct FGuid                                  QuestID;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_DebugAdvanceQuest) == 0x000004, "Wrong alignment on Scripts_DebugAdvanceQuest");
static_assert(sizeof(Scripts_DebugAdvanceQuest) == 0x000010, "Wrong size on Scripts_DebugAdvanceQuest");
static_assert(offsetof(Scripts_DebugAdvanceQuest, QuestID) == 0x000000, "Member 'Scripts_DebugAdvanceQuest::QuestID' has a wrong offset!");

// Function Indiana.Scripts.DebugPrintMessage
// 0x0010 (0x0010 - 0x0000)
struct Scripts_DebugPrintMessage final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_DebugPrintMessage) == 0x000008, "Wrong alignment on Scripts_DebugPrintMessage");
static_assert(sizeof(Scripts_DebugPrintMessage) == 0x000010, "Wrong size on Scripts_DebugPrintMessage");
static_assert(offsetof(Scripts_DebugPrintMessage, Message) == 0x000000, "Member 'Scripts_DebugPrintMessage::Message' has a wrong offset!");

// Function Indiana.Scripts.DisarmTrap
// 0x0010 (0x0010 - 0x0000)
struct Scripts_DisarmTrap final
{
public:
	struct FGuid                                  TrapObjectID;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_DisarmTrap) == 0x000004, "Wrong alignment on Scripts_DisarmTrap");
static_assert(sizeof(Scripts_DisarmTrap) == 0x000010, "Wrong size on Scripts_DisarmTrap");
static_assert(offsetof(Scripts_DisarmTrap, TrapObjectID) == 0x000000, "Member 'Scripts_DisarmTrap::TrapObjectID' has a wrong offset!");

// Function Indiana.Scripts.DismissCompanion
// 0x0001 (0x0001 - 0x0000)
struct Scripts_DismissCompanion final
{
public:
	ESpecialObsidianID                            CompanionID;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_DismissCompanion) == 0x000001, "Wrong alignment on Scripts_DismissCompanion");
static_assert(sizeof(Scripts_DismissCompanion) == 0x000001, "Wrong size on Scripts_DismissCompanion");
static_assert(offsetof(Scripts_DismissCompanion, CompanionID) == 0x000000, "Member 'Scripts_DismissCompanion::CompanionID' has a wrong offset!");

// Function Indiana.Scripts.DynamicallyReplaceCompanion
// 0x0002 (0x0002 - 0x0000)
struct Scripts_DynamicallyReplaceCompanion final
{
public:
	ESpecialObsidianID                            OldCompanionID;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpecialObsidianID                            NewCompanionID;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_DynamicallyReplaceCompanion) == 0x000001, "Wrong alignment on Scripts_DynamicallyReplaceCompanion");
static_assert(sizeof(Scripts_DynamicallyReplaceCompanion) == 0x000002, "Wrong size on Scripts_DynamicallyReplaceCompanion");
static_assert(offsetof(Scripts_DynamicallyReplaceCompanion, OldCompanionID) == 0x000000, "Member 'Scripts_DynamicallyReplaceCompanion::OldCompanionID' has a wrong offset!");
static_assert(offsetof(Scripts_DynamicallyReplaceCompanion, NewCompanionID) == 0x000001, "Member 'Scripts_DynamicallyReplaceCompanion::NewCompanionID' has a wrong offset!");

// Function Indiana.Scripts.GetCompanionMoral
// 0x0008 (0x0008 - 0x0000)
struct Scripts_GetCompanionMoral final
{
public:
	ESpecialObsidianID                            CompanionID;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_GetCompanionMoral) == 0x000004, "Wrong alignment on Scripts_GetCompanionMoral");
static_assert(sizeof(Scripts_GetCompanionMoral) == 0x000008, "Wrong size on Scripts_GetCompanionMoral");
static_assert(offsetof(Scripts_GetCompanionMoral, CompanionID) == 0x000000, "Member 'Scripts_GetCompanionMoral::CompanionID' has a wrong offset!");
static_assert(offsetof(Scripts_GetCompanionMoral, ReturnValue) == 0x000004, "Member 'Scripts_GetCompanionMoral::ReturnValue' has a wrong offset!");

// Function Indiana.Scripts.GiveCurrency
// 0x0014 (0x0014 - 0x0000)
struct Scripts_GiveCurrency final
{
public:
	struct FGuid                                  ActorId;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_GiveCurrency) == 0x000004, "Wrong alignment on Scripts_GiveCurrency");
static_assert(sizeof(Scripts_GiveCurrency) == 0x000014, "Wrong size on Scripts_GiveCurrency");
static_assert(offsetof(Scripts_GiveCurrency, ActorId) == 0x000000, "Member 'Scripts_GiveCurrency::ActorId' has a wrong offset!");
static_assert(offsetof(Scripts_GiveCurrency, Count) == 0x000010, "Member 'Scripts_GiveCurrency::Count' has a wrong offset!");

// Function Indiana.Scripts.GiveItem
// 0x0018 (0x0018 - 0x0000)
struct Scripts_GiveItem final
{
public:
	class FString                                 Item;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Scripts_GiveItem) == 0x000008, "Wrong alignment on Scripts_GiveItem");
static_assert(sizeof(Scripts_GiveItem) == 0x000018, "Wrong size on Scripts_GiveItem");
static_assert(offsetof(Scripts_GiveItem, Item) == 0x000000, "Member 'Scripts_GiveItem::Item' has a wrong offset!");
static_assert(offsetof(Scripts_GiveItem, Count) == 0x000010, "Member 'Scripts_GiveItem::Count' has a wrong offset!");

// Function Indiana.Scripts.GiveItemToActor
// 0x0028 (0x0028 - 0x0000)
struct Scripts_GiveItemToActor final
{
public:
	struct FGuid                                  ActorIdID;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Item;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Scripts_GiveItemToActor) == 0x000008, "Wrong alignment on Scripts_GiveItemToActor");
static_assert(sizeof(Scripts_GiveItemToActor) == 0x000028, "Wrong size on Scripts_GiveItemToActor");
static_assert(offsetof(Scripts_GiveItemToActor, ActorIdID) == 0x000000, "Member 'Scripts_GiveItemToActor::ActorIdID' has a wrong offset!");
static_assert(offsetof(Scripts_GiveItemToActor, Item) == 0x000010, "Member 'Scripts_GiveItemToActor::Item' has a wrong offset!");
static_assert(offsetof(Scripts_GiveItemToActor, Count) == 0x000020, "Member 'Scripts_GiveItemToActor::Count' has a wrong offset!");

// Function Indiana.Scripts.GiveLoot
// 0x0010 (0x0010 - 0x0000)
struct Scripts_GiveLoot final
{
public:
	class FString                                 LootTableData;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_GiveLoot) == 0x000008, "Wrong alignment on Scripts_GiveLoot");
static_assert(sizeof(Scripts_GiveLoot) == 0x000010, "Wrong size on Scripts_GiveLoot");
static_assert(offsetof(Scripts_GiveLoot, LootTableData) == 0x000000, "Member 'Scripts_GiveLoot::LootTableData' has a wrong offset!");

// Function Indiana.Scripts.GivePerkToActor
// 0x0020 (0x0020 - 0x0000)
struct Scripts_GivePerkToActor final
{
public:
	struct FGuid                                  ActorId;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Perk;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_GivePerkToActor) == 0x000008, "Wrong alignment on Scripts_GivePerkToActor");
static_assert(sizeof(Scripts_GivePerkToActor) == 0x000020, "Wrong size on Scripts_GivePerkToActor");
static_assert(offsetof(Scripts_GivePerkToActor, ActorId) == 0x000000, "Member 'Scripts_GivePerkToActor::ActorId' has a wrong offset!");
static_assert(offsetof(Scripts_GivePerkToActor, Perk) == 0x000010, "Member 'Scripts_GivePerkToActor::Perk' has a wrong offset!");

// Function Indiana.Scripts.HideBeacon
// 0x0010 (0x0010 - 0x0000)
struct Scripts_HideBeacon final
{
public:
	struct FGuid                                  BeaconObjectID;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_HideBeacon) == 0x000004, "Wrong alignment on Scripts_HideBeacon");
static_assert(sizeof(Scripts_HideBeacon) == 0x000010, "Wrong size on Scripts_HideBeacon");
static_assert(offsetof(Scripts_HideBeacon, BeaconObjectID) == 0x000000, "Member 'Scripts_HideBeacon::BeaconObjectID' has a wrong offset!");

// Function Indiana.Scripts.HidePointOfInterest
// 0x0010 (0x0010 - 0x0000)
struct Scripts_HidePointOfInterest final
{
public:
	class FString                                 PointOfInterestData;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_HidePointOfInterest) == 0x000008, "Wrong alignment on Scripts_HidePointOfInterest");
static_assert(sizeof(Scripts_HidePointOfInterest) == 0x000010, "Wrong size on Scripts_HidePointOfInterest");
static_assert(offsetof(Scripts_HidePointOfInterest, PointOfInterestData) == 0x000000, "Member 'Scripts_HidePointOfInterest::PointOfInterestData' has a wrong offset!");

// Function Indiana.Scripts.IncrementGlobalValue
// 0x0018 (0x0018 - 0x0000)
struct Scripts_IncrementGlobalValue final
{
public:
	class FString                                 VariableName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IncrementValue;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Scripts_IncrementGlobalValue) == 0x000008, "Wrong alignment on Scripts_IncrementGlobalValue");
static_assert(sizeof(Scripts_IncrementGlobalValue) == 0x000018, "Wrong size on Scripts_IncrementGlobalValue");
static_assert(offsetof(Scripts_IncrementGlobalValue, VariableName) == 0x000000, "Member 'Scripts_IncrementGlobalValue::VariableName' has a wrong offset!");
static_assert(offsetof(Scripts_IncrementGlobalValue, IncrementValue) == 0x000010, "Member 'Scripts_IncrementGlobalValue::IncrementValue' has a wrong offset!");

// Function Indiana.Scripts.KillNPC
// 0x0010 (0x0010 - 0x0000)
struct Scripts_KillNPC final
{
public:
	struct FGuid                                  Character;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_KillNPC) == 0x000004, "Wrong alignment on Scripts_KillNPC");
static_assert(sizeof(Scripts_KillNPC) == 0x000010, "Wrong size on Scripts_KillNPC");
static_assert(offsetof(Scripts_KillNPC, Character) == 0x000000, "Member 'Scripts_KillNPC::Character' has a wrong offset!");

// Function Indiana.Scripts.LockComputer
// 0x0010 (0x0010 - 0x0000)
struct Scripts_LockComputer final
{
public:
	struct FGuid                                  ComputerObjectID;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_LockComputer) == 0x000004, "Wrong alignment on Scripts_LockComputer");
static_assert(sizeof(Scripts_LockComputer) == 0x000010, "Wrong size on Scripts_LockComputer");
static_assert(offsetof(Scripts_LockComputer, ComputerObjectID) == 0x000000, "Member 'Scripts_LockComputer::ComputerObjectID' has a wrong offset!");

// Function Indiana.Scripts.LockOCL
// 0x0010 (0x0010 - 0x0000)
struct Scripts_LockOCL final
{
public:
	struct FGuid                                  OCLObjectID;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_LockOCL) == 0x000004, "Wrong alignment on Scripts_LockOCL");
static_assert(sizeof(Scripts_LockOCL) == 0x000010, "Wrong size on Scripts_LockOCL");
static_assert(offsetof(Scripts_LockOCL, OCLObjectID) == 0x000000, "Member 'Scripts_LockOCL::OCLObjectID' has a wrong offset!");

// Function Indiana.Scripts.MakePointOfInterestDiscoverable
// 0x0018 (0x0018 - 0x0000)
struct Scripts_MakePointOfInterestDiscoverable final
{
public:
	class FString                                 PointOfInterestData;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStillHidden;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Scripts_MakePointOfInterestDiscoverable) == 0x000008, "Wrong alignment on Scripts_MakePointOfInterestDiscoverable");
static_assert(sizeof(Scripts_MakePointOfInterestDiscoverable) == 0x000018, "Wrong size on Scripts_MakePointOfInterestDiscoverable");
static_assert(offsetof(Scripts_MakePointOfInterestDiscoverable, PointOfInterestData) == 0x000000, "Member 'Scripts_MakePointOfInterestDiscoverable::PointOfInterestData' has a wrong offset!");
static_assert(offsetof(Scripts_MakePointOfInterestDiscoverable, bStillHidden) == 0x000010, "Member 'Scripts_MakePointOfInterestDiscoverable::bStillHidden' has a wrong offset!");

// Function Indiana.Scripts.MarkConversationNodeAsRead
// 0x0014 (0x0014 - 0x0000)
struct Scripts_MarkConversationNodeAsRead final
{
public:
	struct FGuid                                  ConversationID;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NodeID;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_MarkConversationNodeAsRead) == 0x000004, "Wrong alignment on Scripts_MarkConversationNodeAsRead");
static_assert(sizeof(Scripts_MarkConversationNodeAsRead) == 0x000014, "Wrong size on Scripts_MarkConversationNodeAsRead");
static_assert(offsetof(Scripts_MarkConversationNodeAsRead, ConversationID) == 0x000000, "Member 'Scripts_MarkConversationNodeAsRead::ConversationID' has a wrong offset!");
static_assert(offsetof(Scripts_MarkConversationNodeAsRead, NodeID) == 0x000010, "Member 'Scripts_MarkConversationNodeAsRead::NodeID' has a wrong offset!");

// Function Indiana.Scripts.MentionPointOfInterest
// 0x0010 (0x0010 - 0x0000)
struct Scripts_MentionPointOfInterest final
{
public:
	class FString                                 PointOfInterestData;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_MentionPointOfInterest) == 0x000008, "Wrong alignment on Scripts_MentionPointOfInterest");
static_assert(sizeof(Scripts_MentionPointOfInterest) == 0x000010, "Wrong size on Scripts_MentionPointOfInterest");
static_assert(offsetof(Scripts_MentionPointOfInterest, PointOfInterestData) == 0x000000, "Member 'Scripts_MentionPointOfInterest::PointOfInterestData' has a wrong offset!");

// Function Indiana.Scripts.MentionQuest
// 0x0010 (0x0010 - 0x0000)
struct Scripts_MentionQuest final
{
public:
	struct FGuid                                  QuestID;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_MentionQuest) == 0x000004, "Wrong alignment on Scripts_MentionQuest");
static_assert(sizeof(Scripts_MentionQuest) == 0x000010, "Wrong size on Scripts_MentionQuest");
static_assert(offsetof(Scripts_MentionQuest, QuestID) == 0x000000, "Member 'Scripts_MentionQuest::QuestID' has a wrong offset!");

// Function Indiana.Scripts.OpenOCL
// 0x0010 (0x0010 - 0x0000)
struct Scripts_OpenOCL final
{
public:
	struct FGuid                                  OCLObjectID;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_OpenOCL) == 0x000004, "Wrong alignment on Scripts_OpenOCL");
static_assert(sizeof(Scripts_OpenOCL) == 0x000010, "Wrong size on Scripts_OpenOCL");
static_assert(offsetof(Scripts_OpenOCL, OCLObjectID) == 0x000000, "Member 'Scripts_OpenOCL::OCLObjectID' has a wrong offset!");

// Function Indiana.Scripts.PlayConversationChatterEvent
// 0x0002 (0x0002 - 0x0000)
struct Scripts_PlayConversationChatterEvent final
{
public:
	EChatterEventType                             ChatterEvent;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConversationNode;                                 // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_PlayConversationChatterEvent) == 0x000001, "Wrong alignment on Scripts_PlayConversationChatterEvent");
static_assert(sizeof(Scripts_PlayConversationChatterEvent) == 0x000002, "Wrong size on Scripts_PlayConversationChatterEvent");
static_assert(offsetof(Scripts_PlayConversationChatterEvent, ChatterEvent) == 0x000000, "Member 'Scripts_PlayConversationChatterEvent::ChatterEvent' has a wrong offset!");
static_assert(offsetof(Scripts_PlayConversationChatterEvent, bConversationNode) == 0x000001, "Member 'Scripts_PlayConversationChatterEvent::bConversationNode' has a wrong offset!");

// Function Indiana.Scripts.RandomizeGlobalValue
// 0x0018 (0x0018 - 0x0000)
struct Scripts_RandomizeGlobalValue final
{
public:
	class FString                                 VariableName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinValue;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxValue;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_RandomizeGlobalValue) == 0x000008, "Wrong alignment on Scripts_RandomizeGlobalValue");
static_assert(sizeof(Scripts_RandomizeGlobalValue) == 0x000018, "Wrong size on Scripts_RandomizeGlobalValue");
static_assert(offsetof(Scripts_RandomizeGlobalValue, VariableName) == 0x000000, "Member 'Scripts_RandomizeGlobalValue::VariableName' has a wrong offset!");
static_assert(offsetof(Scripts_RandomizeGlobalValue, MinValue) == 0x000010, "Member 'Scripts_RandomizeGlobalValue::MinValue' has a wrong offset!");
static_assert(offsetof(Scripts_RandomizeGlobalValue, MaxValue) == 0x000014, "Member 'Scripts_RandomizeGlobalValue::MaxValue' has a wrong offset!");

// Function Indiana.Scripts.RandomizeGlobalValueWithGlobals
// 0x0030 (0x0030 - 0x0000)
struct Scripts_RandomizeGlobalValueWithGlobals final
{
public:
	class FString                                 VariableName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MinValueGlobal;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MaxValueGlobal;                                    // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_RandomizeGlobalValueWithGlobals) == 0x000008, "Wrong alignment on Scripts_RandomizeGlobalValueWithGlobals");
static_assert(sizeof(Scripts_RandomizeGlobalValueWithGlobals) == 0x000030, "Wrong size on Scripts_RandomizeGlobalValueWithGlobals");
static_assert(offsetof(Scripts_RandomizeGlobalValueWithGlobals, VariableName) == 0x000000, "Member 'Scripts_RandomizeGlobalValueWithGlobals::VariableName' has a wrong offset!");
static_assert(offsetof(Scripts_RandomizeGlobalValueWithGlobals, MinValueGlobal) == 0x000010, "Member 'Scripts_RandomizeGlobalValueWithGlobals::MinValueGlobal' has a wrong offset!");
static_assert(offsetof(Scripts_RandomizeGlobalValueWithGlobals, MaxValueGlobal) == 0x000020, "Member 'Scripts_RandomizeGlobalValueWithGlobals::MaxValueGlobal' has a wrong offset!");

// Function Indiana.Scripts.RegisterNamedTimestamp
// 0x0010 (0x0010 - 0x0000)
struct Scripts_RegisterNamedTimestamp final
{
public:
	class FString                                 TimestampName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_RegisterNamedTimestamp) == 0x000008, "Wrong alignment on Scripts_RegisterNamedTimestamp");
static_assert(sizeof(Scripts_RegisterNamedTimestamp) == 0x000010, "Wrong size on Scripts_RegisterNamedTimestamp");
static_assert(offsetof(Scripts_RegisterNamedTimestamp, TimestampName) == 0x000000, "Member 'Scripts_RegisterNamedTimestamp::TimestampName' has a wrong offset!");

// Function Indiana.Scripts.RemoteEvent
// 0x0010 (0x0010 - 0x0000)
struct Scripts_RemoteEvent final
{
public:
	class FString                                 EventName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_RemoteEvent) == 0x000008, "Wrong alignment on Scripts_RemoteEvent");
static_assert(sizeof(Scripts_RemoteEvent) == 0x000010, "Wrong size on Scripts_RemoteEvent");
static_assert(offsetof(Scripts_RemoteEvent, EventName) == 0x000000, "Member 'Scripts_RemoteEvent::EventName' has a wrong offset!");

// Function Indiana.Scripts.RemoveCompanionFromParty
// 0x0010 (0x0010 - 0x0000)
struct Scripts_RemoveCompanionFromParty final
{
public:
	struct FGuid                                  CompanionID;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_RemoveCompanionFromParty) == 0x000004, "Wrong alignment on Scripts_RemoveCompanionFromParty");
static_assert(sizeof(Scripts_RemoveCompanionFromParty) == 0x000010, "Wrong size on Scripts_RemoveCompanionFromParty");
static_assert(offsetof(Scripts_RemoveCompanionFromParty, CompanionID) == 0x000000, "Member 'Scripts_RemoveCompanionFromParty::CompanionID' has a wrong offset!");

// Function Indiana.Scripts.RemoveCurrency
// 0x0014 (0x0014 - 0x0000)
struct Scripts_RemoveCurrency final
{
public:
	struct FGuid                                  ActorId;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_RemoveCurrency) == 0x000004, "Wrong alignment on Scripts_RemoveCurrency");
static_assert(sizeof(Scripts_RemoveCurrency) == 0x000014, "Wrong size on Scripts_RemoveCurrency");
static_assert(offsetof(Scripts_RemoveCurrency, ActorId) == 0x000000, "Member 'Scripts_RemoveCurrency::ActorId' has a wrong offset!");
static_assert(offsetof(Scripts_RemoveCurrency, Count) == 0x000010, "Member 'Scripts_RemoveCurrency::Count' has a wrong offset!");

// Function Indiana.Scripts.RemoveItem
// 0x0018 (0x0018 - 0x0000)
struct Scripts_RemoveItem final
{
public:
	class FString                                 Item;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Scripts_RemoveItem) == 0x000008, "Wrong alignment on Scripts_RemoveItem");
static_assert(sizeof(Scripts_RemoveItem) == 0x000018, "Wrong size on Scripts_RemoveItem");
static_assert(offsetof(Scripts_RemoveItem, Item) == 0x000000, "Member 'Scripts_RemoveItem::Item' has a wrong offset!");
static_assert(offsetof(Scripts_RemoveItem, Count) == 0x000010, "Member 'Scripts_RemoveItem::Count' has a wrong offset!");

// Function Indiana.Scripts.RemoveItemFromActor
// 0x0028 (0x0028 - 0x0000)
struct Scripts_RemoveItemFromActor final
{
public:
	struct FGuid                                  ActorId;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Item;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Scripts_RemoveItemFromActor) == 0x000008, "Wrong alignment on Scripts_RemoveItemFromActor");
static_assert(sizeof(Scripts_RemoveItemFromActor) == 0x000028, "Wrong size on Scripts_RemoveItemFromActor");
static_assert(offsetof(Scripts_RemoveItemFromActor, ActorId) == 0x000000, "Member 'Scripts_RemoveItemFromActor::ActorId' has a wrong offset!");
static_assert(offsetof(Scripts_RemoveItemFromActor, Item) == 0x000010, "Member 'Scripts_RemoveItemFromActor::Item' has a wrong offset!");
static_assert(offsetof(Scripts_RemoveItemFromActor, Count) == 0x000020, "Member 'Scripts_RemoveItemFromActor::Count' has a wrong offset!");

// Function Indiana.Scripts.ReplaceCompanionInSlot
// 0x0014 (0x0014 - 0x0000)
struct Scripts_ReplaceCompanionInSlot final
{
public:
	struct FGuid                                  PotientalCompanionID;                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECompanionSlot                                CommpanionSlot;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Scripts_ReplaceCompanionInSlot) == 0x000004, "Wrong alignment on Scripts_ReplaceCompanionInSlot");
static_assert(sizeof(Scripts_ReplaceCompanionInSlot) == 0x000014, "Wrong size on Scripts_ReplaceCompanionInSlot");
static_assert(offsetof(Scripts_ReplaceCompanionInSlot, PotientalCompanionID) == 0x000000, "Member 'Scripts_ReplaceCompanionInSlot::PotientalCompanionID' has a wrong offset!");
static_assert(offsetof(Scripts_ReplaceCompanionInSlot, CommpanionSlot) == 0x000010, "Member 'Scripts_ReplaceCompanionInSlot::CommpanionSlot' has a wrong offset!");

// Function Indiana.Scripts.SealOCL
// 0x0010 (0x0010 - 0x0000)
struct Scripts_SealOCL final
{
public:
	struct FGuid                                  OCLObjectID;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_SealOCL) == 0x000004, "Wrong alignment on Scripts_SealOCL");
static_assert(sizeof(Scripts_SealOCL) == 0x000010, "Wrong size on Scripts_SealOCL");
static_assert(offsetof(Scripts_SealOCL, OCLObjectID) == 0x000000, "Member 'Scripts_SealOCL::OCLObjectID' has a wrong offset!");

// Function Indiana.Scripts.SetCharacterTeam_AvoidUsingThis
// 0x0020 (0x0020 - 0x0000)
struct Scripts_SetCharacterTeam_AvoidUsingThis final
{
public:
	struct FGuid                                  CharacterID;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Team;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_SetCharacterTeam_AvoidUsingThis) == 0x000008, "Wrong alignment on Scripts_SetCharacterTeam_AvoidUsingThis");
static_assert(sizeof(Scripts_SetCharacterTeam_AvoidUsingThis) == 0x000020, "Wrong size on Scripts_SetCharacterTeam_AvoidUsingThis");
static_assert(offsetof(Scripts_SetCharacterTeam_AvoidUsingThis, CharacterID) == 0x000000, "Member 'Scripts_SetCharacterTeam_AvoidUsingThis::CharacterID' has a wrong offset!");
static_assert(offsetof(Scripts_SetCharacterTeam_AvoidUsingThis, Team) == 0x000010, "Member 'Scripts_SetCharacterTeam_AvoidUsingThis::Team' has a wrong offset!");

// Function Indiana.Scripts.SetCompanionWantsToTalk
// 0x0002 (0x0002 - 0x0000)
struct Scripts_SetCompanionWantsToTalk final
{
public:
	ESpecialObsidianID                            CompanionID;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWantsToTalk;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_SetCompanionWantsToTalk) == 0x000001, "Wrong alignment on Scripts_SetCompanionWantsToTalk");
static_assert(sizeof(Scripts_SetCompanionWantsToTalk) == 0x000002, "Wrong size on Scripts_SetCompanionWantsToTalk");
static_assert(offsetof(Scripts_SetCompanionWantsToTalk, CompanionID) == 0x000000, "Member 'Scripts_SetCompanionWantsToTalk::CompanionID' has a wrong offset!");
static_assert(offsetof(Scripts_SetCompanionWantsToTalk, bWantsToTalk) == 0x000001, "Member 'Scripts_SetCompanionWantsToTalk::bWantsToTalk' has a wrong offset!");

// Function Indiana.Scripts.SetConversationBodyTargetActor
// 0x0024 (0x0024 - 0x0000)
struct Scripts_SetConversationBodyTargetActor final
{
public:
	struct FGuid                                  Actor;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  Target;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStickyTarget;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Scripts_SetConversationBodyTargetActor) == 0x000004, "Wrong alignment on Scripts_SetConversationBodyTargetActor");
static_assert(sizeof(Scripts_SetConversationBodyTargetActor) == 0x000024, "Wrong size on Scripts_SetConversationBodyTargetActor");
static_assert(offsetof(Scripts_SetConversationBodyTargetActor, Actor) == 0x000000, "Member 'Scripts_SetConversationBodyTargetActor::Actor' has a wrong offset!");
static_assert(offsetof(Scripts_SetConversationBodyTargetActor, Target) == 0x000010, "Member 'Scripts_SetConversationBodyTargetActor::Target' has a wrong offset!");
static_assert(offsetof(Scripts_SetConversationBodyTargetActor, bStickyTarget) == 0x000020, "Member 'Scripts_SetConversationBodyTargetActor::bStickyTarget' has a wrong offset!");

// Function Indiana.Scripts.SetConversationEyesTargetActor
// 0x0024 (0x0024 - 0x0000)
struct Scripts_SetConversationEyesTargetActor final
{
public:
	struct FGuid                                  Actor;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  Target;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStickyTarget;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Scripts_SetConversationEyesTargetActor) == 0x000004, "Wrong alignment on Scripts_SetConversationEyesTargetActor");
static_assert(sizeof(Scripts_SetConversationEyesTargetActor) == 0x000024, "Wrong size on Scripts_SetConversationEyesTargetActor");
static_assert(offsetof(Scripts_SetConversationEyesTargetActor, Actor) == 0x000000, "Member 'Scripts_SetConversationEyesTargetActor::Actor' has a wrong offset!");
static_assert(offsetof(Scripts_SetConversationEyesTargetActor, Target) == 0x000010, "Member 'Scripts_SetConversationEyesTargetActor::Target' has a wrong offset!");
static_assert(offsetof(Scripts_SetConversationEyesTargetActor, bStickyTarget) == 0x000020, "Member 'Scripts_SetConversationEyesTargetActor::bStickyTarget' has a wrong offset!");

// Function Indiana.Scripts.SetConversationHeadTargetActor
// 0x0024 (0x0024 - 0x0000)
struct Scripts_SetConversationHeadTargetActor final
{
public:
	struct FGuid                                  Actor;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  Target;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStickyTarget;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Scripts_SetConversationHeadTargetActor) == 0x000004, "Wrong alignment on Scripts_SetConversationHeadTargetActor");
static_assert(sizeof(Scripts_SetConversationHeadTargetActor) == 0x000024, "Wrong size on Scripts_SetConversationHeadTargetActor");
static_assert(offsetof(Scripts_SetConversationHeadTargetActor, Actor) == 0x000000, "Member 'Scripts_SetConversationHeadTargetActor::Actor' has a wrong offset!");
static_assert(offsetof(Scripts_SetConversationHeadTargetActor, Target) == 0x000010, "Member 'Scripts_SetConversationHeadTargetActor::Target' has a wrong offset!");
static_assert(offsetof(Scripts_SetConversationHeadTargetActor, bStickyTarget) == 0x000020, "Member 'Scripts_SetConversationHeadTargetActor::bStickyTarget' has a wrong offset!");

// Function Indiana.Scripts.SetConversationTargetActor
// 0x0024 (0x0024 - 0x0000)
struct Scripts_SetConversationTargetActor final
{
public:
	struct FGuid                                  Actor;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  Target;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRotateBody;                                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStickyTarget;                                     // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Scripts_SetConversationTargetActor) == 0x000004, "Wrong alignment on Scripts_SetConversationTargetActor");
static_assert(sizeof(Scripts_SetConversationTargetActor) == 0x000024, "Wrong size on Scripts_SetConversationTargetActor");
static_assert(offsetof(Scripts_SetConversationTargetActor, Actor) == 0x000000, "Member 'Scripts_SetConversationTargetActor::Actor' has a wrong offset!");
static_assert(offsetof(Scripts_SetConversationTargetActor, Target) == 0x000010, "Member 'Scripts_SetConversationTargetActor::Target' has a wrong offset!");
static_assert(offsetof(Scripts_SetConversationTargetActor, bRotateBody) == 0x000020, "Member 'Scripts_SetConversationTargetActor::bRotateBody' has a wrong offset!");
static_assert(offsetof(Scripts_SetConversationTargetActor, bStickyTarget) == 0x000021, "Member 'Scripts_SetConversationTargetActor::bStickyTarget' has a wrong offset!");

// Function Indiana.Scripts.SetDefaultEmotion
// 0x0014 (0x0014 - 0x0000)
struct Scripts_SetDefaultEmotion final
{
public:
	struct FGuid                                  Actor;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEmotion                                      Emotion;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Scripts_SetDefaultEmotion) == 0x000004, "Wrong alignment on Scripts_SetDefaultEmotion");
static_assert(sizeof(Scripts_SetDefaultEmotion) == 0x000014, "Wrong size on Scripts_SetDefaultEmotion");
static_assert(offsetof(Scripts_SetDefaultEmotion, Actor) == 0x000000, "Member 'Scripts_SetDefaultEmotion::Actor' has a wrong offset!");
static_assert(offsetof(Scripts_SetDefaultEmotion, Emotion) == 0x000010, "Member 'Scripts_SetDefaultEmotion::Emotion' has a wrong offset!");

// Function Indiana.Scripts.SetEmotion
// 0x001C (0x001C - 0x0000)
struct Scripts_SetEmotion final
{
public:
	struct FGuid                                  Actor;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEmotion                                      Emotion;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Persist;                                           // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Scripts_SetEmotion) == 0x000004, "Wrong alignment on Scripts_SetEmotion");
static_assert(sizeof(Scripts_SetEmotion) == 0x00001C, "Wrong size on Scripts_SetEmotion");
static_assert(offsetof(Scripts_SetEmotion, Actor) == 0x000000, "Member 'Scripts_SetEmotion::Actor' has a wrong offset!");
static_assert(offsetof(Scripts_SetEmotion, Emotion) == 0x000010, "Member 'Scripts_SetEmotion::Emotion' has a wrong offset!");
static_assert(offsetof(Scripts_SetEmotion, Duration) == 0x000014, "Member 'Scripts_SetEmotion::Duration' has a wrong offset!");
static_assert(offsetof(Scripts_SetEmotion, Persist) == 0x000018, "Member 'Scripts_SetEmotion::Persist' has a wrong offset!");

// Function Indiana.Scripts.SetEmotionFull
// 0x0024 (0x0024 - 0x0000)
struct Scripts_SetEmotionFull final
{
public:
	struct FGuid                                  Actor;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEmotion                                      Emotion;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeadStrength;                                      // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Persist;                                           // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AffectHead;                                        // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AffectBody;                                        // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Scripts_SetEmotionFull) == 0x000004, "Wrong alignment on Scripts_SetEmotionFull");
static_assert(sizeof(Scripts_SetEmotionFull) == 0x000024, "Wrong size on Scripts_SetEmotionFull");
static_assert(offsetof(Scripts_SetEmotionFull, Actor) == 0x000000, "Member 'Scripts_SetEmotionFull::Actor' has a wrong offset!");
static_assert(offsetof(Scripts_SetEmotionFull, Emotion) == 0x000010, "Member 'Scripts_SetEmotionFull::Emotion' has a wrong offset!");
static_assert(offsetof(Scripts_SetEmotionFull, Delay) == 0x000014, "Member 'Scripts_SetEmotionFull::Delay' has a wrong offset!");
static_assert(offsetof(Scripts_SetEmotionFull, Duration) == 0x000018, "Member 'Scripts_SetEmotionFull::Duration' has a wrong offset!");
static_assert(offsetof(Scripts_SetEmotionFull, HeadStrength) == 0x00001C, "Member 'Scripts_SetEmotionFull::HeadStrength' has a wrong offset!");
static_assert(offsetof(Scripts_SetEmotionFull, Persist) == 0x000020, "Member 'Scripts_SetEmotionFull::Persist' has a wrong offset!");
static_assert(offsetof(Scripts_SetEmotionFull, AffectHead) == 0x000021, "Member 'Scripts_SetEmotionFull::AffectHead' has a wrong offset!");
static_assert(offsetof(Scripts_SetEmotionFull, AffectBody) == 0x000022, "Member 'Scripts_SetEmotionFull::AffectBody' has a wrong offset!");

// Function Indiana.Scripts.SetEmotionWithDelay
// 0x0020 (0x0020 - 0x0000)
struct Scripts_SetEmotionWithDelay final
{
public:
	struct FGuid                                  Actor;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEmotion                                      Emotion;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EmotionDelay;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Persist;                                           // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Scripts_SetEmotionWithDelay) == 0x000004, "Wrong alignment on Scripts_SetEmotionWithDelay");
static_assert(sizeof(Scripts_SetEmotionWithDelay) == 0x000020, "Wrong size on Scripts_SetEmotionWithDelay");
static_assert(offsetof(Scripts_SetEmotionWithDelay, Actor) == 0x000000, "Member 'Scripts_SetEmotionWithDelay::Actor' has a wrong offset!");
static_assert(offsetof(Scripts_SetEmotionWithDelay, Emotion) == 0x000010, "Member 'Scripts_SetEmotionWithDelay::Emotion' has a wrong offset!");
static_assert(offsetof(Scripts_SetEmotionWithDelay, EmotionDelay) == 0x000014, "Member 'Scripts_SetEmotionWithDelay::EmotionDelay' has a wrong offset!");
static_assert(offsetof(Scripts_SetEmotionWithDelay, Duration) == 0x000018, "Member 'Scripts_SetEmotionWithDelay::Duration' has a wrong offset!");
static_assert(offsetof(Scripts_SetEmotionWithDelay, Persist) == 0x00001C, "Member 'Scripts_SetEmotionWithDelay::Persist' has a wrong offset!");

// Function Indiana.Scripts.SetFactionEncountered
// 0x0010 (0x0010 - 0x0000)
struct Scripts_SetFactionEncountered final
{
public:
	class FString                                 Faction;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_SetFactionEncountered) == 0x000008, "Wrong alignment on Scripts_SetFactionEncountered");
static_assert(sizeof(Scripts_SetFactionEncountered) == 0x000010, "Wrong size on Scripts_SetFactionEncountered");
static_assert(offsetof(Scripts_SetFactionEncountered, Faction) == 0x000000, "Member 'Scripts_SetFactionEncountered::Faction' has a wrong offset!");

// Function Indiana.Scripts.SetFactionOwnershipOfItemsInContainer
// 0x0028 (0x0028 - 0x0000)
struct Scripts_SetFactionOwnershipOfItemsInContainer final
{
public:
	struct FGuid                                  ContainerID;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Faction;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClearPlayerOwnership;                             // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Scripts_SetFactionOwnershipOfItemsInContainer) == 0x000008, "Wrong alignment on Scripts_SetFactionOwnershipOfItemsInContainer");
static_assert(sizeof(Scripts_SetFactionOwnershipOfItemsInContainer) == 0x000028, "Wrong size on Scripts_SetFactionOwnershipOfItemsInContainer");
static_assert(offsetof(Scripts_SetFactionOwnershipOfItemsInContainer, ContainerID) == 0x000000, "Member 'Scripts_SetFactionOwnershipOfItemsInContainer::ContainerID' has a wrong offset!");
static_assert(offsetof(Scripts_SetFactionOwnershipOfItemsInContainer, Faction) == 0x000010, "Member 'Scripts_SetFactionOwnershipOfItemsInContainer::Faction' has a wrong offset!");
static_assert(offsetof(Scripts_SetFactionOwnershipOfItemsInContainer, bClearPlayerOwnership) == 0x000020, "Member 'Scripts_SetFactionOwnershipOfItemsInContainer::bClearPlayerOwnership' has a wrong offset!");

// Function Indiana.Scripts.SetFactionOwnershipOfItemTypeInContainer
// 0x0038 (0x0038 - 0x0000)
struct Scripts_SetFactionOwnershipOfItemTypeInContainer final
{
public:
	struct FGuid                                  ContainerID;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Item;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Faction;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClearPlayerOwnership;                             // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Scripts_SetFactionOwnershipOfItemTypeInContainer) == 0x000008, "Wrong alignment on Scripts_SetFactionOwnershipOfItemTypeInContainer");
static_assert(sizeof(Scripts_SetFactionOwnershipOfItemTypeInContainer) == 0x000038, "Wrong size on Scripts_SetFactionOwnershipOfItemTypeInContainer");
static_assert(offsetof(Scripts_SetFactionOwnershipOfItemTypeInContainer, ContainerID) == 0x000000, "Member 'Scripts_SetFactionOwnershipOfItemTypeInContainer::ContainerID' has a wrong offset!");
static_assert(offsetof(Scripts_SetFactionOwnershipOfItemTypeInContainer, Item) == 0x000010, "Member 'Scripts_SetFactionOwnershipOfItemTypeInContainer::Item' has a wrong offset!");
static_assert(offsetof(Scripts_SetFactionOwnershipOfItemTypeInContainer, Faction) == 0x000020, "Member 'Scripts_SetFactionOwnershipOfItemTypeInContainer::Faction' has a wrong offset!");
static_assert(offsetof(Scripts_SetFactionOwnershipOfItemTypeInContainer, bClearPlayerOwnership) == 0x000030, "Member 'Scripts_SetFactionOwnershipOfItemTypeInContainer::bClearPlayerOwnership' has a wrong offset!");

// Function Indiana.Scripts.SetGlobalIfGlobal
// 0x0030 (0x0030 - 0x0000)
struct Scripts_SetGlobalIfGlobal final
{
public:
	class FString                                 ConditionVariableName;                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConditionValue;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 VariableName;                                      // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Scripts_SetGlobalIfGlobal) == 0x000008, "Wrong alignment on Scripts_SetGlobalIfGlobal");
static_assert(sizeof(Scripts_SetGlobalIfGlobal) == 0x000030, "Wrong size on Scripts_SetGlobalIfGlobal");
static_assert(offsetof(Scripts_SetGlobalIfGlobal, ConditionVariableName) == 0x000000, "Member 'Scripts_SetGlobalIfGlobal::ConditionVariableName' has a wrong offset!");
static_assert(offsetof(Scripts_SetGlobalIfGlobal, ConditionValue) == 0x000010, "Member 'Scripts_SetGlobalIfGlobal::ConditionValue' has a wrong offset!");
static_assert(offsetof(Scripts_SetGlobalIfGlobal, VariableName) == 0x000018, "Member 'Scripts_SetGlobalIfGlobal::VariableName' has a wrong offset!");
static_assert(offsetof(Scripts_SetGlobalIfGlobal, Value) == 0x000028, "Member 'Scripts_SetGlobalIfGlobal::Value' has a wrong offset!");

// Function Indiana.Scripts.SetGlobalValue
// 0x0018 (0x0018 - 0x0000)
struct Scripts_SetGlobalValue final
{
public:
	class FString                                 VariableName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Scripts_SetGlobalValue) == 0x000008, "Wrong alignment on Scripts_SetGlobalValue");
static_assert(sizeof(Scripts_SetGlobalValue) == 0x000018, "Wrong size on Scripts_SetGlobalValue");
static_assert(offsetof(Scripts_SetGlobalValue, VariableName) == 0x000000, "Member 'Scripts_SetGlobalValue::VariableName' has a wrong offset!");
static_assert(offsetof(Scripts_SetGlobalValue, Value) == 0x000010, "Member 'Scripts_SetGlobalValue::Value' has a wrong offset!");

// Function Indiana.Scripts.SetGlobalVariableValue
// 0x0018 (0x0018 - 0x0000)
struct Scripts_SetGlobalVariableValue final
{
public:
	struct FGlobalVariable                        Variable;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Scripts_SetGlobalVariableValue) == 0x000008, "Wrong alignment on Scripts_SetGlobalVariableValue");
static_assert(sizeof(Scripts_SetGlobalVariableValue) == 0x000018, "Wrong size on Scripts_SetGlobalVariableValue");
static_assert(offsetof(Scripts_SetGlobalVariableValue, Variable) == 0x000000, "Member 'Scripts_SetGlobalVariableValue::Variable' has a wrong offset!");
static_assert(offsetof(Scripts_SetGlobalVariableValue, Value) == 0x000010, "Member 'Scripts_SetGlobalVariableValue::Value' has a wrong offset!");

// Function Indiana.Scripts.SetInterrogationComplete
// 0x0001 (0x0001 - 0x0000)
struct Scripts_SetInterrogationComplete final
{
public:
	EInterrogationResult                          Result;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_SetInterrogationComplete) == 0x000001, "Wrong alignment on Scripts_SetInterrogationComplete");
static_assert(sizeof(Scripts_SetInterrogationComplete) == 0x000001, "Wrong size on Scripts_SetInterrogationComplete");
static_assert(offsetof(Scripts_SetInterrogationComplete, Result) == 0x000000, "Member 'Scripts_SetInterrogationComplete::Result' has a wrong offset!");

// Function Indiana.Scripts.SetMusicOverride
// 0x0010 (0x0010 - 0x0000)
struct Scripts_SetMusicOverride final
{
public:
	class FString                                 OverrideTrack;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_SetMusicOverride) == 0x000008, "Wrong alignment on Scripts_SetMusicOverride");
static_assert(sizeof(Scripts_SetMusicOverride) == 0x000010, "Wrong size on Scripts_SetMusicOverride");
static_assert(offsetof(Scripts_SetMusicOverride, OverrideTrack) == 0x000000, "Member 'Scripts_SetMusicOverride::OverrideTrack' has a wrong offset!");

// Function Indiana.Scripts.SetNonPlayerOwnershipOfItemsInContainer
// 0x0024 (0x0024 - 0x0000)
struct Scripts_SetNonPlayerOwnershipOfItemsInContainer final
{
public:
	struct FGuid                                  ContainerID;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  Actor;                                             // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClearPlayerOwnership;                             // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Scripts_SetNonPlayerOwnershipOfItemsInContainer) == 0x000004, "Wrong alignment on Scripts_SetNonPlayerOwnershipOfItemsInContainer");
static_assert(sizeof(Scripts_SetNonPlayerOwnershipOfItemsInContainer) == 0x000024, "Wrong size on Scripts_SetNonPlayerOwnershipOfItemsInContainer");
static_assert(offsetof(Scripts_SetNonPlayerOwnershipOfItemsInContainer, ContainerID) == 0x000000, "Member 'Scripts_SetNonPlayerOwnershipOfItemsInContainer::ContainerID' has a wrong offset!");
static_assert(offsetof(Scripts_SetNonPlayerOwnershipOfItemsInContainer, Actor) == 0x000010, "Member 'Scripts_SetNonPlayerOwnershipOfItemsInContainer::Actor' has a wrong offset!");
static_assert(offsetof(Scripts_SetNonPlayerOwnershipOfItemsInContainer, bClearPlayerOwnership) == 0x000020, "Member 'Scripts_SetNonPlayerOwnershipOfItemsInContainer::bClearPlayerOwnership' has a wrong offset!");

// Function Indiana.Scripts.SetNonPlayerOwnershipOfItemTypeInContainer
// 0x0038 (0x0038 - 0x0000)
struct Scripts_SetNonPlayerOwnershipOfItemTypeInContainer final
{
public:
	struct FGuid                                  ContainerID;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Item;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  Actor;                                             // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClearPlayerOwnership;                             // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Scripts_SetNonPlayerOwnershipOfItemTypeInContainer) == 0x000008, "Wrong alignment on Scripts_SetNonPlayerOwnershipOfItemTypeInContainer");
static_assert(sizeof(Scripts_SetNonPlayerOwnershipOfItemTypeInContainer) == 0x000038, "Wrong size on Scripts_SetNonPlayerOwnershipOfItemTypeInContainer");
static_assert(offsetof(Scripts_SetNonPlayerOwnershipOfItemTypeInContainer, ContainerID) == 0x000000, "Member 'Scripts_SetNonPlayerOwnershipOfItemTypeInContainer::ContainerID' has a wrong offset!");
static_assert(offsetof(Scripts_SetNonPlayerOwnershipOfItemTypeInContainer, Item) == 0x000010, "Member 'Scripts_SetNonPlayerOwnershipOfItemTypeInContainer::Item' has a wrong offset!");
static_assert(offsetof(Scripts_SetNonPlayerOwnershipOfItemTypeInContainer, Actor) == 0x000020, "Member 'Scripts_SetNonPlayerOwnershipOfItemTypeInContainer::Actor' has a wrong offset!");
static_assert(offsetof(Scripts_SetNonPlayerOwnershipOfItemTypeInContainer, bClearPlayerOwnership) == 0x000030, "Member 'Scripts_SetNonPlayerOwnershipOfItemTypeInContainer::bClearPlayerOwnership' has a wrong offset!");

// Function Indiana.Scripts.SetObjectiveAlternateDescription
// 0x0018 (0x0018 - 0x0000)
struct Scripts_SetObjectiveAlternateDescription final
{
public:
	struct FGuid                                  QuestID;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ObjectiveID;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ObjectiveDescriptionID;                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_SetObjectiveAlternateDescription) == 0x000004, "Wrong alignment on Scripts_SetObjectiveAlternateDescription");
static_assert(sizeof(Scripts_SetObjectiveAlternateDescription) == 0x000018, "Wrong size on Scripts_SetObjectiveAlternateDescription");
static_assert(offsetof(Scripts_SetObjectiveAlternateDescription, QuestID) == 0x000000, "Member 'Scripts_SetObjectiveAlternateDescription::QuestID' has a wrong offset!");
static_assert(offsetof(Scripts_SetObjectiveAlternateDescription, ObjectiveID) == 0x000010, "Member 'Scripts_SetObjectiveAlternateDescription::ObjectiveID' has a wrong offset!");
static_assert(offsetof(Scripts_SetObjectiveAlternateDescription, ObjectiveDescriptionID) == 0x000014, "Member 'Scripts_SetObjectiveAlternateDescription::ObjectiveDescriptionID' has a wrong offset!");

// Function Indiana.Scripts.SetPickupFactionOwnership
// 0x0028 (0x0028 - 0x0000)
struct Scripts_SetPickupFactionOwnership final
{
public:
	struct FGuid                                  PickupID;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Faction;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClearPlayerOwnership;                             // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Scripts_SetPickupFactionOwnership) == 0x000008, "Wrong alignment on Scripts_SetPickupFactionOwnership");
static_assert(sizeof(Scripts_SetPickupFactionOwnership) == 0x000028, "Wrong size on Scripts_SetPickupFactionOwnership");
static_assert(offsetof(Scripts_SetPickupFactionOwnership, PickupID) == 0x000000, "Member 'Scripts_SetPickupFactionOwnership::PickupID' has a wrong offset!");
static_assert(offsetof(Scripts_SetPickupFactionOwnership, Faction) == 0x000010, "Member 'Scripts_SetPickupFactionOwnership::Faction' has a wrong offset!");
static_assert(offsetof(Scripts_SetPickupFactionOwnership, bClearPlayerOwnership) == 0x000020, "Member 'Scripts_SetPickupFactionOwnership::bClearPlayerOwnership' has a wrong offset!");

// Function Indiana.Scripts.SetPickupNonPlayerOwnership
// 0x0024 (0x0024 - 0x0000)
struct Scripts_SetPickupNonPlayerOwnership final
{
public:
	struct FGuid                                  PickupID;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  Actor;                                             // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClearPlayerOwnership;                             // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Scripts_SetPickupNonPlayerOwnership) == 0x000004, "Wrong alignment on Scripts_SetPickupNonPlayerOwnership");
static_assert(sizeof(Scripts_SetPickupNonPlayerOwnership) == 0x000024, "Wrong size on Scripts_SetPickupNonPlayerOwnership");
static_assert(offsetof(Scripts_SetPickupNonPlayerOwnership, PickupID) == 0x000000, "Member 'Scripts_SetPickupNonPlayerOwnership::PickupID' has a wrong offset!");
static_assert(offsetof(Scripts_SetPickupNonPlayerOwnership, Actor) == 0x000010, "Member 'Scripts_SetPickupNonPlayerOwnership::Actor' has a wrong offset!");
static_assert(offsetof(Scripts_SetPickupNonPlayerOwnership, bClearPlayerOwnership) == 0x000020, "Member 'Scripts_SetPickupNonPlayerOwnership::bClearPlayerOwnership' has a wrong offset!");

// Function Indiana.Scripts.SetPickupPlayerOwnership
// 0x0014 (0x0014 - 0x0000)
struct Scripts_SetPickupPlayerOwnership final
{
public:
	struct FGuid                                  PickupID;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayerOwned;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClearNonPlayerOwnership;                          // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Scripts_SetPickupPlayerOwnership) == 0x000004, "Wrong alignment on Scripts_SetPickupPlayerOwnership");
static_assert(sizeof(Scripts_SetPickupPlayerOwnership) == 0x000014, "Wrong size on Scripts_SetPickupPlayerOwnership");
static_assert(offsetof(Scripts_SetPickupPlayerOwnership, PickupID) == 0x000000, "Member 'Scripts_SetPickupPlayerOwnership::PickupID' has a wrong offset!");
static_assert(offsetof(Scripts_SetPickupPlayerOwnership, bPlayerOwned) == 0x000010, "Member 'Scripts_SetPickupPlayerOwnership::bPlayerOwned' has a wrong offset!");
static_assert(offsetof(Scripts_SetPickupPlayerOwnership, bClearNonPlayerOwnership) == 0x000011, "Member 'Scripts_SetPickupPlayerOwnership::bClearNonPlayerOwnership' has a wrong offset!");

// Function Indiana.Scripts.SetPlayerAwareOfRegion
// 0x0010 (0x0010 - 0x0000)
struct Scripts_SetPlayerAwareOfRegion final
{
public:
	class FString                                 TravelRegion;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_SetPlayerAwareOfRegion) == 0x000008, "Wrong alignment on Scripts_SetPlayerAwareOfRegion");
static_assert(sizeof(Scripts_SetPlayerAwareOfRegion) == 0x000010, "Wrong size on Scripts_SetPlayerAwareOfRegion");
static_assert(offsetof(Scripts_SetPlayerAwareOfRegion, TravelRegion) == 0x000000, "Member 'Scripts_SetPlayerAwareOfRegion::TravelRegion' has a wrong offset!");

// Function Indiana.Scripts.SetPlayerAwareOfTravelDestination
// 0x0010 (0x0010 - 0x0000)
struct Scripts_SetPlayerAwareOfTravelDestination final
{
public:
	class FString                                 TravelDestination;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_SetPlayerAwareOfTravelDestination) == 0x000008, "Wrong alignment on Scripts_SetPlayerAwareOfTravelDestination");
static_assert(sizeof(Scripts_SetPlayerAwareOfTravelDestination) == 0x000010, "Wrong size on Scripts_SetPlayerAwareOfTravelDestination");
static_assert(offsetof(Scripts_SetPlayerAwareOfTravelDestination, TravelDestination) == 0x000000, "Member 'Scripts_SetPlayerAwareOfTravelDestination::TravelDestination' has a wrong offset!");

// Function Indiana.Scripts.SetPlayerOwnershipOfItemsInContainer
// 0x0014 (0x0014 - 0x0000)
struct Scripts_SetPlayerOwnershipOfItemsInContainer final
{
public:
	struct FGuid                                  ContainerID;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayerOwned;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClearNonPlayerOwnership;                          // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Scripts_SetPlayerOwnershipOfItemsInContainer) == 0x000004, "Wrong alignment on Scripts_SetPlayerOwnershipOfItemsInContainer");
static_assert(sizeof(Scripts_SetPlayerOwnershipOfItemsInContainer) == 0x000014, "Wrong size on Scripts_SetPlayerOwnershipOfItemsInContainer");
static_assert(offsetof(Scripts_SetPlayerOwnershipOfItemsInContainer, ContainerID) == 0x000000, "Member 'Scripts_SetPlayerOwnershipOfItemsInContainer::ContainerID' has a wrong offset!");
static_assert(offsetof(Scripts_SetPlayerOwnershipOfItemsInContainer, bPlayerOwned) == 0x000010, "Member 'Scripts_SetPlayerOwnershipOfItemsInContainer::bPlayerOwned' has a wrong offset!");
static_assert(offsetof(Scripts_SetPlayerOwnershipOfItemsInContainer, bClearNonPlayerOwnership) == 0x000011, "Member 'Scripts_SetPlayerOwnershipOfItemsInContainer::bClearNonPlayerOwnership' has a wrong offset!");

// Function Indiana.Scripts.SetPlayerOwnershipOfItemTypeInContainer
// 0x0028 (0x0028 - 0x0000)
struct Scripts_SetPlayerOwnershipOfItemTypeInContainer final
{
public:
	struct FGuid                                  ContainerID;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Item;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayerOwned;                                      // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClearNonPlayerOwnership;                          // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Scripts_SetPlayerOwnershipOfItemTypeInContainer) == 0x000008, "Wrong alignment on Scripts_SetPlayerOwnershipOfItemTypeInContainer");
static_assert(sizeof(Scripts_SetPlayerOwnershipOfItemTypeInContainer) == 0x000028, "Wrong size on Scripts_SetPlayerOwnershipOfItemTypeInContainer");
static_assert(offsetof(Scripts_SetPlayerOwnershipOfItemTypeInContainer, ContainerID) == 0x000000, "Member 'Scripts_SetPlayerOwnershipOfItemTypeInContainer::ContainerID' has a wrong offset!");
static_assert(offsetof(Scripts_SetPlayerOwnershipOfItemTypeInContainer, Item) == 0x000010, "Member 'Scripts_SetPlayerOwnershipOfItemTypeInContainer::Item' has a wrong offset!");
static_assert(offsetof(Scripts_SetPlayerOwnershipOfItemTypeInContainer, bPlayerOwned) == 0x000020, "Member 'Scripts_SetPlayerOwnershipOfItemTypeInContainer::bPlayerOwned' has a wrong offset!");
static_assert(offsetof(Scripts_SetPlayerOwnershipOfItemTypeInContainer, bClearNonPlayerOwnership) == 0x000021, "Member 'Scripts_SetPlayerOwnershipOfItemTypeInContainer::bClearNonPlayerOwnership' has a wrong offset!");

// Function Indiana.Scripts.SetPlayerRelationshipToHostile
// 0x0010 (0x0010 - 0x0000)
struct Scripts_SetPlayerRelationshipToHostile final
{
public:
	struct FGuid                                  CharacterID;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_SetPlayerRelationshipToHostile) == 0x000004, "Wrong alignment on Scripts_SetPlayerRelationshipToHostile");
static_assert(sizeof(Scripts_SetPlayerRelationshipToHostile) == 0x000010, "Wrong size on Scripts_SetPlayerRelationshipToHostile");
static_assert(offsetof(Scripts_SetPlayerRelationshipToHostile, CharacterID) == 0x000000, "Member 'Scripts_SetPlayerRelationshipToHostile::CharacterID' has a wrong offset!");

// Function Indiana.Scripts.SetPlayerShipLocation
// 0x0010 (0x0010 - 0x0000)
struct Scripts_SetPlayerShipLocation final
{
public:
	class FString                                 ShipDestination;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_SetPlayerShipLocation) == 0x000008, "Wrong alignment on Scripts_SetPlayerShipLocation");
static_assert(sizeof(Scripts_SetPlayerShipLocation) == 0x000010, "Wrong size on Scripts_SetPlayerShipLocation");
static_assert(offsetof(Scripts_SetPlayerShipLocation, ShipDestination) == 0x000000, "Member 'Scripts_SetPlayerShipLocation::ShipDestination' has a wrong offset!");

// Function Indiana.Scripts.SetPlayerTravelDestinationHidden
// 0x0018 (0x0018 - 0x0000)
struct Scripts_SetPlayerTravelDestinationHidden final
{
public:
	class FString                                 TravelDestination;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHidden;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Scripts_SetPlayerTravelDestinationHidden) == 0x000008, "Wrong alignment on Scripts_SetPlayerTravelDestinationHidden");
static_assert(sizeof(Scripts_SetPlayerTravelDestinationHidden) == 0x000018, "Wrong size on Scripts_SetPlayerTravelDestinationHidden");
static_assert(offsetof(Scripts_SetPlayerTravelDestinationHidden, TravelDestination) == 0x000000, "Member 'Scripts_SetPlayerTravelDestinationHidden::TravelDestination' has a wrong offset!");
static_assert(offsetof(Scripts_SetPlayerTravelDestinationHidden, bHidden) == 0x000010, "Member 'Scripts_SetPlayerTravelDestinationHidden::bHidden' has a wrong offset!");

// Function Indiana.Scripts.SetPlayerTravelDestinationLocked
// 0x0018 (0x0018 - 0x0000)
struct Scripts_SetPlayerTravelDestinationLocked final
{
public:
	class FString                                 TravelDestination;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLocked;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Scripts_SetPlayerTravelDestinationLocked) == 0x000008, "Wrong alignment on Scripts_SetPlayerTravelDestinationLocked");
static_assert(sizeof(Scripts_SetPlayerTravelDestinationLocked) == 0x000018, "Wrong size on Scripts_SetPlayerTravelDestinationLocked");
static_assert(offsetof(Scripts_SetPlayerTravelDestinationLocked, TravelDestination) == 0x000000, "Member 'Scripts_SetPlayerTravelDestinationLocked::TravelDestination' has a wrong offset!");
static_assert(offsetof(Scripts_SetPlayerTravelDestinationLocked, bLocked) == 0x000010, "Member 'Scripts_SetPlayerTravelDestinationLocked::bLocked' has a wrong offset!");

// Function Indiana.Scripts.SetPlayerVisitedRegion
// 0x0010 (0x0010 - 0x0000)
struct Scripts_SetPlayerVisitedRegion final
{
public:
	class FString                                 TravelRegion;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_SetPlayerVisitedRegion) == 0x000008, "Wrong alignment on Scripts_SetPlayerVisitedRegion");
static_assert(sizeof(Scripts_SetPlayerVisitedRegion) == 0x000010, "Wrong size on Scripts_SetPlayerVisitedRegion");
static_assert(offsetof(Scripts_SetPlayerVisitedRegion, TravelRegion) == 0x000000, "Member 'Scripts_SetPlayerVisitedRegion::TravelRegion' has a wrong offset!");

// Function Indiana.Scripts.SetPlayerVisitedTravelDestination
// 0x0010 (0x0010 - 0x0000)
struct Scripts_SetPlayerVisitedTravelDestination final
{
public:
	class FString                                 TravelDestination;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_SetPlayerVisitedTravelDestination) == 0x000008, "Wrong alignment on Scripts_SetPlayerVisitedTravelDestination");
static_assert(sizeof(Scripts_SetPlayerVisitedTravelDestination) == 0x000010, "Wrong size on Scripts_SetPlayerVisitedTravelDestination");
static_assert(offsetof(Scripts_SetPlayerVisitedTravelDestination, TravelDestination) == 0x000000, "Member 'Scripts_SetPlayerVisitedTravelDestination::TravelDestination' has a wrong offset!");

// Function Indiana.Scripts.SetPointOfInterestDiscovered
// 0x0018 (0x0018 - 0x0000)
struct Scripts_SetPointOfInterestDiscovered final
{
public:
	class FString                                 PointOfInterestData;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanAwardXP;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Scripts_SetPointOfInterestDiscovered) == 0x000008, "Wrong alignment on Scripts_SetPointOfInterestDiscovered");
static_assert(sizeof(Scripts_SetPointOfInterestDiscovered) == 0x000018, "Wrong size on Scripts_SetPointOfInterestDiscovered");
static_assert(offsetof(Scripts_SetPointOfInterestDiscovered, PointOfInterestData) == 0x000000, "Member 'Scripts_SetPointOfInterestDiscovered::PointOfInterestData' has a wrong offset!");
static_assert(offsetof(Scripts_SetPointOfInterestDiscovered, bCanAwardXP) == 0x000010, "Member 'Scripts_SetPointOfInterestDiscovered::bCanAwardXP' has a wrong offset!");

// Function Indiana.Scripts.SetPosture
// 0x0010 (0x0010 - 0x0000)
struct Scripts_SetPosture final
{
public:
	EPosture                                      Posture;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Persist;                                           // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Scripts_SetPosture) == 0x000004, "Wrong alignment on Scripts_SetPosture");
static_assert(sizeof(Scripts_SetPosture) == 0x000010, "Wrong size on Scripts_SetPosture");
static_assert(offsetof(Scripts_SetPosture, Posture) == 0x000000, "Member 'Scripts_SetPosture::Posture' has a wrong offset!");
static_assert(offsetof(Scripts_SetPosture, Delay) == 0x000004, "Member 'Scripts_SetPosture::Delay' has a wrong offset!");
static_assert(offsetof(Scripts_SetPosture, Duration) == 0x000008, "Member 'Scripts_SetPosture::Duration' has a wrong offset!");
static_assert(offsetof(Scripts_SetPosture, Persist) == 0x00000C, "Member 'Scripts_SetPosture::Persist' has a wrong offset!");

// Function Indiana.Scripts.SetQuestAlternateDescription
// 0x0014 (0x0014 - 0x0000)
struct Scripts_SetQuestAlternateDescription final
{
public:
	struct FGuid                                  QuestID;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QuestDescriptionID;                                // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_SetQuestAlternateDescription) == 0x000004, "Wrong alignment on Scripts_SetQuestAlternateDescription");
static_assert(sizeof(Scripts_SetQuestAlternateDescription) == 0x000014, "Wrong size on Scripts_SetQuestAlternateDescription");
static_assert(offsetof(Scripts_SetQuestAlternateDescription, QuestID) == 0x000000, "Member 'Scripts_SetQuestAlternateDescription::QuestID' has a wrong offset!");
static_assert(offsetof(Scripts_SetQuestAlternateDescription, QuestDescriptionID) == 0x000010, "Member 'Scripts_SetQuestAlternateDescription::QuestDescriptionID' has a wrong offset!");

// Function Indiana.Scripts.SetSlideshowImageKey
// 0x0010 (0x0010 - 0x0000)
struct Scripts_SetSlideshowImageKey final
{
public:
	class FString                                 ImageKey;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_SetSlideshowImageKey) == 0x000008, "Wrong alignment on Scripts_SetSlideshowImageKey");
static_assert(sizeof(Scripts_SetSlideshowImageKey) == 0x000010, "Wrong size on Scripts_SetSlideshowImageKey");
static_assert(offsetof(Scripts_SetSlideshowImageKey, ImageKey) == 0x000000, "Member 'Scripts_SetSlideshowImageKey::ImageKey' has a wrong offset!");

// Function Indiana.Scripts.SetSpeakersDefaultEmotion
// 0x0001 (0x0001 - 0x0000)
struct Scripts_SetSpeakersDefaultEmotion final
{
public:
	EEmotion                                      Emotion;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_SetSpeakersDefaultEmotion) == 0x000001, "Wrong alignment on Scripts_SetSpeakersDefaultEmotion");
static_assert(sizeof(Scripts_SetSpeakersDefaultEmotion) == 0x000001, "Wrong size on Scripts_SetSpeakersDefaultEmotion");
static_assert(offsetof(Scripts_SetSpeakersDefaultEmotion, Emotion) == 0x000000, "Member 'Scripts_SetSpeakersDefaultEmotion::Emotion' has a wrong offset!");

// Function Indiana.Scripts.SetSpeakersEmotion
// 0x000C (0x000C - 0x0000)
struct Scripts_SetSpeakersEmotion final
{
public:
	EEmotion                                      Emotion;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Persist;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Scripts_SetSpeakersEmotion) == 0x000004, "Wrong alignment on Scripts_SetSpeakersEmotion");
static_assert(sizeof(Scripts_SetSpeakersEmotion) == 0x00000C, "Wrong size on Scripts_SetSpeakersEmotion");
static_assert(offsetof(Scripts_SetSpeakersEmotion, Emotion) == 0x000000, "Member 'Scripts_SetSpeakersEmotion::Emotion' has a wrong offset!");
static_assert(offsetof(Scripts_SetSpeakersEmotion, Duration) == 0x000004, "Member 'Scripts_SetSpeakersEmotion::Duration' has a wrong offset!");
static_assert(offsetof(Scripts_SetSpeakersEmotion, Persist) == 0x000008, "Member 'Scripts_SetSpeakersEmotion::Persist' has a wrong offset!");

// Function Indiana.Scripts.SetSpeakersEmotionFull
// 0x0014 (0x0014 - 0x0000)
struct Scripts_SetSpeakersEmotionFull final
{
public:
	EEmotion                                      Emotion;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeadStrength;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Persist;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AffectHead;                                        // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AffectBody;                                        // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Scripts_SetSpeakersEmotionFull) == 0x000004, "Wrong alignment on Scripts_SetSpeakersEmotionFull");
static_assert(sizeof(Scripts_SetSpeakersEmotionFull) == 0x000014, "Wrong size on Scripts_SetSpeakersEmotionFull");
static_assert(offsetof(Scripts_SetSpeakersEmotionFull, Emotion) == 0x000000, "Member 'Scripts_SetSpeakersEmotionFull::Emotion' has a wrong offset!");
static_assert(offsetof(Scripts_SetSpeakersEmotionFull, Delay) == 0x000004, "Member 'Scripts_SetSpeakersEmotionFull::Delay' has a wrong offset!");
static_assert(offsetof(Scripts_SetSpeakersEmotionFull, Duration) == 0x000008, "Member 'Scripts_SetSpeakersEmotionFull::Duration' has a wrong offset!");
static_assert(offsetof(Scripts_SetSpeakersEmotionFull, HeadStrength) == 0x00000C, "Member 'Scripts_SetSpeakersEmotionFull::HeadStrength' has a wrong offset!");
static_assert(offsetof(Scripts_SetSpeakersEmotionFull, Persist) == 0x000010, "Member 'Scripts_SetSpeakersEmotionFull::Persist' has a wrong offset!");
static_assert(offsetof(Scripts_SetSpeakersEmotionFull, AffectHead) == 0x000011, "Member 'Scripts_SetSpeakersEmotionFull::AffectHead' has a wrong offset!");
static_assert(offsetof(Scripts_SetSpeakersEmotionFull, AffectBody) == 0x000012, "Member 'Scripts_SetSpeakersEmotionFull::AffectBody' has a wrong offset!");

// Function Indiana.Scripts.SetSpeakersEmotionWithDelay
// 0x0010 (0x0010 - 0x0000)
struct Scripts_SetSpeakersEmotionWithDelay final
{
public:
	EEmotion                                      Emotion;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EmotionDelay;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Persist;                                           // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Scripts_SetSpeakersEmotionWithDelay) == 0x000004, "Wrong alignment on Scripts_SetSpeakersEmotionWithDelay");
static_assert(sizeof(Scripts_SetSpeakersEmotionWithDelay) == 0x000010, "Wrong size on Scripts_SetSpeakersEmotionWithDelay");
static_assert(offsetof(Scripts_SetSpeakersEmotionWithDelay, Emotion) == 0x000000, "Member 'Scripts_SetSpeakersEmotionWithDelay::Emotion' has a wrong offset!");
static_assert(offsetof(Scripts_SetSpeakersEmotionWithDelay, EmotionDelay) == 0x000004, "Member 'Scripts_SetSpeakersEmotionWithDelay::EmotionDelay' has a wrong offset!");
static_assert(offsetof(Scripts_SetSpeakersEmotionWithDelay, Duration) == 0x000008, "Member 'Scripts_SetSpeakersEmotionWithDelay::Duration' has a wrong offset!");
static_assert(offsetof(Scripts_SetSpeakersEmotionWithDelay, Persist) == 0x00000C, "Member 'Scripts_SetSpeakersEmotionWithDelay::Persist' has a wrong offset!");

// Function Indiana.Scripts.SetSpeakersTalkIdleOverride
// 0x0018 (0x0018 - 0x0000)
struct Scripts_SetSpeakersTalkIdleOverride final
{
public:
	class FName                                   TalkIdleOverrideName;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEmotion                                      Emotion;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Persist;                                           // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Scripts_SetSpeakersTalkIdleOverride) == 0x000004, "Wrong alignment on Scripts_SetSpeakersTalkIdleOverride");
static_assert(sizeof(Scripts_SetSpeakersTalkIdleOverride) == 0x000018, "Wrong size on Scripts_SetSpeakersTalkIdleOverride");
static_assert(offsetof(Scripts_SetSpeakersTalkIdleOverride, TalkIdleOverrideName) == 0x000000, "Member 'Scripts_SetSpeakersTalkIdleOverride::TalkIdleOverrideName' has a wrong offset!");
static_assert(offsetof(Scripts_SetSpeakersTalkIdleOverride, Emotion) == 0x000008, "Member 'Scripts_SetSpeakersTalkIdleOverride::Emotion' has a wrong offset!");
static_assert(offsetof(Scripts_SetSpeakersTalkIdleOverride, Delay) == 0x00000C, "Member 'Scripts_SetSpeakersTalkIdleOverride::Delay' has a wrong offset!");
static_assert(offsetof(Scripts_SetSpeakersTalkIdleOverride, Duration) == 0x000010, "Member 'Scripts_SetSpeakersTalkIdleOverride::Duration' has a wrong offset!");
static_assert(offsetof(Scripts_SetSpeakersTalkIdleOverride, Persist) == 0x000014, "Member 'Scripts_SetSpeakersTalkIdleOverride::Persist' has a wrong offset!");

// Function Indiana.Scripts.SetTalkIdleOverride
// 0x0028 (0x0028 - 0x0000)
struct Scripts_SetTalkIdleOverride final
{
public:
	struct FGuid                                  Actor;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TalkIdleOverrideName;                              // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEmotion                                      Emotion;                                           // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Persist;                                           // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Scripts_SetTalkIdleOverride) == 0x000004, "Wrong alignment on Scripts_SetTalkIdleOverride");
static_assert(sizeof(Scripts_SetTalkIdleOverride) == 0x000028, "Wrong size on Scripts_SetTalkIdleOverride");
static_assert(offsetof(Scripts_SetTalkIdleOverride, Actor) == 0x000000, "Member 'Scripts_SetTalkIdleOverride::Actor' has a wrong offset!");
static_assert(offsetof(Scripts_SetTalkIdleOverride, TalkIdleOverrideName) == 0x000010, "Member 'Scripts_SetTalkIdleOverride::TalkIdleOverrideName' has a wrong offset!");
static_assert(offsetof(Scripts_SetTalkIdleOverride, Emotion) == 0x000018, "Member 'Scripts_SetTalkIdleOverride::Emotion' has a wrong offset!");
static_assert(offsetof(Scripts_SetTalkIdleOverride, Delay) == 0x00001C, "Member 'Scripts_SetTalkIdleOverride::Delay' has a wrong offset!");
static_assert(offsetof(Scripts_SetTalkIdleOverride, Duration) == 0x000020, "Member 'Scripts_SetTalkIdleOverride::Duration' has a wrong offset!");
static_assert(offsetof(Scripts_SetTalkIdleOverride, Persist) == 0x000024, "Member 'Scripts_SetTalkIdleOverride::Persist' has a wrong offset!");

// Function Indiana.Scripts.SetTeamRelationship
// 0x0028 (0x0028 - 0x0000)
struct Scripts_SetTeamRelationship final
{
public:
	class FString                                 SourceTeam;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OtherTeam;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETeamAttitude                                 Relationship;                                      // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMutual;                                           // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Scripts_SetTeamRelationship) == 0x000008, "Wrong alignment on Scripts_SetTeamRelationship");
static_assert(sizeof(Scripts_SetTeamRelationship) == 0x000028, "Wrong size on Scripts_SetTeamRelationship");
static_assert(offsetof(Scripts_SetTeamRelationship, SourceTeam) == 0x000000, "Member 'Scripts_SetTeamRelationship::SourceTeam' has a wrong offset!");
static_assert(offsetof(Scripts_SetTeamRelationship, OtherTeam) == 0x000010, "Member 'Scripts_SetTeamRelationship::OtherTeam' has a wrong offset!");
static_assert(offsetof(Scripts_SetTeamRelationship, Relationship) == 0x000020, "Member 'Scripts_SetTeamRelationship::Relationship' has a wrong offset!");
static_assert(offsetof(Scripts_SetTeamRelationship, bMutual) == 0x000021, "Member 'Scripts_SetTeamRelationship::bMutual' has a wrong offset!");

// Function Indiana.Scripts.SetTrackedQuest
// 0x0010 (0x0010 - 0x0000)
struct Scripts_SetTrackedQuest final
{
public:
	struct FGuid                                  QuestID;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_SetTrackedQuest) == 0x000004, "Wrong alignment on Scripts_SetTrackedQuest");
static_assert(sizeof(Scripts_SetTrackedQuest) == 0x000010, "Wrong size on Scripts_SetTrackedQuest");
static_assert(offsetof(Scripts_SetTrackedQuest, QuestID) == 0x000000, "Member 'Scripts_SetTrackedQuest::QuestID' has a wrong offset!");

// Function Indiana.Scripts.ShowBeacon
// 0x0010 (0x0010 - 0x0000)
struct Scripts_ShowBeacon final
{
public:
	struct FGuid                                  BeaconObjectID;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_ShowBeacon) == 0x000004, "Wrong alignment on Scripts_ShowBeacon");
static_assert(sizeof(Scripts_ShowBeacon) == 0x000010, "Wrong size on Scripts_ShowBeacon");
static_assert(offsetof(Scripts_ShowBeacon, BeaconObjectID) == 0x000000, "Member 'Scripts_ShowBeacon::BeaconObjectID' has a wrong offset!");

// Function Indiana.Scripts.StartQuest
// 0x0010 (0x0010 - 0x0000)
struct Scripts_StartQuest final
{
public:
	struct FGuid                                  QuestID;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_StartQuest) == 0x000004, "Wrong alignment on Scripts_StartQuest");
static_assert(sizeof(Scripts_StartQuest) == 0x000010, "Wrong size on Scripts_StartQuest");
static_assert(offsetof(Scripts_StartQuest, QuestID) == 0x000000, "Member 'Scripts_StartQuest::QuestID' has a wrong offset!");

// Function Indiana.Scripts.StartQuestWithAlternateDescription
// 0x0014 (0x0014 - 0x0000)
struct Scripts_StartQuestWithAlternateDescription final
{
public:
	struct FGuid                                  QuestID;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QuestDescriptionID;                                // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_StartQuestWithAlternateDescription) == 0x000004, "Wrong alignment on Scripts_StartQuestWithAlternateDescription");
static_assert(sizeof(Scripts_StartQuestWithAlternateDescription) == 0x000014, "Wrong size on Scripts_StartQuestWithAlternateDescription");
static_assert(offsetof(Scripts_StartQuestWithAlternateDescription, QuestID) == 0x000000, "Member 'Scripts_StartQuestWithAlternateDescription::QuestID' has a wrong offset!");
static_assert(offsetof(Scripts_StartQuestWithAlternateDescription, QuestDescriptionID) == 0x000010, "Member 'Scripts_StartQuestWithAlternateDescription::QuestDescriptionID' has a wrong offset!");

// Function Indiana.Scripts.TakeItemValue
// 0x0010 (0x0010 - 0x0000)
struct Scripts_TakeItemValue final
{
public:
	class FString                                 Item;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_TakeItemValue) == 0x000008, "Wrong alignment on Scripts_TakeItemValue");
static_assert(sizeof(Scripts_TakeItemValue) == 0x000010, "Wrong size on Scripts_TakeItemValue");
static_assert(offsetof(Scripts_TakeItemValue, Item) == 0x000000, "Member 'Scripts_TakeItemValue::Item' has a wrong offset!");

// Function Indiana.Scripts.TravelToDestination
// 0x0018 (0x0018 - 0x0000)
struct Scripts_TravelToDestination final
{
public:
	class FString                                 TravelDestination;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTriggerAutosave;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Scripts_TravelToDestination) == 0x000008, "Wrong alignment on Scripts_TravelToDestination");
static_assert(sizeof(Scripts_TravelToDestination) == 0x000018, "Wrong size on Scripts_TravelToDestination");
static_assert(offsetof(Scripts_TravelToDestination, TravelDestination) == 0x000000, "Member 'Scripts_TravelToDestination::TravelDestination' has a wrong offset!");
static_assert(offsetof(Scripts_TravelToDestination, bTriggerAutosave) == 0x000010, "Member 'Scripts_TravelToDestination::bTriggerAutosave' has a wrong offset!");

// Function Indiana.Scripts.TriggerQuestAddendum
// 0x0014 (0x0014 - 0x0000)
struct Scripts_TriggerQuestAddendum final
{
public:
	struct FGuid                                  QuestID;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddendumID;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_TriggerQuestAddendum) == 0x000004, "Wrong alignment on Scripts_TriggerQuestAddendum");
static_assert(sizeof(Scripts_TriggerQuestAddendum) == 0x000014, "Wrong size on Scripts_TriggerQuestAddendum");
static_assert(offsetof(Scripts_TriggerQuestAddendum, QuestID) == 0x000000, "Member 'Scripts_TriggerQuestAddendum::QuestID' has a wrong offset!");
static_assert(offsetof(Scripts_TriggerQuestAddendum, AddendumID) == 0x000010, "Member 'Scripts_TriggerQuestAddendum::AddendumID' has a wrong offset!");

// Function Indiana.Scripts.TriggerQuestEndState
// 0x0014 (0x0014 - 0x0000)
struct Scripts_TriggerQuestEndState final
{
public:
	struct FGuid                                  QuestID;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndStateID;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_TriggerQuestEndState) == 0x000004, "Wrong alignment on Scripts_TriggerQuestEndState");
static_assert(sizeof(Scripts_TriggerQuestEndState) == 0x000014, "Wrong size on Scripts_TriggerQuestEndState");
static_assert(offsetof(Scripts_TriggerQuestEndState, QuestID) == 0x000000, "Member 'Scripts_TriggerQuestEndState::QuestID' has a wrong offset!");
static_assert(offsetof(Scripts_TriggerQuestEndState, EndStateID) == 0x000010, "Member 'Scripts_TriggerQuestEndState::EndStateID' has a wrong offset!");

// Function Indiana.Scripts.TriggerQuestFailState
// 0x0014 (0x0014 - 0x0000)
struct Scripts_TriggerQuestFailState final
{
public:
	struct FGuid                                  QuestID;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndStateID;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_TriggerQuestFailState) == 0x000004, "Wrong alignment on Scripts_TriggerQuestFailState");
static_assert(sizeof(Scripts_TriggerQuestFailState) == 0x000014, "Wrong size on Scripts_TriggerQuestFailState");
static_assert(offsetof(Scripts_TriggerQuestFailState, QuestID) == 0x000000, "Member 'Scripts_TriggerQuestFailState::QuestID' has a wrong offset!");
static_assert(offsetof(Scripts_TriggerQuestFailState, EndStateID) == 0x000010, "Member 'Scripts_TriggerQuestFailState::EndStateID' has a wrong offset!");

// Function Indiana.Scripts.UnbarOCL
// 0x0010 (0x0010 - 0x0000)
struct Scripts_UnbarOCL final
{
public:
	struct FGuid                                  OCLObjectID;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_UnbarOCL) == 0x000004, "Wrong alignment on Scripts_UnbarOCL");
static_assert(sizeof(Scripts_UnbarOCL) == 0x000010, "Wrong size on Scripts_UnbarOCL");
static_assert(offsetof(Scripts_UnbarOCL, OCLObjectID) == 0x000000, "Member 'Scripts_UnbarOCL::OCLObjectID' has a wrong offset!");

// Function Indiana.Scripts.UnlockCompanion
// 0x0010 (0x0010 - 0x0000)
struct Scripts_UnlockCompanion final
{
public:
	struct FGuid                                  CompanionID;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_UnlockCompanion) == 0x000004, "Wrong alignment on Scripts_UnlockCompanion");
static_assert(sizeof(Scripts_UnlockCompanion) == 0x000010, "Wrong size on Scripts_UnlockCompanion");
static_assert(offsetof(Scripts_UnlockCompanion, CompanionID) == 0x000000, "Member 'Scripts_UnlockCompanion::CompanionID' has a wrong offset!");

// Function Indiana.Scripts.UnlockComputer
// 0x0010 (0x0010 - 0x0000)
struct Scripts_UnlockComputer final
{
public:
	struct FGuid                                  ComputerObjectID;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_UnlockComputer) == 0x000004, "Wrong alignment on Scripts_UnlockComputer");
static_assert(sizeof(Scripts_UnlockComputer) == 0x000010, "Wrong size on Scripts_UnlockComputer");
static_assert(offsetof(Scripts_UnlockComputer, ComputerObjectID) == 0x000000, "Member 'Scripts_UnlockComputer::ComputerObjectID' has a wrong offset!");

// Function Indiana.Scripts.UnlockOCL
// 0x0010 (0x0010 - 0x0000)
struct Scripts_UnlockOCL final
{
public:
	struct FGuid                                  OCLObjectID;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_UnlockOCL) == 0x000004, "Wrong alignment on Scripts_UnlockOCL");
static_assert(sizeof(Scripts_UnlockOCL) == 0x000010, "Wrong size on Scripts_UnlockOCL");
static_assert(offsetof(Scripts_UnlockOCL, OCLObjectID) == 0x000000, "Member 'Scripts_UnlockOCL::OCLObjectID' has a wrong offset!");

// Function Indiana.Scripts.UnsealOCL
// 0x0010 (0x0010 - 0x0000)
struct Scripts_UnsealOCL final
{
public:
	struct FGuid                                  OCLObjectID;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Scripts_UnsealOCL) == 0x000004, "Wrong alignment on Scripts_UnsealOCL");
static_assert(sizeof(Scripts_UnsealOCL) == 0x000010, "Wrong size on Scripts_UnsealOCL");
static_assert(offsetof(Scripts_UnsealOCL, OCLObjectID) == 0x000000, "Member 'Scripts_UnsealOCL::OCLObjectID' has a wrong offset!");

// Function Indiana.SettingsMenuComboBoxWidget.OnValueChanged
// 0x0018 (0x0018 - 0x0000)
struct SettingsMenuComboBoxWidget_OnValueChanged final
{
public:
	class FString                                 SelectedItem;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESelectInfo                                   SelectionType;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SettingsMenuComboBoxWidget_OnValueChanged) == 0x000008, "Wrong alignment on SettingsMenuComboBoxWidget_OnValueChanged");
static_assert(sizeof(SettingsMenuComboBoxWidget_OnValueChanged) == 0x000018, "Wrong size on SettingsMenuComboBoxWidget_OnValueChanged");
static_assert(offsetof(SettingsMenuComboBoxWidget_OnValueChanged, SelectedItem) == 0x000000, "Member 'SettingsMenuComboBoxWidget_OnValueChanged::SelectedItem' has a wrong offset!");
static_assert(offsetof(SettingsMenuComboBoxWidget_OnValueChanged, SelectionType) == 0x000010, "Member 'SettingsMenuComboBoxWidget_OnValueChanged::SelectionType' has a wrong offset!");

// Function Indiana.SettingsMenuKeyRebindWidget.OnKeySelected
// 0x0020 (0x0020 - 0x0000)
struct SettingsMenuKeyRebindWidget_OnKeySelected final
{
public:
	struct FInputChord                            InputChord;                                        // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsMenuKeyRebindWidget_OnKeySelected) == 0x000008, "Wrong alignment on SettingsMenuKeyRebindWidget_OnKeySelected");
static_assert(sizeof(SettingsMenuKeyRebindWidget_OnKeySelected) == 0x000020, "Wrong size on SettingsMenuKeyRebindWidget_OnKeySelected");
static_assert(offsetof(SettingsMenuKeyRebindWidget_OnKeySelected, InputChord) == 0x000000, "Member 'SettingsMenuKeyRebindWidget_OnKeySelected::InputChord' has a wrong offset!");

// Function Indiana.SettingsMenuKeyRebindWidget.OnPrimaryIsSelectingKeyChanged
// 0x0001 (0x0001 - 0x0000)
struct SettingsMenuKeyRebindWidget_OnPrimaryIsSelectingKeyChanged final
{
public:
	bool                                          bIsSelectingKey;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsMenuKeyRebindWidget_OnPrimaryIsSelectingKeyChanged) == 0x000001, "Wrong alignment on SettingsMenuKeyRebindWidget_OnPrimaryIsSelectingKeyChanged");
static_assert(sizeof(SettingsMenuKeyRebindWidget_OnPrimaryIsSelectingKeyChanged) == 0x000001, "Wrong size on SettingsMenuKeyRebindWidget_OnPrimaryIsSelectingKeyChanged");
static_assert(offsetof(SettingsMenuKeyRebindWidget_OnPrimaryIsSelectingKeyChanged, bIsSelectingKey) == 0x000000, "Member 'SettingsMenuKeyRebindWidget_OnPrimaryIsSelectingKeyChanged::bIsSelectingKey' has a wrong offset!");

// Function Indiana.SettingsMenuKeyRebindWidget.OnSecondaryIsSelectingKeyChanged
// 0x0001 (0x0001 - 0x0000)
struct SettingsMenuKeyRebindWidget_OnSecondaryIsSelectingKeyChanged final
{
public:
	bool                                          bIsSelectingKey;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsMenuKeyRebindWidget_OnSecondaryIsSelectingKeyChanged) == 0x000001, "Wrong alignment on SettingsMenuKeyRebindWidget_OnSecondaryIsSelectingKeyChanged");
static_assert(sizeof(SettingsMenuKeyRebindWidget_OnSecondaryIsSelectingKeyChanged) == 0x000001, "Wrong size on SettingsMenuKeyRebindWidget_OnSecondaryIsSelectingKeyChanged");
static_assert(offsetof(SettingsMenuKeyRebindWidget_OnSecondaryIsSelectingKeyChanged, bIsSelectingKey) == 0x000000, "Member 'SettingsMenuKeyRebindWidget_OnSecondaryIsSelectingKeyChanged::bIsSelectingKey' has a wrong offset!");

// Function Indiana.SettingsMenuSliderWidget.OnValueChanged
// 0x0038 (0x0038 - 0x0000)
struct SettingsMenuSliderWidget_OnValueChanged final
{
public:
	struct FSliderEvent                           Event;                                             // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsMenuSliderWidget_OnValueChanged) == 0x000008, "Wrong alignment on SettingsMenuSliderWidget_OnValueChanged");
static_assert(sizeof(SettingsMenuSliderWidget_OnValueChanged) == 0x000038, "Wrong size on SettingsMenuSliderWidget_OnValueChanged");
static_assert(offsetof(SettingsMenuSliderWidget_OnValueChanged, Event) == 0x000000, "Member 'SettingsMenuSliderWidget_OnValueChanged::Event' has a wrong offset!");

// Function Indiana.SettingsMenuWidget.SetAntiAliasingMethod
// 0x0004 (0x0004 - 0x0000)
struct SettingsMenuWidget_SetAntiAliasingMethod final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsMenuWidget_SetAntiAliasingMethod) == 0x000004, "Wrong alignment on SettingsMenuWidget_SetAntiAliasingMethod");
static_assert(sizeof(SettingsMenuWidget_SetAntiAliasingMethod) == 0x000004, "Wrong size on SettingsMenuWidget_SetAntiAliasingMethod");
static_assert(offsetof(SettingsMenuWidget_SetAntiAliasingMethod, Value) == 0x000000, "Member 'SettingsMenuWidget_SetAntiAliasingMethod::Value' has a wrong offset!");

// Function Indiana.SettingsMenuWidget.SetAntiAliasingQuality
// 0x0004 (0x0004 - 0x0000)
struct SettingsMenuWidget_SetAntiAliasingQuality final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsMenuWidget_SetAntiAliasingQuality) == 0x000004, "Wrong alignment on SettingsMenuWidget_SetAntiAliasingQuality");
static_assert(sizeof(SettingsMenuWidget_SetAntiAliasingQuality) == 0x000004, "Wrong size on SettingsMenuWidget_SetAntiAliasingQuality");
static_assert(offsetof(SettingsMenuWidget_SetAntiAliasingQuality, Value) == 0x000000, "Member 'SettingsMenuWidget_SetAntiAliasingQuality::Value' has a wrong offset!");

// Function Indiana.SettingsMenuWidget.SetFoliageQuality
// 0x0004 (0x0004 - 0x0000)
struct SettingsMenuWidget_SetFoliageQuality final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsMenuWidget_SetFoliageQuality) == 0x000004, "Wrong alignment on SettingsMenuWidget_SetFoliageQuality");
static_assert(sizeof(SettingsMenuWidget_SetFoliageQuality) == 0x000004, "Wrong size on SettingsMenuWidget_SetFoliageQuality");
static_assert(offsetof(SettingsMenuWidget_SetFoliageQuality, Value) == 0x000000, "Member 'SettingsMenuWidget_SetFoliageQuality::Value' has a wrong offset!");

// Function Indiana.SettingsMenuWidget.SetGraphicsQuality
// 0x0004 (0x0004 - 0x0000)
struct SettingsMenuWidget_SetGraphicsQuality final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsMenuWidget_SetGraphicsQuality) == 0x000004, "Wrong alignment on SettingsMenuWidget_SetGraphicsQuality");
static_assert(sizeof(SettingsMenuWidget_SetGraphicsQuality) == 0x000004, "Wrong size on SettingsMenuWidget_SetGraphicsQuality");
static_assert(offsetof(SettingsMenuWidget_SetGraphicsQuality, Value) == 0x000000, "Member 'SettingsMenuWidget_SetGraphicsQuality::Value' has a wrong offset!");

// Function Indiana.SettingsMenuWidget.SetPostProcessingQuality
// 0x0004 (0x0004 - 0x0000)
struct SettingsMenuWidget_SetPostProcessingQuality final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsMenuWidget_SetPostProcessingQuality) == 0x000004, "Wrong alignment on SettingsMenuWidget_SetPostProcessingQuality");
static_assert(sizeof(SettingsMenuWidget_SetPostProcessingQuality) == 0x000004, "Wrong size on SettingsMenuWidget_SetPostProcessingQuality");
static_assert(offsetof(SettingsMenuWidget_SetPostProcessingQuality, Value) == 0x000000, "Member 'SettingsMenuWidget_SetPostProcessingQuality::Value' has a wrong offset!");

// Function Indiana.SettingsMenuWidget.SetShadowQuality
// 0x0004 (0x0004 - 0x0000)
struct SettingsMenuWidget_SetShadowQuality final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsMenuWidget_SetShadowQuality) == 0x000004, "Wrong alignment on SettingsMenuWidget_SetShadowQuality");
static_assert(sizeof(SettingsMenuWidget_SetShadowQuality) == 0x000004, "Wrong size on SettingsMenuWidget_SetShadowQuality");
static_assert(offsetof(SettingsMenuWidget_SetShadowQuality, Value) == 0x000000, "Member 'SettingsMenuWidget_SetShadowQuality::Value' has a wrong offset!");

// Function Indiana.SettingsMenuWidget.SetSSGIQuality
// 0x0004 (0x0004 - 0x0000)
struct SettingsMenuWidget_SetSSGIQuality final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsMenuWidget_SetSSGIQuality) == 0x000004, "Wrong alignment on SettingsMenuWidget_SetSSGIQuality");
static_assert(sizeof(SettingsMenuWidget_SetSSGIQuality) == 0x000004, "Wrong size on SettingsMenuWidget_SetSSGIQuality");
static_assert(offsetof(SettingsMenuWidget_SetSSGIQuality, Value) == 0x000000, "Member 'SettingsMenuWidget_SetSSGIQuality::Value' has a wrong offset!");

// Function Indiana.SettingsMenuWidget.SetTextureQuality
// 0x0004 (0x0004 - 0x0000)
struct SettingsMenuWidget_SetTextureQuality final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsMenuWidget_SetTextureQuality) == 0x000004, "Wrong alignment on SettingsMenuWidget_SetTextureQuality");
static_assert(sizeof(SettingsMenuWidget_SetTextureQuality) == 0x000004, "Wrong size on SettingsMenuWidget_SetTextureQuality");
static_assert(offsetof(SettingsMenuWidget_SetTextureQuality, Value) == 0x000000, "Member 'SettingsMenuWidget_SetTextureQuality::Value' has a wrong offset!");

// Function Indiana.SettingsMenuWidget.SetViewDistanceQuality
// 0x0004 (0x0004 - 0x0000)
struct SettingsMenuWidget_SetViewDistanceQuality final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsMenuWidget_SetViewDistanceQuality) == 0x000004, "Wrong alignment on SettingsMenuWidget_SetViewDistanceQuality");
static_assert(sizeof(SettingsMenuWidget_SetViewDistanceQuality) == 0x000004, "Wrong size on SettingsMenuWidget_SetViewDistanceQuality");
static_assert(offsetof(SettingsMenuWidget_SetViewDistanceQuality, Value) == 0x000000, "Member 'SettingsMenuWidget_SetViewDistanceQuality::Value' has a wrong offset!");

// Function Indiana.SettingsMenuWidget.SetVisualEffectQuality
// 0x0004 (0x0004 - 0x0000)
struct SettingsMenuWidget_SetVisualEffectQuality final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsMenuWidget_SetVisualEffectQuality) == 0x000004, "Wrong alignment on SettingsMenuWidget_SetVisualEffectQuality");
static_assert(sizeof(SettingsMenuWidget_SetVisualEffectQuality) == 0x000004, "Wrong size on SettingsMenuWidget_SetVisualEffectQuality");
static_assert(offsetof(SettingsMenuWidget_SetVisualEffectQuality, Value) == 0x000000, "Member 'SettingsMenuWidget_SetVisualEffectQuality::Value' has a wrong offset!");

// Function Indiana.SettingsMenuWidget.UpdateDialogTimerText
// 0x0004 (0x0004 - 0x0000)
struct SettingsMenuWidget_UpdateDialogTimerText final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsMenuWidget_UpdateDialogTimerText) == 0x000004, "Wrong alignment on SettingsMenuWidget_UpdateDialogTimerText");
static_assert(sizeof(SettingsMenuWidget_UpdateDialogTimerText) == 0x000004, "Wrong size on SettingsMenuWidget_UpdateDialogTimerText");
static_assert(offsetof(SettingsMenuWidget_UpdateDialogTimerText, DeltaTime) == 0x000000, "Member 'SettingsMenuWidget_UpdateDialogTimerText::DeltaTime' has a wrong offset!");

// Function Indiana.SettingsMenuWidget.ValueChanged
// 0x0008 (0x0008 - 0x0000)
struct SettingsMenuWidget_ValueChanged final
{
public:
	class UUserSetting*                           UserSetting;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsMenuWidget_ValueChanged) == 0x000008, "Wrong alignment on SettingsMenuWidget_ValueChanged");
static_assert(sizeof(SettingsMenuWidget_ValueChanged) == 0x000008, "Wrong size on SettingsMenuWidget_ValueChanged");
static_assert(offsetof(SettingsMenuWidget_ValueChanged, UserSetting) == 0x000000, "Member 'SettingsMenuWidget_ValueChanged::UserSetting' has a wrong offset!");

// Function Indiana.StatusEffectManagerComponent.AddStatusEffect
// 0x0010 (0x0010 - 0x0000)
struct StatusEffectManagerComponent_AddStatusEffect final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffectManagerComponent_AddStatusEffect) == 0x000008, "Wrong alignment on StatusEffectManagerComponent_AddStatusEffect");
static_assert(sizeof(StatusEffectManagerComponent_AddStatusEffect) == 0x000010, "Wrong size on StatusEffectManagerComponent_AddStatusEffect");
static_assert(offsetof(StatusEffectManagerComponent_AddStatusEffect, Name_0) == 0x000000, "Member 'StatusEffectManagerComponent_AddStatusEffect::Name_0' has a wrong offset!");

// Function Indiana.StatusEffectManagerComponent.AddStatusEffectNPC
// 0x0010 (0x0010 - 0x0000)
struct StatusEffectManagerComponent_AddStatusEffectNPC final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffectManagerComponent_AddStatusEffectNPC) == 0x000008, "Wrong alignment on StatusEffectManagerComponent_AddStatusEffectNPC");
static_assert(sizeof(StatusEffectManagerComponent_AddStatusEffectNPC) == 0x000010, "Wrong size on StatusEffectManagerComponent_AddStatusEffectNPC");
static_assert(offsetof(StatusEffectManagerComponent_AddStatusEffectNPC, Name_0) == 0x000000, "Member 'StatusEffectManagerComponent_AddStatusEffectNPC::Name_0' has a wrong offset!");

// Function Indiana.StatusEffectManagerComponent.AddStatusEffectToCompanions
// 0x0010 (0x0010 - 0x0000)
struct StatusEffectManagerComponent_AddStatusEffectToCompanions final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffectManagerComponent_AddStatusEffectToCompanions) == 0x000008, "Wrong alignment on StatusEffectManagerComponent_AddStatusEffectToCompanions");
static_assert(sizeof(StatusEffectManagerComponent_AddStatusEffectToCompanions) == 0x000010, "Wrong size on StatusEffectManagerComponent_AddStatusEffectToCompanions");
static_assert(offsetof(StatusEffectManagerComponent_AddStatusEffectToCompanions, Name_0) == 0x000000, "Member 'StatusEffectManagerComponent_AddStatusEffectToCompanions::Name_0' has a wrong offset!");

// Function Indiana.StatusEffectManagerComponent.BPAddEffect
// 0x0048 (0x0048 - 0x0000)
struct StatusEffectManagerComponent_BPAddEffect final
{
public:
	TSubclassOf<class UStatusEffect>              Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class IStatusEffectOrigin>   Origin;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FDynamicEffectProperties               AddProperties;                                     // 0x0018(0x0024)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStatusEffect*                          ReturnValue;                                       // 0x0040(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffectManagerComponent_BPAddEffect) == 0x000008, "Wrong alignment on StatusEffectManagerComponent_BPAddEffect");
static_assert(sizeof(StatusEffectManagerComponent_BPAddEffect) == 0x000048, "Wrong size on StatusEffectManagerComponent_BPAddEffect");
static_assert(offsetof(StatusEffectManagerComponent_BPAddEffect, Data) == 0x000000, "Member 'StatusEffectManagerComponent_BPAddEffect::Data' has a wrong offset!");
static_assert(offsetof(StatusEffectManagerComponent_BPAddEffect, Origin) == 0x000008, "Member 'StatusEffectManagerComponent_BPAddEffect::Origin' has a wrong offset!");
static_assert(offsetof(StatusEffectManagerComponent_BPAddEffect, AddProperties) == 0x000018, "Member 'StatusEffectManagerComponent_BPAddEffect::AddProperties' has a wrong offset!");
static_assert(offsetof(StatusEffectManagerComponent_BPAddEffect, ReturnValue) == 0x000040, "Member 'StatusEffectManagerComponent_BPAddEffect::ReturnValue' has a wrong offset!");

// Function Indiana.StatusEffectManagerComponent.ClearAllStatusEffects
// 0x0001 (0x0001 - 0x0000)
struct StatusEffectManagerComponent_ClearAllStatusEffects final
{
public:
	bool                                          bOnlyHostile;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffectManagerComponent_ClearAllStatusEffects) == 0x000001, "Wrong alignment on StatusEffectManagerComponent_ClearAllStatusEffects");
static_assert(sizeof(StatusEffectManagerComponent_ClearAllStatusEffects) == 0x000001, "Wrong size on StatusEffectManagerComponent_ClearAllStatusEffects");
static_assert(offsetof(StatusEffectManagerComponent_ClearAllStatusEffects, bOnlyHostile) == 0x000000, "Member 'StatusEffectManagerComponent_ClearAllStatusEffects::bOnlyHostile' has a wrong offset!");

// Function Indiana.StatusEffectManagerComponent.ClearAllStatusEffectsNPC
// 0x0001 (0x0001 - 0x0000)
struct StatusEffectManagerComponent_ClearAllStatusEffectsNPC final
{
public:
	bool                                          bOnlyHostile;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffectManagerComponent_ClearAllStatusEffectsNPC) == 0x000001, "Wrong alignment on StatusEffectManagerComponent_ClearAllStatusEffectsNPC");
static_assert(sizeof(StatusEffectManagerComponent_ClearAllStatusEffectsNPC) == 0x000001, "Wrong size on StatusEffectManagerComponent_ClearAllStatusEffectsNPC");
static_assert(offsetof(StatusEffectManagerComponent_ClearAllStatusEffectsNPC, bOnlyHostile) == 0x000000, "Member 'StatusEffectManagerComponent_ClearAllStatusEffectsNPC::bOnlyHostile' has a wrong offset!");

// Function Indiana.StatusEffectManagerComponent.ClearAllStatusEffectsOnCompanions
// 0x0001 (0x0001 - 0x0000)
struct StatusEffectManagerComponent_ClearAllStatusEffectsOnCompanions final
{
public:
	bool                                          bOnlyHostile;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffectManagerComponent_ClearAllStatusEffectsOnCompanions) == 0x000001, "Wrong alignment on StatusEffectManagerComponent_ClearAllStatusEffectsOnCompanions");
static_assert(sizeof(StatusEffectManagerComponent_ClearAllStatusEffectsOnCompanions) == 0x000001, "Wrong size on StatusEffectManagerComponent_ClearAllStatusEffectsOnCompanions");
static_assert(offsetof(StatusEffectManagerComponent_ClearAllStatusEffectsOnCompanions, bOnlyHostile) == 0x000000, "Member 'StatusEffectManagerComponent_ClearAllStatusEffectsOnCompanions::bOnlyHostile' has a wrong offset!");

// Function Indiana.StatusEffectManagerComponent.ClearStatusEffect
// 0x0010 (0x0010 - 0x0000)
struct StatusEffectManagerComponent_ClearStatusEffect final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffectManagerComponent_ClearStatusEffect) == 0x000008, "Wrong alignment on StatusEffectManagerComponent_ClearStatusEffect");
static_assert(sizeof(StatusEffectManagerComponent_ClearStatusEffect) == 0x000010, "Wrong size on StatusEffectManagerComponent_ClearStatusEffect");
static_assert(offsetof(StatusEffectManagerComponent_ClearStatusEffect, Name_0) == 0x000000, "Member 'StatusEffectManagerComponent_ClearStatusEffect::Name_0' has a wrong offset!");

// Function Indiana.StatusEffectManagerComponent.ClearStatusEffectNPC
// 0x0010 (0x0010 - 0x0000)
struct StatusEffectManagerComponent_ClearStatusEffectNPC final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffectManagerComponent_ClearStatusEffectNPC) == 0x000008, "Wrong alignment on StatusEffectManagerComponent_ClearStatusEffectNPC");
static_assert(sizeof(StatusEffectManagerComponent_ClearStatusEffectNPC) == 0x000010, "Wrong size on StatusEffectManagerComponent_ClearStatusEffectNPC");
static_assert(offsetof(StatusEffectManagerComponent_ClearStatusEffectNPC, Name_0) == 0x000000, "Member 'StatusEffectManagerComponent_ClearStatusEffectNPC::Name_0' has a wrong offset!");

// Function Indiana.StatusEffectManagerComponent.ClearStatusEffectOnCompanions
// 0x0010 (0x0010 - 0x0000)
struct StatusEffectManagerComponent_ClearStatusEffectOnCompanions final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffectManagerComponent_ClearStatusEffectOnCompanions) == 0x000008, "Wrong alignment on StatusEffectManagerComponent_ClearStatusEffectOnCompanions");
static_assert(sizeof(StatusEffectManagerComponent_ClearStatusEffectOnCompanions) == 0x000010, "Wrong size on StatusEffectManagerComponent_ClearStatusEffectOnCompanions");
static_assert(offsetof(StatusEffectManagerComponent_ClearStatusEffectOnCompanions, Name_0) == 0x000000, "Member 'StatusEffectManagerComponent_ClearStatusEffectOnCompanions::Name_0' has a wrong offset!");

// Function Indiana.StatusEffectManagerComponent.OnNewStateOfBeing
// 0x0002 (0x0002 - 0x0000)
struct StatusEffectManagerComponent_OnNewStateOfBeing final
{
public:
	EStateOfBeing                                 NewStateOfBeing;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStateOfBeing                                 OldStateOfBeing;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffectManagerComponent_OnNewStateOfBeing) == 0x000001, "Wrong alignment on StatusEffectManagerComponent_OnNewStateOfBeing");
static_assert(sizeof(StatusEffectManagerComponent_OnNewStateOfBeing) == 0x000002, "Wrong size on StatusEffectManagerComponent_OnNewStateOfBeing");
static_assert(offsetof(StatusEffectManagerComponent_OnNewStateOfBeing, NewStateOfBeing) == 0x000000, "Member 'StatusEffectManagerComponent_OnNewStateOfBeing::NewStateOfBeing' has a wrong offset!");
static_assert(offsetof(StatusEffectManagerComponent_OnNewStateOfBeing, OldStateOfBeing) == 0x000001, "Member 'StatusEffectManagerComponent_OnNewStateOfBeing::OldStateOfBeing' has a wrong offset!");

// Function Indiana.StatusEffectManagerComponent.OnRestoredStateOfBeing
// 0x0001 (0x0001 - 0x0000)
struct StatusEffectManagerComponent_OnRestoredStateOfBeing final
{
public:
	EStateOfBeing                                 RestoredStateOfBeing;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffectManagerComponent_OnRestoredStateOfBeing) == 0x000001, "Wrong alignment on StatusEffectManagerComponent_OnRestoredStateOfBeing");
static_assert(sizeof(StatusEffectManagerComponent_OnRestoredStateOfBeing) == 0x000001, "Wrong size on StatusEffectManagerComponent_OnRestoredStateOfBeing");
static_assert(offsetof(StatusEffectManagerComponent_OnRestoredStateOfBeing, RestoredStateOfBeing) == 0x000000, "Member 'StatusEffectManagerComponent_OnRestoredStateOfBeing::RestoredStateOfBeing' has a wrong offset!");

// Function Indiana.StatusEffectManagerComponent.PreventAllStatusEffects
// 0x0002 (0x0002 - 0x0000)
struct StatusEffectManagerComponent_PreventAllStatusEffects final
{
public:
	bool                                          bPreventStatusEffectsIn;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldClear;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffectManagerComponent_PreventAllStatusEffects) == 0x000001, "Wrong alignment on StatusEffectManagerComponent_PreventAllStatusEffects");
static_assert(sizeof(StatusEffectManagerComponent_PreventAllStatusEffects) == 0x000002, "Wrong size on StatusEffectManagerComponent_PreventAllStatusEffects");
static_assert(offsetof(StatusEffectManagerComponent_PreventAllStatusEffects, bPreventStatusEffectsIn) == 0x000000, "Member 'StatusEffectManagerComponent_PreventAllStatusEffects::bPreventStatusEffectsIn' has a wrong offset!");
static_assert(offsetof(StatusEffectManagerComponent_PreventAllStatusEffects, bShouldClear) == 0x000001, "Member 'StatusEffectManagerComponent_PreventAllStatusEffects::bShouldClear' has a wrong offset!");

// Function Indiana.StatusEffectManagerComponent.PreventAllStatusEffectsNPC
// 0x0002 (0x0002 - 0x0000)
struct StatusEffectManagerComponent_PreventAllStatusEffectsNPC final
{
public:
	bool                                          bPreventStatusEffectsIn;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldClear;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffectManagerComponent_PreventAllStatusEffectsNPC) == 0x000001, "Wrong alignment on StatusEffectManagerComponent_PreventAllStatusEffectsNPC");
static_assert(sizeof(StatusEffectManagerComponent_PreventAllStatusEffectsNPC) == 0x000002, "Wrong size on StatusEffectManagerComponent_PreventAllStatusEffectsNPC");
static_assert(offsetof(StatusEffectManagerComponent_PreventAllStatusEffectsNPC, bPreventStatusEffectsIn) == 0x000000, "Member 'StatusEffectManagerComponent_PreventAllStatusEffectsNPC::bPreventStatusEffectsIn' has a wrong offset!");
static_assert(offsetof(StatusEffectManagerComponent_PreventAllStatusEffectsNPC, bShouldClear) == 0x000001, "Member 'StatusEffectManagerComponent_PreventAllStatusEffectsNPC::bShouldClear' has a wrong offset!");

// Function Indiana.StatusEffectManagerComponent.PreventAllStatusEffectsOnCompanions
// 0x0002 (0x0002 - 0x0000)
struct StatusEffectManagerComponent_PreventAllStatusEffectsOnCompanions final
{
public:
	bool                                          bPreventStatusEffectsIn;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldClear;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffectManagerComponent_PreventAllStatusEffectsOnCompanions) == 0x000001, "Wrong alignment on StatusEffectManagerComponent_PreventAllStatusEffectsOnCompanions");
static_assert(sizeof(StatusEffectManagerComponent_PreventAllStatusEffectsOnCompanions) == 0x000002, "Wrong size on StatusEffectManagerComponent_PreventAllStatusEffectsOnCompanions");
static_assert(offsetof(StatusEffectManagerComponent_PreventAllStatusEffectsOnCompanions, bPreventStatusEffectsIn) == 0x000000, "Member 'StatusEffectManagerComponent_PreventAllStatusEffectsOnCompanions::bPreventStatusEffectsIn' has a wrong offset!");
static_assert(offsetof(StatusEffectManagerComponent_PreventAllStatusEffectsOnCompanions, bShouldClear) == 0x000001, "Member 'StatusEffectManagerComponent_PreventAllStatusEffectsOnCompanions::bShouldClear' has a wrong offset!");

// Function Indiana.StatusEffectManagerComponent.PreventHostileStatusEffects
// 0x0002 (0x0002 - 0x0000)
struct StatusEffectManagerComponent_PreventHostileStatusEffects final
{
public:
	bool                                          bPreventHostileStatusEffectsIn;                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldClear;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffectManagerComponent_PreventHostileStatusEffects) == 0x000001, "Wrong alignment on StatusEffectManagerComponent_PreventHostileStatusEffects");
static_assert(sizeof(StatusEffectManagerComponent_PreventHostileStatusEffects) == 0x000002, "Wrong size on StatusEffectManagerComponent_PreventHostileStatusEffects");
static_assert(offsetof(StatusEffectManagerComponent_PreventHostileStatusEffects, bPreventHostileStatusEffectsIn) == 0x000000, "Member 'StatusEffectManagerComponent_PreventHostileStatusEffects::bPreventHostileStatusEffectsIn' has a wrong offset!");
static_assert(offsetof(StatusEffectManagerComponent_PreventHostileStatusEffects, bShouldClear) == 0x000001, "Member 'StatusEffectManagerComponent_PreventHostileStatusEffects::bShouldClear' has a wrong offset!");

// Function Indiana.StatusEffectManagerComponent.PreventHostileStatusEffectsNPC
// 0x0002 (0x0002 - 0x0000)
struct StatusEffectManagerComponent_PreventHostileStatusEffectsNPC final
{
public:
	bool                                          bPreventHostileStatusEffectsIn;                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldClear;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffectManagerComponent_PreventHostileStatusEffectsNPC) == 0x000001, "Wrong alignment on StatusEffectManagerComponent_PreventHostileStatusEffectsNPC");
static_assert(sizeof(StatusEffectManagerComponent_PreventHostileStatusEffectsNPC) == 0x000002, "Wrong size on StatusEffectManagerComponent_PreventHostileStatusEffectsNPC");
static_assert(offsetof(StatusEffectManagerComponent_PreventHostileStatusEffectsNPC, bPreventHostileStatusEffectsIn) == 0x000000, "Member 'StatusEffectManagerComponent_PreventHostileStatusEffectsNPC::bPreventHostileStatusEffectsIn' has a wrong offset!");
static_assert(offsetof(StatusEffectManagerComponent_PreventHostileStatusEffectsNPC, bShouldClear) == 0x000001, "Member 'StatusEffectManagerComponent_PreventHostileStatusEffectsNPC::bShouldClear' has a wrong offset!");

// Function Indiana.StatusEffectManagerComponent.PreventHostileStatusEffectsOnCompanions
// 0x0002 (0x0002 - 0x0000)
struct StatusEffectManagerComponent_PreventHostileStatusEffectsOnCompanions final
{
public:
	bool                                          bPreventHostileStatusEffectsIn;                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldClear;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffectManagerComponent_PreventHostileStatusEffectsOnCompanions) == 0x000001, "Wrong alignment on StatusEffectManagerComponent_PreventHostileStatusEffectsOnCompanions");
static_assert(sizeof(StatusEffectManagerComponent_PreventHostileStatusEffectsOnCompanions) == 0x000002, "Wrong size on StatusEffectManagerComponent_PreventHostileStatusEffectsOnCompanions");
static_assert(offsetof(StatusEffectManagerComponent_PreventHostileStatusEffectsOnCompanions, bPreventHostileStatusEffectsIn) == 0x000000, "Member 'StatusEffectManagerComponent_PreventHostileStatusEffectsOnCompanions::bPreventHostileStatusEffectsIn' has a wrong offset!");
static_assert(offsetof(StatusEffectManagerComponent_PreventHostileStatusEffectsOnCompanions, bShouldClear) == 0x000001, "Member 'StatusEffectManagerComponent_PreventHostileStatusEffectsOnCompanions::bShouldClear' has a wrong offset!");

// Function Indiana.StatusEffectManagerComponent.RemoveStatusEffectsOfClass
// 0x0008 (0x0008 - 0x0000)
struct StatusEffectManagerComponent_RemoveStatusEffectsOfClass final
{
public:
	TSubclassOf<class UStatusEffect>              Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffectManagerComponent_RemoveStatusEffectsOfClass) == 0x000008, "Wrong alignment on StatusEffectManagerComponent_RemoveStatusEffectsOfClass");
static_assert(sizeof(StatusEffectManagerComponent_RemoveStatusEffectsOfClass) == 0x000008, "Wrong size on StatusEffectManagerComponent_RemoveStatusEffectsOfClass");
static_assert(offsetof(StatusEffectManagerComponent_RemoveStatusEffectsOfClass, Data) == 0x000000, "Member 'StatusEffectManagerComponent_RemoveStatusEffectsOfClass::Data' has a wrong offset!");

// Function Indiana.SpeakerGameDataReference.GetCharacterGrouping
// 0x0001 (0x0001 - 0x0000)
struct SpeakerGameDataReference_GetCharacterGrouping final
{
public:
	ECharacterGrouping                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpeakerGameDataReference_GetCharacterGrouping) == 0x000001, "Wrong alignment on SpeakerGameDataReference_GetCharacterGrouping");
static_assert(sizeof(SpeakerGameDataReference_GetCharacterGrouping) == 0x000001, "Wrong size on SpeakerGameDataReference_GetCharacterGrouping");
static_assert(offsetof(SpeakerGameDataReference_GetCharacterGrouping, ReturnValue) == 0x000000, "Member 'SpeakerGameDataReference_GetCharacterGrouping::ReturnValue' has a wrong offset!");

// Function Indiana.SpeakerGameDataReference.GetChatterFile
// 0x0010 (0x0010 - 0x0000)
struct SpeakerGameDataReference_GetChatterFile final
{
public:
	struct FGuid                                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpeakerGameDataReference_GetChatterFile) == 0x000004, "Wrong alignment on SpeakerGameDataReference_GetChatterFile");
static_assert(sizeof(SpeakerGameDataReference_GetChatterFile) == 0x000010, "Wrong size on SpeakerGameDataReference_GetChatterFile");
static_assert(offsetof(SpeakerGameDataReference_GetChatterFile, ReturnValue) == 0x000000, "Member 'SpeakerGameDataReference_GetChatterFile::ReturnValue' has a wrong offset!");

// Function Indiana.SpeakerGameDataReference.GetChatterPrefix
// 0x0010 (0x0010 - 0x0000)
struct SpeakerGameDataReference_GetChatterPrefix final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpeakerGameDataReference_GetChatterPrefix) == 0x000008, "Wrong alignment on SpeakerGameDataReference_GetChatterPrefix");
static_assert(sizeof(SpeakerGameDataReference_GetChatterPrefix) == 0x000010, "Wrong size on SpeakerGameDataReference_GetChatterPrefix");
static_assert(offsetof(SpeakerGameDataReference_GetChatterPrefix, ReturnValue) == 0x000000, "Member 'SpeakerGameDataReference_GetChatterPrefix::ReturnValue' has a wrong offset!");

// Function Indiana.SpeakerGameDataReference.GetGender
// 0x0001 (0x0001 - 0x0000)
struct SpeakerGameDataReference_GetGender final
{
public:
	EGender                                       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpeakerGameDataReference_GetGender) == 0x000001, "Wrong alignment on SpeakerGameDataReference_GetGender");
static_assert(sizeof(SpeakerGameDataReference_GetGender) == 0x000001, "Wrong size on SpeakerGameDataReference_GetGender");
static_assert(offsetof(SpeakerGameDataReference_GetGender, ReturnValue) == 0x000000, "Member 'SpeakerGameDataReference_GetGender::ReturnValue' has a wrong offset!");

// Function Indiana.SpeakerGameDataReference.GetInGameName
// 0x0010 (0x0010 - 0x0000)
struct SpeakerGameDataReference_GetInGameName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpeakerGameDataReference_GetInGameName) == 0x000008, "Wrong alignment on SpeakerGameDataReference_GetInGameName");
static_assert(sizeof(SpeakerGameDataReference_GetInGameName) == 0x000010, "Wrong size on SpeakerGameDataReference_GetInGameName");
static_assert(offsetof(SpeakerGameDataReference_GetInGameName, ReturnValue) == 0x000000, "Member 'SpeakerGameDataReference_GetInGameName::ReturnValue' has a wrong offset!");

// Function Indiana.SpeakerGameDataReference.GetInGameNameID
// 0x0004 (0x0004 - 0x0000)
struct SpeakerGameDataReference_GetInGameNameID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpeakerGameDataReference_GetInGameNameID) == 0x000004, "Wrong alignment on SpeakerGameDataReference_GetInGameNameID");
static_assert(sizeof(SpeakerGameDataReference_GetInGameNameID) == 0x000004, "Wrong size on SpeakerGameDataReference_GetInGameNameID");
static_assert(offsetof(SpeakerGameDataReference_GetInGameNameID, ReturnValue) == 0x000000, "Member 'SpeakerGameDataReference_GetInGameNameID::ReturnValue' has a wrong offset!");

// Function Indiana.SpeakerGameDataReference.GetInGameNameWithGender
// 0x0018 (0x0018 - 0x0000)
struct SpeakerGameDataReference_GetInGameNameWithGender final
{
public:
	EGender                                       CharacterGender;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpeakerGameDataReference_GetInGameNameWithGender) == 0x000008, "Wrong alignment on SpeakerGameDataReference_GetInGameNameWithGender");
static_assert(sizeof(SpeakerGameDataReference_GetInGameNameWithGender) == 0x000018, "Wrong size on SpeakerGameDataReference_GetInGameNameWithGender");
static_assert(offsetof(SpeakerGameDataReference_GetInGameNameWithGender, CharacterGender) == 0x000000, "Member 'SpeakerGameDataReference_GetInGameNameWithGender::CharacterGender' has a wrong offset!");
static_assert(offsetof(SpeakerGameDataReference_GetInGameNameWithGender, ReturnValue) == 0x000008, "Member 'SpeakerGameDataReference_GetInGameNameWithGender::ReturnValue' has a wrong offset!");

// Function Indiana.SpeakerGameDataReference.GetWwiseChatterEventOverride
// 0x0010 (0x0010 - 0x0000)
struct SpeakerGameDataReference_GetWwiseChatterEventOverride final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpeakerGameDataReference_GetWwiseChatterEventOverride) == 0x000008, "Wrong alignment on SpeakerGameDataReference_GetWwiseChatterEventOverride");
static_assert(sizeof(SpeakerGameDataReference_GetWwiseChatterEventOverride) == 0x000010, "Wrong size on SpeakerGameDataReference_GetWwiseChatterEventOverride");
static_assert(offsetof(SpeakerGameDataReference_GetWwiseChatterEventOverride, ReturnValue) == 0x000000, "Member 'SpeakerGameDataReference_GetWwiseChatterEventOverride::ReturnValue' has a wrong offset!");

// Function Indiana.SpeakerGameDataReference.GetWwiseChatterVoiceOverride
// 0x0010 (0x0010 - 0x0000)
struct SpeakerGameDataReference_GetWwiseChatterVoiceOverride final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpeakerGameDataReference_GetWwiseChatterVoiceOverride) == 0x000008, "Wrong alignment on SpeakerGameDataReference_GetWwiseChatterVoiceOverride");
static_assert(sizeof(SpeakerGameDataReference_GetWwiseChatterVoiceOverride) == 0x000010, "Wrong size on SpeakerGameDataReference_GetWwiseChatterVoiceOverride");
static_assert(offsetof(SpeakerGameDataReference_GetWwiseChatterVoiceOverride, ReturnValue) == 0x000000, "Member 'SpeakerGameDataReference_GetWwiseChatterVoiceOverride::ReturnValue' has a wrong offset!");

// Function Indiana.StackSplittingWidget.OnSliderValueChanged
// 0x0038 (0x0038 - 0x0000)
struct StackSplittingWidget_OnSliderValueChanged final
{
public:
	struct FSliderEvent                           Event;                                             // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(StackSplittingWidget_OnSliderValueChanged) == 0x000008, "Wrong alignment on StackSplittingWidget_OnSliderValueChanged");
static_assert(sizeof(StackSplittingWidget_OnSliderValueChanged) == 0x000038, "Wrong size on StackSplittingWidget_OnSliderValueChanged");
static_assert(offsetof(StackSplittingWidget_OnSliderValueChanged, Event) == 0x000000, "Member 'StackSplittingWidget_OnSliderValueChanged::Event' has a wrong offset!");

// Function Indiana.StackSplittingWidget.SetNewBackingMaterialHeight
// 0x0004 (0x0004 - 0x0000)
struct StackSplittingWidget_SetNewBackingMaterialHeight final
{
public:
	float                                         NewHeight;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StackSplittingWidget_SetNewBackingMaterialHeight) == 0x000004, "Wrong alignment on StackSplittingWidget_SetNewBackingMaterialHeight");
static_assert(sizeof(StackSplittingWidget_SetNewBackingMaterialHeight) == 0x000004, "Wrong size on StackSplittingWidget_SetNewBackingMaterialHeight");
static_assert(offsetof(StackSplittingWidget_SetNewBackingMaterialHeight, NewHeight) == 0x000000, "Member 'StackSplittingWidget_SetNewBackingMaterialHeight::NewHeight' has a wrong offset!");

// Function Indiana.StatsSkillsPageWidget.OnPlayerLevelUp
// 0x0004 (0x0004 - 0x0000)
struct StatsSkillsPageWidget_OnPlayerLevelUp final
{
public:
	int32                                         NewLevel;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatsSkillsPageWidget_OnPlayerLevelUp) == 0x000004, "Wrong alignment on StatsSkillsPageWidget_OnPlayerLevelUp");
static_assert(sizeof(StatsSkillsPageWidget_OnPlayerLevelUp) == 0x000004, "Wrong size on StatsSkillsPageWidget_OnPlayerLevelUp");
static_assert(offsetof(StatsSkillsPageWidget_OnPlayerLevelUp, NewLevel) == 0x000000, "Member 'StatsSkillsPageWidget_OnPlayerLevelUp::NewLevel' has a wrong offset!");

// Function Indiana.StatsSkillsPageWidget.OnSkillUpdated
// 0x0008 (0x0008 - 0x0000)
struct StatsSkillsPageWidget_OnSkillUpdated final
{
public:
	ESkill                                        Skill;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatsSkillsPageWidget_OnSkillUpdated) == 0x000004, "Wrong alignment on StatsSkillsPageWidget_OnSkillUpdated");
static_assert(sizeof(StatsSkillsPageWidget_OnSkillUpdated) == 0x000008, "Wrong size on StatsSkillsPageWidget_OnSkillUpdated");
static_assert(offsetof(StatsSkillsPageWidget_OnSkillUpdated, Skill) == 0x000000, "Member 'StatsSkillsPageWidget_OnSkillUpdated::Skill' has a wrong offset!");
static_assert(offsetof(StatsSkillsPageWidget_OnSkillUpdated, Value) == 0x000004, "Member 'StatsSkillsPageWidget_OnSkillUpdated::Value' has a wrong offset!");

// Function Indiana.StatusEffectBarEntryWidget.ResetWidgetState
// 0x0004 (0x0004 - 0x0000)
struct StatusEffectBarEntryWidget_ResetWidgetState final
{
public:
	float                                         DesiredRenderOpacity;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffectBarEntryWidget_ResetWidgetState) == 0x000004, "Wrong alignment on StatusEffectBarEntryWidget_ResetWidgetState");
static_assert(sizeof(StatusEffectBarEntryWidget_ResetWidgetState) == 0x000004, "Wrong size on StatusEffectBarEntryWidget_ResetWidgetState");
static_assert(offsetof(StatusEffectBarEntryWidget_ResetWidgetState, DesiredRenderOpacity) == 0x000000, "Member 'StatusEffectBarEntryWidget_ResetWidgetState::DesiredRenderOpacity' has a wrong offset!");

// Function Indiana.StatusEffectBarWidget.OnStatusEffectAdded
// 0x0010 (0x0010 - 0x0000)
struct StatusEffectBarWidget_OnStatusEffectAdded final
{
public:
	class UStatusEffectManagerComponent*          Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStatusEffect*                          StatusEffect;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffectBarWidget_OnStatusEffectAdded) == 0x000008, "Wrong alignment on StatusEffectBarWidget_OnStatusEffectAdded");
static_assert(sizeof(StatusEffectBarWidget_OnStatusEffectAdded) == 0x000010, "Wrong size on StatusEffectBarWidget_OnStatusEffectAdded");
static_assert(offsetof(StatusEffectBarWidget_OnStatusEffectAdded, Sender) == 0x000000, "Member 'StatusEffectBarWidget_OnStatusEffectAdded::Sender' has a wrong offset!");
static_assert(offsetof(StatusEffectBarWidget_OnStatusEffectAdded, StatusEffect) == 0x000008, "Member 'StatusEffectBarWidget_OnStatusEffectAdded::StatusEffect' has a wrong offset!");

// Function Indiana.StatusEffectBarWidget.OnStatusEffectRemoved
// 0x0010 (0x0010 - 0x0000)
struct StatusEffectBarWidget_OnStatusEffectRemoved final
{
public:
	class UStatusEffectManagerComponent*          Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStatusEffect*                          StatusEffect;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffectBarWidget_OnStatusEffectRemoved) == 0x000008, "Wrong alignment on StatusEffectBarWidget_OnStatusEffectRemoved");
static_assert(sizeof(StatusEffectBarWidget_OnStatusEffectRemoved) == 0x000010, "Wrong size on StatusEffectBarWidget_OnStatusEffectRemoved");
static_assert(offsetof(StatusEffectBarWidget_OnStatusEffectRemoved, Sender) == 0x000000, "Member 'StatusEffectBarWidget_OnStatusEffectRemoved::Sender' has a wrong offset!");
static_assert(offsetof(StatusEffectBarWidget_OnStatusEffectRemoved, StatusEffect) == 0x000008, "Member 'StatusEffectBarWidget_OnStatusEffectRemoved::StatusEffect' has a wrong offset!");

// Function Indiana.SubtitleManagerWidget.GetCorrectName
// 0x0028 (0x0028 - 0x0000)
struct SubtitleManagerWidget_GetCorrectName final
{
public:
	class FText                                   CurrentName;                                       // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SubtitleManagerWidget_GetCorrectName) == 0x000008, "Wrong alignment on SubtitleManagerWidget_GetCorrectName");
static_assert(sizeof(SubtitleManagerWidget_GetCorrectName) == 0x000028, "Wrong size on SubtitleManagerWidget_GetCorrectName");
static_assert(offsetof(SubtitleManagerWidget_GetCorrectName, CurrentName) == 0x000000, "Member 'SubtitleManagerWidget_GetCorrectName::CurrentName' has a wrong offset!");
static_assert(offsetof(SubtitleManagerWidget_GetCorrectName, ReturnValue) == 0x000018, "Member 'SubtitleManagerWidget_GetCorrectName::ReturnValue' has a wrong offset!");

// Function Indiana.SubtitleManagerWidget.OnCinematicSubtitleVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct SubtitleManagerWidget_OnCinematicSubtitleVisibilityChanged final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SubtitleManagerWidget_OnCinematicSubtitleVisibilityChanged) == 0x000001, "Wrong alignment on SubtitleManagerWidget_OnCinematicSubtitleVisibilityChanged");
static_assert(sizeof(SubtitleManagerWidget_OnCinematicSubtitleVisibilityChanged) == 0x000001, "Wrong size on SubtitleManagerWidget_OnCinematicSubtitleVisibilityChanged");
static_assert(offsetof(SubtitleManagerWidget_OnCinematicSubtitleVisibilityChanged, bVisible) == 0x000000, "Member 'SubtitleManagerWidget_OnCinematicSubtitleVisibilityChanged::bVisible' has a wrong offset!");

// Function Indiana.SubtitlesWidget.OnBarkSubtitleVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct SubtitlesWidget_OnBarkSubtitleVisibilityChanged final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SubtitlesWidget_OnBarkSubtitleVisibilityChanged) == 0x000001, "Wrong alignment on SubtitlesWidget_OnBarkSubtitleVisibilityChanged");
static_assert(sizeof(SubtitlesWidget_OnBarkSubtitleVisibilityChanged) == 0x000001, "Wrong size on SubtitlesWidget_OnBarkSubtitleVisibilityChanged");
static_assert(offsetof(SubtitlesWidget_OnBarkSubtitleVisibilityChanged, bVisible) == 0x000000, "Member 'SubtitlesWidget_OnBarkSubtitleVisibilityChanged::bVisible' has a wrong offset!");

// Function Indiana.SubtitlesWidget.SetSizeBoxRatio
// 0x0008 (0x0008 - 0x0000)
struct SubtitlesWidget_SetSizeBoxRatio final
{
public:
	float                                         HorizontalRatio;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VerticalRatio;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SubtitlesWidget_SetSizeBoxRatio) == 0x000004, "Wrong alignment on SubtitlesWidget_SetSizeBoxRatio");
static_assert(sizeof(SubtitlesWidget_SetSizeBoxRatio) == 0x000008, "Wrong size on SubtitlesWidget_SetSizeBoxRatio");
static_assert(offsetof(SubtitlesWidget_SetSizeBoxRatio, HorizontalRatio) == 0x000000, "Member 'SubtitlesWidget_SetSizeBoxRatio::HorizontalRatio' has a wrong offset!");
static_assert(offsetof(SubtitlesWidget_SetSizeBoxRatio, VerticalRatio) == 0x000004, "Member 'SubtitlesWidget_SetSizeBoxRatio::VerticalRatio' has a wrong offset!");

// Function Indiana.SurvivalBarGroupWidget.OnDifficultyChanged
// 0x0001 (0x0001 - 0x0000)
struct SurvivalBarGroupWidget_OnDifficultyChanged final
{
public:
	EGameDifficulty                               NewDifficulty;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalBarGroupWidget_OnDifficultyChanged) == 0x000001, "Wrong alignment on SurvivalBarGroupWidget_OnDifficultyChanged");
static_assert(sizeof(SurvivalBarGroupWidget_OnDifficultyChanged) == 0x000001, "Wrong size on SurvivalBarGroupWidget_OnDifficultyChanged");
static_assert(offsetof(SurvivalBarGroupWidget_OnDifficultyChanged, NewDifficulty) == 0x000000, "Member 'SurvivalBarGroupWidget_OnDifficultyChanged::NewDifficulty' has a wrong offset!");

// Function Indiana.SurvivalBarWidget.OnDifficultyChanged
// 0x0001 (0x0001 - 0x0000)
struct SurvivalBarWidget_OnDifficultyChanged final
{
public:
	EGameDifficulty                               DifficultyIn;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalBarWidget_OnDifficultyChanged) == 0x000001, "Wrong alignment on SurvivalBarWidget_OnDifficultyChanged");
static_assert(sizeof(SurvivalBarWidget_OnDifficultyChanged) == 0x000001, "Wrong size on SurvivalBarWidget_OnDifficultyChanged");
static_assert(offsetof(SurvivalBarWidget_OnDifficultyChanged, DifficultyIn) == 0x000000, "Member 'SurvivalBarWidget_OnDifficultyChanged::DifficultyIn' has a wrong offset!");

// Function Indiana.TacticalTimeDilationComponent.AttributeUpdated
// 0x0008 (0x0008 - 0x0000)
struct TacticalTimeDilationComponent_AttributeUpdated final
{
public:
	EAttribute                                    Attribute;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NewValue;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TacticalTimeDilationComponent_AttributeUpdated) == 0x000004, "Wrong alignment on TacticalTimeDilationComponent_AttributeUpdated");
static_assert(sizeof(TacticalTimeDilationComponent_AttributeUpdated) == 0x000008, "Wrong size on TacticalTimeDilationComponent_AttributeUpdated");
static_assert(offsetof(TacticalTimeDilationComponent_AttributeUpdated, Attribute) == 0x000000, "Member 'TacticalTimeDilationComponent_AttributeUpdated::Attribute' has a wrong offset!");
static_assert(offsetof(TacticalTimeDilationComponent_AttributeUpdated, NewValue) == 0x000004, "Member 'TacticalTimeDilationComponent_AttributeUpdated::NewValue' has a wrong offset!");

// Function Indiana.TacticalTimeDilationComponent.EnableTimeDilation
// 0x0003 (0x0003 - 0x0000)
struct TacticalTimeDilationComponent_EnableTimeDilation final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInstant;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TacticalTimeDilationComponent_EnableTimeDilation) == 0x000001, "Wrong alignment on TacticalTimeDilationComponent_EnableTimeDilation");
static_assert(sizeof(TacticalTimeDilationComponent_EnableTimeDilation) == 0x000003, "Wrong size on TacticalTimeDilationComponent_EnableTimeDilation");
static_assert(offsetof(TacticalTimeDilationComponent_EnableTimeDilation, bEnabled) == 0x000000, "Member 'TacticalTimeDilationComponent_EnableTimeDilation::bEnabled' has a wrong offset!");
static_assert(offsetof(TacticalTimeDilationComponent_EnableTimeDilation, bInstant) == 0x000001, "Member 'TacticalTimeDilationComponent_EnableTimeDilation::bInstant' has a wrong offset!");
static_assert(offsetof(TacticalTimeDilationComponent_EnableTimeDilation, bForce) == 0x000002, "Member 'TacticalTimeDilationComponent_EnableTimeDilation::bForce' has a wrong offset!");

// Function Indiana.TacticalTimeDilationComponent.OnAttack
// 0x0004 (0x0004 - 0x0000)
struct TacticalTimeDilationComponent_OnAttack final
{
public:
	float                                         DurationScalar;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TacticalTimeDilationComponent_OnAttack) == 0x000004, "Wrong alignment on TacticalTimeDilationComponent_OnAttack");
static_assert(sizeof(TacticalTimeDilationComponent_OnAttack) == 0x000004, "Wrong size on TacticalTimeDilationComponent_OnAttack");
static_assert(offsetof(TacticalTimeDilationComponent_OnAttack, DurationScalar) == 0x000000, "Member 'TacticalTimeDilationComponent_OnAttack::DurationScalar' has a wrong offset!");

// Function Indiana.TacticalTimeDilationComponent.OnDeath
// 0x0110 (0x0110 - 0x0000)
struct TacticalTimeDilationComponent_OnDeath final
{
public:
	struct FCauseDamageInfo                       CauseDamageInfo;                                   // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TacticalTimeDilationComponent_OnDeath) == 0x000008, "Wrong alignment on TacticalTimeDilationComponent_OnDeath");
static_assert(sizeof(TacticalTimeDilationComponent_OnDeath) == 0x000110, "Wrong size on TacticalTimeDilationComponent_OnDeath");
static_assert(offsetof(TacticalTimeDilationComponent_OnDeath, CauseDamageInfo) == 0x000000, "Member 'TacticalTimeDilationComponent_OnDeath::CauseDamageInfo' has a wrong offset!");

// Function Indiana.TacticalTimeDilationComponent.OnPlayerConversationChange
// 0x0010 (0x0010 - 0x0000)
struct TacticalTimeDilationComponent_OnPlayerConversationChange final
{
public:
	const class UConversationInstance*            Instance;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEntered;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TacticalTimeDilationComponent_OnPlayerConversationChange) == 0x000008, "Wrong alignment on TacticalTimeDilationComponent_OnPlayerConversationChange");
static_assert(sizeof(TacticalTimeDilationComponent_OnPlayerConversationChange) == 0x000010, "Wrong size on TacticalTimeDilationComponent_OnPlayerConversationChange");
static_assert(offsetof(TacticalTimeDilationComponent_OnPlayerConversationChange, Instance) == 0x000000, "Member 'TacticalTimeDilationComponent_OnPlayerConversationChange::Instance' has a wrong offset!");
static_assert(offsetof(TacticalTimeDilationComponent_OnPlayerConversationChange, bEntered) == 0x000008, "Member 'TacticalTimeDilationComponent_OnPlayerConversationChange::bEntered' has a wrong offset!");

// Function Indiana.TacticalTimeDilationComponent.OnStatUpdated
// 0x0008 (0x0008 - 0x0000)
struct TacticalTimeDilationComponent_OnStatUpdated final
{
public:
	const class URpgStat*                         Stat;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TacticalTimeDilationComponent_OnStatUpdated) == 0x000008, "Wrong alignment on TacticalTimeDilationComponent_OnStatUpdated");
static_assert(sizeof(TacticalTimeDilationComponent_OnStatUpdated) == 0x000008, "Wrong size on TacticalTimeDilationComponent_OnStatUpdated");
static_assert(offsetof(TacticalTimeDilationComponent_OnStatUpdated, Stat) == 0x000000, "Member 'TacticalTimeDilationComponent_OnStatUpdated::Stat' has a wrong offset!");

// Function Indiana.TacticalTimeDilationComponent.PreventTTD
// 0x0001 (0x0001 - 0x0000)
struct TacticalTimeDilationComponent_PreventTTD final
{
public:
	bool                                          bPrevent;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TacticalTimeDilationComponent_PreventTTD) == 0x000001, "Wrong alignment on TacticalTimeDilationComponent_PreventTTD");
static_assert(sizeof(TacticalTimeDilationComponent_PreventTTD) == 0x000001, "Wrong size on TacticalTimeDilationComponent_PreventTTD");
static_assert(offsetof(TacticalTimeDilationComponent_PreventTTD, bPrevent) == 0x000000, "Member 'TacticalTimeDilationComponent_PreventTTD::bPrevent' has a wrong offset!");

// Function Indiana.TargetableComponent.OnActionToggled
// 0x0002 (0x0002 - 0x0000)
struct TargetableComponent_OnActionToggled final
{
public:
	ETogglableAction                              ToggleActionType;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsToggled;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TargetableComponent_OnActionToggled) == 0x000001, "Wrong alignment on TargetableComponent_OnActionToggled");
static_assert(sizeof(TargetableComponent_OnActionToggled) == 0x000002, "Wrong size on TargetableComponent_OnActionToggled");
static_assert(offsetof(TargetableComponent_OnActionToggled, ToggleActionType) == 0x000000, "Member 'TargetableComponent_OnActionToggled::ToggleActionType' has a wrong offset!");
static_assert(offsetof(TargetableComponent_OnActionToggled, bIsToggled) == 0x000001, "Member 'TargetableComponent_OnActionToggled::bIsToggled' has a wrong offset!");

// Function Indiana.TargetableComponent.OnStateOfBeingChanged
// 0x0002 (0x0002 - 0x0000)
struct TargetableComponent_OnStateOfBeingChanged final
{
public:
	EStateOfBeing                                 NewStateOfBeing;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStateOfBeing                                 OldStateOfBeing;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TargetableComponent_OnStateOfBeingChanged) == 0x000001, "Wrong alignment on TargetableComponent_OnStateOfBeingChanged");
static_assert(sizeof(TargetableComponent_OnStateOfBeingChanged) == 0x000002, "Wrong size on TargetableComponent_OnStateOfBeingChanged");
static_assert(offsetof(TargetableComponent_OnStateOfBeingChanged, NewStateOfBeing) == 0x000000, "Member 'TargetableComponent_OnStateOfBeingChanged::NewStateOfBeing' has a wrong offset!");
static_assert(offsetof(TargetableComponent_OnStateOfBeingChanged, OldStateOfBeing) == 0x000001, "Member 'TargetableComponent_OnStateOfBeingChanged::OldStateOfBeing' has a wrong offset!");

// Function Indiana.TeamComponent.BPClearRelationshipToPlayer
// 0x0008 (0x0008 - 0x0000)
struct TeamComponent_BPClearRelationshipToPlayer final
{
public:
	class AIndianaAiCharacter*                    Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamComponent_BPClearRelationshipToPlayer) == 0x000008, "Wrong alignment on TeamComponent_BPClearRelationshipToPlayer");
static_assert(sizeof(TeamComponent_BPClearRelationshipToPlayer) == 0x000008, "Wrong size on TeamComponent_BPClearRelationshipToPlayer");
static_assert(offsetof(TeamComponent_BPClearRelationshipToPlayer, Character) == 0x000000, "Member 'TeamComponent_BPClearRelationshipToPlayer::Character' has a wrong offset!");

// Function Indiana.TeamComponent.BPSetRelationshipToPlayer
// 0x0010 (0x0010 - 0x0000)
struct TeamComponent_BPSetRelationshipToPlayer final
{
public:
	class AIndianaAiCharacter*                    Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETeamAttitude                                 Relationship;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TeamComponent_BPSetRelationshipToPlayer) == 0x000008, "Wrong alignment on TeamComponent_BPSetRelationshipToPlayer");
static_assert(sizeof(TeamComponent_BPSetRelationshipToPlayer) == 0x000010, "Wrong size on TeamComponent_BPSetRelationshipToPlayer");
static_assert(offsetof(TeamComponent_BPSetRelationshipToPlayer, Character) == 0x000000, "Member 'TeamComponent_BPSetRelationshipToPlayer::Character' has a wrong offset!");
static_assert(offsetof(TeamComponent_BPSetRelationshipToPlayer, Relationship) == 0x000008, "Member 'TeamComponent_BPSetRelationshipToPlayer::Relationship' has a wrong offset!");

// Function Indiana.TeamComponent.ClearRelationshipToPlayer
// 0x0001 (0x0001 - 0x0000)
struct TeamComponent_ClearRelationshipToPlayer final
{
public:
	EChangeRelationshipSource                     InSource;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamComponent_ClearRelationshipToPlayer) == 0x000001, "Wrong alignment on TeamComponent_ClearRelationshipToPlayer");
static_assert(sizeof(TeamComponent_ClearRelationshipToPlayer) == 0x000001, "Wrong size on TeamComponent_ClearRelationshipToPlayer");
static_assert(offsetof(TeamComponent_ClearRelationshipToPlayer, InSource) == 0x000000, "Member 'TeamComponent_ClearRelationshipToPlayer::InSource' has a wrong offset!");

// Function Indiana.TeamComponent.OnDeath
// 0x0110 (0x0110 - 0x0000)
struct TeamComponent_OnDeath final
{
public:
	struct FCauseDamageInfo                       DamageInfo;                                        // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamComponent_OnDeath) == 0x000008, "Wrong alignment on TeamComponent_OnDeath");
static_assert(sizeof(TeamComponent_OnDeath) == 0x000110, "Wrong size on TeamComponent_OnDeath");
static_assert(offsetof(TeamComponent_OnDeath, DamageInfo) == 0x000000, "Member 'TeamComponent_OnDeath::DamageInfo' has a wrong offset!");

// Function Indiana.TeamComponent.OnDetectedPlayerCrime
// 0x0003 (0x0003 - 0x0000)
struct TeamComponent_OnDetectedPlayerCrime final
{
public:
	ECrimeType                                    InCrimeType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayerDisguised;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInterrogationResult                          InInterrogationResult;                             // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamComponent_OnDetectedPlayerCrime) == 0x000001, "Wrong alignment on TeamComponent_OnDetectedPlayerCrime");
static_assert(sizeof(TeamComponent_OnDetectedPlayerCrime) == 0x000003, "Wrong size on TeamComponent_OnDetectedPlayerCrime");
static_assert(offsetof(TeamComponent_OnDetectedPlayerCrime, InCrimeType) == 0x000000, "Member 'TeamComponent_OnDetectedPlayerCrime::InCrimeType' has a wrong offset!");
static_assert(offsetof(TeamComponent_OnDetectedPlayerCrime, bPlayerDisguised) == 0x000001, "Member 'TeamComponent_OnDetectedPlayerCrime::bPlayerDisguised' has a wrong offset!");
static_assert(offsetof(TeamComponent_OnDetectedPlayerCrime, InInterrogationResult) == 0x000002, "Member 'TeamComponent_OnDetectedPlayerCrime::InInterrogationResult' has a wrong offset!");

// Function Indiana.TeamComponent.OnTakeDamage
// 0x0110 (0x0110 - 0x0000)
struct TeamComponent_OnTakeDamage final
{
public:
	struct FCauseDamageInfo                       DamageInfo;                                        // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamComponent_OnTakeDamage) == 0x000008, "Wrong alignment on TeamComponent_OnTakeDamage");
static_assert(sizeof(TeamComponent_OnTakeDamage) == 0x000110, "Wrong size on TeamComponent_OnTakeDamage");
static_assert(offsetof(TeamComponent_OnTakeDamage, DamageInfo) == 0x000000, "Member 'TeamComponent_OnTakeDamage::DamageInfo' has a wrong offset!");

// Function Indiana.TeamComponent.SetRelationshipToPlayer
// 0x0003 (0x0003 - 0x0000)
struct TeamComponent_SetRelationshipToPlayer final
{
public:
	ETeamAttitude                                 InRelationship;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EChangeRelationshipSource                     InSource;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECrimeType                                    InCrimeType;                                       // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamComponent_SetRelationshipToPlayer) == 0x000001, "Wrong alignment on TeamComponent_SetRelationshipToPlayer");
static_assert(sizeof(TeamComponent_SetRelationshipToPlayer) == 0x000003, "Wrong size on TeamComponent_SetRelationshipToPlayer");
static_assert(offsetof(TeamComponent_SetRelationshipToPlayer, InRelationship) == 0x000000, "Member 'TeamComponent_SetRelationshipToPlayer::InRelationship' has a wrong offset!");
static_assert(offsetof(TeamComponent_SetRelationshipToPlayer, InSource) == 0x000001, "Member 'TeamComponent_SetRelationshipToPlayer::InSource' has a wrong offset!");
static_assert(offsetof(TeamComponent_SetRelationshipToPlayer, InCrimeType) == 0x000002, "Member 'TeamComponent_SetRelationshipToPlayer::InCrimeType' has a wrong offset!");

// Function Indiana.TeamComponent.GetRelationship
// 0x0010 (0x0010 - 0x0000)
struct TeamComponent_GetRelationship final
{
public:
	const class AActor*                           InActor;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETeamAttitude                                 ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TeamComponent_GetRelationship) == 0x000008, "Wrong alignment on TeamComponent_GetRelationship");
static_assert(sizeof(TeamComponent_GetRelationship) == 0x000010, "Wrong size on TeamComponent_GetRelationship");
static_assert(offsetof(TeamComponent_GetRelationship, InActor) == 0x000000, "Member 'TeamComponent_GetRelationship::InActor' has a wrong offset!");
static_assert(offsetof(TeamComponent_GetRelationship, ReturnValue) == 0x000008, "Member 'TeamComponent_GetRelationship::ReturnValue' has a wrong offset!");

// Function Indiana.TeamComponent.GetRelationshipWithPlayer
// 0x0001 (0x0001 - 0x0000)
struct TeamComponent_GetRelationshipWithPlayer final
{
public:
	ETeamAttitude                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamComponent_GetRelationshipWithPlayer) == 0x000001, "Wrong alignment on TeamComponent_GetRelationshipWithPlayer");
static_assert(sizeof(TeamComponent_GetRelationshipWithPlayer) == 0x000001, "Wrong size on TeamComponent_GetRelationshipWithPlayer");
static_assert(offsetof(TeamComponent_GetRelationshipWithPlayer, ReturnValue) == 0x000000, "Member 'TeamComponent_GetRelationshipWithPlayer::ReturnValue' has a wrong offset!");

// Function Indiana.TeamComponent.GetRelationshipWithTeam
// 0x0010 (0x0010 - 0x0000)
struct TeamComponent_GetRelationshipWithTeam final
{
public:
	TSubclassOf<class UTeamData>                  InTeamData;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETeamAttitude                                 ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TeamComponent_GetRelationshipWithTeam) == 0x000008, "Wrong alignment on TeamComponent_GetRelationshipWithTeam");
static_assert(sizeof(TeamComponent_GetRelationshipWithTeam) == 0x000010, "Wrong size on TeamComponent_GetRelationshipWithTeam");
static_assert(offsetof(TeamComponent_GetRelationshipWithTeam, InTeamData) == 0x000000, "Member 'TeamComponent_GetRelationshipWithTeam::InTeamData' has a wrong offset!");
static_assert(offsetof(TeamComponent_GetRelationshipWithTeam, ReturnValue) == 0x000008, "Member 'TeamComponent_GetRelationshipWithTeam::ReturnValue' has a wrong offset!");

// Function Indiana.TelemetryComponent.OnCharacterKilled
// 0x0110 (0x0110 - 0x0000)
struct TelemetryComponent_OnCharacterKilled final
{
public:
	struct FCauseDamageInfo                       CauseDamageInfo;                                   // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TelemetryComponent_OnCharacterKilled) == 0x000008, "Wrong alignment on TelemetryComponent_OnCharacterKilled");
static_assert(sizeof(TelemetryComponent_OnCharacterKilled) == 0x000110, "Wrong size on TelemetryComponent_OnCharacterKilled");
static_assert(offsetof(TelemetryComponent_OnCharacterKilled, CauseDamageInfo) == 0x000000, "Member 'TelemetryComponent_OnCharacterKilled::CauseDamageInfo' has a wrong offset!");

// Function Indiana.TelemetryComponent.OnCombatStateChanged
// 0x0002 (0x0002 - 0x0000)
struct TelemetryComponent_OnCombatStateChanged final
{
public:
	bool                                          bInCombat;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestoring;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TelemetryComponent_OnCombatStateChanged) == 0x000001, "Wrong alignment on TelemetryComponent_OnCombatStateChanged");
static_assert(sizeof(TelemetryComponent_OnCombatStateChanged) == 0x000002, "Wrong size on TelemetryComponent_OnCombatStateChanged");
static_assert(offsetof(TelemetryComponent_OnCombatStateChanged, bInCombat) == 0x000000, "Member 'TelemetryComponent_OnCombatStateChanged::bInCombat' has a wrong offset!");
static_assert(offsetof(TelemetryComponent_OnCombatStateChanged, bRestoring) == 0x000001, "Member 'TelemetryComponent_OnCombatStateChanged::bRestoring' has a wrong offset!");

// Function Indiana.TelemetryComponent.OnEndGameSession
// 0x0001 (0x0001 - 0x0000)
struct TelemetryComponent_OnEndGameSession final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TelemetryComponent_OnEndGameSession) == 0x000001, "Wrong alignment on TelemetryComponent_OnEndGameSession");
static_assert(sizeof(TelemetryComponent_OnEndGameSession) == 0x000001, "Wrong size on TelemetryComponent_OnEndGameSession");
static_assert(offsetof(TelemetryComponent_OnEndGameSession, EndPlayReason) == 0x000000, "Member 'TelemetryComponent_OnEndGameSession::EndPlayReason' has a wrong offset!");

// Function Indiana.TelemetryComponent.OnLevelChanged
// 0x0004 (0x0004 - 0x0000)
struct TelemetryComponent_OnLevelChanged final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TelemetryComponent_OnLevelChanged) == 0x000004, "Wrong alignment on TelemetryComponent_OnLevelChanged");
static_assert(sizeof(TelemetryComponent_OnLevelChanged) == 0x000004, "Wrong size on TelemetryComponent_OnLevelChanged");
static_assert(offsetof(TelemetryComponent_OnLevelChanged, Level) == 0x000000, "Member 'TelemetryComponent_OnLevelChanged::Level' has a wrong offset!");

// Function Indiana.TelemetryComponent.OnMedKitUsed
// 0x0004 (0x0004 - 0x0000)
struct TelemetryComponent_OnMedKitUsed final
{
public:
	int32                                         ConsumablesUsed;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TelemetryComponent_OnMedKitUsed) == 0x000004, "Wrong alignment on TelemetryComponent_OnMedKitUsed");
static_assert(sizeof(TelemetryComponent_OnMedKitUsed) == 0x000004, "Wrong size on TelemetryComponent_OnMedKitUsed");
static_assert(offsetof(TelemetryComponent_OnMedKitUsed, ConsumablesUsed) == 0x000000, "Member 'TelemetryComponent_OnMedKitUsed::ConsumablesUsed' has a wrong offset!");

// Function Indiana.TelemetryComponent.OnPlayerMove
// 0x0020 (0x0020 - 0x0000)
struct TelemetryComponent_OnPlayerMove final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MapName;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TelemetryComponent_OnPlayerMove) == 0x000008, "Wrong alignment on TelemetryComponent_OnPlayerMove");
static_assert(sizeof(TelemetryComponent_OnPlayerMove) == 0x000020, "Wrong size on TelemetryComponent_OnPlayerMove");
static_assert(offsetof(TelemetryComponent_OnPlayerMove, Location) == 0x000000, "Member 'TelemetryComponent_OnPlayerMove::Location' has a wrong offset!");
static_assert(offsetof(TelemetryComponent_OnPlayerMove, MapName) == 0x000010, "Member 'TelemetryComponent_OnPlayerMove::MapName' has a wrong offset!");

// Function Indiana.TelemetryComponent.OnPlayerZoneChange
// 0x0030 (0x0030 - 0x0000)
struct TelemetryComponent_OnPlayerZoneChange final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 NewMapName;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OldMapName;                                        // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TelemetryComponent_OnPlayerZoneChange) == 0x000008, "Wrong alignment on TelemetryComponent_OnPlayerZoneChange");
static_assert(sizeof(TelemetryComponent_OnPlayerZoneChange) == 0x000030, "Wrong size on TelemetryComponent_OnPlayerZoneChange");
static_assert(offsetof(TelemetryComponent_OnPlayerZoneChange, Location) == 0x000000, "Member 'TelemetryComponent_OnPlayerZoneChange::Location' has a wrong offset!");
static_assert(offsetof(TelemetryComponent_OnPlayerZoneChange, NewMapName) == 0x000010, "Member 'TelemetryComponent_OnPlayerZoneChange::NewMapName' has a wrong offset!");
static_assert(offsetof(TelemetryComponent_OnPlayerZoneChange, OldMapName) == 0x000020, "Member 'TelemetryComponent_OnPlayerZoneChange::OldMapName' has a wrong offset!");

// Function Indiana.TelemetryComponent.OnStartGameSession
// 0x0010 (0x0010 - 0x0000)
struct TelemetryComponent_OnStartGameSession final
{
public:
	struct FGuid                                  Guid;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TelemetryComponent_OnStartGameSession) == 0x000004, "Wrong alignment on TelemetryComponent_OnStartGameSession");
static_assert(sizeof(TelemetryComponent_OnStartGameSession) == 0x000010, "Wrong size on TelemetryComponent_OnStartGameSession");
static_assert(offsetof(TelemetryComponent_OnStartGameSession, Guid) == 0x000000, "Member 'TelemetryComponent_OnStartGameSession::Guid' has a wrong offset!");

// Function Indiana.TelemetryComponent.OnTacticalTimeDialationEnded
// 0x0004 (0x0004 - 0x0000)
struct TelemetryComponent_OnTacticalTimeDialationEnded final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TelemetryComponent_OnTacticalTimeDialationEnded) == 0x000004, "Wrong alignment on TelemetryComponent_OnTacticalTimeDialationEnded");
static_assert(sizeof(TelemetryComponent_OnTacticalTimeDialationEnded) == 0x000004, "Wrong size on TelemetryComponent_OnTacticalTimeDialationEnded");
static_assert(offsetof(TelemetryComponent_OnTacticalTimeDialationEnded, Duration) == 0x000000, "Member 'TelemetryComponent_OnTacticalTimeDialationEnded::Duration' has a wrong offset!");

// Function Indiana.TelemetryComponent.OnTakeDamage
// 0x0110 (0x0110 - 0x0000)
struct TelemetryComponent_OnTakeDamage final
{
public:
	struct FCauseDamageInfo                       CauseDamageInfo;                                   // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TelemetryComponent_OnTakeDamage) == 0x000008, "Wrong alignment on TelemetryComponent_OnTakeDamage");
static_assert(sizeof(TelemetryComponent_OnTakeDamage) == 0x000110, "Wrong size on TelemetryComponent_OnTakeDamage");
static_assert(offsetof(TelemetryComponent_OnTakeDamage, CauseDamageInfo) == 0x000000, "Member 'TelemetryComponent_OnTakeDamage::CauseDamageInfo' has a wrong offset!");

// Function Indiana.TelemetryComponent.OnVendorTransactionComplete
// 0x0028 (0x0028 - 0x0000)
struct TelemetryComponent_OnVendorTransactionComplete final
{
public:
	int32                                         BuyingBalance;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SellingBalance;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RepairingBalance;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FItemStackSplit                        ItemStackSplit;                                    // 0x0010(0x0018)(Parm, OutParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TelemetryComponent_OnVendorTransactionComplete) == 0x000008, "Wrong alignment on TelemetryComponent_OnVendorTransactionComplete");
static_assert(sizeof(TelemetryComponent_OnVendorTransactionComplete) == 0x000028, "Wrong size on TelemetryComponent_OnVendorTransactionComplete");
static_assert(offsetof(TelemetryComponent_OnVendorTransactionComplete, BuyingBalance) == 0x000000, "Member 'TelemetryComponent_OnVendorTransactionComplete::BuyingBalance' has a wrong offset!");
static_assert(offsetof(TelemetryComponent_OnVendorTransactionComplete, SellingBalance) == 0x000004, "Member 'TelemetryComponent_OnVendorTransactionComplete::SellingBalance' has a wrong offset!");
static_assert(offsetof(TelemetryComponent_OnVendorTransactionComplete, RepairingBalance) == 0x000008, "Member 'TelemetryComponent_OnVendorTransactionComplete::RepairingBalance' has a wrong offset!");
static_assert(offsetof(TelemetryComponent_OnVendorTransactionComplete, ItemStackSplit) == 0x000010, "Member 'TelemetryComponent_OnVendorTransactionComplete::ItemStackSplit' has a wrong offset!");

// Function Indiana.TinkeringWidget.SetNewBackingMaterialHeight
// 0x0004 (0x0004 - 0x0000)
struct TinkeringWidget_SetNewBackingMaterialHeight final
{
public:
	float                                         NewHeight;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TinkeringWidget_SetNewBackingMaterialHeight) == 0x000004, "Wrong alignment on TinkeringWidget_SetNewBackingMaterialHeight");
static_assert(sizeof(TinkeringWidget_SetNewBackingMaterialHeight) == 0x000004, "Wrong size on TinkeringWidget_SetNewBackingMaterialHeight");
static_assert(offsetof(TinkeringWidget_SetNewBackingMaterialHeight, NewHeight) == 0x000000, "Member 'TinkeringWidget_SetNewBackingMaterialHeight::NewHeight' has a wrong offset!");

// Function Indiana.Trap.ArmTrap
// 0x0010 (0x0010 - 0x0000)
struct Trap_ArmTrap final
{
public:
	class AIndianaCharacter*                      Initiator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFireTrapArmedEvent;                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Trap_ArmTrap) == 0x000008, "Wrong alignment on Trap_ArmTrap");
static_assert(sizeof(Trap_ArmTrap) == 0x000010, "Wrong size on Trap_ArmTrap");
static_assert(offsetof(Trap_ArmTrap, Initiator) == 0x000000, "Member 'Trap_ArmTrap::Initiator' has a wrong offset!");
static_assert(offsetof(Trap_ArmTrap, bFireTrapArmedEvent) == 0x000008, "Member 'Trap_ArmTrap::bFireTrapArmedEvent' has a wrong offset!");

// Function Indiana.Trap.DeactivateTrap
// 0x0010 (0x0010 - 0x0000)
struct Trap_DeactivateTrap final
{
public:
	class AIndianaCharacter*                      Initiator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFireTrapDeactivatedEvent;                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Trap_DeactivateTrap) == 0x000008, "Wrong alignment on Trap_DeactivateTrap");
static_assert(sizeof(Trap_DeactivateTrap) == 0x000010, "Wrong size on Trap_DeactivateTrap");
static_assert(offsetof(Trap_DeactivateTrap, Initiator) == 0x000000, "Member 'Trap_DeactivateTrap::Initiator' has a wrong offset!");
static_assert(offsetof(Trap_DeactivateTrap, bFireTrapDeactivatedEvent) == 0x000008, "Member 'Trap_DeactivateTrap::bFireTrapDeactivatedEvent' has a wrong offset!");

// Function Indiana.Trap.DisarmTrap
// 0x0010 (0x0010 - 0x0000)
struct Trap_DisarmTrap final
{
public:
	class AIndianaCharacter*                      Initiator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFireTrapDisarmedEvent;                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Trap_DisarmTrap) == 0x000008, "Wrong alignment on Trap_DisarmTrap");
static_assert(sizeof(Trap_DisarmTrap) == 0x000010, "Wrong size on Trap_DisarmTrap");
static_assert(offsetof(Trap_DisarmTrap, Initiator) == 0x000000, "Member 'Trap_DisarmTrap::Initiator' has a wrong offset!");
static_assert(offsetof(Trap_DisarmTrap, bFireTrapDisarmedEvent) == 0x000008, "Member 'Trap_DisarmTrap::bFireTrapDisarmedEvent' has a wrong offset!");

// Function Indiana.Trap.OnActivationShapeBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct Trap_OnActivationShapeBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Trap_OnActivationShapeBeginOverlap) == 0x000008, "Wrong alignment on Trap_OnActivationShapeBeginOverlap");
static_assert(sizeof(Trap_OnActivationShapeBeginOverlap) == 0x0000A8, "Wrong size on Trap_OnActivationShapeBeginOverlap");
static_assert(offsetof(Trap_OnActivationShapeBeginOverlap, OverlappedComponent) == 0x000000, "Member 'Trap_OnActivationShapeBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Trap_OnActivationShapeBeginOverlap, OtherActor) == 0x000008, "Member 'Trap_OnActivationShapeBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(Trap_OnActivationShapeBeginOverlap, OtherComp) == 0x000010, "Member 'Trap_OnActivationShapeBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(Trap_OnActivationShapeBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'Trap_OnActivationShapeBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Trap_OnActivationShapeBeginOverlap, bFromSweep) == 0x00001C, "Member 'Trap_OnActivationShapeBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(Trap_OnActivationShapeBeginOverlap, SweepResult) == 0x000020, "Member 'Trap_OnActivationShapeBeginOverlap::SweepResult' has a wrong offset!");

// Function Indiana.Trap.OnActivationShapeEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct Trap_OnActivationShapeEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Trap_OnActivationShapeEndOverlap) == 0x000008, "Wrong alignment on Trap_OnActivationShapeEndOverlap");
static_assert(sizeof(Trap_OnActivationShapeEndOverlap) == 0x000020, "Wrong size on Trap_OnActivationShapeEndOverlap");
static_assert(offsetof(Trap_OnActivationShapeEndOverlap, OverlappedComponent) == 0x000000, "Member 'Trap_OnActivationShapeEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Trap_OnActivationShapeEndOverlap, OtherActor) == 0x000008, "Member 'Trap_OnActivationShapeEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(Trap_OnActivationShapeEndOverlap, OtherComp) == 0x000010, "Member 'Trap_OnActivationShapeEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(Trap_OnActivationShapeEndOverlap, OtherBodyIndex) == 0x000018, "Member 'Trap_OnActivationShapeEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function Indiana.Trap.OnActivatorTrackingShapeBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct Trap_OnActivatorTrackingShapeBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Trap_OnActivatorTrackingShapeBeginOverlap) == 0x000008, "Wrong alignment on Trap_OnActivatorTrackingShapeBeginOverlap");
static_assert(sizeof(Trap_OnActivatorTrackingShapeBeginOverlap) == 0x0000A8, "Wrong size on Trap_OnActivatorTrackingShapeBeginOverlap");
static_assert(offsetof(Trap_OnActivatorTrackingShapeBeginOverlap, OverlappedComponent) == 0x000000, "Member 'Trap_OnActivatorTrackingShapeBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Trap_OnActivatorTrackingShapeBeginOverlap, OtherActor) == 0x000008, "Member 'Trap_OnActivatorTrackingShapeBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(Trap_OnActivatorTrackingShapeBeginOverlap, OtherComp) == 0x000010, "Member 'Trap_OnActivatorTrackingShapeBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(Trap_OnActivatorTrackingShapeBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'Trap_OnActivatorTrackingShapeBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Trap_OnActivatorTrackingShapeBeginOverlap, bFromSweep) == 0x00001C, "Member 'Trap_OnActivatorTrackingShapeBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(Trap_OnActivatorTrackingShapeBeginOverlap, SweepResult) == 0x000020, "Member 'Trap_OnActivatorTrackingShapeBeginOverlap::SweepResult' has a wrong offset!");

// Function Indiana.Trap.OnActivatorTrackingShapeEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct Trap_OnActivatorTrackingShapeEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Trap_OnActivatorTrackingShapeEndOverlap) == 0x000008, "Wrong alignment on Trap_OnActivatorTrackingShapeEndOverlap");
static_assert(sizeof(Trap_OnActivatorTrackingShapeEndOverlap) == 0x000020, "Wrong size on Trap_OnActivatorTrackingShapeEndOverlap");
static_assert(offsetof(Trap_OnActivatorTrackingShapeEndOverlap, OverlappedComponent) == 0x000000, "Member 'Trap_OnActivatorTrackingShapeEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Trap_OnActivatorTrackingShapeEndOverlap, OtherActor) == 0x000008, "Member 'Trap_OnActivatorTrackingShapeEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(Trap_OnActivatorTrackingShapeEndOverlap, OtherComp) == 0x000010, "Member 'Trap_OnActivatorTrackingShapeEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(Trap_OnActivatorTrackingShapeEndOverlap, OtherBodyIndex) == 0x000018, "Member 'Trap_OnActivatorTrackingShapeEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function Indiana.Trap.OnNewStateOfBeing
// 0x0002 (0x0002 - 0x0000)
struct Trap_OnNewStateOfBeing final
{
public:
	EStateOfBeing                                 NewStateOfBeing;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStateOfBeing                                 OldStateOfBeing;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Trap_OnNewStateOfBeing) == 0x000001, "Wrong alignment on Trap_OnNewStateOfBeing");
static_assert(sizeof(Trap_OnNewStateOfBeing) == 0x000002, "Wrong size on Trap_OnNewStateOfBeing");
static_assert(offsetof(Trap_OnNewStateOfBeing, NewStateOfBeing) == 0x000000, "Member 'Trap_OnNewStateOfBeing::NewStateOfBeing' has a wrong offset!");
static_assert(offsetof(Trap_OnNewStateOfBeing, OldStateOfBeing) == 0x000001, "Member 'Trap_OnNewStateOfBeing::OldStateOfBeing' has a wrong offset!");

// Function Indiana.Trap.OnStatUpdated
// 0x0008 (0x0008 - 0x0000)
struct Trap_OnStatUpdated final
{
public:
	const class URpgStat*                         Stat;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Trap_OnStatUpdated) == 0x000008, "Wrong alignment on Trap_OnStatUpdated");
static_assert(sizeof(Trap_OnStatUpdated) == 0x000008, "Wrong size on Trap_OnStatUpdated");
static_assert(offsetof(Trap_OnStatUpdated, Stat) == 0x000000, "Member 'Trap_OnStatUpdated::Stat' has a wrong offset!");

// Function Indiana.Trap.GetActivationShapeComponent
// 0x0008 (0x0008 - 0x0000)
struct Trap_GetActivationShapeComponent final
{
public:
	class UShapeComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Trap_GetActivationShapeComponent) == 0x000008, "Wrong alignment on Trap_GetActivationShapeComponent");
static_assert(sizeof(Trap_GetActivationShapeComponent) == 0x000008, "Wrong size on Trap_GetActivationShapeComponent");
static_assert(offsetof(Trap_GetActivationShapeComponent, ReturnValue) == 0x000000, "Member 'Trap_GetActivationShapeComponent::ReturnValue' has a wrong offset!");

// Function Indiana.Trap.GetActivatorTrackingShapeComponent
// 0x0008 (0x0008 - 0x0000)
struct Trap_GetActivatorTrackingShapeComponent final
{
public:
	class UShapeComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Trap_GetActivatorTrackingShapeComponent) == 0x000008, "Wrong alignment on Trap_GetActivatorTrackingShapeComponent");
static_assert(sizeof(Trap_GetActivatorTrackingShapeComponent) == 0x000008, "Wrong size on Trap_GetActivatorTrackingShapeComponent");
static_assert(offsetof(Trap_GetActivatorTrackingShapeComponent, ReturnValue) == 0x000000, "Member 'Trap_GetActivatorTrackingShapeComponent::ReturnValue' has a wrong offset!");

// Function Indiana.Trap.GetCurrentState
// 0x0001 (0x0001 - 0x0000)
struct Trap_GetCurrentState final
{
public:
	ETrapState                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Trap_GetCurrentState) == 0x000001, "Wrong alignment on Trap_GetCurrentState");
static_assert(sizeof(Trap_GetCurrentState) == 0x000001, "Wrong size on Trap_GetCurrentState");
static_assert(offsetof(Trap_GetCurrentState, ReturnValue) == 0x000000, "Member 'Trap_GetCurrentState::ReturnValue' has a wrong offset!");

// Function Indiana.Trap.GetExactTrapDifficulty
// 0x0001 (0x0001 - 0x0000)
struct Trap_GetExactTrapDifficulty final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Trap_GetExactTrapDifficulty) == 0x000001, "Wrong alignment on Trap_GetExactTrapDifficulty");
static_assert(sizeof(Trap_GetExactTrapDifficulty) == 0x000001, "Wrong size on Trap_GetExactTrapDifficulty");
static_assert(offsetof(Trap_GetExactTrapDifficulty, ReturnValue) == 0x000000, "Member 'Trap_GetExactTrapDifficulty::ReturnValue' has a wrong offset!");

// Function Indiana.Trap.IsDetonationPending
// 0x0001 (0x0001 - 0x0000)
struct Trap_IsDetonationPending final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Trap_IsDetonationPending) == 0x000001, "Wrong alignment on Trap_IsDetonationPending");
static_assert(sizeof(Trap_IsDetonationPending) == 0x000001, "Wrong size on Trap_IsDetonationPending");
static_assert(offsetof(Trap_IsDetonationPending, ReturnValue) == 0x000000, "Member 'Trap_IsDetonationPending::ReturnValue' has a wrong offset!");

// Function Indiana.Trap.IsRearming
// 0x0001 (0x0001 - 0x0000)
struct Trap_IsRearming final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Trap_IsRearming) == 0x000001, "Wrong alignment on Trap_IsRearming");
static_assert(sizeof(Trap_IsRearming) == 0x000001, "Wrong size on Trap_IsRearming");
static_assert(offsetof(Trap_IsRearming, ReturnValue) == 0x000000, "Member 'Trap_IsRearming::ReturnValue' has a wrong offset!");

// Function Indiana.TrapEffectSource.GetCurrentActivators
// 0x0010 (0x0010 - 0x0000)
struct TrapEffectSource_GetCurrentActivators final
{
public:
	TArray<class AIndianaCharacter*>              OutActivators;                                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrapEffectSource_GetCurrentActivators) == 0x000008, "Wrong alignment on TrapEffectSource_GetCurrentActivators");
static_assert(sizeof(TrapEffectSource_GetCurrentActivators) == 0x000010, "Wrong size on TrapEffectSource_GetCurrentActivators");
static_assert(offsetof(TrapEffectSource_GetCurrentActivators, OutActivators) == 0x000000, "Member 'TrapEffectSource_GetCurrentActivators::OutActivators' has a wrong offset!");

// Function Indiana.TTDStatusEffectsWidget.OnStatusEffectAdded
// 0x0010 (0x0010 - 0x0000)
struct TTDStatusEffectsWidget_OnStatusEffectAdded final
{
public:
	class UStatusEffectManagerComponent*          Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStatusEffect*                          StatusEffect;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TTDStatusEffectsWidget_OnStatusEffectAdded) == 0x000008, "Wrong alignment on TTDStatusEffectsWidget_OnStatusEffectAdded");
static_assert(sizeof(TTDStatusEffectsWidget_OnStatusEffectAdded) == 0x000010, "Wrong size on TTDStatusEffectsWidget_OnStatusEffectAdded");
static_assert(offsetof(TTDStatusEffectsWidget_OnStatusEffectAdded, Sender) == 0x000000, "Member 'TTDStatusEffectsWidget_OnStatusEffectAdded::Sender' has a wrong offset!");
static_assert(offsetof(TTDStatusEffectsWidget_OnStatusEffectAdded, StatusEffect) == 0x000008, "Member 'TTDStatusEffectsWidget_OnStatusEffectAdded::StatusEffect' has a wrong offset!");

// Function Indiana.TTDStatusEffectsWidget.OnStatusEffectRemoved
// 0x0010 (0x0010 - 0x0000)
struct TTDStatusEffectsWidget_OnStatusEffectRemoved final
{
public:
	class UStatusEffectManagerComponent*          Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStatusEffect*                          StatusEffect;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TTDStatusEffectsWidget_OnStatusEffectRemoved) == 0x000008, "Wrong alignment on TTDStatusEffectsWidget_OnStatusEffectRemoved");
static_assert(sizeof(TTDStatusEffectsWidget_OnStatusEffectRemoved) == 0x000010, "Wrong size on TTDStatusEffectsWidget_OnStatusEffectRemoved");
static_assert(offsetof(TTDStatusEffectsWidget_OnStatusEffectRemoved, Sender) == 0x000000, "Member 'TTDStatusEffectsWidget_OnStatusEffectRemoved::Sender' has a wrong offset!");
static_assert(offsetof(TTDStatusEffectsWidget_OnStatusEffectRemoved, StatusEffect) == 0x000008, "Member 'TTDStatusEffectsWidget_OnStatusEffectRemoved::StatusEffect' has a wrong offset!");

// Function Indiana.VendorComponent.SetVendorContainer
// 0x0008 (0x0008 - 0x0000)
struct VendorComponent_SetVendorContainer final
{
public:
	class AContainer*                             Container;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VendorComponent_SetVendorContainer) == 0x000008, "Wrong alignment on VendorComponent_SetVendorContainer");
static_assert(sizeof(VendorComponent_SetVendorContainer) == 0x000008, "Wrong size on VendorComponent_SetVendorContainer");
static_assert(offsetof(VendorComponent_SetVendorContainer, Container) == 0x000000, "Member 'VendorComponent_SetVendorContainer::Container' has a wrong offset!");

// Function Indiana.WaitTimeSliderWidget.OnValueChanged
// 0x0038 (0x0038 - 0x0000)
struct WaitTimeSliderWidget_OnValueChanged final
{
public:
	struct FSliderEvent                           Event;                                             // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(WaitTimeSliderWidget_OnValueChanged) == 0x000008, "Wrong alignment on WaitTimeSliderWidget_OnValueChanged");
static_assert(sizeof(WaitTimeSliderWidget_OnValueChanged) == 0x000038, "Wrong size on WaitTimeSliderWidget_OnValueChanged");
static_assert(offsetof(WaitTimeSliderWidget_OnValueChanged, Event) == 0x000000, "Member 'WaitTimeSliderWidget_OnValueChanged::Event' has a wrong offset!");

// Function Indiana.WaitTimeWidget.OnSliderValueChanged
// 0x0038 (0x0038 - 0x0000)
struct WaitTimeWidget_OnSliderValueChanged final
{
public:
	struct FSliderEvent                           Event;                                             // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(WaitTimeWidget_OnSliderValueChanged) == 0x000008, "Wrong alignment on WaitTimeWidget_OnSliderValueChanged");
static_assert(sizeof(WaitTimeWidget_OnSliderValueChanged) == 0x000038, "Wrong size on WaitTimeWidget_OnSliderValueChanged");
static_assert(offsetof(WaitTimeWidget_OnSliderValueChanged, Event) == 0x000000, "Member 'WaitTimeWidget_OnSliderValueChanged::Event' has a wrong offset!");

// Function Indiana.Weapon.IsFirstPersonEquipMode
// 0x0002 (0x0002 - 0x0000)
struct Weapon_IsFirstPersonEquipMode final
{
public:
	EWeaponEquipMode                              EquipMode;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_IsFirstPersonEquipMode) == 0x000001, "Wrong alignment on Weapon_IsFirstPersonEquipMode");
static_assert(sizeof(Weapon_IsFirstPersonEquipMode) == 0x000002, "Wrong size on Weapon_IsFirstPersonEquipMode");
static_assert(offsetof(Weapon_IsFirstPersonEquipMode, EquipMode) == 0x000000, "Member 'Weapon_IsFirstPersonEquipMode::EquipMode' has a wrong offset!");
static_assert(offsetof(Weapon_IsFirstPersonEquipMode, ReturnValue) == 0x000001, "Member 'Weapon_IsFirstPersonEquipMode::ReturnValue' has a wrong offset!");

// Function Indiana.Weapon.IsPreviewEquipMode
// 0x0002 (0x0002 - 0x0000)
struct Weapon_IsPreviewEquipMode final
{
public:
	EWeaponEquipMode                              EquipMode;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_IsPreviewEquipMode) == 0x000001, "Wrong alignment on Weapon_IsPreviewEquipMode");
static_assert(sizeof(Weapon_IsPreviewEquipMode) == 0x000002, "Wrong size on Weapon_IsPreviewEquipMode");
static_assert(offsetof(Weapon_IsPreviewEquipMode, EquipMode) == 0x000000, "Member 'Weapon_IsPreviewEquipMode::EquipMode' has a wrong offset!");
static_assert(offsetof(Weapon_IsPreviewEquipMode, ReturnValue) == 0x000001, "Member 'Weapon_IsPreviewEquipMode::ReturnValue' has a wrong offset!");

// Function Indiana.Weapon.IsThirdPersonEquipMode
// 0x0002 (0x0002 - 0x0000)
struct Weapon_IsThirdPersonEquipMode final
{
public:
	EWeaponEquipMode                              EquipMode;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_IsThirdPersonEquipMode) == 0x000001, "Wrong alignment on Weapon_IsThirdPersonEquipMode");
static_assert(sizeof(Weapon_IsThirdPersonEquipMode) == 0x000002, "Wrong size on Weapon_IsThirdPersonEquipMode");
static_assert(offsetof(Weapon_IsThirdPersonEquipMode, EquipMode) == 0x000000, "Member 'Weapon_IsThirdPersonEquipMode::EquipMode' has a wrong offset!");
static_assert(offsetof(Weapon_IsThirdPersonEquipMode, ReturnValue) == 0x000001, "Member 'Weapon_IsThirdPersonEquipMode::ReturnValue' has a wrong offset!");

// Function Indiana.Weapon.IsOnActiveWorld
// 0x0001 (0x0001 - 0x0000)
struct Weapon_IsOnActiveWorld final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_IsOnActiveWorld) == 0x000001, "Wrong alignment on Weapon_IsOnActiveWorld");
static_assert(sizeof(Weapon_IsOnActiveWorld) == 0x000001, "Wrong size on Weapon_IsOnActiveWorld");
static_assert(offsetof(Weapon_IsOnActiveWorld, ReturnValue) == 0x000000, "Member 'Weapon_IsOnActiveWorld::ReturnValue' has a wrong offset!");

// Function Indiana.Weapon.OnAnimNotifyEvent
// 0x0001 (0x0001 - 0x0000)
struct Weapon_OnAnimNotifyEvent final
{
public:
	EAnimNotify                                   AnimNotifyEvent;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_OnAnimNotifyEvent) == 0x000001, "Wrong alignment on Weapon_OnAnimNotifyEvent");
static_assert(sizeof(Weapon_OnAnimNotifyEvent) == 0x000001, "Wrong size on Weapon_OnAnimNotifyEvent");
static_assert(offsetof(Weapon_OnAnimNotifyEvent, AnimNotifyEvent) == 0x000000, "Member 'Weapon_OnAnimNotifyEvent::AnimNotifyEvent' has a wrong offset!");

// Function Indiana.Weapon.OnStatUpdated
// 0x0008 (0x0008 - 0x0000)
struct Weapon_OnStatUpdated final
{
public:
	const class URpgStat*                         Stat;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_OnStatUpdated) == 0x000008, "Wrong alignment on Weapon_OnStatUpdated");
static_assert(sizeof(Weapon_OnStatUpdated) == 0x000008, "Wrong size on Weapon_OnStatUpdated");
static_assert(offsetof(Weapon_OnStatUpdated, Stat) == 0x000000, "Member 'Weapon_OnStatUpdated::Stat' has a wrong offset!");

// Function Indiana.Weapon.StartUnequip
// 0x0001 (0x0001 - 0x0000)
struct Weapon_StartUnequip final
{
public:
	bool                                          bInstantUnequip;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_StartUnequip) == 0x000001, "Wrong alignment on Weapon_StartUnequip");
static_assert(sizeof(Weapon_StartUnequip) == 0x000001, "Wrong size on Weapon_StartUnequip");
static_assert(offsetof(Weapon_StartUnequip, bInstantUnequip) == 0x000000, "Member 'Weapon_StartUnequip::bInstantUnequip' has a wrong offset!");

// Function Indiana.Weapon.GetAISettings
// 0x0010 (0x0010 - 0x0000)
struct Weapon_GetAISettings final
{
public:
	class AIndianaAiCharacter*                    InOwner;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAISettings_Weapon*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_GetAISettings) == 0x000008, "Wrong alignment on Weapon_GetAISettings");
static_assert(sizeof(Weapon_GetAISettings) == 0x000010, "Wrong size on Weapon_GetAISettings");
static_assert(offsetof(Weapon_GetAISettings, InOwner) == 0x000000, "Member 'Weapon_GetAISettings::InOwner' has a wrong offset!");
static_assert(offsetof(Weapon_GetAISettings, ReturnValue) == 0x000008, "Member 'Weapon_GetAISettings::ReturnValue' has a wrong offset!");

// Function Indiana.Weapon.GetAmmoPool
// 0x0008 (0x0008 - 0x0000)
struct Weapon_GetAmmoPool final
{
public:
	class UAmmoPoolBase*                          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_GetAmmoPool) == 0x000008, "Wrong alignment on Weapon_GetAmmoPool");
static_assert(sizeof(Weapon_GetAmmoPool) == 0x000008, "Wrong size on Weapon_GetAmmoPool");
static_assert(offsetof(Weapon_GetAmmoPool, ReturnValue) == 0x000000, "Member 'Weapon_GetAmmoPool::ReturnValue' has a wrong offset!");

// Function Indiana.Weapon.GetCharacterInfoComponent
// 0x0008 (0x0008 - 0x0000)
struct Weapon_GetCharacterInfoComponent final
{
public:
	class UCharacterInfoComponent*                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_GetCharacterInfoComponent) == 0x000008, "Wrong alignment on Weapon_GetCharacterInfoComponent");
static_assert(sizeof(Weapon_GetCharacterInfoComponent) == 0x000008, "Wrong size on Weapon_GetCharacterInfoComponent");
static_assert(offsetof(Weapon_GetCharacterInfoComponent, ReturnValue) == 0x000000, "Member 'Weapon_GetCharacterInfoComponent::ReturnValue' has a wrong offset!");

// Function Indiana.Weapon.GetCurrentMode
// 0x0008 (0x0008 - 0x0000)
struct Weapon_GetCurrentMode final
{
public:
	class UWeaponMode*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_GetCurrentMode) == 0x000008, "Wrong alignment on Weapon_GetCurrentMode");
static_assert(sizeof(Weapon_GetCurrentMode) == 0x000008, "Wrong size on Weapon_GetCurrentMode");
static_assert(offsetof(Weapon_GetCurrentMode, ReturnValue) == 0x000000, "Member 'Weapon_GetCurrentMode::ReturnValue' has a wrong offset!");

// Function Indiana.Weapon.GetCurrentVisuals
// 0x0008 (0x0008 - 0x0000)
struct Weapon_GetCurrentVisuals final
{
public:
	class UPrimaryWeaponVisuals*                  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_GetCurrentVisuals) == 0x000008, "Wrong alignment on Weapon_GetCurrentVisuals");
static_assert(sizeof(Weapon_GetCurrentVisuals) == 0x000008, "Wrong size on Weapon_GetCurrentVisuals");
static_assert(offsetof(Weapon_GetCurrentVisuals, ReturnValue) == 0x000000, "Member 'Weapon_GetCurrentVisuals::ReturnValue' has a wrong offset!");

// Function Indiana.Weapon.GetMesh
// 0x0008 (0x0008 - 0x0000)
struct Weapon_GetMesh final
{
public:
	class UFPVSkeletalMeshComponent*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_GetMesh) == 0x000008, "Wrong alignment on Weapon_GetMesh");
static_assert(sizeof(Weapon_GetMesh) == 0x000008, "Wrong size on Weapon_GetMesh");
static_assert(offsetof(Weapon_GetMesh, ReturnValue) == 0x000000, "Member 'Weapon_GetMesh::ReturnValue' has a wrong offset!");

// Function Indiana.Weapon.GetPrimaryMode
// 0x0008 (0x0008 - 0x0000)
struct Weapon_GetPrimaryMode final
{
public:
	class UWeaponMode*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_GetPrimaryMode) == 0x000008, "Wrong alignment on Weapon_GetPrimaryMode");
static_assert(sizeof(Weapon_GetPrimaryMode) == 0x000008, "Wrong size on Weapon_GetPrimaryMode");
static_assert(offsetof(Weapon_GetPrimaryMode, ReturnValue) == 0x000000, "Member 'Weapon_GetPrimaryMode::ReturnValue' has a wrong offset!");

// Function Indiana.Weapon.GetProjectileCollisionRadius
// 0x0004 (0x0004 - 0x0000)
struct Weapon_GetProjectileCollisionRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_GetProjectileCollisionRadius) == 0x000004, "Wrong alignment on Weapon_GetProjectileCollisionRadius");
static_assert(sizeof(Weapon_GetProjectileCollisionRadius) == 0x000004, "Wrong size on Weapon_GetProjectileCollisionRadius");
static_assert(offsetof(Weapon_GetProjectileCollisionRadius, ReturnValue) == 0x000000, "Member 'Weapon_GetProjectileCollisionRadius::ReturnValue' has a wrong offset!");

// Function Indiana.Weapon.GetRadialDamageOuterRadius
// 0x0004 (0x0004 - 0x0000)
struct Weapon_GetRadialDamageOuterRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_GetRadialDamageOuterRadius) == 0x000004, "Wrong alignment on Weapon_GetRadialDamageOuterRadius");
static_assert(sizeof(Weapon_GetRadialDamageOuterRadius) == 0x000004, "Wrong size on Weapon_GetRadialDamageOuterRadius");
static_assert(offsetof(Weapon_GetRadialDamageOuterRadius, ReturnValue) == 0x000000, "Member 'Weapon_GetRadialDamageOuterRadius::ReturnValue' has a wrong offset!");

// Function Indiana.Weapon.GetStats
// 0x0008 (0x0008 - 0x0000)
struct Weapon_GetStats final
{
public:
	class URpgStatComponent*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_GetStats) == 0x000008, "Wrong alignment on Weapon_GetStats");
static_assert(sizeof(Weapon_GetStats) == 0x000008, "Wrong size on Weapon_GetStats");
static_assert(offsetof(Weapon_GetStats, ReturnValue) == 0x000000, "Member 'Weapon_GetStats::ReturnValue' has a wrong offset!");

// Function Indiana.Weapon.GetWeaponEquipMode
// 0x0001 (0x0001 - 0x0000)
struct Weapon_GetWeaponEquipMode final
{
public:
	EWeaponEquipMode                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_GetWeaponEquipMode) == 0x000001, "Wrong alignment on Weapon_GetWeaponEquipMode");
static_assert(sizeof(Weapon_GetWeaponEquipMode) == 0x000001, "Wrong size on Weapon_GetWeaponEquipMode");
static_assert(offsetof(Weapon_GetWeaponEquipMode, ReturnValue) == 0x000000, "Member 'Weapon_GetWeaponEquipMode::ReturnValue' has a wrong offset!");

// Function Indiana.Weapon.GetWeaponModContainer
// 0x0008 (0x0008 - 0x0000)
struct Weapon_GetWeaponModContainer final
{
public:
	class UWeaponModContainer*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_GetWeaponModContainer) == 0x000008, "Wrong alignment on Weapon_GetWeaponModContainer");
static_assert(sizeof(Weapon_GetWeaponModContainer) == 0x000008, "Wrong size on Weapon_GetWeaponModContainer");
static_assert(offsetof(Weapon_GetWeaponModContainer, ReturnValue) == 0x000000, "Member 'Weapon_GetWeaponModContainer::ReturnValue' has a wrong offset!");

// Function Indiana.Weapon.IsEquipping
// 0x0001 (0x0001 - 0x0000)
struct Weapon_IsEquipping final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_IsEquipping) == 0x000001, "Wrong alignment on Weapon_IsEquipping");
static_assert(sizeof(Weapon_IsEquipping) == 0x000001, "Wrong size on Weapon_IsEquipping");
static_assert(offsetof(Weapon_IsEquipping, ReturnValue) == 0x000000, "Member 'Weapon_IsEquipping::ReturnValue' has a wrong offset!");

// Function Indiana.Weapon.IsHealGun
// 0x0001 (0x0001 - 0x0000)
struct Weapon_IsHealGun final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_IsHealGun) == 0x000001, "Wrong alignment on Weapon_IsHealGun");
static_assert(sizeof(Weapon_IsHealGun) == 0x000001, "Wrong size on Weapon_IsHealGun");
static_assert(offsetof(Weapon_IsHealGun, ReturnValue) == 0x000000, "Member 'Weapon_IsHealGun::ReturnValue' has a wrong offset!");

// Function Indiana.Weapon.IsNearbyEvidence
// 0x0001 (0x0001 - 0x0000)
struct Weapon_IsNearbyEvidence final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_IsNearbyEvidence) == 0x000001, "Wrong alignment on Weapon_IsNearbyEvidence");
static_assert(sizeof(Weapon_IsNearbyEvidence) == 0x000001, "Wrong size on Weapon_IsNearbyEvidence");
static_assert(offsetof(Weapon_IsNearbyEvidence, ReturnValue) == 0x000000, "Member 'Weapon_IsNearbyEvidence::ReturnValue' has a wrong offset!");

// Function Indiana.Weapon.IsUnequipping
// 0x0001 (0x0001 - 0x0000)
struct Weapon_IsUnequipping final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_IsUnequipping) == 0x000001, "Wrong alignment on Weapon_IsUnequipping");
static_assert(sizeof(Weapon_IsUnequipping) == 0x000001, "Wrong size on Weapon_IsUnequipping");
static_assert(offsetof(Weapon_IsUnequipping, ReturnValue) == 0x000000, "Member 'Weapon_IsUnequipping::ReturnValue' has a wrong offset!");

// Function Indiana.WeaponSelectWidget.HasAmmo
// 0x0001 (0x0001 - 0x0000)
struct WeaponSelectWidget_HasAmmo final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponSelectWidget_HasAmmo) == 0x000001, "Wrong alignment on WeaponSelectWidget_HasAmmo");
static_assert(sizeof(WeaponSelectWidget_HasAmmo) == 0x000001, "Wrong size on WeaponSelectWidget_HasAmmo");
static_assert(offsetof(WeaponSelectWidget_HasAmmo, ReturnValue) == 0x000000, "Member 'WeaponSelectWidget_HasAmmo::ReturnValue' has a wrong offset!");

// Function Indiana.WeaponSelectWidget.IsAmmoSectionValid
// 0x0008 (0x0008 - 0x0000)
struct WeaponSelectWidget_IsAmmoSectionValid final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WeaponSelectWidget_IsAmmoSectionValid) == 0x000004, "Wrong alignment on WeaponSelectWidget_IsAmmoSectionValid");
static_assert(sizeof(WeaponSelectWidget_IsAmmoSectionValid) == 0x000008, "Wrong size on WeaponSelectWidget_IsAmmoSectionValid");
static_assert(offsetof(WeaponSelectWidget_IsAmmoSectionValid, Index_0) == 0x000000, "Member 'WeaponSelectWidget_IsAmmoSectionValid::Index_0' has a wrong offset!");
static_assert(offsetof(WeaponSelectWidget_IsAmmoSectionValid, ReturnValue) == 0x000004, "Member 'WeaponSelectWidget_IsAmmoSectionValid::ReturnValue' has a wrong offset!");

// Function Indiana.WeaponSelectWidget.IsSectionValid
// 0x0008 (0x0008 - 0x0000)
struct WeaponSelectWidget_IsSectionValid final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WeaponSelectWidget_IsSectionValid) == 0x000004, "Wrong alignment on WeaponSelectWidget_IsSectionValid");
static_assert(sizeof(WeaponSelectWidget_IsSectionValid) == 0x000008, "Wrong size on WeaponSelectWidget_IsSectionValid");
static_assert(offsetof(WeaponSelectWidget_IsSectionValid, Index_0) == 0x000000, "Member 'WeaponSelectWidget_IsSectionValid::Index_0' has a wrong offset!");
static_assert(offsetof(WeaponSelectWidget_IsSectionValid, ReturnValue) == 0x000004, "Member 'WeaponSelectWidget_IsSectionValid::ReturnValue' has a wrong offset!");

// Function Indiana.WeaponSelectWidget.IsWeaponSectionValid
// 0x0008 (0x0008 - 0x0000)
struct WeaponSelectWidget_IsWeaponSectionValid final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WeaponSelectWidget_IsWeaponSectionValid) == 0x000004, "Wrong alignment on WeaponSelectWidget_IsWeaponSectionValid");
static_assert(sizeof(WeaponSelectWidget_IsWeaponSectionValid) == 0x000008, "Wrong size on WeaponSelectWidget_IsWeaponSectionValid");
static_assert(offsetof(WeaponSelectWidget_IsWeaponSectionValid, Index_0) == 0x000000, "Member 'WeaponSelectWidget_IsWeaponSectionValid::Index_0' has a wrong offset!");
static_assert(offsetof(WeaponSelectWidget_IsWeaponSectionValid, ReturnValue) == 0x000004, "Member 'WeaponSelectWidget_IsWeaponSectionValid::ReturnValue' has a wrong offset!");

}

