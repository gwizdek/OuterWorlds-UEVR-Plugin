#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FL_VFX

#include "Basic.hpp"

#include "FL_VFX_classes.hpp"
#include "FL_VFX_parameters.hpp"


namespace SDK
{

// Function FL_VFX.FL_VFX_C.Death_Materials
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent*           Skeletal_Mesh                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     RevealEmissiveColor                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FadeOut                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   LeadingEdgeBlend                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RevealAmount                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   EmissiveLevel                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   LeadingEdgeAmount                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RevealEdgeTightness                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   EmissiveBaseValue                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UTexture*                         RevealRMEA                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UTexture*                         RevealNormal                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UTexture*                         RevealBaseColor                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Start_Transition                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<class UMaterialInstanceDynamic*> Character_MIDs                                         (Parm, OutParm)
// class UMaterialInstanceDynamic*         Teeth_MID                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFL_VFX_C::Death_Materials(class USkeletalMeshComponent* Skeletal_Mesh, const struct FLinearColor& RevealEmissiveColor, float FadeOut, float LeadingEdgeBlend, float RevealAmount, float EmissiveLevel, float LeadingEdgeAmount, float RevealEdgeTightness, float EmissiveBaseValue, class UTexture* RevealRMEA, class UTexture* RevealNormal, class UTexture* RevealBaseColor, class AActor* Actor, class UObject* __WorldContext, bool* Start_Transition, TArray<class UMaterialInstanceDynamic*>* Character_MIDs, class UMaterialInstanceDynamic** Teeth_MID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FL_VFX_C", "Death_Materials");

	Params::FL_VFX_C_Death_Materials Parms{};

	Parms.Skeletal_Mesh = Skeletal_Mesh;
	Parms.RevealEmissiveColor = std::move(RevealEmissiveColor);
	Parms.FadeOut = FadeOut;
	Parms.LeadingEdgeBlend = LeadingEdgeBlend;
	Parms.RevealAmount = RevealAmount;
	Parms.EmissiveLevel = EmissiveLevel;
	Parms.LeadingEdgeAmount = LeadingEdgeAmount;
	Parms.RevealEdgeTightness = RevealEdgeTightness;
	Parms.EmissiveBaseValue = EmissiveBaseValue;
	Parms.RevealRMEA = RevealRMEA;
	Parms.RevealNormal = RevealNormal;
	Parms.RevealBaseColor = RevealBaseColor;
	Parms.Actor = Actor;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Start_Transition != nullptr)
		*Start_Transition = Parms.Start_Transition;

	if (Character_MIDs != nullptr)
		*Character_MIDs = std::move(Parms.Character_MIDs);

	if (Teeth_MID != nullptr)
		*Teeth_MID = Parms.Teeth_MID;
}


// Function FL_VFX.FL_VFX_C.Emitter_Toggle
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FName>                     Emitters                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class UParticleSystemComponent*> Particle_Systems                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// bool                                    Toggle                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFL_VFX_C::Emitter_Toggle(TArray<class FName>& Emitters, TArray<class UParticleSystemComponent*>& Particle_Systems, bool Toggle, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FL_VFX_C", "Emitter_Toggle");

	Params::FL_VFX_C_Emitter_Toggle Parms{};

	Parms.Emitters = std::move(Emitters);
	Parms.Particle_Systems = std::move(Particle_Systems);
	Parms.Toggle = Toggle;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Emitters = std::move(Parms.Emitters);
	Particle_Systems = std::move(Parms.Particle_Systems);
}


// Function FL_VFX.FL_VFX_C.PS_Parameters
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UParticleSystemComponent*> PS_Array                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// bool                                    Set_Color                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             Color_Param                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Set_Float                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             Float_Param                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Float                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Set_Vector                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             Vector_Param                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Vector                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFL_VFX_C::PS_Parameters(TArray<class UParticleSystemComponent*>& PS_Array, bool Set_Color, class FName Color_Param, const struct FLinearColor& Color, bool Set_Float, class FName Float_Param, float Float, bool Set_Vector, class FName Vector_Param, const struct FVector& Vector, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FL_VFX_C", "PS_Parameters");

	Params::FL_VFX_C_PS_Parameters Parms{};

	Parms.PS_Array = std::move(PS_Array);
	Parms.Set_Color = Set_Color;
	Parms.Color_Param = Color_Param;
	Parms.Color = std::move(Color);
	Parms.Set_Float = Set_Float;
	Parms.Float_Param = Float_Param;
	Parms.Float = Float;
	Parms.Set_Vector = Set_Vector;
	Parms.Vector_Param = Vector_Param;
	Parms.Vector = std::move(Vector);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	PS_Array = std::move(Parms.PS_Array);
}


// Function FL_VFX.FL_VFX_C.Tagged_Children
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USceneComponent*                  Parent_Mesh                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             Child_Component_Tag                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             MaterialSlotName                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UMaterialInstanceDynamic*         Mid                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class UMaterialInstanceDynamic*> MIDs                                                   (Parm, OutParm)

void UFL_VFX_C::Tagged_Children(class USceneComponent* Parent_Mesh, class FName Child_Component_Tag, class FName MaterialSlotName, class UObject* __WorldContext, class UMaterialInstanceDynamic** Mid, TArray<class UMaterialInstanceDynamic*>* MIDs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FL_VFX_C", "Tagged_Children");

	Params::FL_VFX_C_Tagged_Children Parms{};

	Parms.Parent_Mesh = Parent_Mesh;
	Parms.Child_Component_Tag = Child_Component_Tag;
	Parms.MaterialSlotName = MaterialSlotName;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Mid != nullptr)
		*Mid = Parms.Mid;

	if (MIDs != nullptr)
		*MIDs = std::move(Parms.MIDs);
}


// Function FL_VFX.FL_VFX_C.MID_Adjustments
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UMaterialInstanceDynamic*> MIDs                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<int32>                           Mat_MID_Index                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class FName>                     Mat_Slot_Params                                        (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FVector>                  Mat_Slot_Floats                                        (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FLinearColor>             Mat_Colors_A                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FLinearColor>             Mat_Colors_B                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<EN_Material_Parameters>          Mat_Param_Change                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// float                                   Lerp_Alpha                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<float>                           Edited_Scalars                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FLinearColor>             Edited_Colors                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    Reset_Values                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFL_VFX_C::MID_Adjustments(TArray<class UMaterialInstanceDynamic*>& MIDs, TArray<int32>& Mat_MID_Index, TArray<class FName>& Mat_Slot_Params, TArray<struct FVector>& Mat_Slot_Floats, TArray<struct FLinearColor>& Mat_Colors_A, TArray<struct FLinearColor>& Mat_Colors_B, TArray<EN_Material_Parameters>& Mat_Param_Change, float Lerp_Alpha, TArray<float>& Edited_Scalars, TArray<struct FLinearColor>& Edited_Colors, bool Reset_Values, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FL_VFX_C", "MID_Adjustments");

	Params::FL_VFX_C_MID_Adjustments Parms{};

	Parms.MIDs = std::move(MIDs);
	Parms.Mat_MID_Index = std::move(Mat_MID_Index);
	Parms.Mat_Slot_Params = std::move(Mat_Slot_Params);
	Parms.Mat_Slot_Floats = std::move(Mat_Slot_Floats);
	Parms.Mat_Colors_A = std::move(Mat_Colors_A);
	Parms.Mat_Colors_B = std::move(Mat_Colors_B);
	Parms.Mat_Param_Change = std::move(Mat_Param_Change);
	Parms.Lerp_Alpha = Lerp_Alpha;
	Parms.Edited_Scalars = std::move(Edited_Scalars);
	Parms.Edited_Colors = std::move(Edited_Colors);
	Parms.Reset_Values = Reset_Values;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	MIDs = std::move(Parms.MIDs);
	Mat_MID_Index = std::move(Parms.Mat_MID_Index);
	Mat_Slot_Params = std::move(Parms.Mat_Slot_Params);
	Mat_Slot_Floats = std::move(Parms.Mat_Slot_Floats);
	Mat_Colors_A = std::move(Parms.Mat_Colors_A);
	Mat_Colors_B = std::move(Parms.Mat_Colors_B);
	Mat_Param_Change = std::move(Parms.Mat_Param_Change);
	Edited_Scalars = std::move(Parms.Edited_Scalars);
	Edited_Colors = std::move(Parms.Edited_Colors);
}


// Function FL_VFX.FL_VFX_C.MID_Creation_Skeletal
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent*           Skeletal_Mesh                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class FName>                     Material_Slot_Name                                     (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    Create_Child_MID                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   Child_Indices_Start                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class FName>                     Child_Components_Tags                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class UMaterialInstanceDynamic*> MIDs                                                   (Parm, OutParm)

void UFL_VFX_C::MID_Creation_Skeletal(class USkeletalMeshComponent* Skeletal_Mesh, TArray<class FName>& Material_Slot_Name, bool Create_Child_MID, int32 Child_Indices_Start, TArray<class FName>& Child_Components_Tags, class UObject* __WorldContext, TArray<class UMaterialInstanceDynamic*>* MIDs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FL_VFX_C", "MID_Creation_Skeletal");

	Params::FL_VFX_C_MID_Creation_Skeletal Parms{};

	Parms.Skeletal_Mesh = Skeletal_Mesh;
	Parms.Material_Slot_Name = std::move(Material_Slot_Name);
	Parms.Create_Child_MID = Create_Child_MID;
	Parms.Child_Indices_Start = Child_Indices_Start;
	Parms.Child_Components_Tags = std::move(Child_Components_Tags);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Material_Slot_Name = std::move(Parms.Material_Slot_Name);
	Child_Components_Tags = std::move(Parms.Child_Components_Tags);

	if (MIDs != nullptr)
		*MIDs = std::move(Parms.MIDs);
}


// Function FL_VFX.FL_VFX_C.MID_Creation_Static
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AStaticMeshActor*                 Static_Mesh                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class FName>                     Material_Slot_Name                                     (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    Create_Child_MID                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   Child_Indices_Start                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class FName>                     Child_Components_Tags                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class UMaterialInstanceDynamic*> MIDs                                                   (Parm, OutParm)

void UFL_VFX_C::MID_Creation_Static(class AStaticMeshActor* Static_Mesh, TArray<class FName>& Material_Slot_Name, bool Create_Child_MID, int32 Child_Indices_Start, TArray<class FName>& Child_Components_Tags, class UObject* __WorldContext, TArray<class UMaterialInstanceDynamic*>* MIDs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FL_VFX_C", "MID_Creation_Static");

	Params::FL_VFX_C_MID_Creation_Static Parms{};

	Parms.Static_Mesh = Static_Mesh;
	Parms.Material_Slot_Name = std::move(Material_Slot_Name);
	Parms.Create_Child_MID = Create_Child_MID;
	Parms.Child_Indices_Start = Child_Indices_Start;
	Parms.Child_Components_Tags = std::move(Child_Components_Tags);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Material_Slot_Name = std::move(Parms.Material_Slot_Name);
	Child_Components_Tags = std::move(Parms.Child_Components_Tags);

	if (MIDs != nullptr)
		*MIDs = std::move(Parms.MIDs);
}


// Function FL_VFX.FL_VFX_C.Decal_Spawn
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          WorldContextObject                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UMaterialInterface*               DecalMaterial                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Normal                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Decal_Size_Min                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Decal_Size_Max                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Decal_Life_Min                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Decal_Life_Max                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Decal_Fade_Delay_Min                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Decal_Fade_Delay_Max                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFL_VFX_C::Decal_Spawn(class UObject* WorldContextObject, class UMaterialInterface* DecalMaterial, const struct FVector& Location, const struct FVector& Normal, float Decal_Size_Min, float Decal_Size_Max, float Decal_Life_Min, float Decal_Life_Max, float Decal_Fade_Delay_Min, float Decal_Fade_Delay_Max, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FL_VFX_C", "Decal_Spawn");

	Params::FL_VFX_C_Decal_Spawn Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.DecalMaterial = DecalMaterial;
	Parms.Location = std::move(Location);
	Parms.Normal = std::move(Normal);
	Parms.Decal_Size_Min = Decal_Size_Min;
	Parms.Decal_Size_Max = Decal_Size_Max;
	Parms.Decal_Life_Min = Decal_Life_Min;
	Parms.Decal_Life_Max = Decal_Life_Max;
	Parms.Decal_Fade_Delay_Min = Decal_Fade_Delay_Min;
	Parms.Decal_Fade_Delay_Max = Decal_Fade_Delay_Max;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function FL_VFX.FL_VFX_C.Unlock_Doors
// (Static, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFL_VFX_C::Unlock_Doors(class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FL_VFX_C", "Unlock_Doors");

	Params::FL_VFX_C_Unlock_Doors Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function FL_VFX.FL_VFX_C.Hit_Flash
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FEventEffectParams               Params_0                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Scene_Color_Tint                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Delay_Duration                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFL_VFX_C::Hit_Flash(const struct FEventEffectParams& Params_0, class UObject* __WorldContext, struct FLinearColor* Scene_Color_Tint, float* Delay_Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FL_VFX_C", "Hit_Flash");

	Params::FL_VFX_C_Hit_Flash Parms{};

	Parms.Params_0 = std::move(Params_0);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Scene_Color_Tint != nullptr)
		*Scene_Color_Tint = std::move(Parms.Scene_Color_Tint);

	if (Delay_Duration != nullptr)
		*Delay_Duration = Parms.Delay_Duration;
}

}

