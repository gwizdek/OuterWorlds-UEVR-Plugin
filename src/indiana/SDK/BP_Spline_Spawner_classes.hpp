#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Spline_Spawner

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AkAudio_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Spline_Spawner.BP_Spline_Spawner_C
// 0x0128 (0x03E0 - 0x02B8)
class ABP_Spline_Spawner_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UNiagaraComponent*                      NiagaraParticleSystem;                             // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_ActorComponent_FlyBy_Emitter_C*     FlyBy_Emitter_Thrusters;                           // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_ActorComponent_FlyBy_Emitter_C*     FlyBy_Emitter_Engine;                              // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Trigger_Volume;                                    // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               PS_Mesh;                                           // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       Spline;                                            // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Billboard;                                         // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               ParticleSystem;                                    // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Spline_Traverse_Mesh_Spline_Progress_E43DE7CF4B89A480EBD018BB4338085E; // 0x0308(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Spline_Traverse_Mesh__Direction_E43DE7CF4B89A480EBD018BB4338085E; // 0x030C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_30D[0x3];                                      // 0x030D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Spline_Traverse_Mesh;                              // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Spline_Traverse_Spline_Progress_350B3F57463EB825094BB4921FAD7985; // 0x0318(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Spline_Traverse__Direction_350B3F57463EB825094BB4921FAD7985; // 0x031C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31D[0x3];                                      // 0x031D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Spline_Traverse;                                   // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Test_Distance;                                     // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Scalar_Parameter;                                  // 0x032C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Instance_Parameter_Name;                           // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        PS;                                                // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Traverse_Rate;                                     // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Mesh_Traverse;                                     // 0x0344(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_345[0x3];                                      // 0x0345(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStaticMesh*>                    Meshes;                                            // 0x0348(0x0010)(Edit, BlueprintVisible)
	TArray<float>                                 Traversal_Adjust;                                  // 0x0358(0x0010)(Edit, BlueprintVisible)
	TArray<class UParticleSystem*>                PS_To_Attach;                                      // 0x0368(0x0010)(Edit, BlueprintVisible)
	TArray<class UAkAudioEvent*>                  Sound_Events_Engine;                               // 0x0378(0x0010)(Edit, BlueprintVisible)
	TArray<class UAkAudioEvent*>                  Sound_Events_Thruster;                             // 0x0388(0x0010)(Edit, BlueprintVisible)
	float                                         Min_Delay_Mesh_Spawn;                              // 0x0398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Max_Delay_Mesh_Spawn;                              // 0x039C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PS_Cast_Shadow;                                    // 0x03A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Play_On_Start;                                     // 0x03A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Trigger_Volume_Start;                              // 0x03A2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Fire_Once;                                         // 0x03A3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A4[0x4];                                      // 0x03A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UParticleSystemComponent*>       PS_Spawned;                                        // 0x03A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          Destroy_PSs;                                       // 0x03B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Random_Time_After_Loop;                            // 0x03B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Delay_Initial_Spawn;                               // 0x03BA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3BB[0x1];                                      // 0x03BB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Min_Delay_PS_Spawn;                                // 0x03BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Max_Delay_PS_Spawn;                                // 0x03C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Clean_SFXEmitters;                                 // 0x03C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C5[0x3];                                      // 0x03C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ShipSlot;                                          // 0x03C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DisableAudio;                                      // 0x03CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3CD[0x3];                                      // 0x03CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 External_Spline;                                   // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_External_Spline;                               // 0x03D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_Spline_Spawner(int32 EntryPoint);
	void Trigger_Enter(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ReceiveBeginPlay();
	void Trigger();
	void Stop();
	void Level_Spline();
	void Spline_Traverse_Mesh__Spline_Start__EventFunc();
	void Spline_Traverse_Mesh__Spline_End__EventFunc();
	void Spline_Traverse_Mesh__UpdateFunc();
	void Spline_Traverse_Mesh__FinishedFunc();
	void Spline_Traverse__Spline_Start__EventFunc();
	void Spline_Traverse__Spline_End__EventFunc();
	void Spline_Traverse__UpdateFunc();
	void Spline_Traverse__FinishedFunc();
	void UserConstructionScript();
	void Random_Mesh_Selection(bool SpecifyShip, int32 ShipSlot_0, int32* ArrayElement);
	void Sort_Socket_Names(TArray<class FName>& SocketNamesToSort, TArray<class FName>* VFXSocketNames, TArray<class FName>* SFXSocketNames);
	void Sound_Initialize_Emitters(TArray<class FName>& SFXSocketNames, int32 SelectedElement);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Spline_Spawner_C">();
	}
	static class ABP_Spline_Spawner_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Spline_Spawner_C>();
	}
};
static_assert(alignof(ABP_Spline_Spawner_C) == 0x000008, "Wrong alignment on ABP_Spline_Spawner_C");
static_assert(sizeof(ABP_Spline_Spawner_C) == 0x0003E0, "Wrong size on ABP_Spline_Spawner_C");
static_assert(offsetof(ABP_Spline_Spawner_C, UberGraphFrame) == 0x0002B8, "Member 'ABP_Spline_Spawner_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Spawner_C, NiagaraParticleSystem) == 0x0002C0, "Member 'ABP_Spline_Spawner_C::NiagaraParticleSystem' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Spawner_C, FlyBy_Emitter_Thrusters) == 0x0002C8, "Member 'ABP_Spline_Spawner_C::FlyBy_Emitter_Thrusters' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Spawner_C, FlyBy_Emitter_Engine) == 0x0002D0, "Member 'ABP_Spline_Spawner_C::FlyBy_Emitter_Engine' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Spawner_C, Trigger_Volume) == 0x0002D8, "Member 'ABP_Spline_Spawner_C::Trigger_Volume' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Spawner_C, PS_Mesh) == 0x0002E0, "Member 'ABP_Spline_Spawner_C::PS_Mesh' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Spawner_C, StaticMesh) == 0x0002E8, "Member 'ABP_Spline_Spawner_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Spawner_C, Spline) == 0x0002F0, "Member 'ABP_Spline_Spawner_C::Spline' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Spawner_C, Billboard) == 0x0002F8, "Member 'ABP_Spline_Spawner_C::Billboard' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Spawner_C, ParticleSystem) == 0x000300, "Member 'ABP_Spline_Spawner_C::ParticleSystem' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Spawner_C, Spline_Traverse_Mesh_Spline_Progress_E43DE7CF4B89A480EBD018BB4338085E) == 0x000308, "Member 'ABP_Spline_Spawner_C::Spline_Traverse_Mesh_Spline_Progress_E43DE7CF4B89A480EBD018BB4338085E' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Spawner_C, Spline_Traverse_Mesh__Direction_E43DE7CF4B89A480EBD018BB4338085E) == 0x00030C, "Member 'ABP_Spline_Spawner_C::Spline_Traverse_Mesh__Direction_E43DE7CF4B89A480EBD018BB4338085E' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Spawner_C, Spline_Traverse_Mesh) == 0x000310, "Member 'ABP_Spline_Spawner_C::Spline_Traverse_Mesh' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Spawner_C, Spline_Traverse_Spline_Progress_350B3F57463EB825094BB4921FAD7985) == 0x000318, "Member 'ABP_Spline_Spawner_C::Spline_Traverse_Spline_Progress_350B3F57463EB825094BB4921FAD7985' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Spawner_C, Spline_Traverse__Direction_350B3F57463EB825094BB4921FAD7985) == 0x00031C, "Member 'ABP_Spline_Spawner_C::Spline_Traverse__Direction_350B3F57463EB825094BB4921FAD7985' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Spawner_C, Spline_Traverse) == 0x000320, "Member 'ABP_Spline_Spawner_C::Spline_Traverse' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Spawner_C, Test_Distance) == 0x000328, "Member 'ABP_Spline_Spawner_C::Test_Distance' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Spawner_C, Scalar_Parameter) == 0x00032C, "Member 'ABP_Spline_Spawner_C::Scalar_Parameter' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Spawner_C, Instance_Parameter_Name) == 0x000330, "Member 'ABP_Spline_Spawner_C::Instance_Parameter_Name' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Spawner_C, PS) == 0x000338, "Member 'ABP_Spline_Spawner_C::PS' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Spawner_C, Traverse_Rate) == 0x000340, "Member 'ABP_Spline_Spawner_C::Traverse_Rate' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Spawner_C, Mesh_Traverse) == 0x000344, "Member 'ABP_Spline_Spawner_C::Mesh_Traverse' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Spawner_C, Meshes) == 0x000348, "Member 'ABP_Spline_Spawner_C::Meshes' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Spawner_C, Traversal_Adjust) == 0x000358, "Member 'ABP_Spline_Spawner_C::Traversal_Adjust' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Spawner_C, PS_To_Attach) == 0x000368, "Member 'ABP_Spline_Spawner_C::PS_To_Attach' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Spawner_C, Sound_Events_Engine) == 0x000378, "Member 'ABP_Spline_Spawner_C::Sound_Events_Engine' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Spawner_C, Sound_Events_Thruster) == 0x000388, "Member 'ABP_Spline_Spawner_C::Sound_Events_Thruster' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Spawner_C, Min_Delay_Mesh_Spawn) == 0x000398, "Member 'ABP_Spline_Spawner_C::Min_Delay_Mesh_Spawn' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Spawner_C, Max_Delay_Mesh_Spawn) == 0x00039C, "Member 'ABP_Spline_Spawner_C::Max_Delay_Mesh_Spawn' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Spawner_C, PS_Cast_Shadow) == 0x0003A0, "Member 'ABP_Spline_Spawner_C::PS_Cast_Shadow' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Spawner_C, Play_On_Start) == 0x0003A1, "Member 'ABP_Spline_Spawner_C::Play_On_Start' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Spawner_C, Trigger_Volume_Start) == 0x0003A2, "Member 'ABP_Spline_Spawner_C::Trigger_Volume_Start' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Spawner_C, Fire_Once) == 0x0003A3, "Member 'ABP_Spline_Spawner_C::Fire_Once' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Spawner_C, PS_Spawned) == 0x0003A8, "Member 'ABP_Spline_Spawner_C::PS_Spawned' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Spawner_C, Destroy_PSs) == 0x0003B8, "Member 'ABP_Spline_Spawner_C::Destroy_PSs' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Spawner_C, Random_Time_After_Loop) == 0x0003B9, "Member 'ABP_Spline_Spawner_C::Random_Time_After_Loop' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Spawner_C, Delay_Initial_Spawn) == 0x0003BA, "Member 'ABP_Spline_Spawner_C::Delay_Initial_Spawn' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Spawner_C, Min_Delay_PS_Spawn) == 0x0003BC, "Member 'ABP_Spline_Spawner_C::Min_Delay_PS_Spawn' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Spawner_C, Max_Delay_PS_Spawn) == 0x0003C0, "Member 'ABP_Spline_Spawner_C::Max_Delay_PS_Spawn' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Spawner_C, Clean_SFXEmitters) == 0x0003C4, "Member 'ABP_Spline_Spawner_C::Clean_SFXEmitters' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Spawner_C, ShipSlot) == 0x0003C8, "Member 'ABP_Spline_Spawner_C::ShipSlot' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Spawner_C, DisableAudio) == 0x0003CC, "Member 'ABP_Spline_Spawner_C::DisableAudio' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Spawner_C, External_Spline) == 0x0003D0, "Member 'ABP_Spline_Spawner_C::External_Spline' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Spawner_C, Use_External_Spline) == 0x0003D8, "Member 'ABP_Spline_Spawner_C::Use_External_Spline' has a wrong offset!");

}

