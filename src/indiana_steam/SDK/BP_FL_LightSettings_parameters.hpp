#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FL_LightSettings

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_FL_LightSettings.BP_FL_LightSettings_C.LightSettings
// 0x0080 (0x0080 - 0x0000)
struct BP_FL_LightSettings_C_LightSettings final
{
public:
	class UPointLightComponent*                   PointLight_Actor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight_Actor;                                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LightIntensity;                                    // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AttenuationRadius;                                 // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LightTemperature;                                  // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           LightColor;                                        // 0x001C(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InnerConeAngle;                                    // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OuterConeAngle;                                    // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LightOn;                                           // 0x0034(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPointLightComponent*>           K2Node_MakeArray_Array;                            // 0x0048(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UPointLightComponent*                   CallFunc_Array_Get_Item;                           // 0x0058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USpotLightComponent*                    K2Node_DynamicCast_AsSpot_Light_Component;         // 0x0068(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_72[0x2];                                       // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FL_LightSettings_C_LightSettings) == 0x000008, "Wrong alignment on BP_FL_LightSettings_C_LightSettings");
static_assert(sizeof(BP_FL_LightSettings_C_LightSettings) == 0x000080, "Wrong size on BP_FL_LightSettings_C_LightSettings");
static_assert(offsetof(BP_FL_LightSettings_C_LightSettings, PointLight_Actor) == 0x000000, "Member 'BP_FL_LightSettings_C_LightSettings::PointLight_Actor' has a wrong offset!");
static_assert(offsetof(BP_FL_LightSettings_C_LightSettings, SpotLight_Actor) == 0x000008, "Member 'BP_FL_LightSettings_C_LightSettings::SpotLight_Actor' has a wrong offset!");
static_assert(offsetof(BP_FL_LightSettings_C_LightSettings, LightIntensity) == 0x000010, "Member 'BP_FL_LightSettings_C_LightSettings::LightIntensity' has a wrong offset!");
static_assert(offsetof(BP_FL_LightSettings_C_LightSettings, AttenuationRadius) == 0x000014, "Member 'BP_FL_LightSettings_C_LightSettings::AttenuationRadius' has a wrong offset!");
static_assert(offsetof(BP_FL_LightSettings_C_LightSettings, LightTemperature) == 0x000018, "Member 'BP_FL_LightSettings_C_LightSettings::LightTemperature' has a wrong offset!");
static_assert(offsetof(BP_FL_LightSettings_C_LightSettings, LightColor) == 0x00001C, "Member 'BP_FL_LightSettings_C_LightSettings::LightColor' has a wrong offset!");
static_assert(offsetof(BP_FL_LightSettings_C_LightSettings, InnerConeAngle) == 0x00002C, "Member 'BP_FL_LightSettings_C_LightSettings::InnerConeAngle' has a wrong offset!");
static_assert(offsetof(BP_FL_LightSettings_C_LightSettings, OuterConeAngle) == 0x000030, "Member 'BP_FL_LightSettings_C_LightSettings::OuterConeAngle' has a wrong offset!");
static_assert(offsetof(BP_FL_LightSettings_C_LightSettings, LightOn) == 0x000034, "Member 'BP_FL_LightSettings_C_LightSettings::LightOn' has a wrong offset!");
static_assert(offsetof(BP_FL_LightSettings_C_LightSettings, __WorldContext) == 0x000038, "Member 'BP_FL_LightSettings_C_LightSettings::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FL_LightSettings_C_LightSettings, Temp_int_Array_Index_Variable) == 0x000040, "Member 'BP_FL_LightSettings_C_LightSettings::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_FL_LightSettings_C_LightSettings, K2Node_MakeArray_Array) == 0x000048, "Member 'BP_FL_LightSettings_C_LightSettings::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_FL_LightSettings_C_LightSettings, CallFunc_Array_Get_Item) == 0x000058, "Member 'BP_FL_LightSettings_C_LightSettings::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_FL_LightSettings_C_LightSettings, CallFunc_Array_Length_ReturnValue) == 0x000060, "Member 'BP_FL_LightSettings_C_LightSettings::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FL_LightSettings_C_LightSettings, K2Node_DynamicCast_AsSpot_Light_Component) == 0x000068, "Member 'BP_FL_LightSettings_C_LightSettings::K2Node_DynamicCast_AsSpot_Light_Component' has a wrong offset!");
static_assert(offsetof(BP_FL_LightSettings_C_LightSettings, K2Node_DynamicCast_bSuccess) == 0x000070, "Member 'BP_FL_LightSettings_C_LightSettings::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_FL_LightSettings_C_LightSettings, CallFunc_IsValid_ReturnValue) == 0x000071, "Member 'BP_FL_LightSettings_C_LightSettings::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FL_LightSettings_C_LightSettings, Temp_int_Loop_Counter_Variable) == 0x000074, "Member 'BP_FL_LightSettings_C_LightSettings::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_FL_LightSettings_C_LightSettings, CallFunc_Less_IntInt_ReturnValue) == 0x000078, "Member 'BP_FL_LightSettings_C_LightSettings::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FL_LightSettings_C_LightSettings, CallFunc_Add_IntInt_ReturnValue) == 0x00007C, "Member 'BP_FL_LightSettings_C_LightSettings::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

}

