#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CabinetLight

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CabinetLight.BP_CabinetLight_C
// 0x0040 (0x02F8 - 0x02B8)
class ABP_CabinetLight_C final : public AActor
{
public:
	class UPointLightComponent*                   Bounce;                                            // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Light_intensity;                                   // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AttenuationRadius;                                 // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Light_On;                                          // 0x02D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D9[0x3];                                      // 0x02D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           LightColor;                                        // 0x02DC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Light_Temperature;                                 // 0x02EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseLight;                                          // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CabinetLight_C">();
	}
	static class ABP_CabinetLight_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_CabinetLight_C>();
	}
};
static_assert(alignof(ABP_CabinetLight_C) == 0x000008, "Wrong alignment on ABP_CabinetLight_C");
static_assert(sizeof(ABP_CabinetLight_C) == 0x0002F8, "Wrong size on ABP_CabinetLight_C");
static_assert(offsetof(ABP_CabinetLight_C, Bounce) == 0x0002B8, "Member 'ABP_CabinetLight_C::Bounce' has a wrong offset!");
static_assert(offsetof(ABP_CabinetLight_C, StaticMesh) == 0x0002C0, "Member 'ABP_CabinetLight_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_CabinetLight_C, DefaultSceneRoot) == 0x0002C8, "Member 'ABP_CabinetLight_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_CabinetLight_C, Light_intensity) == 0x0002D0, "Member 'ABP_CabinetLight_C::Light_intensity' has a wrong offset!");
static_assert(offsetof(ABP_CabinetLight_C, AttenuationRadius) == 0x0002D4, "Member 'ABP_CabinetLight_C::AttenuationRadius' has a wrong offset!");
static_assert(offsetof(ABP_CabinetLight_C, Light_On) == 0x0002D8, "Member 'ABP_CabinetLight_C::Light_On' has a wrong offset!");
static_assert(offsetof(ABP_CabinetLight_C, LightColor) == 0x0002DC, "Member 'ABP_CabinetLight_C::LightColor' has a wrong offset!");
static_assert(offsetof(ABP_CabinetLight_C, Light_Temperature) == 0x0002EC, "Member 'ABP_CabinetLight_C::Light_Temperature' has a wrong offset!");
static_assert(offsetof(ABP_CabinetLight_C, UseLight) == 0x0002F0, "Member 'ABP_CabinetLight_C::UseLight' has a wrong offset!");

}

