#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Base_Ai_Character

#include "Basic.hpp"

#include "Indiana_structs.hpp"
#include "Indiana_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Base_Ai_Character.Base_Ai_Character_C
// 0x0050 (0x0EB0 - 0x0E60)
class ABase_Ai_Character_C : public AIndianaAiCharacter
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0E60(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class URpgStatComponent*                      RpgStat;                                           // 0x0E68(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UEquipmentComponent*                    Equipment;                                         // 0x0E70(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAppearanceComponent*                   Appearance;                                        // 0x0E78(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCharacterDeathComponent*               CharacterDeath;                                    // 0x0E80(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTargetableComponent*                   Targetable;                                        // 0x0E88(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHealthComponent*                       Health;                                            // 0x0E90(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Scale;                                             // 0x0E98(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AlwaysUpdateFaceModifications;                     // 0x0E9C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E9D[0x3];                                      // 0x0E9D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UFaceFXActor*                           FaceFXAsset;                                       // 0x0EA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMesh*                          FaceFXAuthoredSkeleton;                            // 0x0EA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_Base_Ai_Character(int32 EntryPoint);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void SetEmotion(EEmotion NewEmotion);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Base_Ai_Character_C">();
	}
	static class ABase_Ai_Character_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABase_Ai_Character_C>();
	}
};
static_assert(alignof(ABase_Ai_Character_C) == 0x000010, "Wrong alignment on ABase_Ai_Character_C");
static_assert(sizeof(ABase_Ai_Character_C) == 0x000EB0, "Wrong size on ABase_Ai_Character_C");
static_assert(offsetof(ABase_Ai_Character_C, UberGraphFrame) == 0x000E60, "Member 'ABase_Ai_Character_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABase_Ai_Character_C, RpgStat) == 0x000E68, "Member 'ABase_Ai_Character_C::RpgStat' has a wrong offset!");
static_assert(offsetof(ABase_Ai_Character_C, Equipment) == 0x000E70, "Member 'ABase_Ai_Character_C::Equipment' has a wrong offset!");
static_assert(offsetof(ABase_Ai_Character_C, Appearance) == 0x000E78, "Member 'ABase_Ai_Character_C::Appearance' has a wrong offset!");
static_assert(offsetof(ABase_Ai_Character_C, CharacterDeath) == 0x000E80, "Member 'ABase_Ai_Character_C::CharacterDeath' has a wrong offset!");
static_assert(offsetof(ABase_Ai_Character_C, Targetable) == 0x000E88, "Member 'ABase_Ai_Character_C::Targetable' has a wrong offset!");
static_assert(offsetof(ABase_Ai_Character_C, Health) == 0x000E90, "Member 'ABase_Ai_Character_C::Health' has a wrong offset!");
static_assert(offsetof(ABase_Ai_Character_C, Scale) == 0x000E98, "Member 'ABase_Ai_Character_C::Scale' has a wrong offset!");
static_assert(offsetof(ABase_Ai_Character_C, AlwaysUpdateFaceModifications) == 0x000E9C, "Member 'ABase_Ai_Character_C::AlwaysUpdateFaceModifications' has a wrong offset!");
static_assert(offsetof(ABase_Ai_Character_C, FaceFXAsset) == 0x000EA0, "Member 'ABase_Ai_Character_C::FaceFXAsset' has a wrong offset!");
static_assert(offsetof(ABase_Ai_Character_C, FaceFXAuthoredSkeleton) == 0x000EA8, "Member 'ABase_Ai_Character_C::FaceFXAuthoredSkeleton' has a wrong offset!");

}

