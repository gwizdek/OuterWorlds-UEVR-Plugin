#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CommonOCLLibrary

#include "Basic.hpp"

#include "CommonOCLLibrary_classes.hpp"
#include "CommonOCLLibrary_parameters.hpp"


namespace SDK
{

// Function CommonOCLLibrary.CommonOCLLibrary_C.OCL_Library_ToggleOpenCloseState
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UOCLComponent*                    Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Initiator                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Force                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Lock                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Seal                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IgnoreLockStatus                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IgnoreStartEvent                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IgnoreEndEvent                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IgnoreSound                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    InstantAnimation                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsOpen                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsOpening                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsClosed                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsClosing                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCommonOCLLibrary_C::OCL_Library_ToggleOpenCloseState(class UOCLComponent* Target, class AActor* Initiator, bool Force, bool Lock, bool Seal, bool IgnoreLockStatus, bool IgnoreStartEvent, bool IgnoreEndEvent, bool IgnoreSound, bool InstantAnimation, class UObject* __WorldContext, bool* IsOpen, bool* IsOpening, bool* IsClosed, bool* IsClosing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CommonOCLLibrary_C", "OCL_Library_ToggleOpenCloseState");

	Params::CommonOCLLibrary_C_OCL_Library_ToggleOpenCloseState Parms{};

	Parms.Target = Target;
	Parms.Initiator = Initiator;
	Parms.Force = Force;
	Parms.Lock = Lock;
	Parms.Seal = Seal;
	Parms.IgnoreLockStatus = IgnoreLockStatus;
	Parms.IgnoreStartEvent = IgnoreStartEvent;
	Parms.IgnoreEndEvent = IgnoreEndEvent;
	Parms.IgnoreSound = IgnoreSound;
	Parms.InstantAnimation = InstantAnimation;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (IsOpen != nullptr)
		*IsOpen = Parms.IsOpen;

	if (IsOpening != nullptr)
		*IsOpening = Parms.IsOpening;

	if (IsClosed != nullptr)
		*IsClosed = Parms.IsClosed;

	if (IsClosing != nullptr)
		*IsClosing = Parms.IsClosing;
}

}

