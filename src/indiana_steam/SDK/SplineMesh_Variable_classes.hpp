#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SplineMesh_Variable

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass SplineMesh_Variable.SplineMesh_Variable_C
// 0x0028 (0x02E0 - 0x02B8)
class ASplineMesh_Variable_C final : public AActor
{
public:
	class USplineComponent*                       Spline;                                            // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	ESplineMeshAxis                               Forward_Axis;                                      // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C9[0x7];                                      // 0x02C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            New_Mesh;                                          // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionEnabled                             Collision;                                         // 0x02D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SplineMesh_Variable_C">();
	}
	static class ASplineMesh_Variable_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASplineMesh_Variable_C>();
	}
};
static_assert(alignof(ASplineMesh_Variable_C) == 0x000008, "Wrong alignment on ASplineMesh_Variable_C");
static_assert(sizeof(ASplineMesh_Variable_C) == 0x0002E0, "Wrong size on ASplineMesh_Variable_C");
static_assert(offsetof(ASplineMesh_Variable_C, Spline) == 0x0002B8, "Member 'ASplineMesh_Variable_C::Spline' has a wrong offset!");
static_assert(offsetof(ASplineMesh_Variable_C, DefaultSceneRoot) == 0x0002C0, "Member 'ASplineMesh_Variable_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ASplineMesh_Variable_C, Forward_Axis) == 0x0002C8, "Member 'ASplineMesh_Variable_C::Forward_Axis' has a wrong offset!");
static_assert(offsetof(ASplineMesh_Variable_C, New_Mesh) == 0x0002D0, "Member 'ASplineMesh_Variable_C::New_Mesh' has a wrong offset!");
static_assert(offsetof(ASplineMesh_Variable_C, Collision) == 0x0002D8, "Member 'ASplineMesh_Variable_C::Collision' has a wrong offset!");

}

