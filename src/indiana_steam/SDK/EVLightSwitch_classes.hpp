#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EVLightSwitch

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass EVLightSwitch.EVLightSwitch_C
// 0x0088 (0x0340 - 0x02B8)
class AEVLightSwitch_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPrefabComponent*                       NewVar_0;                                          // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         PPVArray;                                          // 0x02D0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	struct FColor                                 Emissive_Reset_Multiplier;                         // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E4[0x4];                                      // 0x02E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            light_pulse_curve;                                 // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PowerIntensity;                                    // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SettingsChanged;                                   // 0x02F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Pulsate;                                           // 0x02F5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F6[0x2];                                      // 0x02F6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LightIntensity_Low;                                // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LightIntensity_Normal;                             // 0x02FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LightIntensity_High;                               // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 LightColor_Low;                                    // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 LightColor_Normal;                                 // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 LightColor_High;                                   // 0x030C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 PowerColor;                                        // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentIntensity;                                  // 0x0314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PulsateSpeed;                                      // 0x0318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 CurrentColor;                                      // 0x031C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ALightVolume*                           LightVolume;                                       // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInsideVolume;                                    // 0x0328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_329[0x3];                                      // 0x0329(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentMode;                                       // 0x032C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            ExteriorLightIntensity;                            // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      ExteriorLightColor;                                // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_EVLightSwitch(int32 EntryPoint);
	void ReceiveBeginPlay();
	void Normal_Mode__Reset_();
	void ReceiveTick(float DeltaSeconds);
	void High_Power_Mode();
	void Low_Power_Mode();
	void UserConstructionScript();
	void UpdateIfSettingsChanged();
	void Update();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"EVLightSwitch_C">();
	}
	static class AEVLightSwitch_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AEVLightSwitch_C>();
	}
};
static_assert(alignof(AEVLightSwitch_C) == 0x000008, "Wrong alignment on AEVLightSwitch_C");
static_assert(sizeof(AEVLightSwitch_C) == 0x000340, "Wrong size on AEVLightSwitch_C");
static_assert(offsetof(AEVLightSwitch_C, UberGraphFrame) == 0x0002B8, "Member 'AEVLightSwitch_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AEVLightSwitch_C, DefaultSceneRoot) == 0x0002C0, "Member 'AEVLightSwitch_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AEVLightSwitch_C, NewVar_0) == 0x0002C8, "Member 'AEVLightSwitch_C::NewVar_0' has a wrong offset!");
static_assert(offsetof(AEVLightSwitch_C, PPVArray) == 0x0002D0, "Member 'AEVLightSwitch_C::PPVArray' has a wrong offset!");
static_assert(offsetof(AEVLightSwitch_C, Emissive_Reset_Multiplier) == 0x0002E0, "Member 'AEVLightSwitch_C::Emissive_Reset_Multiplier' has a wrong offset!");
static_assert(offsetof(AEVLightSwitch_C, light_pulse_curve) == 0x0002E8, "Member 'AEVLightSwitch_C::light_pulse_curve' has a wrong offset!");
static_assert(offsetof(AEVLightSwitch_C, PowerIntensity) == 0x0002F0, "Member 'AEVLightSwitch_C::PowerIntensity' has a wrong offset!");
static_assert(offsetof(AEVLightSwitch_C, SettingsChanged) == 0x0002F4, "Member 'AEVLightSwitch_C::SettingsChanged' has a wrong offset!");
static_assert(offsetof(AEVLightSwitch_C, Pulsate) == 0x0002F5, "Member 'AEVLightSwitch_C::Pulsate' has a wrong offset!");
static_assert(offsetof(AEVLightSwitch_C, LightIntensity_Low) == 0x0002F8, "Member 'AEVLightSwitch_C::LightIntensity_Low' has a wrong offset!");
static_assert(offsetof(AEVLightSwitch_C, LightIntensity_Normal) == 0x0002FC, "Member 'AEVLightSwitch_C::LightIntensity_Normal' has a wrong offset!");
static_assert(offsetof(AEVLightSwitch_C, LightIntensity_High) == 0x000300, "Member 'AEVLightSwitch_C::LightIntensity_High' has a wrong offset!");
static_assert(offsetof(AEVLightSwitch_C, LightColor_Low) == 0x000304, "Member 'AEVLightSwitch_C::LightColor_Low' has a wrong offset!");
static_assert(offsetof(AEVLightSwitch_C, LightColor_Normal) == 0x000308, "Member 'AEVLightSwitch_C::LightColor_Normal' has a wrong offset!");
static_assert(offsetof(AEVLightSwitch_C, LightColor_High) == 0x00030C, "Member 'AEVLightSwitch_C::LightColor_High' has a wrong offset!");
static_assert(offsetof(AEVLightSwitch_C, PowerColor) == 0x000310, "Member 'AEVLightSwitch_C::PowerColor' has a wrong offset!");
static_assert(offsetof(AEVLightSwitch_C, CurrentIntensity) == 0x000314, "Member 'AEVLightSwitch_C::CurrentIntensity' has a wrong offset!");
static_assert(offsetof(AEVLightSwitch_C, PulsateSpeed) == 0x000318, "Member 'AEVLightSwitch_C::PulsateSpeed' has a wrong offset!");
static_assert(offsetof(AEVLightSwitch_C, CurrentColor) == 0x00031C, "Member 'AEVLightSwitch_C::CurrentColor' has a wrong offset!");
static_assert(offsetof(AEVLightSwitch_C, LightVolume) == 0x000320, "Member 'AEVLightSwitch_C::LightVolume' has a wrong offset!");
static_assert(offsetof(AEVLightSwitch_C, IsInsideVolume) == 0x000328, "Member 'AEVLightSwitch_C::IsInsideVolume' has a wrong offset!");
static_assert(offsetof(AEVLightSwitch_C, CurrentMode) == 0x00032C, "Member 'AEVLightSwitch_C::CurrentMode' has a wrong offset!");
static_assert(offsetof(AEVLightSwitch_C, ExteriorLightIntensity) == 0x000330, "Member 'AEVLightSwitch_C::ExteriorLightIntensity' has a wrong offset!");
static_assert(offsetof(AEVLightSwitch_C, ExteriorLightColor) == 0x000338, "Member 'AEVLightSwitch_C::ExteriorLightColor' has a wrong offset!");

}

