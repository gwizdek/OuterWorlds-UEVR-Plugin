#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OCL_Interactable

#include "Basic.hpp"

#include "OCL_Interactable_classes.hpp"
#include "OCL_Interactable_parameters.hpp"


namespace SDK
{

// Function OCL_Interactable.OCL_Interactable_C.IsLocked
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsLocked_0                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IOCL_Interactable_C::IsLocked(bool* IsLocked_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OCL_Interactable_C", "IsLocked");

	Params::OCL_Interactable_C_IsLocked Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsLocked_0 != nullptr)
		*IsLocked_0 = Parms.IsLocked_0;
}


// Function OCL_Interactable.OCL_Interactable_C.IsOpen
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsOpen_0                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsOpening                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IOCL_Interactable_C::IsOpen(bool* IsOpen_0, bool* IsOpening)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OCL_Interactable_C", "IsOpen");

	Params::OCL_Interactable_C_IsOpen Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsOpen_0 != nullptr)
		*IsOpen_0 = Parms.IsOpen_0;

	if (IsOpening != nullptr)
		*IsOpening = Parms.IsOpening;
}


// Function OCL_Interactable.OCL_Interactable_C.SetIsLocked
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsLocked                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsLockedOut                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IOCL_Interactable_C::SetIsLocked(bool IsLocked, bool* IsLockedOut)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OCL_Interactable_C", "SetIsLocked");

	Params::OCL_Interactable_C_SetIsLocked Parms{};

	Parms.IsLocked = IsLocked;

	UObject::ProcessEvent(Func, &Parms);

	if (IsLockedOut != nullptr)
		*IsLockedOut = Parms.IsLockedOut;
}


// Function OCL_Interactable.OCL_Interactable_C.IsBarred
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsBarred_0                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IOCL_Interactable_C::IsBarred(bool* IsBarred_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OCL_Interactable_C", "IsBarred");

	Params::OCL_Interactable_C_IsBarred Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsBarred_0 != nullptr)
		*IsBarred_0 = Parms.IsBarred_0;
}


// Function OCL_Interactable.OCL_Interactable_C.IsClosed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsClosed_0                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IOCL_Interactable_C::IsClosed(bool* IsClosed_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OCL_Interactable_C", "IsClosed");

	Params::OCL_Interactable_C_IsClosed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsClosed_0 != nullptr)
		*IsClosed_0 = Parms.IsClosed_0;
}


// Function OCL_Interactable.OCL_Interactable_C.IsSealed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsSealed_0                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IOCL_Interactable_C::IsSealed(bool* IsSealed_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OCL_Interactable_C", "IsSealed");

	Params::OCL_Interactable_C_IsSealed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsSealed_0 != nullptr)
		*IsSealed_0 = Parms.IsSealed_0;
}


// Function OCL_Interactable.OCL_Interactable_C.OnAnimateOpen
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InstantAnimation                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IOCL_Interactable_C::OnAnimateOpen(bool InstantAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OCL_Interactable_C", "OnAnimateOpen");

	Params::OCL_Interactable_C_OnAnimateOpen Parms{};

	Parms.InstantAnimation = InstantAnimation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function OCL_Interactable.OCL_Interactable_C.OnAnimateClose
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IgnoreSound                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    InstantAnimation                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IOCL_Interactable_C::OnAnimateClose(bool IgnoreSound, bool InstantAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OCL_Interactable_C", "OnAnimateClose");

	Params::OCL_Interactable_C_OnAnimateClose Parms{};

	Parms.IgnoreSound = IgnoreSound;
	Parms.InstantAnimation = InstantAnimation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function OCL_Interactable.OCL_Interactable_C.OnStateChanged
// (Public, BlueprintCallable, BlueprintEvent)

void IOCL_Interactable_C::OnStateChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OCL_Interactable_C", "OnStateChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function OCL_Interactable.OCL_Interactable_C.OnAnimateOpenComplete
// (Public, BlueprintCallable, BlueprintEvent)

void IOCL_Interactable_C::OnAnimateOpenComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OCL_Interactable_C", "OnAnimateOpenComplete");

	UObject::ProcessEvent(Func, nullptr);
}


// Function OCL_Interactable.OCL_Interactable_C.OnAnimateCloseComplete
// (Public, BlueprintCallable, BlueprintEvent)

void IOCL_Interactable_C::OnAnimateCloseComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OCL_Interactable_C", "OnAnimateCloseComplete");

	UObject::ProcessEvent(Func, nullptr);
}


// Function OCL_Interactable.OCL_Interactable_C.OnPostConstruction
// (Public, BlueprintCallable, BlueprintEvent)

void IOCL_Interactable_C::OnPostConstruction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OCL_Interactable_C", "OnPostConstruction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function OCL_Interactable.OCL_Interactable_C.ToggleOpenCloseState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Initiator                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Force                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Lock                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Seal                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IgnoreLockStatus                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IgnoreStartEvent                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IgnoreEndEvent                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IgnoreSound                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    InstantAnimation                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsOpen                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsOpening                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsClosed                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsClosing                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IOCL_Interactable_C::ToggleOpenCloseState(class AActor* Initiator, bool Force, bool Lock, bool Seal, bool IgnoreLockStatus, bool IgnoreStartEvent, bool IgnoreEndEvent, bool IgnoreSound, bool InstantAnimation, bool* IsOpen, bool* IsOpening, bool* IsClosed, bool* IsClosing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OCL_Interactable_C", "ToggleOpenCloseState");

	Params::OCL_Interactable_C_ToggleOpenCloseState Parms{};

	Parms.Initiator = Initiator;
	Parms.Force = Force;
	Parms.Lock = Lock;
	Parms.Seal = Seal;
	Parms.IgnoreLockStatus = IgnoreLockStatus;
	Parms.IgnoreStartEvent = IgnoreStartEvent;
	Parms.IgnoreEndEvent = IgnoreEndEvent;
	Parms.IgnoreSound = IgnoreSound;
	Parms.InstantAnimation = InstantAnimation;

	UObject::ProcessEvent(Func, &Parms);

	if (IsOpen != nullptr)
		*IsOpen = Parms.IsOpen;

	if (IsOpening != nullptr)
		*IsOpening = Parms.IsOpening;

	if (IsClosed != nullptr)
		*IsClosed = Parms.IsClosed;

	if (IsClosing != nullptr)
		*IsClosing = Parms.IsClosing;
}


// Function OCL_Interactable.OCL_Interactable_C.OpenOCL
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Initiator                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Force                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Seal                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IgnoreLockStatus                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IgnoreStartEvent                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IgnoreEndEvent                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IgnoreSound                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IgnoreAnimation                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IOCL_Interactable_C::OpenOCL(class AActor* Initiator, bool Force, bool Seal, bool IgnoreLockStatus, bool IgnoreStartEvent, bool IgnoreEndEvent, bool IgnoreSound, bool IgnoreAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OCL_Interactable_C", "OpenOCL");

	Params::OCL_Interactable_C_OpenOCL Parms{};

	Parms.Initiator = Initiator;
	Parms.Force = Force;
	Parms.Seal = Seal;
	Parms.IgnoreLockStatus = IgnoreLockStatus;
	Parms.IgnoreStartEvent = IgnoreStartEvent;
	Parms.IgnoreEndEvent = IgnoreEndEvent;
	Parms.IgnoreSound = IgnoreSound;
	Parms.IgnoreAnimation = IgnoreAnimation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function OCL_Interactable.OCL_Interactable_C.CloseOCL
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Initiator                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Force                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Lock                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Seal                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IgnoreStartEvent                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IgnoreEndEvent                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IgnoreSound                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IgnoreAnimation                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IOCL_Interactable_C::CloseOCL(class AActor* Initiator, bool Force, bool Lock, bool Seal, bool IgnoreStartEvent, bool IgnoreEndEvent, bool IgnoreSound, bool IgnoreAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OCL_Interactable_C", "CloseOCL");

	Params::OCL_Interactable_C_CloseOCL Parms{};

	Parms.Initiator = Initiator;
	Parms.Force = Force;
	Parms.Lock = Lock;
	Parms.Seal = Seal;
	Parms.IgnoreStartEvent = IgnoreStartEvent;
	Parms.IgnoreEndEvent = IgnoreEndEvent;
	Parms.IgnoreSound = IgnoreSound;
	Parms.IgnoreAnimation = IgnoreAnimation;

	UObject::ProcessEvent(Func, &Parms);
}

}

