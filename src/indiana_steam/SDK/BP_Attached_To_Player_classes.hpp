#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Attached_To_Player

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Attached_To_Player.BP_Attached_To_Player_C
// 0x0100 (0x03B8 - 0x02B8)
class ABP_Attached_To_Player_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UParticleSystemComponent*               Test_Particle_System;                              // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UVectorFieldComponent*                  VectorField;                                       // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Billboard_Icon;                                    // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        Particle_To_Attach;                                // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ATriggerVolume*>                 Entrance_Volumes;                                  // 0x02E0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<class APatrolNode*>                    Detached_Placement;                                // 0x02F0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	bool                                          Attached;                                          // 0x0300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_301[0x7];                                      // 0x0301(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               Spawned_PS;                                        // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ATriggerVolume*>                 Exit_Volumes;                                      // 0x0310(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<class ATriggerVolume*>                 Container_Volumes;                                 // 0x0320(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	bool                                          Detachment;                                        // 0x0330(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Line_Trace_Event;                                  // 0x0331(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_332[0x2];                                      // 0x0332(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Trace_X_Range;                                     // 0x0334(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Trace_Y_Range;                                     // 0x0340(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Trace_Start_Z;                                     // 0x034C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Trace_End_Z;                                       // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDrawDebugTrace                               Draw_Debug_Type;                                   // 0x0354(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_355[0x3];                                      // 0x0355(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Node_Check_Distance;                               // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Trace_Re_trigger_Delay;                            // 0x035C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug;                                             // 0x0360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Auto_Run;                                          // 0x0361(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_362[0x2];                                      // 0x0362(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               VF_Rotation;                                       // 0x0364(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               VF_Rotation_Gust;                                  // 0x0370(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         VF_Intensity;                                      // 0x037C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VF_Tightness;                                      // 0x0380(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Don_t_Move_VF;                                     // 0x0384(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_385[0x3];                                      // 0x0385(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Trigger_Tag;                                       // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_Trigger_Volume_Bound_C*>     Triggers;                                          // 0x0390(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	bool                                          Grab_Triggers;                                     // 0x03A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Contained;                                         // 0x03A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A2[0x6];                                      // 0x03A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Emitter_Names;                                     // 0x03A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_BP_Attached_To_Player(int32 EntryPoint);
	void Grab_Triggers_Event();
	void Exited();
	void Entered();
	void Bind();
	void Activate();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void End_Overlap_Container(class AActor* OverlappedActor, class AActor* OtherActor);
	void Begin_Overlap_Container(class AActor* OverlappedActor, class AActor* OtherActor);
	void Begin_Overlap_Exit(class AActor* OverlappedActor, class AActor* OtherActor);
	void Begin_Overlap_Entrance(class AActor* OverlappedActor, class AActor* OtherActor);
	void ReceiveBeginPlay();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Attached_To_Player_C">();
	}
	static class ABP_Attached_To_Player_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Attached_To_Player_C>();
	}
};
static_assert(alignof(ABP_Attached_To_Player_C) == 0x000008, "Wrong alignment on ABP_Attached_To_Player_C");
static_assert(sizeof(ABP_Attached_To_Player_C) == 0x0003B8, "Wrong size on ABP_Attached_To_Player_C");
static_assert(offsetof(ABP_Attached_To_Player_C, UberGraphFrame) == 0x0002B8, "Member 'ABP_Attached_To_Player_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Attached_To_Player_C, Test_Particle_System) == 0x0002C0, "Member 'ABP_Attached_To_Player_C::Test_Particle_System' has a wrong offset!");
static_assert(offsetof(ABP_Attached_To_Player_C, VectorField) == 0x0002C8, "Member 'ABP_Attached_To_Player_C::VectorField' has a wrong offset!");
static_assert(offsetof(ABP_Attached_To_Player_C, Billboard_Icon) == 0x0002D0, "Member 'ABP_Attached_To_Player_C::Billboard_Icon' has a wrong offset!");
static_assert(offsetof(ABP_Attached_To_Player_C, Particle_To_Attach) == 0x0002D8, "Member 'ABP_Attached_To_Player_C::Particle_To_Attach' has a wrong offset!");
static_assert(offsetof(ABP_Attached_To_Player_C, Entrance_Volumes) == 0x0002E0, "Member 'ABP_Attached_To_Player_C::Entrance_Volumes' has a wrong offset!");
static_assert(offsetof(ABP_Attached_To_Player_C, Detached_Placement) == 0x0002F0, "Member 'ABP_Attached_To_Player_C::Detached_Placement' has a wrong offset!");
static_assert(offsetof(ABP_Attached_To_Player_C, Attached) == 0x000300, "Member 'ABP_Attached_To_Player_C::Attached' has a wrong offset!");
static_assert(offsetof(ABP_Attached_To_Player_C, Spawned_PS) == 0x000308, "Member 'ABP_Attached_To_Player_C::Spawned_PS' has a wrong offset!");
static_assert(offsetof(ABP_Attached_To_Player_C, Exit_Volumes) == 0x000310, "Member 'ABP_Attached_To_Player_C::Exit_Volumes' has a wrong offset!");
static_assert(offsetof(ABP_Attached_To_Player_C, Container_Volumes) == 0x000320, "Member 'ABP_Attached_To_Player_C::Container_Volumes' has a wrong offset!");
static_assert(offsetof(ABP_Attached_To_Player_C, Detachment) == 0x000330, "Member 'ABP_Attached_To_Player_C::Detachment' has a wrong offset!");
static_assert(offsetof(ABP_Attached_To_Player_C, Line_Trace_Event) == 0x000331, "Member 'ABP_Attached_To_Player_C::Line_Trace_Event' has a wrong offset!");
static_assert(offsetof(ABP_Attached_To_Player_C, Trace_X_Range) == 0x000334, "Member 'ABP_Attached_To_Player_C::Trace_X_Range' has a wrong offset!");
static_assert(offsetof(ABP_Attached_To_Player_C, Trace_Y_Range) == 0x000340, "Member 'ABP_Attached_To_Player_C::Trace_Y_Range' has a wrong offset!");
static_assert(offsetof(ABP_Attached_To_Player_C, Trace_Start_Z) == 0x00034C, "Member 'ABP_Attached_To_Player_C::Trace_Start_Z' has a wrong offset!");
static_assert(offsetof(ABP_Attached_To_Player_C, Trace_End_Z) == 0x000350, "Member 'ABP_Attached_To_Player_C::Trace_End_Z' has a wrong offset!");
static_assert(offsetof(ABP_Attached_To_Player_C, Draw_Debug_Type) == 0x000354, "Member 'ABP_Attached_To_Player_C::Draw_Debug_Type' has a wrong offset!");
static_assert(offsetof(ABP_Attached_To_Player_C, Node_Check_Distance) == 0x000358, "Member 'ABP_Attached_To_Player_C::Node_Check_Distance' has a wrong offset!");
static_assert(offsetof(ABP_Attached_To_Player_C, Trace_Re_trigger_Delay) == 0x00035C, "Member 'ABP_Attached_To_Player_C::Trace_Re_trigger_Delay' has a wrong offset!");
static_assert(offsetof(ABP_Attached_To_Player_C, Debug) == 0x000360, "Member 'ABP_Attached_To_Player_C::Debug' has a wrong offset!");
static_assert(offsetof(ABP_Attached_To_Player_C, Auto_Run) == 0x000361, "Member 'ABP_Attached_To_Player_C::Auto_Run' has a wrong offset!");
static_assert(offsetof(ABP_Attached_To_Player_C, VF_Rotation) == 0x000364, "Member 'ABP_Attached_To_Player_C::VF_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_Attached_To_Player_C, VF_Rotation_Gust) == 0x000370, "Member 'ABP_Attached_To_Player_C::VF_Rotation_Gust' has a wrong offset!");
static_assert(offsetof(ABP_Attached_To_Player_C, VF_Intensity) == 0x00037C, "Member 'ABP_Attached_To_Player_C::VF_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Attached_To_Player_C, VF_Tightness) == 0x000380, "Member 'ABP_Attached_To_Player_C::VF_Tightness' has a wrong offset!");
static_assert(offsetof(ABP_Attached_To_Player_C, Don_t_Move_VF) == 0x000384, "Member 'ABP_Attached_To_Player_C::Don_t_Move_VF' has a wrong offset!");
static_assert(offsetof(ABP_Attached_To_Player_C, Trigger_Tag) == 0x000388, "Member 'ABP_Attached_To_Player_C::Trigger_Tag' has a wrong offset!");
static_assert(offsetof(ABP_Attached_To_Player_C, Triggers) == 0x000390, "Member 'ABP_Attached_To_Player_C::Triggers' has a wrong offset!");
static_assert(offsetof(ABP_Attached_To_Player_C, Grab_Triggers) == 0x0003A0, "Member 'ABP_Attached_To_Player_C::Grab_Triggers' has a wrong offset!");
static_assert(offsetof(ABP_Attached_To_Player_C, Contained) == 0x0003A1, "Member 'ABP_Attached_To_Player_C::Contained' has a wrong offset!");
static_assert(offsetof(ABP_Attached_To_Player_C, Emitter_Names) == 0x0003A8, "Member 'ABP_Attached_To_Player_C::Emitter_Names' has a wrong offset!");

}

