#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FlickeringLight

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_FlickeringLight.BP_FlickeringLight_C
// 0x0048 (0x0300 - 0x02B8)
class ABP_FlickeringLight_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Time1;                                             // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Time2;                                             // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Time3;                                             // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Strength;                                          // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               LFMID;                                             // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceConstant*              SourceMaterialInstance;                            // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APointLight*                            TargetPointLight;                                  // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASpotLight*                             TargetSpotLight;                                   // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ActorWithLightComponents;                          // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_FlickeringLight(int32 EntryPoint);
	void ReceiveBeginPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FlickeringLight_C">();
	}
	static class ABP_FlickeringLight_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_FlickeringLight_C>();
	}
};
static_assert(alignof(ABP_FlickeringLight_C) == 0x000008, "Wrong alignment on ABP_FlickeringLight_C");
static_assert(sizeof(ABP_FlickeringLight_C) == 0x000300, "Wrong size on ABP_FlickeringLight_C");
static_assert(offsetof(ABP_FlickeringLight_C, UberGraphFrame) == 0x0002B8, "Member 'ABP_FlickeringLight_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_FlickeringLight_C, DefaultSceneRoot) == 0x0002C0, "Member 'ABP_FlickeringLight_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_FlickeringLight_C, Time1) == 0x0002C8, "Member 'ABP_FlickeringLight_C::Time1' has a wrong offset!");
static_assert(offsetof(ABP_FlickeringLight_C, Time2) == 0x0002CC, "Member 'ABP_FlickeringLight_C::Time2' has a wrong offset!");
static_assert(offsetof(ABP_FlickeringLight_C, Time3) == 0x0002D0, "Member 'ABP_FlickeringLight_C::Time3' has a wrong offset!");
static_assert(offsetof(ABP_FlickeringLight_C, Strength) == 0x0002D4, "Member 'ABP_FlickeringLight_C::Strength' has a wrong offset!");
static_assert(offsetof(ABP_FlickeringLight_C, LFMID) == 0x0002D8, "Member 'ABP_FlickeringLight_C::LFMID' has a wrong offset!");
static_assert(offsetof(ABP_FlickeringLight_C, SourceMaterialInstance) == 0x0002E0, "Member 'ABP_FlickeringLight_C::SourceMaterialInstance' has a wrong offset!");
static_assert(offsetof(ABP_FlickeringLight_C, TargetPointLight) == 0x0002E8, "Member 'ABP_FlickeringLight_C::TargetPointLight' has a wrong offset!");
static_assert(offsetof(ABP_FlickeringLight_C, TargetSpotLight) == 0x0002F0, "Member 'ABP_FlickeringLight_C::TargetSpotLight' has a wrong offset!");
static_assert(offsetof(ABP_FlickeringLight_C, ActorWithLightComponents) == 0x0002F8, "Member 'ABP_FlickeringLight_C::ActorWithLightComponents' has a wrong offset!");

}

