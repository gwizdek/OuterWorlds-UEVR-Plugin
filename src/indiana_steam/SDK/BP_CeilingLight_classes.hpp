#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CeilingLight

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CeilingLight.BP_CeilingLight_C
// 0x0078 (0x0330 - 0x02B8)
class ABP_CeilingLight_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPointLightComponent*                   PointLight1;                                       // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    ExtLight;                                          // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          Light_On;                                          // 0x02E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E1[0x3];                                      // 0x02E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Light_intensity;                                   // 0x02E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Light_Temperature;                                 // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Light_Color;                                       // 0x02EC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Attenuation_Radius;                                // 0x02FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OuterConeAngle;                                    // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InnerConeAngle;                                    // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UsedAsExterior;                                    // 0x0308(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Light_On_PL1;                                      // 0x0309(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_30A[0x2];                                      // 0x030A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Light_Intensity_PL1;                               // 0x030C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Light_Temperature_PL1;                             // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Light_Color_PL1;                                   // 0x0314(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Attenuation_Radius_PL1;                            // 0x0324(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseLight;                                          // 0x0328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_CeilingLight(int32 EntryPoint);
	void ReceiveBeginPlay();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CeilingLight_C">();
	}
	static class ABP_CeilingLight_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_CeilingLight_C>();
	}
};
static_assert(alignof(ABP_CeilingLight_C) == 0x000008, "Wrong alignment on ABP_CeilingLight_C");
static_assert(sizeof(ABP_CeilingLight_C) == 0x000330, "Wrong size on ABP_CeilingLight_C");
static_assert(offsetof(ABP_CeilingLight_C, UberGraphFrame) == 0x0002B8, "Member 'ABP_CeilingLight_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_CeilingLight_C, PointLight1) == 0x0002C0, "Member 'ABP_CeilingLight_C::PointLight1' has a wrong offset!");
static_assert(offsetof(ABP_CeilingLight_C, ExtLight) == 0x0002C8, "Member 'ABP_CeilingLight_C::ExtLight' has a wrong offset!");
static_assert(offsetof(ABP_CeilingLight_C, PointLight) == 0x0002D0, "Member 'ABP_CeilingLight_C::PointLight' has a wrong offset!");
static_assert(offsetof(ABP_CeilingLight_C, StaticMesh) == 0x0002D8, "Member 'ABP_CeilingLight_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_CeilingLight_C, Light_On) == 0x0002E0, "Member 'ABP_CeilingLight_C::Light_On' has a wrong offset!");
static_assert(offsetof(ABP_CeilingLight_C, Light_intensity) == 0x0002E4, "Member 'ABP_CeilingLight_C::Light_intensity' has a wrong offset!");
static_assert(offsetof(ABP_CeilingLight_C, Light_Temperature) == 0x0002E8, "Member 'ABP_CeilingLight_C::Light_Temperature' has a wrong offset!");
static_assert(offsetof(ABP_CeilingLight_C, Light_Color) == 0x0002EC, "Member 'ABP_CeilingLight_C::Light_Color' has a wrong offset!");
static_assert(offsetof(ABP_CeilingLight_C, Attenuation_Radius) == 0x0002FC, "Member 'ABP_CeilingLight_C::Attenuation_Radius' has a wrong offset!");
static_assert(offsetof(ABP_CeilingLight_C, OuterConeAngle) == 0x000300, "Member 'ABP_CeilingLight_C::OuterConeAngle' has a wrong offset!");
static_assert(offsetof(ABP_CeilingLight_C, InnerConeAngle) == 0x000304, "Member 'ABP_CeilingLight_C::InnerConeAngle' has a wrong offset!");
static_assert(offsetof(ABP_CeilingLight_C, UsedAsExterior) == 0x000308, "Member 'ABP_CeilingLight_C::UsedAsExterior' has a wrong offset!");
static_assert(offsetof(ABP_CeilingLight_C, Light_On_PL1) == 0x000309, "Member 'ABP_CeilingLight_C::Light_On_PL1' has a wrong offset!");
static_assert(offsetof(ABP_CeilingLight_C, Light_Intensity_PL1) == 0x00030C, "Member 'ABP_CeilingLight_C::Light_Intensity_PL1' has a wrong offset!");
static_assert(offsetof(ABP_CeilingLight_C, Light_Temperature_PL1) == 0x000310, "Member 'ABP_CeilingLight_C::Light_Temperature_PL1' has a wrong offset!");
static_assert(offsetof(ABP_CeilingLight_C, Light_Color_PL1) == 0x000314, "Member 'ABP_CeilingLight_C::Light_Color_PL1' has a wrong offset!");
static_assert(offsetof(ABP_CeilingLight_C, Attenuation_Radius_PL1) == 0x000324, "Member 'ABP_CeilingLight_C::Attenuation_Radius_PL1' has a wrong offset!");
static_assert(offsetof(ABP_CeilingLight_C, UseLight) == 0x000328, "Member 'ABP_CeilingLight_C::UseLight' has a wrong offset!");

}

