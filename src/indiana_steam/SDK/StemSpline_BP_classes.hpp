#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: StemSpline_BP

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SubStemStarter_structs.hpp"
#include "MeshToSpawnAlong_structs.hpp"
#include "SkelMeshToSpawnAlong_structs.hpp"
#include "Engine_structs.hpp"
#include "Indiana_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass StemSpline_BP.StemSpline_BP_C
// 0x0278 (0x0530 - 0x02B8)
class AStemSpline_BP_C : public ATemporaryActor
{
public:
	class UBillboardComponent*                    Billboard;                                         // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow3;                                            // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow2;                                            // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         IrregularityLevel;                                 // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IrregularityLevel_SubStems;                        // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         pointHeightAboveSurface;                           // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         pointHeightOnEdge;                                 // 0x02E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          addCornerPoints;                                   // 0x02E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          optimizeEdges;                                     // 0x02E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2EA[0x2];                                      // 0x02EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         traceSegmentLength;                                // 0x02EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         downTraceLength;                                   // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AmountOfSegments;                                  // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         amountOfSegmentsDone;                              // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         edgeDetectionPrecision;                            // 0x02FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         splineMeshAmountFactor;                            // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          matchDirection_SurfaceNormal;                      // 0x0304(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_305[0x3];                                      // 0x0305(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        Points;                                            // 0x0308(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         subStemChance;                                     // 0x0318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          showSplinePoints;                                  // 0x031C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31D[0x3];                                      // 0x031D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                currentSubstemDirection;                           // 0x0320(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32C[0x4];                                      // 0x032C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        currentAddingSubstemPoints;                        // 0x0330(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         currentAddingSubstemAmountOfSegments;              // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_344[0x4];                                      // 0x0344(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSubStemStarter>                subStemStarters;                                   // 0x0348(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         currentAddingSubLevel;                             // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         maxSubStemLevels;                                  // 0x035C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USplineComponent*>               subStemSplines;                                    // 0x0360(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	float                                         subStems_minGrowAlongLength;                       // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         subStems_maxGrowAlongLength;                       // 0x0374(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         subStemAngle;                                      // 0x0378(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         subStemAngleAdditionalRandom;                      // 0x037C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         maxSubstemAmount;                                  // 0x0380(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         currentSubstemAmount;                              // 0x0384(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         perSubLevelLengthMultiplier;                       // 0x0388(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              mainMeshScale;                                     // 0x038C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_394[0x4];                                      // 0x0394(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            splineMesh_Middle;                                 // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            splineMesh_Start;                                  // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            splineMesh_End;                                    // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          optimizeToLowerPoly;                               // 0x03B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B1[0x7];                                      // 0x03B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            splineMesh_LowPoly;                                // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         optimizeMesh_DirectionMargin;                      // 0x03C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         optimizeMesh_TangentMargin;                        // 0x03C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       mainSpline;                                        // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USplineMeshComponent*>           activeSplineMeshes;                                // 0x03D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<int32>                                 occupiedLengths;                                   // 0x03E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                startPointSeekDirection;                           // 0x03F0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         splineEndScale;                                    // 0x03FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MainStemCurve;                                     // 0x0400(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MainStemCurve_Bending;                             // 0x0404(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          MainStemCurve_Incremental;                         // 0x0405(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_406[0x2];                                      // 0x0406(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SubStemCurve;                                      // 0x0408(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SubStemCurve_Bending;                              // 0x040C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_40D[0x3];                                      // 0x040D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                lastTraceDirection;                                // 0x0410(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          dropOffFromBottomEdges;                            // 0x041C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41D[0x3];                                      // 0x041D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         dropOffFromBottomEdges_maxDrop;                    // 0x0420(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         currentDropOffs;                                   // 0x0424(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          doingDropOffNow;                                   // 0x0428(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_429[0x3];                                      // 0x0429(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         dropOffTolerance;                                  // 0x042C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         dropOff_EdgeAdjust;                                // 0x0430(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          dropOffIfDownDirection;                            // 0x0434(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_435[0x3];                                      // 0x0435(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         dropOffIfDownDirection_reqLength;                  // 0x0438(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                dropOffPoint;                                      // 0x043C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         dropOffDownDirection_EdgeAdjust;                   // 0x0448(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          makeBridges;                                       // 0x044C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          makeBridgesWithSubStems;                           // 0x044D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_44E[0x2];                                      // 0x044E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BridgeChance;                                      // 0x0450(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BridgeGravity;                                     // 0x0454(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BridgeGravity_RandomAdd;                           // 0x0458(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45C[0x4];                                      // 0x045C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            BridgeCurve;                                       // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          badTwistWorkaround;                                // 0x0468(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_469[0x7];                                      // 0x0469(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 meshStartTimes;                                    // 0x0470(0x0010)(Edit, BlueprintVisible, AdvancedDisplay)
	TArray<float>                                 meshEndTimes;                                      // 0x0480(0x0010)(Edit, BlueprintVisible, AdvancedDisplay)
	TArray<struct FVector>                        edgePoints_Locations;                              // 0x0490(0x0010)(Edit, BlueprintVisible, AdvancedDisplay)
	float                                         splineMeshRoll;                                    // 0x04A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          fixTangentUV_Stretching;                           // 0x04A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A5[0x3];                                      // 0x04A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 edgePoints_SplineTime;                             // 0x04A8(0x0010)(Edit, BlueprintVisible, AdvancedDisplay)
	TArray<float>                                 edgePointsTimes;                                   // 0x04B8(0x0010)(Edit, BlueprintVisible, AdvancedDisplay)
	float                                         SeekDistance;                                      // 0x04C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SeekStartOffset;                                   // 0x04CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PrioritizeHigherObjects;                           // 0x04D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          showSeekTraces;                                    // 0x04D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D2[0x2];                                      // 0x04D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         maxTraceChecks;                                    // 0x04D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          useFixedSeekDirection;                             // 0x04D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D9[0x3];                                      // 0x04D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                FixedSeekDirection;                                // 0x04DC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          makeBridgesFromCeilings;                           // 0x04E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4E9[0x3];                                      // 0x04E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         strongTangentsReduction;                           // 0x04EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          _X__asUpVector;                                    // 0x04F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4F1[0x7];                                      // 0x04F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMeshToSpawnAlong>              meshesToSpawnAlong;                                // 0x04F8(0x0010)(Edit, BlueprintVisible)
	bool                                          clampedEdges;                                      // 0x0508(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CreateSplineMeshes;                                // 0x0509(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          onlyFromEdges;                                     // 0x050A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_50B[0x1];                                      // 0x050B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         requiredEdgeSharpness;                             // 0x050C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         maxBridgeAmount;                                   // 0x0510(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         currentBridgeAmount;                               // 0x0514(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableCollision;                                   // 0x0518(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          SubStemCurve_Incremental;                          // 0x0519(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          hideDirectionArrows;                               // 0x051A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CLICK;                                             // 0x051B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51C[0x4];                                      // 0x051C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSkelMeshToSpawnAlong>          SkelMeshesToSpawnAlong;                            // 0x0520(0x0010)(Edit, BlueprintVisible)

public:
	void UserConstructionScript();
	void FindStartPoint(struct FVector* StartLoc, struct FVector* StartNormal);
	void TraceTowardsDirection(const struct FVector& StartLocation, const struct FVector& relativeNormal, bool forSubStem, struct FVector* HitLocation, struct FVector* HitNormal, struct FVector* lastLocation, struct FVector* traceDirection, bool* hitSomething);
	void TraceDown(const struct FVector& StartLocation, const struct FVector& relativeNormal, bool forBridgeSeek, struct FVector* HitLocation, struct FVector* HitNormal, bool* hitSomething);
	void DoCheckSegment(const struct FVector& StartLocation, const struct FVector& relativeNormal);
	void SearchForEdge(const struct FVector& searchStartLocation, const struct FVector& searchDirectionNormal, bool forSubStem, bool* FoundAnEdge_, struct FVector* foundEdgeLocation, struct FVector* foundEdgeNormal);
	void AddSplinePoints();
	void AddSplineMeshes(class USplineComponent* SplineComponent);
	void AddSubStem(const struct FVector& StartLoc, const struct FVector& StartNormal, int32 currentSubLevel);
	void AddMeshesAlongSpline(class USplineComponent* SplineComp);
	void CheckIfContainsValueInRange(TArray<float>& Array, float Range__Min, float Range__Max, bool* Contains_);
	void FindClosestValue(TArray<float>& inArray, float toValue, int32* closestValueIndex_);
	void CheckIfContainsVectorInDistance(TArray<struct FVector>& Array, float inDistance, const struct FVector& Vector, bool* Contains_);
	void FindClosestVector(TArray<struct FVector>& inArray, const struct FVector& toVector, int32* closestValueIndex_);
	void WorldLocToSplineTimeApprox(const struct FVector& worldLoc, int32 Iterations, float distanceTolerance_, class USplineComponent* SplineComponent, float StartTime, float EndTime, float* bestTime);
	void FindBridgeEdge(int32 maxSegmentChecks, const struct FVector& fromWhere, const struct FVector& StartNormal, const struct FVector& Direction, bool* found, struct FVector* edgeLocation, struct FVector* edgeNormal);
	void _Bridge__TraceTowardsDirection(const struct FVector& StartLocation, const struct FVector& relativeNormal, const struct FVector& Direction, bool* hitSomething, struct FVector* lastLocation, struct FVector* HitLocation, struct FVector* HitNormal, struct FVector* traceDirection);
	void SeekForBridge(const struct FVector& StartLoc, const struct FVector& StartNormal, bool* bridgeBuilt, TArray<struct FVector>* bridgePoints, struct FVector* newSurfaceNormal);
	void _SubStem__DoCheckSegment(const struct FVector& StartLocation, const struct FVector& relativeNormal, int32 currentSubLevel);
	void AddSkelMeshesAlongSpline(class USplineComponent* SplineComp);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"StemSpline_BP_C">();
	}
	static class AStemSpline_BP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AStemSpline_BP_C>();
	}
};
static_assert(alignof(AStemSpline_BP_C) == 0x000008, "Wrong alignment on AStemSpline_BP_C");
static_assert(sizeof(AStemSpline_BP_C) == 0x000530, "Wrong size on AStemSpline_BP_C");
static_assert(offsetof(AStemSpline_BP_C, Billboard) == 0x0002B8, "Member 'AStemSpline_BP_C::Billboard' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, Arrow3) == 0x0002C0, "Member 'AStemSpline_BP_C::Arrow3' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, Arrow2) == 0x0002C8, "Member 'AStemSpline_BP_C::Arrow2' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, Arrow) == 0x0002D0, "Member 'AStemSpline_BP_C::Arrow' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, IrregularityLevel) == 0x0002D8, "Member 'AStemSpline_BP_C::IrregularityLevel' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, IrregularityLevel_SubStems) == 0x0002DC, "Member 'AStemSpline_BP_C::IrregularityLevel_SubStems' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, pointHeightAboveSurface) == 0x0002E0, "Member 'AStemSpline_BP_C::pointHeightAboveSurface' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, pointHeightOnEdge) == 0x0002E4, "Member 'AStemSpline_BP_C::pointHeightOnEdge' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, addCornerPoints) == 0x0002E8, "Member 'AStemSpline_BP_C::addCornerPoints' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, optimizeEdges) == 0x0002E9, "Member 'AStemSpline_BP_C::optimizeEdges' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, traceSegmentLength) == 0x0002EC, "Member 'AStemSpline_BP_C::traceSegmentLength' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, downTraceLength) == 0x0002F0, "Member 'AStemSpline_BP_C::downTraceLength' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, AmountOfSegments) == 0x0002F4, "Member 'AStemSpline_BP_C::AmountOfSegments' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, amountOfSegmentsDone) == 0x0002F8, "Member 'AStemSpline_BP_C::amountOfSegmentsDone' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, edgeDetectionPrecision) == 0x0002FC, "Member 'AStemSpline_BP_C::edgeDetectionPrecision' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, splineMeshAmountFactor) == 0x000300, "Member 'AStemSpline_BP_C::splineMeshAmountFactor' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, matchDirection_SurfaceNormal) == 0x000304, "Member 'AStemSpline_BP_C::matchDirection_SurfaceNormal' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, Points) == 0x000308, "Member 'AStemSpline_BP_C::Points' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, subStemChance) == 0x000318, "Member 'AStemSpline_BP_C::subStemChance' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, showSplinePoints) == 0x00031C, "Member 'AStemSpline_BP_C::showSplinePoints' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, currentSubstemDirection) == 0x000320, "Member 'AStemSpline_BP_C::currentSubstemDirection' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, currentAddingSubstemPoints) == 0x000330, "Member 'AStemSpline_BP_C::currentAddingSubstemPoints' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, currentAddingSubstemAmountOfSegments) == 0x000340, "Member 'AStemSpline_BP_C::currentAddingSubstemAmountOfSegments' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, subStemStarters) == 0x000348, "Member 'AStemSpline_BP_C::subStemStarters' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, currentAddingSubLevel) == 0x000358, "Member 'AStemSpline_BP_C::currentAddingSubLevel' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, maxSubStemLevels) == 0x00035C, "Member 'AStemSpline_BP_C::maxSubStemLevels' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, subStemSplines) == 0x000360, "Member 'AStemSpline_BP_C::subStemSplines' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, subStems_minGrowAlongLength) == 0x000370, "Member 'AStemSpline_BP_C::subStems_minGrowAlongLength' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, subStems_maxGrowAlongLength) == 0x000374, "Member 'AStemSpline_BP_C::subStems_maxGrowAlongLength' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, subStemAngle) == 0x000378, "Member 'AStemSpline_BP_C::subStemAngle' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, subStemAngleAdditionalRandom) == 0x00037C, "Member 'AStemSpline_BP_C::subStemAngleAdditionalRandom' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, maxSubstemAmount) == 0x000380, "Member 'AStemSpline_BP_C::maxSubstemAmount' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, currentSubstemAmount) == 0x000384, "Member 'AStemSpline_BP_C::currentSubstemAmount' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, perSubLevelLengthMultiplier) == 0x000388, "Member 'AStemSpline_BP_C::perSubLevelLengthMultiplier' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, mainMeshScale) == 0x00038C, "Member 'AStemSpline_BP_C::mainMeshScale' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, splineMesh_Middle) == 0x000398, "Member 'AStemSpline_BP_C::splineMesh_Middle' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, splineMesh_Start) == 0x0003A0, "Member 'AStemSpline_BP_C::splineMesh_Start' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, splineMesh_End) == 0x0003A8, "Member 'AStemSpline_BP_C::splineMesh_End' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, optimizeToLowerPoly) == 0x0003B0, "Member 'AStemSpline_BP_C::optimizeToLowerPoly' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, splineMesh_LowPoly) == 0x0003B8, "Member 'AStemSpline_BP_C::splineMesh_LowPoly' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, optimizeMesh_DirectionMargin) == 0x0003C0, "Member 'AStemSpline_BP_C::optimizeMesh_DirectionMargin' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, optimizeMesh_TangentMargin) == 0x0003C4, "Member 'AStemSpline_BP_C::optimizeMesh_TangentMargin' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, mainSpline) == 0x0003C8, "Member 'AStemSpline_BP_C::mainSpline' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, activeSplineMeshes) == 0x0003D0, "Member 'AStemSpline_BP_C::activeSplineMeshes' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, occupiedLengths) == 0x0003E0, "Member 'AStemSpline_BP_C::occupiedLengths' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, startPointSeekDirection) == 0x0003F0, "Member 'AStemSpline_BP_C::startPointSeekDirection' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, splineEndScale) == 0x0003FC, "Member 'AStemSpline_BP_C::splineEndScale' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, MainStemCurve) == 0x000400, "Member 'AStemSpline_BP_C::MainStemCurve' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, MainStemCurve_Bending) == 0x000404, "Member 'AStemSpline_BP_C::MainStemCurve_Bending' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, MainStemCurve_Incremental) == 0x000405, "Member 'AStemSpline_BP_C::MainStemCurve_Incremental' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, SubStemCurve) == 0x000408, "Member 'AStemSpline_BP_C::SubStemCurve' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, SubStemCurve_Bending) == 0x00040C, "Member 'AStemSpline_BP_C::SubStemCurve_Bending' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, lastTraceDirection) == 0x000410, "Member 'AStemSpline_BP_C::lastTraceDirection' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, dropOffFromBottomEdges) == 0x00041C, "Member 'AStemSpline_BP_C::dropOffFromBottomEdges' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, dropOffFromBottomEdges_maxDrop) == 0x000420, "Member 'AStemSpline_BP_C::dropOffFromBottomEdges_maxDrop' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, currentDropOffs) == 0x000424, "Member 'AStemSpline_BP_C::currentDropOffs' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, doingDropOffNow) == 0x000428, "Member 'AStemSpline_BP_C::doingDropOffNow' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, dropOffTolerance) == 0x00042C, "Member 'AStemSpline_BP_C::dropOffTolerance' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, dropOff_EdgeAdjust) == 0x000430, "Member 'AStemSpline_BP_C::dropOff_EdgeAdjust' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, dropOffIfDownDirection) == 0x000434, "Member 'AStemSpline_BP_C::dropOffIfDownDirection' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, dropOffIfDownDirection_reqLength) == 0x000438, "Member 'AStemSpline_BP_C::dropOffIfDownDirection_reqLength' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, dropOffPoint) == 0x00043C, "Member 'AStemSpline_BP_C::dropOffPoint' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, dropOffDownDirection_EdgeAdjust) == 0x000448, "Member 'AStemSpline_BP_C::dropOffDownDirection_EdgeAdjust' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, makeBridges) == 0x00044C, "Member 'AStemSpline_BP_C::makeBridges' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, makeBridgesWithSubStems) == 0x00044D, "Member 'AStemSpline_BP_C::makeBridgesWithSubStems' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, BridgeChance) == 0x000450, "Member 'AStemSpline_BP_C::BridgeChance' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, BridgeGravity) == 0x000454, "Member 'AStemSpline_BP_C::BridgeGravity' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, BridgeGravity_RandomAdd) == 0x000458, "Member 'AStemSpline_BP_C::BridgeGravity_RandomAdd' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, BridgeCurve) == 0x000460, "Member 'AStemSpline_BP_C::BridgeCurve' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, badTwistWorkaround) == 0x000468, "Member 'AStemSpline_BP_C::badTwistWorkaround' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, meshStartTimes) == 0x000470, "Member 'AStemSpline_BP_C::meshStartTimes' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, meshEndTimes) == 0x000480, "Member 'AStemSpline_BP_C::meshEndTimes' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, edgePoints_Locations) == 0x000490, "Member 'AStemSpline_BP_C::edgePoints_Locations' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, splineMeshRoll) == 0x0004A0, "Member 'AStemSpline_BP_C::splineMeshRoll' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, fixTangentUV_Stretching) == 0x0004A4, "Member 'AStemSpline_BP_C::fixTangentUV_Stretching' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, edgePoints_SplineTime) == 0x0004A8, "Member 'AStemSpline_BP_C::edgePoints_SplineTime' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, edgePointsTimes) == 0x0004B8, "Member 'AStemSpline_BP_C::edgePointsTimes' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, SeekDistance) == 0x0004C8, "Member 'AStemSpline_BP_C::SeekDistance' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, SeekStartOffset) == 0x0004CC, "Member 'AStemSpline_BP_C::SeekStartOffset' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, PrioritizeHigherObjects) == 0x0004D0, "Member 'AStemSpline_BP_C::PrioritizeHigherObjects' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, showSeekTraces) == 0x0004D1, "Member 'AStemSpline_BP_C::showSeekTraces' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, maxTraceChecks) == 0x0004D4, "Member 'AStemSpline_BP_C::maxTraceChecks' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, useFixedSeekDirection) == 0x0004D8, "Member 'AStemSpline_BP_C::useFixedSeekDirection' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, FixedSeekDirection) == 0x0004DC, "Member 'AStemSpline_BP_C::FixedSeekDirection' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, makeBridgesFromCeilings) == 0x0004E8, "Member 'AStemSpline_BP_C::makeBridgesFromCeilings' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, strongTangentsReduction) == 0x0004EC, "Member 'AStemSpline_BP_C::strongTangentsReduction' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, _X__asUpVector) == 0x0004F0, "Member 'AStemSpline_BP_C::_X__asUpVector' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, meshesToSpawnAlong) == 0x0004F8, "Member 'AStemSpline_BP_C::meshesToSpawnAlong' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, clampedEdges) == 0x000508, "Member 'AStemSpline_BP_C::clampedEdges' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, CreateSplineMeshes) == 0x000509, "Member 'AStemSpline_BP_C::CreateSplineMeshes' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, onlyFromEdges) == 0x00050A, "Member 'AStemSpline_BP_C::onlyFromEdges' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, requiredEdgeSharpness) == 0x00050C, "Member 'AStemSpline_BP_C::requiredEdgeSharpness' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, maxBridgeAmount) == 0x000510, "Member 'AStemSpline_BP_C::maxBridgeAmount' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, currentBridgeAmount) == 0x000514, "Member 'AStemSpline_BP_C::currentBridgeAmount' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, EnableCollision) == 0x000518, "Member 'AStemSpline_BP_C::EnableCollision' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, SubStemCurve_Incremental) == 0x000519, "Member 'AStemSpline_BP_C::SubStemCurve_Incremental' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, hideDirectionArrows) == 0x00051A, "Member 'AStemSpline_BP_C::hideDirectionArrows' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, CLICK) == 0x00051B, "Member 'AStemSpline_BP_C::CLICK' has a wrong offset!");
static_assert(offsetof(AStemSpline_BP_C, SkelMeshesToSpawnAlong) == 0x000520, "Member 'AStemSpline_BP_C::SkelMeshesToSpawnAlong' has a wrong offset!");

}

