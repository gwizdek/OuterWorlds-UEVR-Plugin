#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SimpleContainer_BP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "MeshMaterialInstance_structs.hpp"
#include "TimelineMeshTransform_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ContainerBase_BP_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass SimpleContainer_BP.SimpleContainer_BP_C
// 0x00B0 (0x0558 - 0x04A8)
class ASimpleContainer_BP_C : public AContainerBase_BP_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_SimpleContainer_BP_C;               // 0x04A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   Lid;                                               // 0x04B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Frame;                                             // 0x04B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         AnimateLid_Main_A53E07874E93879531C5D58FD96B44CC;  // 0x04C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            AnimateLid__Direction_A53E07874E93879531C5D58FD96B44CC; // 0x04C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C5[0x3];                                      // 0x04C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     AnimateLid;                                        // 0x04C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimelineMeshTransform                 LidMeshTransform;                                  // 0x04D0(0x0038)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimelineTime;                                      // 0x0508(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotator;                                           // 0x050C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                Translation;                                       // 0x0518(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_524[0x4];                                      // 0x0524(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMeshMaterialInstance                  LightMaterialInstance;                             // 0x0528(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           LightEmissiveColor;                                // 0x0540(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      Lid_Material_Override;                             // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_SimpleContainer_BP(int32 EntryPoint);
	void OnPlayerOpenedContainer_Event_0();
	void BndEvt__InventoryComponent_K2Node_ComponentBoundEvent_1_ItemStackDelegate__DelegateSignature(const struct FItemStack& Item);
	void BndEvt__InventoryComponent_K2Node_ComponentBoundEvent_0_ItemStackDelegate__DelegateSignature(const struct FItemStack& Item);
	void AnimateLid__UpdateFunc();
	void AnimateLid__FinishedFunc();
	void GetLightingConfig(class UStaticMeshComponent** Mesh, class FName* MaterialSlot);
	void ApplyLight();
	void OnStateChanged();
	void ReceiveBeginPlay();
	void OnAnimateClose(bool IgnoreSound_0, bool InstantAnimation);
	void OnAnimateOpen(bool InstantAnimation);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SimpleContainer_BP_C">();
	}
	static class ASimpleContainer_BP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASimpleContainer_BP_C>();
	}
};
static_assert(alignof(ASimpleContainer_BP_C) == 0x000008, "Wrong alignment on ASimpleContainer_BP_C");
static_assert(sizeof(ASimpleContainer_BP_C) == 0x000558, "Wrong size on ASimpleContainer_BP_C");
static_assert(offsetof(ASimpleContainer_BP_C, UberGraphFrame_SimpleContainer_BP_C) == 0x0004A8, "Member 'ASimpleContainer_BP_C::UberGraphFrame_SimpleContainer_BP_C' has a wrong offset!");
static_assert(offsetof(ASimpleContainer_BP_C, Lid) == 0x0004B0, "Member 'ASimpleContainer_BP_C::Lid' has a wrong offset!");
static_assert(offsetof(ASimpleContainer_BP_C, Frame) == 0x0004B8, "Member 'ASimpleContainer_BP_C::Frame' has a wrong offset!");
static_assert(offsetof(ASimpleContainer_BP_C, AnimateLid_Main_A53E07874E93879531C5D58FD96B44CC) == 0x0004C0, "Member 'ASimpleContainer_BP_C::AnimateLid_Main_A53E07874E93879531C5D58FD96B44CC' has a wrong offset!");
static_assert(offsetof(ASimpleContainer_BP_C, AnimateLid__Direction_A53E07874E93879531C5D58FD96B44CC) == 0x0004C4, "Member 'ASimpleContainer_BP_C::AnimateLid__Direction_A53E07874E93879531C5D58FD96B44CC' has a wrong offset!");
static_assert(offsetof(ASimpleContainer_BP_C, AnimateLid) == 0x0004C8, "Member 'ASimpleContainer_BP_C::AnimateLid' has a wrong offset!");
static_assert(offsetof(ASimpleContainer_BP_C, LidMeshTransform) == 0x0004D0, "Member 'ASimpleContainer_BP_C::LidMeshTransform' has a wrong offset!");
static_assert(offsetof(ASimpleContainer_BP_C, TimelineTime) == 0x000508, "Member 'ASimpleContainer_BP_C::TimelineTime' has a wrong offset!");
static_assert(offsetof(ASimpleContainer_BP_C, Rotator) == 0x00050C, "Member 'ASimpleContainer_BP_C::Rotator' has a wrong offset!");
static_assert(offsetof(ASimpleContainer_BP_C, Translation) == 0x000518, "Member 'ASimpleContainer_BP_C::Translation' has a wrong offset!");
static_assert(offsetof(ASimpleContainer_BP_C, LightMaterialInstance) == 0x000528, "Member 'ASimpleContainer_BP_C::LightMaterialInstance' has a wrong offset!");
static_assert(offsetof(ASimpleContainer_BP_C, LightEmissiveColor) == 0x000540, "Member 'ASimpleContainer_BP_C::LightEmissiveColor' has a wrong offset!");
static_assert(offsetof(ASimpleContainer_BP_C, Lid_Material_Override) == 0x000550, "Member 'ASimpleContainer_BP_C::Lid_Material_Override' has a wrong offset!");

}

