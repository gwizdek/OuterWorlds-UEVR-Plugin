#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DynamicTOD

#include "Basic.hpp"

#include "Indiana_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DynamicTOD.BP_DynamicTOD_C
// 0x26B8 (0x35A0 - 0x0EE8)
class ABP_DynamicTOD_C : public ADynamicTOD
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0EE8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPostProcessComponent*                  PostProcessGlobal;                                 // 0x0EF0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_lightning_Strike;                               // 0x0EF8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   BP_CurveProfileTo_RT;                              // 0x0F00(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_DustDevil;                                      // 0x0F08(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      PS_Weather;                                        // 0x0F10(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  PostProcessWeatherStorm;                           // 0x0F18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UExponentialHeightFogComponent*         NextGenFog;                                        // 0x0F20(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               PS_Rain_Player;                                    // 0x0F28(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UVolumetricCloudComponent*              VolumetricCloud;                                   // 0x0F30(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  PostProcessSunset;                                 // 0x0F38(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkyAtmosphereComponent*                SkyAtmosphere;                                     // 0x0F40(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  PostProcessSunrise;                                // 0x0F48(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StarFieldHemisphereSection3;                       // 0x0F50(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StarFieldHemisphereSection2;                       // 0x0F58(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StarFieldHemisphereSection1;                       // 0x0F60(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  PostProcessNight;                                  // 0x0F68(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  PostProcessDay;                                    // 0x0F70(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SunFlare;                                          // 0x0F78(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SunSprite;                                         // 0x0F80(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  PPV_LensEffects;                                   // 0x0F88(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  PPV_Grading;                                       // 0x0F90(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               PS_Sundog;                                         // 0x0F98(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               PS_Weather_Test;                                   // 0x0FA0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StarField_Mesh;                                    // 0x0FA8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   MoonSprite;                                        // 0x0FB0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             MoonLight;                                         // 0x0FB8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UExponentialHeightFogComponent*         ExponentialHeightFog;                              // 0x0FC0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkyLightComponent*                     SkyLight;                                          // 0x0FC8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             SunLight;                                          // 0x0FD0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         LocalizedSandSTormDuration_CloudForming_FD313B3C46CD087B330837B51867D59B; // 0x0FD8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            LocalizedSandSTormDuration__Direction_FD313B3C46CD087B330837B51867D59B; // 0x0FDC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FDD[0x3];                                      // 0x0FDD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     LocalizedSandSTormDuration;                        // 0x0FE0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SandStormLocalizedEndTimeline_CloudForming_48EC10844B3946BED1AF91943BCFCE5F; // 0x0FE8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            SandStormLocalizedEndTimeline__Direction_48EC10844B3946BED1AF91943BCFCE5F; // 0x0FEC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FED[0x3];                                      // 0x0FED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     SandStormLocalizedEndTimeline;                     // 0x0FF0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SandStormLocalizedStartTimeline_CloudForming_FC0302A54393F4E652B93DA70E6D86BD; // 0x0FF8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            SandStormLocalizedStartTimeline__Direction_FC0302A54393F4E652B93DA70E6D86BD; // 0x0FFC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FFD[0x3];                                      // 0x0FFD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     SandStormLocalizedStartTimeline;                   // 0x1000(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DustDevilStart_CloudForming_4936C8E444CA8F75521A06A340DEE1D6; // 0x1008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            DustDevilStart__Direction_4936C8E444CA8F75521A06A340DEE1D6; // 0x100C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_100D[0x3];                                     // 0x100D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     DustDevilStart;                                    // 0x1010(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Sandstorm_Duration_CloudForming_98814F9B46670C5DBF5E65AF5B782971; // 0x1018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Sandstorm_Duration__Direction_98814F9B46670C5DBF5E65AF5B782971; // 0x101C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_101D[0x3];                                     // 0x101D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Sandstorm_Duration;                                // 0x1020(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SandStorm_Ending_CloudForming_993E6221403E7EA5E41239BB84985DA2; // 0x1028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            SandStorm_Ending__Direction_993E6221403E7EA5E41239BB84985DA2; // 0x102C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_102D[0x3];                                     // 0x102D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     SandStorm_Ending;                                  // 0x1030(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Sandstorm_Start_CloudForming_50FB6BE241A032992929E39CD2EFA446; // 0x1038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Sandstorm_Start__Direction_50FB6BE241A032992929E39CD2EFA446; // 0x103C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_103D[0x3];                                     // 0x103D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Sandstorm_Start;                                   // 0x1040(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DryingTImeline_Drying_88849F99452F247D2C51FCBCD06F9C8E; // 0x1048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            DryingTImeline__Direction_88849F99452F247D2C51FCBCD06F9C8E; // 0x104C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_104D[0x3];                                     // 0x104D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     DryingTImeline;                                    // 0x1050(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Clouds_Forming_CloudForming_C1BC676946AD6660E80AC4916ADB2A79; // 0x1058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Clouds_Forming__Direction_C1BC676946AD6660E80AC4916ADB2A79; // 0x105C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_105D[0x3];                                     // 0x105D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Clouds_Forming;                                    // 0x1060(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_1_CloudForming_12E1DFAF483288166190A1A2D5A908D0; // 0x1068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_1__Direction_12E1DFAF483288166190A1A2D5A908D0; // 0x106C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_106D[0x3];                                     // 0x106D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_1;                                        // 0x1070(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RainEnd_RainEnd_1385B0EA432B7975987A9D9C9DA3BF03;  // 0x1078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            RainEnd__Direction_1385B0EA432B7975987A9D9C9DA3BF03; // 0x107C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_107D[0x3];                                     // 0x107D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     RainEnd;                                           // 0x1080(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RainStart_Rain_743FC35B46D68C348439008F88EAA504;   // 0x1088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            RainStart__Direction_743FC35B46D68C348439008F88EAA504; // 0x108C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_108D[0x3];                                     // 0x108D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     RainStart;                                         // 0x1090(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseDebugTime;                                      // 0x1098(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1099[0x3];                                     // 0x1099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DebugTime;                                         // 0x109C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SunRiseAngle;                                      // 0x10A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoonScale;                                         // 0x10A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoonRiseAngle;                                     // 0x10A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoonOrbitalTilt;                                   // 0x10AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SunMoonSwitchAM;                                   // 0x10B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SunMoonSwitchPM;                                   // 0x10B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SunMoonSwitchFadeRange;                            // 0x10B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SunFade;                                           // 0x10BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoonFade;                                          // 0x10C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoonOcclusionAngle;                                // 0x10C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ATriggerVolume*>                 Container_Volumes;                                 // 0x10C8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<class APatrolNode*>                    Detached_Placement;                                // 0x10D8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	bool                                          Detachment;                                        // 0x10E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10E9[0x7];                                     // 0x10E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Weather_Actors;                                    // 0x10F0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	bool                                          BP_Attached_Debug;                                 // 0x1100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1101[0x3];                                     // 0x1101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Wind_Rotation;                                     // 0x1104(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         Wind_Intensity;                                    // 0x1110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Line_Trace_Events;                                 // 0x1114(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1115[0x3];                                     // 0x1115(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAtmosphericFogComponent*               AtmosphericFogComponent;                           // 0x1118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SunOrbitalPlaneOffsetAngle;                        // 0x1120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SunOrbitalTilt;                                    // 0x1124(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoonOrbitalPlaneOffsetAngle;                       // 0x1128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableLogging;                                     // 0x112C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          AutoUpdateDebugTime;                               // 0x112D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_112E[0x2];                                     // 0x112E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoonDistance;                                      // 0x1130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Sun_BloomScale;                                    // 0x1134(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Skylight_Contribution;                             // 0x1138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Moon_Bloom_Scale;                                  // 0x113C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Moon_Atmosphere_Strength;                          // 0x1140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Sun_Atmosphere_Strength;                           // 0x1144(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AStaticMeshActor*>               Static_Meshes;                                     // 0x1148(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<class AStaticMeshActor*>               Static_Meshes_Masked;                              // 0x1158(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	class FName                                   Mat_Param_Name;                                    // 0x1168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           Mat_Slot_Names;                                    // 0x1170(0x0010)(Edit, BlueprintVisible)
	class UCurveFloat*                            Emissive_Strength;                                 // 0x1180(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInstanceDynamic*>       Emissive_MIDs_Mask;                                // 0x1188(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UMaterialInstanceDynamic*>       Emissive_MIDs;                                     // 0x1198(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         Wind_Intensity_Start;                              // 0x11A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Wind_Intensity_Ramp_Up;                            // 0x11AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Random_Weather_Start;                              // 0x11AD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11AE[0x2];                                     // 0x11AE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WeatherCheckDelayDrying;                           // 0x11B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WeatherDuration;                                   // 0x11B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Weather_Start_Chance;                              // 0x11B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11BC[0x4];                                     // 0x11BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_VF_C*                               Vector_Field;                                      // 0x11C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Attached;                                          // 0x11C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11C9[0x7];                                     // 0x11C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               Spawned_Weather_PS;                                // 0x11D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Node_Check_Distance;                               // 0x11D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11DC[0x4];                                     // 0x11DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FParticleSysParam>              Exterior_Weather_Params;                           // 0x11E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Enable_Color_Grading;                              // 0x11F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11F1[0x3];                                     // 0x11F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Sun_Volumetric_Contribution;                       // 0x11F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Moon_Volumetric_Contribution;                      // 0x11F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoonDynamicShadowDistance;                         // 0x11FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Sun_Distance;                                      // 0x1200(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SunNoonScale;                                      // 0x1204(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SunSunsetScale;                                    // 0x1208(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_120C[0x4];                                     // 0x120C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               Exterior_Rain;                                     // 0x1210(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SunDynamicShadowDistance;                          // 0x1218(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_121C[0x4];                                     // 0x121C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     SunDiscMaterial;                                   // 0x1220(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          Weather_Start_Event;                               // 0x1228(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          Weather_End_Event;                                 // 0x1230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Weather_State_Group;                               // 0x1238(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NormalizedTimeValue;                               // 0x1240(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseStepShadow;                                     // 0x1244(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1245[0x3];                                     // 0x1245(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StepShadowTimeBetweenUpdates;                      // 0x1248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StepShadowUpdateLength;                            // 0x124C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CalendarRawHour;                                   // 0x1250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseBellCurveForBloomAndExposure;                   // 0x1254(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1255[0x3];                                     // 0x1255(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            SunElevation;                                      // 0x1258(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            MoonElevation;                                     // 0x1260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           RainAndLightMask;                                  // 0x1268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DebugWeather;                                      // 0x1270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Wetness;                                           // 0x1274(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           MaterialWetness;                                   // 0x1278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           RainParticles;                                     // 0x1280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           MaterialSpecularNearFar;                           // 0x1288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           WetMaterialSpecularNearFar;                        // 0x1290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AudioIsRaining;                                    // 0x1298(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          EnableWeather;                                     // 0x1299(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_129A[0x6];                                     // 0x129A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           WetSkyProbeMipBrightness;                          // 0x12A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           DrySkyProbeMipBrightness;                          // 0x12A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RandomWindGenerator;                               // 0x12B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RandomWeather;                                     // 0x12B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        Rain;                                              // 0x12B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CloudDebug;                                        // 0x12C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          LightSwitchCondition;                              // 0x12C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12C2[0x2];                                     // 0x12C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FogWeatherDens;                                    // 0x12C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FogWeatherDensity;                                 // 0x12C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WeatherTransition;                                 // 0x12CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRuntimeFloatCurve                     FogDensityCurve_Runtime;                           // 0x12D0(0x0088)(Edit, BlueprintVisible)
	struct FRuntimeFloatCurve                     FogHeightFalloffCurve_Runtime;                     // 0x1358(0x0088)(Edit, BlueprintVisible)
	struct FRuntimeFloatCurve                     FogExtinctionScaleCurve_Runtime;                   // 0x13E0(0x0088)(Edit, BlueprintVisible)
	struct FRuntimeFloatCurve                     TimeOfDayCurve_Runtime;                            // 0x1468(0x0088)(Edit, BlueprintVisible)
	struct FRuntimeFloatCurve                     SunriseSunsetCurve_Runtime;                        // 0x14F0(0x0088)(Edit, BlueprintVisible)
	struct FRuntimeFloatCurve                     WeatherStartCurve_Runtime;                         // 0x1578(0x0088)(Edit, BlueprintVisible)
	float                                         WetnessEnd;                                        // 0x1600(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WindIntensityEnd;                                  // 0x1604(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WeatherEnding;                                     // 0x1608(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CloudsForming;                                     // 0x160C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRuntimeCurveLinearColor               SkyLuminanceFactor;                                // 0x1610(0x0208)(Edit, BlueprintVisible)
	struct FRuntimeCurveLinearColor               SkylightColorCurveRuntime;                         // 0x1818(0x0208)(Edit, BlueprintVisible)
	struct FRuntimeCurveLinearColor               VolumetricFogInscatteringColorRuntime;             // 0x1A20(0x0208)(Edit, BlueprintVisible)
	bool                                          RainAtatch;                                        // 0x1C28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1C29[0x7];                                     // 0x1C29(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_CloudMask_Object_C*>         Cloud_Storm;                                       // 0x1C30(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class AActor*                                 OverlappedVolume;                                  // 0x1C40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRuntimeFloatCurve                     Sun_Light_Intensity_Storm;                         // 0x1C48(0x0088)(Edit, BlueprintVisible)
	struct FRuntimeFloatCurve                     Sun_Light_Intensity_Storm_Start;                   // 0x1CD0(0x0088)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FRuntimeFloatCurve                     Moon_Light_Intensity_Storm;                        // 0x1D58(0x0088)(Edit, BlueprintVisible)
	struct FRuntimeFloatCurve                     Moon_Light_Intensity_Storm_Start;                  // 0x1DE0(0x0088)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FRuntimeCurveLinearColor               Sun_Light_Color_Storm_Start;                       // 0x1E68(0x0208)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FRuntimeCurveLinearColor               Moon_Light_Color_Storm_start;                      // 0x2070(0x0208)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FRuntimeCurveLinearColor               Sun_Light_Color_Storm;                             // 0x2278(0x0208)(Edit, BlueprintVisible)
	struct FRuntimeCurveLinearColor               Moon_Light_Color_Storm;                            // 0x2480(0x0208)(Edit, BlueprintVisible)
	struct FRuntimeCurveLinearColor               SkyLuminanceFactor_Storm;                          // 0x2688(0x0208)(Edit, BlueprintVisible)
	struct FRuntimeCurveLinearColor               SkylightColorCurveRuntime_Storm;                   // 0x2890(0x0208)(Edit, BlueprintVisible)
	struct FRuntimeCurveLinearColor               VolumetricFogInscatteringColorRuntime_Storm;       // 0x2A98(0x0208)(Edit, BlueprintVisible)
	bool                                          UseStorm;                                          // 0x2CA0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2CA1[0x7];                                     // 0x2CA1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeCurveLinearColor               SkyLuminanceFactor_Storm_Start;                    // 0x2CA8(0x0208)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FRuntimeCurveLinearColor               SkylightColorCurveRuntime_Storm_Start;             // 0x2EB0(0x0208)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FRuntimeCurveLinearColor               VolumetricFogInscatteringColorRuntime_Storm_Start; // 0x30B8(0x0208)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         CloudPosition;                                     // 0x32C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Cloud_Direction_X;                                 // 0x32C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Cloud_Direction_Y;                                 // 0x32C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RainDirectionStrength;                             // 0x32CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Time;                                              // 0x32D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SandStormDensity;                                  // 0x32D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TotalDustDevils;                                   // 0x32D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DustDevilsInMap;                                   // 0x32DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DustDevilsLeft;                                    // 0x32E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32E4[0x4];                                     // 0x32E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ANiagaraActor*>                  Dust_Actors;                                       // 0x32E8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	bool                                          CloudFormingEnded;                                 // 0x32F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          WeatherStarted;                                    // 0x32F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          RainStarted_Ended;                                 // 0x32FA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          WeatherEnd_Ended;                                  // 0x32FB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         DustDevil_Distance;                                // 0x32FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DustDevilWaitMin;                                  // 0x3300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dust_Devil_Start_;                                 // 0x3304(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3305[0x3];                                     // 0x3305(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DustDevilWaitMax;                                  // 0x3308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DustDevilWait;                                     // 0x330C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DustDevilDuration;                                 // 0x3310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CloudsTime;                                        // 0x3314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SandstormLocalizedStart;                           // 0x3318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3319[0x3];                                     // 0x3319(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SandStormLocStartEndWait;                          // 0x331C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SandStormlocalizedMax;                             // 0x3320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SandStormlocalizedMin;                             // 0x3324(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SandStorLocalizedDurationWait;                     // 0x3328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SandStormStartDurationWait;                        // 0x332C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SandStormlocalizedStartWait;                       // 0x3330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SandStormLocalized_Distance;                       // 0x3334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ANiagaraActor*                          SandStormNearest;                                  // 0x3338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ANiagaraActor*                          LocalizedStormNearest;                             // 0x3340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Niagara_Component;                                 // 0x3348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ANiagaraActor*                          Array_Element;                                     // 0x3350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Lightning_Actors;                                  // 0x3358(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<class APostProcessVolume*>             SandStormPostProcess;                              // 0x3368(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	class APostProcessVolume*                     PP_Array_Element;                                  // 0x3378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StormFogStrenght;                                  // 0x3380(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SandStormFormingStarted;                           // 0x3384(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SandStormFormingEnd;                               // 0x3385(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SandStormDurationEnd;                              // 0x3386(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3387[0x1];                                     // 0x3387(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SandStormEndDurationWait;                          // 0x3388(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WeatherDrying;                                     // 0x338C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRuntimeCurveLinearColor               SunColor;                                          // 0x3390(0x0208)(Edit, BlueprintVisible)
	bool                                          SanstormFog;                                       // 0x3598(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3599[0x3];                                     // 0x3599(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Fog_Density;                                       // 0x359C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_DynamicTOD(int32 EntryPoint);
	void StartSaveWeather();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void SandStormLocalizedDuration(float Time_0);
	void Localized_Sandstorm_End(float Time_0);
	void Localized_Sandstorm_Start(float Time_0);
	void Dust_Devil_Duration();
	void Transition();
	void Dust_Devil_System();
	void SandStormEnding(float Time_0);
	void BreakLoopSandstorm();
	void SandStormDuration(float Time_0);
	void SandStormForming(float Time_0);
	void BreakLoop();
	void CloudForming(float TimeIn);
	void Drying(float TimeIn);
	void Weather_End(float TimeIn);
	void Rain_Start(float TimeIn);
	void DEPRECATED_Begin_Overlap_Container(class AActor* OverlappedActor, class AActor* OtherActor);
	void WeatherTimelineUpdateReverse(float CurrentWeatherAmount, float CurrentMaterialWetness);
	void WeatherTimelineUpdateForward(float CurrentWeatherAmount, float CurrentMaterialWetness);
	void DEPRECATED_End_Overlap_Container(class AActor* OverlappedActor, class AActor* OtherActor);
	void SetWetness(float Wetness_0);
	void SetStepShadow(float TimeBetweenUpdates, float UpdateLength);
	void ToggleStepShadow();
	void DEPRECATED_PP_BlendEvent();
	void Refresh_Settings();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void LocalizedSandSTormDuration__UpdateFunc();
	void LocalizedSandSTormDuration__FinishedFunc();
	void SandStormLocalizedEndTimeline__UpdateFunc();
	void SandStormLocalizedEndTimeline__FinishedFunc();
	void SandStormLocalizedStartTimeline__UpdateFunc();
	void SandStormLocalizedStartTimeline__FinishedFunc();
	void DustDevilStart__UpdateFunc();
	void DustDevilStart__FinishedFunc();
	void SandStorm_Ending__UpdateFunc();
	void SandStorm_Ending__FinishedFunc();
	void Sandstorm_Duration__UpdateFunc();
	void Sandstorm_Duration__FinishedFunc();
	void Sandstorm_Start__UpdateFunc();
	void Sandstorm_Start__FinishedFunc();
	void Clouds_Forming__UpdateFunc();
	void Clouds_Forming__FinishedFunc();
	void DryingTImeline__UpdateFunc();
	void DryingTImeline__FinishedFunc();
	void RainEnd__UpdateFunc();
	void RainEnd__FinishedFunc();
	void RainStart__UpdateFunc();
	void RainStart__FinishedFunc();
	void UserConstructionScript();
	void FOR_REFERENCE_ONLY_LightAngle(class UDirectionalLightComponent* DirectionalLight, float* Angle);
	void FOR_REFERENCE_ONLY_RotateCelestialBody(float NormalizedTime, float OrbitalPlaneOffsetAngle, float OrbitalTilt, float RiseAngle, class UCurveFloat* ElevationCurve, struct FRotator* FinalRotation, struct FVector* FinalVector);
	void VFX_Material_Update();
	void FOR_REFERENCE_ONLY_RotateCelestialObjectWithStep(float NormalizedTime, float OrbitalPlaneOffsetAngle, float OrbitalTilt, float RiseAngle, class UCurveFloat* ElevationCurve, struct FRotator* FinalRotation, struct FVector* FinalVector);
	void FOR_REFERENCE_ONLY_SetShadowMovementMode();
	class UParticleSystem* GetWeatherParticleSystem();
	class FName GetWeatherWwiseStateName();
	void SetWetnessDependentMPC(float Wetness_0);
	void WeatherStart(float WeatherCondition, float Wetness_0);
	void WeatherEnd(float WeatherCondition);
	void DynamicPostProcessesAndCloud();
	void Weather_Lighting_Start(float Timeline);
	void LightingCurvesDefinition();
	void Weather_Lighting_End(float Timeline);
	void RainSetup(float Timeline, float RandomWindGenerator_0);
	void RainStormTime();
	void SandStormStart(float RandomWindGenerator_0, float Timeline);
	void UseCustomLight();
	void SandStormTime();
	void SandStormEnd(float Timeline, float WindIntensityEnd_0);
	void DustDevil();
	void SandStormProperties();
	void SandStormObjectStored();
	void Set_Weather_Values(class UWeatherStateContainer* NewParam);
	void SaveWeatherValues_BP(class UWeatherStateContainer** Output);
	void Reset_Weather();
	void Lightning();
	void Sand_Storm_Postprocess_Actors();
	void SandStormFog(float Value);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DynamicTOD_C">();
	}
	static class ABP_DynamicTOD_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DynamicTOD_C>();
	}
};
static_assert(alignof(ABP_DynamicTOD_C) == 0x000008, "Wrong alignment on ABP_DynamicTOD_C");
static_assert(sizeof(ABP_DynamicTOD_C) == 0x0035A0, "Wrong size on ABP_DynamicTOD_C");
static_assert(offsetof(ABP_DynamicTOD_C, UberGraphFrame) == 0x000EE8, "Member 'ABP_DynamicTOD_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, PostProcessGlobal) == 0x000EF0, "Member 'ABP_DynamicTOD_C::PostProcessGlobal' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, NS_lightning_Strike) == 0x000EF8, "Member 'ABP_DynamicTOD_C::NS_lightning_Strike' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, BP_CurveProfileTo_RT) == 0x000F00, "Member 'ABP_DynamicTOD_C::BP_CurveProfileTo_RT' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, NS_DustDevil) == 0x000F08, "Member 'ABP_DynamicTOD_C::NS_DustDevil' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, PS_Weather) == 0x000F10, "Member 'ABP_DynamicTOD_C::PS_Weather' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, PostProcessWeatherStorm) == 0x000F18, "Member 'ABP_DynamicTOD_C::PostProcessWeatherStorm' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, NextGenFog) == 0x000F20, "Member 'ABP_DynamicTOD_C::NextGenFog' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, PS_Rain_Player) == 0x000F28, "Member 'ABP_DynamicTOD_C::PS_Rain_Player' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, VolumetricCloud) == 0x000F30, "Member 'ABP_DynamicTOD_C::VolumetricCloud' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, PostProcessSunset) == 0x000F38, "Member 'ABP_DynamicTOD_C::PostProcessSunset' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, SkyAtmosphere) == 0x000F40, "Member 'ABP_DynamicTOD_C::SkyAtmosphere' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, PostProcessSunrise) == 0x000F48, "Member 'ABP_DynamicTOD_C::PostProcessSunrise' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, StarFieldHemisphereSection3) == 0x000F50, "Member 'ABP_DynamicTOD_C::StarFieldHemisphereSection3' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, StarFieldHemisphereSection2) == 0x000F58, "Member 'ABP_DynamicTOD_C::StarFieldHemisphereSection2' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, StarFieldHemisphereSection1) == 0x000F60, "Member 'ABP_DynamicTOD_C::StarFieldHemisphereSection1' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, PostProcessNight) == 0x000F68, "Member 'ABP_DynamicTOD_C::PostProcessNight' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, PostProcessDay) == 0x000F70, "Member 'ABP_DynamicTOD_C::PostProcessDay' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, SunFlare) == 0x000F78, "Member 'ABP_DynamicTOD_C::SunFlare' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, SunSprite) == 0x000F80, "Member 'ABP_DynamicTOD_C::SunSprite' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, PPV_LensEffects) == 0x000F88, "Member 'ABP_DynamicTOD_C::PPV_LensEffects' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, PPV_Grading) == 0x000F90, "Member 'ABP_DynamicTOD_C::PPV_Grading' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, PS_Sundog) == 0x000F98, "Member 'ABP_DynamicTOD_C::PS_Sundog' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, PS_Weather_Test) == 0x000FA0, "Member 'ABP_DynamicTOD_C::PS_Weather_Test' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, StarField_Mesh) == 0x000FA8, "Member 'ABP_DynamicTOD_C::StarField_Mesh' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, MoonSprite) == 0x000FB0, "Member 'ABP_DynamicTOD_C::MoonSprite' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, MoonLight) == 0x000FB8, "Member 'ABP_DynamicTOD_C::MoonLight' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, ExponentialHeightFog) == 0x000FC0, "Member 'ABP_DynamicTOD_C::ExponentialHeightFog' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, SkyLight) == 0x000FC8, "Member 'ABP_DynamicTOD_C::SkyLight' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, SunLight) == 0x000FD0, "Member 'ABP_DynamicTOD_C::SunLight' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, LocalizedSandSTormDuration_CloudForming_FD313B3C46CD087B330837B51867D59B) == 0x000FD8, "Member 'ABP_DynamicTOD_C::LocalizedSandSTormDuration_CloudForming_FD313B3C46CD087B330837B51867D59B' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, LocalizedSandSTormDuration__Direction_FD313B3C46CD087B330837B51867D59B) == 0x000FDC, "Member 'ABP_DynamicTOD_C::LocalizedSandSTormDuration__Direction_FD313B3C46CD087B330837B51867D59B' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, LocalizedSandSTormDuration) == 0x000FE0, "Member 'ABP_DynamicTOD_C::LocalizedSandSTormDuration' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, SandStormLocalizedEndTimeline_CloudForming_48EC10844B3946BED1AF91943BCFCE5F) == 0x000FE8, "Member 'ABP_DynamicTOD_C::SandStormLocalizedEndTimeline_CloudForming_48EC10844B3946BED1AF91943BCFCE5F' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, SandStormLocalizedEndTimeline__Direction_48EC10844B3946BED1AF91943BCFCE5F) == 0x000FEC, "Member 'ABP_DynamicTOD_C::SandStormLocalizedEndTimeline__Direction_48EC10844B3946BED1AF91943BCFCE5F' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, SandStormLocalizedEndTimeline) == 0x000FF0, "Member 'ABP_DynamicTOD_C::SandStormLocalizedEndTimeline' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, SandStormLocalizedStartTimeline_CloudForming_FC0302A54393F4E652B93DA70E6D86BD) == 0x000FF8, "Member 'ABP_DynamicTOD_C::SandStormLocalizedStartTimeline_CloudForming_FC0302A54393F4E652B93DA70E6D86BD' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, SandStormLocalizedStartTimeline__Direction_FC0302A54393F4E652B93DA70E6D86BD) == 0x000FFC, "Member 'ABP_DynamicTOD_C::SandStormLocalizedStartTimeline__Direction_FC0302A54393F4E652B93DA70E6D86BD' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, SandStormLocalizedStartTimeline) == 0x001000, "Member 'ABP_DynamicTOD_C::SandStormLocalizedStartTimeline' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, DustDevilStart_CloudForming_4936C8E444CA8F75521A06A340DEE1D6) == 0x001008, "Member 'ABP_DynamicTOD_C::DustDevilStart_CloudForming_4936C8E444CA8F75521A06A340DEE1D6' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, DustDevilStart__Direction_4936C8E444CA8F75521A06A340DEE1D6) == 0x00100C, "Member 'ABP_DynamicTOD_C::DustDevilStart__Direction_4936C8E444CA8F75521A06A340DEE1D6' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, DustDevilStart) == 0x001010, "Member 'ABP_DynamicTOD_C::DustDevilStart' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Sandstorm_Duration_CloudForming_98814F9B46670C5DBF5E65AF5B782971) == 0x001018, "Member 'ABP_DynamicTOD_C::Sandstorm_Duration_CloudForming_98814F9B46670C5DBF5E65AF5B782971' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Sandstorm_Duration__Direction_98814F9B46670C5DBF5E65AF5B782971) == 0x00101C, "Member 'ABP_DynamicTOD_C::Sandstorm_Duration__Direction_98814F9B46670C5DBF5E65AF5B782971' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Sandstorm_Duration) == 0x001020, "Member 'ABP_DynamicTOD_C::Sandstorm_Duration' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, SandStorm_Ending_CloudForming_993E6221403E7EA5E41239BB84985DA2) == 0x001028, "Member 'ABP_DynamicTOD_C::SandStorm_Ending_CloudForming_993E6221403E7EA5E41239BB84985DA2' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, SandStorm_Ending__Direction_993E6221403E7EA5E41239BB84985DA2) == 0x00102C, "Member 'ABP_DynamicTOD_C::SandStorm_Ending__Direction_993E6221403E7EA5E41239BB84985DA2' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, SandStorm_Ending) == 0x001030, "Member 'ABP_DynamicTOD_C::SandStorm_Ending' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Sandstorm_Start_CloudForming_50FB6BE241A032992929E39CD2EFA446) == 0x001038, "Member 'ABP_DynamicTOD_C::Sandstorm_Start_CloudForming_50FB6BE241A032992929E39CD2EFA446' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Sandstorm_Start__Direction_50FB6BE241A032992929E39CD2EFA446) == 0x00103C, "Member 'ABP_DynamicTOD_C::Sandstorm_Start__Direction_50FB6BE241A032992929E39CD2EFA446' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Sandstorm_Start) == 0x001040, "Member 'ABP_DynamicTOD_C::Sandstorm_Start' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, DryingTImeline_Drying_88849F99452F247D2C51FCBCD06F9C8E) == 0x001048, "Member 'ABP_DynamicTOD_C::DryingTImeline_Drying_88849F99452F247D2C51FCBCD06F9C8E' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, DryingTImeline__Direction_88849F99452F247D2C51FCBCD06F9C8E) == 0x00104C, "Member 'ABP_DynamicTOD_C::DryingTImeline__Direction_88849F99452F247D2C51FCBCD06F9C8E' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, DryingTImeline) == 0x001050, "Member 'ABP_DynamicTOD_C::DryingTImeline' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Clouds_Forming_CloudForming_C1BC676946AD6660E80AC4916ADB2A79) == 0x001058, "Member 'ABP_DynamicTOD_C::Clouds_Forming_CloudForming_C1BC676946AD6660E80AC4916ADB2A79' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Clouds_Forming__Direction_C1BC676946AD6660E80AC4916ADB2A79) == 0x00105C, "Member 'ABP_DynamicTOD_C::Clouds_Forming__Direction_C1BC676946AD6660E80AC4916ADB2A79' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Clouds_Forming) == 0x001060, "Member 'ABP_DynamicTOD_C::Clouds_Forming' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Timeline_1_CloudForming_12E1DFAF483288166190A1A2D5A908D0) == 0x001068, "Member 'ABP_DynamicTOD_C::Timeline_1_CloudForming_12E1DFAF483288166190A1A2D5A908D0' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Timeline_1__Direction_12E1DFAF483288166190A1A2D5A908D0) == 0x00106C, "Member 'ABP_DynamicTOD_C::Timeline_1__Direction_12E1DFAF483288166190A1A2D5A908D0' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Timeline_1) == 0x001070, "Member 'ABP_DynamicTOD_C::Timeline_1' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, RainEnd_RainEnd_1385B0EA432B7975987A9D9C9DA3BF03) == 0x001078, "Member 'ABP_DynamicTOD_C::RainEnd_RainEnd_1385B0EA432B7975987A9D9C9DA3BF03' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, RainEnd__Direction_1385B0EA432B7975987A9D9C9DA3BF03) == 0x00107C, "Member 'ABP_DynamicTOD_C::RainEnd__Direction_1385B0EA432B7975987A9D9C9DA3BF03' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, RainEnd) == 0x001080, "Member 'ABP_DynamicTOD_C::RainEnd' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, RainStart_Rain_743FC35B46D68C348439008F88EAA504) == 0x001088, "Member 'ABP_DynamicTOD_C::RainStart_Rain_743FC35B46D68C348439008F88EAA504' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, RainStart__Direction_743FC35B46D68C348439008F88EAA504) == 0x00108C, "Member 'ABP_DynamicTOD_C::RainStart__Direction_743FC35B46D68C348439008F88EAA504' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, RainStart) == 0x001090, "Member 'ABP_DynamicTOD_C::RainStart' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, UseDebugTime) == 0x001098, "Member 'ABP_DynamicTOD_C::UseDebugTime' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, DebugTime) == 0x00109C, "Member 'ABP_DynamicTOD_C::DebugTime' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, SunRiseAngle) == 0x0010A0, "Member 'ABP_DynamicTOD_C::SunRiseAngle' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, MoonScale) == 0x0010A4, "Member 'ABP_DynamicTOD_C::MoonScale' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, MoonRiseAngle) == 0x0010A8, "Member 'ABP_DynamicTOD_C::MoonRiseAngle' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, MoonOrbitalTilt) == 0x0010AC, "Member 'ABP_DynamicTOD_C::MoonOrbitalTilt' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, SunMoonSwitchAM) == 0x0010B0, "Member 'ABP_DynamicTOD_C::SunMoonSwitchAM' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, SunMoonSwitchPM) == 0x0010B4, "Member 'ABP_DynamicTOD_C::SunMoonSwitchPM' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, SunMoonSwitchFadeRange) == 0x0010B8, "Member 'ABP_DynamicTOD_C::SunMoonSwitchFadeRange' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, SunFade) == 0x0010BC, "Member 'ABP_DynamicTOD_C::SunFade' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, MoonFade) == 0x0010C0, "Member 'ABP_DynamicTOD_C::MoonFade' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, MoonOcclusionAngle) == 0x0010C4, "Member 'ABP_DynamicTOD_C::MoonOcclusionAngle' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Container_Volumes) == 0x0010C8, "Member 'ABP_DynamicTOD_C::Container_Volumes' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Detached_Placement) == 0x0010D8, "Member 'ABP_DynamicTOD_C::Detached_Placement' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Detachment) == 0x0010E8, "Member 'ABP_DynamicTOD_C::Detachment' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Weather_Actors) == 0x0010F0, "Member 'ABP_DynamicTOD_C::Weather_Actors' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, BP_Attached_Debug) == 0x001100, "Member 'ABP_DynamicTOD_C::BP_Attached_Debug' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Wind_Rotation) == 0x001104, "Member 'ABP_DynamicTOD_C::Wind_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Wind_Intensity) == 0x001110, "Member 'ABP_DynamicTOD_C::Wind_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Line_Trace_Events) == 0x001114, "Member 'ABP_DynamicTOD_C::Line_Trace_Events' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, AtmosphericFogComponent) == 0x001118, "Member 'ABP_DynamicTOD_C::AtmosphericFogComponent' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, SunOrbitalPlaneOffsetAngle) == 0x001120, "Member 'ABP_DynamicTOD_C::SunOrbitalPlaneOffsetAngle' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, SunOrbitalTilt) == 0x001124, "Member 'ABP_DynamicTOD_C::SunOrbitalTilt' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, MoonOrbitalPlaneOffsetAngle) == 0x001128, "Member 'ABP_DynamicTOD_C::MoonOrbitalPlaneOffsetAngle' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, EnableLogging) == 0x00112C, "Member 'ABP_DynamicTOD_C::EnableLogging' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, AutoUpdateDebugTime) == 0x00112D, "Member 'ABP_DynamicTOD_C::AutoUpdateDebugTime' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, MoonDistance) == 0x001130, "Member 'ABP_DynamicTOD_C::MoonDistance' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Sun_BloomScale) == 0x001134, "Member 'ABP_DynamicTOD_C::Sun_BloomScale' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Skylight_Contribution) == 0x001138, "Member 'ABP_DynamicTOD_C::Skylight_Contribution' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Moon_Bloom_Scale) == 0x00113C, "Member 'ABP_DynamicTOD_C::Moon_Bloom_Scale' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Moon_Atmosphere_Strength) == 0x001140, "Member 'ABP_DynamicTOD_C::Moon_Atmosphere_Strength' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Sun_Atmosphere_Strength) == 0x001144, "Member 'ABP_DynamicTOD_C::Sun_Atmosphere_Strength' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Static_Meshes) == 0x001148, "Member 'ABP_DynamicTOD_C::Static_Meshes' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Static_Meshes_Masked) == 0x001158, "Member 'ABP_DynamicTOD_C::Static_Meshes_Masked' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Mat_Param_Name) == 0x001168, "Member 'ABP_DynamicTOD_C::Mat_Param_Name' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Mat_Slot_Names) == 0x001170, "Member 'ABP_DynamicTOD_C::Mat_Slot_Names' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Emissive_Strength) == 0x001180, "Member 'ABP_DynamicTOD_C::Emissive_Strength' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Emissive_MIDs_Mask) == 0x001188, "Member 'ABP_DynamicTOD_C::Emissive_MIDs_Mask' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Emissive_MIDs) == 0x001198, "Member 'ABP_DynamicTOD_C::Emissive_MIDs' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Wind_Intensity_Start) == 0x0011A8, "Member 'ABP_DynamicTOD_C::Wind_Intensity_Start' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Wind_Intensity_Ramp_Up) == 0x0011AC, "Member 'ABP_DynamicTOD_C::Wind_Intensity_Ramp_Up' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Random_Weather_Start) == 0x0011AD, "Member 'ABP_DynamicTOD_C::Random_Weather_Start' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, WeatherCheckDelayDrying) == 0x0011B0, "Member 'ABP_DynamicTOD_C::WeatherCheckDelayDrying' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, WeatherDuration) == 0x0011B4, "Member 'ABP_DynamicTOD_C::WeatherDuration' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Weather_Start_Chance) == 0x0011B8, "Member 'ABP_DynamicTOD_C::Weather_Start_Chance' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Vector_Field) == 0x0011C0, "Member 'ABP_DynamicTOD_C::Vector_Field' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Attached) == 0x0011C8, "Member 'ABP_DynamicTOD_C::Attached' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Spawned_Weather_PS) == 0x0011D0, "Member 'ABP_DynamicTOD_C::Spawned_Weather_PS' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Node_Check_Distance) == 0x0011D8, "Member 'ABP_DynamicTOD_C::Node_Check_Distance' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Exterior_Weather_Params) == 0x0011E0, "Member 'ABP_DynamicTOD_C::Exterior_Weather_Params' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Enable_Color_Grading) == 0x0011F0, "Member 'ABP_DynamicTOD_C::Enable_Color_Grading' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Sun_Volumetric_Contribution) == 0x0011F4, "Member 'ABP_DynamicTOD_C::Sun_Volumetric_Contribution' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Moon_Volumetric_Contribution) == 0x0011F8, "Member 'ABP_DynamicTOD_C::Moon_Volumetric_Contribution' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, MoonDynamicShadowDistance) == 0x0011FC, "Member 'ABP_DynamicTOD_C::MoonDynamicShadowDistance' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Sun_Distance) == 0x001200, "Member 'ABP_DynamicTOD_C::Sun_Distance' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, SunNoonScale) == 0x001204, "Member 'ABP_DynamicTOD_C::SunNoonScale' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, SunSunsetScale) == 0x001208, "Member 'ABP_DynamicTOD_C::SunSunsetScale' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Exterior_Rain) == 0x001210, "Member 'ABP_DynamicTOD_C::Exterior_Rain' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, SunDynamicShadowDistance) == 0x001218, "Member 'ABP_DynamicTOD_C::SunDynamicShadowDistance' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, SunDiscMaterial) == 0x001220, "Member 'ABP_DynamicTOD_C::SunDiscMaterial' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Weather_Start_Event) == 0x001228, "Member 'ABP_DynamicTOD_C::Weather_Start_Event' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Weather_End_Event) == 0x001230, "Member 'ABP_DynamicTOD_C::Weather_End_Event' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Weather_State_Group) == 0x001238, "Member 'ABP_DynamicTOD_C::Weather_State_Group' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, NormalizedTimeValue) == 0x001240, "Member 'ABP_DynamicTOD_C::NormalizedTimeValue' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, UseStepShadow) == 0x001244, "Member 'ABP_DynamicTOD_C::UseStepShadow' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, StepShadowTimeBetweenUpdates) == 0x001248, "Member 'ABP_DynamicTOD_C::StepShadowTimeBetweenUpdates' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, StepShadowUpdateLength) == 0x00124C, "Member 'ABP_DynamicTOD_C::StepShadowUpdateLength' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, CalendarRawHour) == 0x001250, "Member 'ABP_DynamicTOD_C::CalendarRawHour' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, UseBellCurveForBloomAndExposure) == 0x001254, "Member 'ABP_DynamicTOD_C::UseBellCurveForBloomAndExposure' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, SunElevation) == 0x001258, "Member 'ABP_DynamicTOD_C::SunElevation' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, MoonElevation) == 0x001260, "Member 'ABP_DynamicTOD_C::MoonElevation' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, RainAndLightMask) == 0x001268, "Member 'ABP_DynamicTOD_C::RainAndLightMask' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, DebugWeather) == 0x001270, "Member 'ABP_DynamicTOD_C::DebugWeather' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Wetness) == 0x001274, "Member 'ABP_DynamicTOD_C::Wetness' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, MaterialWetness) == 0x001278, "Member 'ABP_DynamicTOD_C::MaterialWetness' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, RainParticles) == 0x001280, "Member 'ABP_DynamicTOD_C::RainParticles' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, MaterialSpecularNearFar) == 0x001288, "Member 'ABP_DynamicTOD_C::MaterialSpecularNearFar' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, WetMaterialSpecularNearFar) == 0x001290, "Member 'ABP_DynamicTOD_C::WetMaterialSpecularNearFar' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, AudioIsRaining) == 0x001298, "Member 'ABP_DynamicTOD_C::AudioIsRaining' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, EnableWeather) == 0x001299, "Member 'ABP_DynamicTOD_C::EnableWeather' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, WetSkyProbeMipBrightness) == 0x0012A0, "Member 'ABP_DynamicTOD_C::WetSkyProbeMipBrightness' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, DrySkyProbeMipBrightness) == 0x0012A8, "Member 'ABP_DynamicTOD_C::DrySkyProbeMipBrightness' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, RandomWindGenerator) == 0x0012B0, "Member 'ABP_DynamicTOD_C::RandomWindGenerator' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, RandomWeather) == 0x0012B4, "Member 'ABP_DynamicTOD_C::RandomWeather' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Rain) == 0x0012B8, "Member 'ABP_DynamicTOD_C::Rain' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, CloudDebug) == 0x0012C0, "Member 'ABP_DynamicTOD_C::CloudDebug' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, LightSwitchCondition) == 0x0012C1, "Member 'ABP_DynamicTOD_C::LightSwitchCondition' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, FogWeatherDens) == 0x0012C4, "Member 'ABP_DynamicTOD_C::FogWeatherDens' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, FogWeatherDensity) == 0x0012C8, "Member 'ABP_DynamicTOD_C::FogWeatherDensity' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, WeatherTransition) == 0x0012CC, "Member 'ABP_DynamicTOD_C::WeatherTransition' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, FogDensityCurve_Runtime) == 0x0012D0, "Member 'ABP_DynamicTOD_C::FogDensityCurve_Runtime' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, FogHeightFalloffCurve_Runtime) == 0x001358, "Member 'ABP_DynamicTOD_C::FogHeightFalloffCurve_Runtime' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, FogExtinctionScaleCurve_Runtime) == 0x0013E0, "Member 'ABP_DynamicTOD_C::FogExtinctionScaleCurve_Runtime' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, TimeOfDayCurve_Runtime) == 0x001468, "Member 'ABP_DynamicTOD_C::TimeOfDayCurve_Runtime' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, SunriseSunsetCurve_Runtime) == 0x0014F0, "Member 'ABP_DynamicTOD_C::SunriseSunsetCurve_Runtime' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, WeatherStartCurve_Runtime) == 0x001578, "Member 'ABP_DynamicTOD_C::WeatherStartCurve_Runtime' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, WetnessEnd) == 0x001600, "Member 'ABP_DynamicTOD_C::WetnessEnd' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, WindIntensityEnd) == 0x001604, "Member 'ABP_DynamicTOD_C::WindIntensityEnd' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, WeatherEnding) == 0x001608, "Member 'ABP_DynamicTOD_C::WeatherEnding' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, CloudsForming) == 0x00160C, "Member 'ABP_DynamicTOD_C::CloudsForming' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, SkyLuminanceFactor) == 0x001610, "Member 'ABP_DynamicTOD_C::SkyLuminanceFactor' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, SkylightColorCurveRuntime) == 0x001818, "Member 'ABP_DynamicTOD_C::SkylightColorCurveRuntime' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, VolumetricFogInscatteringColorRuntime) == 0x001A20, "Member 'ABP_DynamicTOD_C::VolumetricFogInscatteringColorRuntime' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, RainAtatch) == 0x001C28, "Member 'ABP_DynamicTOD_C::RainAtatch' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Cloud_Storm) == 0x001C30, "Member 'ABP_DynamicTOD_C::Cloud_Storm' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, OverlappedVolume) == 0x001C40, "Member 'ABP_DynamicTOD_C::OverlappedVolume' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Sun_Light_Intensity_Storm) == 0x001C48, "Member 'ABP_DynamicTOD_C::Sun_Light_Intensity_Storm' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Sun_Light_Intensity_Storm_Start) == 0x001CD0, "Member 'ABP_DynamicTOD_C::Sun_Light_Intensity_Storm_Start' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Moon_Light_Intensity_Storm) == 0x001D58, "Member 'ABP_DynamicTOD_C::Moon_Light_Intensity_Storm' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Moon_Light_Intensity_Storm_Start) == 0x001DE0, "Member 'ABP_DynamicTOD_C::Moon_Light_Intensity_Storm_Start' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Sun_Light_Color_Storm_Start) == 0x001E68, "Member 'ABP_DynamicTOD_C::Sun_Light_Color_Storm_Start' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Moon_Light_Color_Storm_start) == 0x002070, "Member 'ABP_DynamicTOD_C::Moon_Light_Color_Storm_start' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Sun_Light_Color_Storm) == 0x002278, "Member 'ABP_DynamicTOD_C::Sun_Light_Color_Storm' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Moon_Light_Color_Storm) == 0x002480, "Member 'ABP_DynamicTOD_C::Moon_Light_Color_Storm' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, SkyLuminanceFactor_Storm) == 0x002688, "Member 'ABP_DynamicTOD_C::SkyLuminanceFactor_Storm' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, SkylightColorCurveRuntime_Storm) == 0x002890, "Member 'ABP_DynamicTOD_C::SkylightColorCurveRuntime_Storm' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, VolumetricFogInscatteringColorRuntime_Storm) == 0x002A98, "Member 'ABP_DynamicTOD_C::VolumetricFogInscatteringColorRuntime_Storm' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, UseStorm) == 0x002CA0, "Member 'ABP_DynamicTOD_C::UseStorm' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, SkyLuminanceFactor_Storm_Start) == 0x002CA8, "Member 'ABP_DynamicTOD_C::SkyLuminanceFactor_Storm_Start' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, SkylightColorCurveRuntime_Storm_Start) == 0x002EB0, "Member 'ABP_DynamicTOD_C::SkylightColorCurveRuntime_Storm_Start' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, VolumetricFogInscatteringColorRuntime_Storm_Start) == 0x0030B8, "Member 'ABP_DynamicTOD_C::VolumetricFogInscatteringColorRuntime_Storm_Start' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, CloudPosition) == 0x0032C0, "Member 'ABP_DynamicTOD_C::CloudPosition' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Cloud_Direction_X) == 0x0032C4, "Member 'ABP_DynamicTOD_C::Cloud_Direction_X' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Cloud_Direction_Y) == 0x0032C8, "Member 'ABP_DynamicTOD_C::Cloud_Direction_Y' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, RainDirectionStrength) == 0x0032CC, "Member 'ABP_DynamicTOD_C::RainDirectionStrength' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Time) == 0x0032D0, "Member 'ABP_DynamicTOD_C::Time' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, SandStormDensity) == 0x0032D4, "Member 'ABP_DynamicTOD_C::SandStormDensity' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, TotalDustDevils) == 0x0032D8, "Member 'ABP_DynamicTOD_C::TotalDustDevils' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, DustDevilsInMap) == 0x0032DC, "Member 'ABP_DynamicTOD_C::DustDevilsInMap' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, DustDevilsLeft) == 0x0032E0, "Member 'ABP_DynamicTOD_C::DustDevilsLeft' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Dust_Actors) == 0x0032E8, "Member 'ABP_DynamicTOD_C::Dust_Actors' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, CloudFormingEnded) == 0x0032F8, "Member 'ABP_DynamicTOD_C::CloudFormingEnded' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, WeatherStarted) == 0x0032F9, "Member 'ABP_DynamicTOD_C::WeatherStarted' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, RainStarted_Ended) == 0x0032FA, "Member 'ABP_DynamicTOD_C::RainStarted_Ended' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, WeatherEnd_Ended) == 0x0032FB, "Member 'ABP_DynamicTOD_C::WeatherEnd_Ended' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, DustDevil_Distance) == 0x0032FC, "Member 'ABP_DynamicTOD_C::DustDevil_Distance' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, DustDevilWaitMin) == 0x003300, "Member 'ABP_DynamicTOD_C::DustDevilWaitMin' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Dust_Devil_Start_) == 0x003304, "Member 'ABP_DynamicTOD_C::Dust_Devil_Start_' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, DustDevilWaitMax) == 0x003308, "Member 'ABP_DynamicTOD_C::DustDevilWaitMax' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, DustDevilWait) == 0x00330C, "Member 'ABP_DynamicTOD_C::DustDevilWait' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, DustDevilDuration) == 0x003310, "Member 'ABP_DynamicTOD_C::DustDevilDuration' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, CloudsTime) == 0x003314, "Member 'ABP_DynamicTOD_C::CloudsTime' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, SandstormLocalizedStart) == 0x003318, "Member 'ABP_DynamicTOD_C::SandstormLocalizedStart' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, SandStormLocStartEndWait) == 0x00331C, "Member 'ABP_DynamicTOD_C::SandStormLocStartEndWait' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, SandStormlocalizedMax) == 0x003320, "Member 'ABP_DynamicTOD_C::SandStormlocalizedMax' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, SandStormlocalizedMin) == 0x003324, "Member 'ABP_DynamicTOD_C::SandStormlocalizedMin' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, SandStorLocalizedDurationWait) == 0x003328, "Member 'ABP_DynamicTOD_C::SandStorLocalizedDurationWait' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, SandStormStartDurationWait) == 0x00332C, "Member 'ABP_DynamicTOD_C::SandStormStartDurationWait' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, SandStormlocalizedStartWait) == 0x003330, "Member 'ABP_DynamicTOD_C::SandStormlocalizedStartWait' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, SandStormLocalized_Distance) == 0x003334, "Member 'ABP_DynamicTOD_C::SandStormLocalized_Distance' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, SandStormNearest) == 0x003338, "Member 'ABP_DynamicTOD_C::SandStormNearest' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, LocalizedStormNearest) == 0x003340, "Member 'ABP_DynamicTOD_C::LocalizedStormNearest' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Niagara_Component) == 0x003348, "Member 'ABP_DynamicTOD_C::Niagara_Component' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Array_Element) == 0x003350, "Member 'ABP_DynamicTOD_C::Array_Element' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Lightning_Actors) == 0x003358, "Member 'ABP_DynamicTOD_C::Lightning_Actors' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, SandStormPostProcess) == 0x003368, "Member 'ABP_DynamicTOD_C::SandStormPostProcess' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, PP_Array_Element) == 0x003378, "Member 'ABP_DynamicTOD_C::PP_Array_Element' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, StormFogStrenght) == 0x003380, "Member 'ABP_DynamicTOD_C::StormFogStrenght' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, SandStormFormingStarted) == 0x003384, "Member 'ABP_DynamicTOD_C::SandStormFormingStarted' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, SandStormFormingEnd) == 0x003385, "Member 'ABP_DynamicTOD_C::SandStormFormingEnd' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, SandStormDurationEnd) == 0x003386, "Member 'ABP_DynamicTOD_C::SandStormDurationEnd' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, SandStormEndDurationWait) == 0x003388, "Member 'ABP_DynamicTOD_C::SandStormEndDurationWait' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, WeatherDrying) == 0x00338C, "Member 'ABP_DynamicTOD_C::WeatherDrying' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, SunColor) == 0x003390, "Member 'ABP_DynamicTOD_C::SunColor' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, SanstormFog) == 0x003598, "Member 'ABP_DynamicTOD_C::SanstormFog' has a wrong offset!");
static_assert(offsetof(ABP_DynamicTOD_C, Fog_Density) == 0x00359C, "Member 'ABP_DynamicTOD_C::Fog_Density' has a wrong offset!");

}

